Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CATCH
    CLASS
    COLON
    DEBUG
    DO
    DOT
    END
    FLOAT
    FOR
    GLOBAL
    IN
    LBB
    LIST
    PYTHON
    RBB
    REPEAT
    TRY

Grammar

Rule 0     S' -> program
Rule 1     program -> root
Rule 2     root -> root statement
Rule 3     root -> statement
Rule 4     statement -> if_statement
Rule 5     statement -> while_statement
Rule 6     statement -> variable_declaration SEMI
Rule 7     statement -> variable_value_change SEMI
Rule 8     statement -> function_declaration
Rule 9     statement -> PASS SEMI
Rule 10    statement -> use SEMI
Rule 11    statement -> empty
Rule 12    statement -> expression SEMI
Rule 13    expression -> calculate
Rule 14    expression -> string_calculate
Rule 15    expression -> compare_expression
Rule 16    expression -> function_call
Rule 17    use -> USE IDENTIFIER
Rule 18    variable_declaration -> VAR IDENTIFIER EQUAL expression
Rule 19    variable_value_change -> IDENTIFIER EQUAL expression
Rule 20    function_call -> IDENTIFIER LSB function_call_parameter RSB
Rule 21    function_call_parameter -> function_call_parameter COMMA calculate
Rule 22    function_call_parameter -> calculate
Rule 23    function_call_parameter -> empty
Rule 24    function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
Rule 25    function_parameter -> function_parameter COMMA IDENTIFIER
Rule 26    function_parameter -> IDENTIFIER
Rule 27    function_parameter -> empty
Rule 28    while_statement -> WHILE LSB expression RSB LMB root RMB
Rule 29    if_statement -> IF LSB expression RSB LMB root RMB
Rule 30    if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB
Rule 31    if_statement -> if_statement ELSE LMB root RMB
Rule 32    compare_expression -> compare_expression compare_operator calculate
Rule 33    compare_expression -> calculate
Rule 34    compare_operator -> LB
Rule 35    compare_operator -> RB
Rule 36    compare_operator -> LB EQUAL
Rule 37    compare_operator -> RB EQUAL
Rule 38    compare_operator -> EQUAL EQUAL
Rule 39    compare_operator -> NOTEQUAL EQUAL
Rule 40    string_calculate -> string_calculate stringoperator STRING
Rule 41    string_calculate -> STRING
Rule 42    stringoperator -> PLUS
Rule 43    calculate -> calculate PLUS calculate
Rule 44    calculate -> calculate MINUS calculate
Rule 45    calculate -> calculate MUL calculate
Rule 46    calculate -> calculate DIV calculate
Rule 47    calculate -> MINUS calculate
Rule 48    calculate -> LSB calculate RSB
Rule 49    calculate -> INT
Rule 50    calculate -> IDENTIFIER
Rule 51    empty -> <empty>

Terminals, with rules where they appear

CATCH                : 
CLASS                : 
COLON                : 
COMMA                : 21 25
DEBUG                : 
DIV                  : 46
DO                   : 
DOT                  : 
ELSE                 : 30 31
END                  : 
EQUAL                : 18 19 36 37 38 38 39
FLOAT                : 
FOR                  : 
FUNCTION             : 24
GLOBAL               : 
IDENTIFIER           : 17 18 19 20 24 25 26 50
IF                   : 29 30
IN                   : 
INT                  : 49
LB                   : 34 36
LBB                  : 
LIST                 : 
LMB                  : 24 28 29 30 31
LSB                  : 20 24 28 29 30 48
MINUS                : 44 47
MUL                  : 45
NOTEQUAL             : 39
PASS                 : 9
PLUS                 : 42 43
PYTHON               : 
RB                   : 35 37
RBB                  : 
REPEAT               : 
RMB                  : 24 28 29 30 31
RSB                  : 20 24 28 29 30 48
SEMI                 : 6 7 9 10 12
STRING               : 40 41
TRY                  : 
USE                  : 17
VAR                  : 18
WHILE                : 28
error                : 

Nonterminals, with rules where they appear

calculate            : 13 21 22 32 33 43 43 44 44 45 45 46 46 47 48
compare_expression   : 15 32
compare_operator     : 32
empty                : 11 23 27
expression           : 12 18 19 28 29 30
function_call        : 16
function_call_parameter : 20 21
function_declaration : 8
function_parameter   : 24 25
if_statement         : 4 30 31
program              : 0
root                 : 1 2 24 28 29 30 31
statement            : 2 3
string_calculate     : 14 40
stringoperator       : 40
use                  : 10
variable_declaration : 6
variable_value_change : 7
while_statement      : 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . root
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . use SEMI
    (11) statement -> . empty
    (12) statement -> . expression SEMI
    (29) if_statement -> . IF LSB expression RSB LMB root RMB
    (30) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (31) if_statement -> . if_statement ELSE LMB root RMB
    (28) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (18) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (19) variable_value_change -> . IDENTIFIER EQUAL expression
    (24) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (17) use -> . USE IDENTIFIER
    (51) empty -> .
    (13) expression -> . calculate
    (14) expression -> . string_calculate
    (15) expression -> . compare_expression
    (16) expression -> . function_call
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER
    (40) string_calculate -> . string_calculate stringoperator STRING
    (41) string_calculate -> . STRING
    (32) compare_expression -> . compare_expression compare_operator calculate
    (33) compare_expression -> . calculate
    (20) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PASS            shift and go to state 9
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    USE             shift and go to state 19
    $end            reduce using rule 51 (empty -> .)
    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    STRING          shift and go to state 26

  ! PASS            [ reduce using rule 51 (empty -> .) ]
  ! IF              [ reduce using rule 51 (empty -> .) ]
  ! WHILE           [ reduce using rule 51 (empty -> .) ]
  ! VAR             [ reduce using rule 51 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 51 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 51 (empty -> .) ]
  ! USE             [ reduce using rule 51 (empty -> .) ]
  ! MINUS           [ reduce using rule 51 (empty -> .) ]
  ! LSB             [ reduce using rule 51 (empty -> .) ]
  ! INT             [ reduce using rule 51 (empty -> .) ]
  ! STRING          [ reduce using rule 51 (empty -> .) ]

    program                        shift and go to state 1
    root                           shift and go to state 2
    statement                      shift and go to state 3
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    use                            shift and go to state 10
    empty                          shift and go to state 11
    expression                     shift and go to state 12
    calculate                      shift and go to state 20
    string_calculate               shift and go to state 21
    compare_expression             shift and go to state 22
    function_call                  shift and go to state 23

state 1

    (0) S' -> program .



state 2

    (1) program -> root .
    (2) root -> root . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . use SEMI
    (11) statement -> . empty
    (12) statement -> . expression SEMI
    (29) if_statement -> . IF LSB expression RSB LMB root RMB
    (30) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (31) if_statement -> . if_statement ELSE LMB root RMB
    (28) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (18) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (19) variable_value_change -> . IDENTIFIER EQUAL expression
    (24) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (17) use -> . USE IDENTIFIER
    (51) empty -> .
    (13) expression -> . calculate
    (14) expression -> . string_calculate
    (15) expression -> . compare_expression
    (16) expression -> . function_call
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER
    (40) string_calculate -> . string_calculate stringoperator STRING
    (41) string_calculate -> . STRING
    (32) compare_expression -> . compare_expression compare_operator calculate
    (33) compare_expression -> . calculate
    (20) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (program -> root .)
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    $end            reduce using rule 1 (program -> root .)
    PASS            shift and go to state 9
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    USE             shift and go to state 19
    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    STRING          shift and go to state 26

  ! PASS            [ reduce using rule 51 (empty -> .) ]
  ! IF              [ reduce using rule 51 (empty -> .) ]
  ! WHILE           [ reduce using rule 51 (empty -> .) ]
  ! VAR             [ reduce using rule 51 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 51 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 51 (empty -> .) ]
  ! USE             [ reduce using rule 51 (empty -> .) ]
  ! MINUS           [ reduce using rule 51 (empty -> .) ]
  ! LSB             [ reduce using rule 51 (empty -> .) ]
  ! INT             [ reduce using rule 51 (empty -> .) ]
  ! STRING          [ reduce using rule 51 (empty -> .) ]
  ! $end            [ reduce using rule 51 (empty -> .) ]

    statement                      shift and go to state 27
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    use                            shift and go to state 10
    empty                          shift and go to state 11
    expression                     shift and go to state 12
    calculate                      shift and go to state 20
    string_calculate               shift and go to state 21
    compare_expression             shift and go to state 22
    function_call                  shift and go to state 23

state 3

    (3) root -> statement .

    PASS            reduce using rule 3 (root -> statement .)
    IF              reduce using rule 3 (root -> statement .)
    WHILE           reduce using rule 3 (root -> statement .)
    VAR             reduce using rule 3 (root -> statement .)
    IDENTIFIER      reduce using rule 3 (root -> statement .)
    FUNCTION        reduce using rule 3 (root -> statement .)
    USE             reduce using rule 3 (root -> statement .)
    MINUS           reduce using rule 3 (root -> statement .)
    LSB             reduce using rule 3 (root -> statement .)
    INT             reduce using rule 3 (root -> statement .)
    STRING          reduce using rule 3 (root -> statement .)
    $end            reduce using rule 3 (root -> statement .)
    RMB             reduce using rule 3 (root -> statement .)


state 4

    (4) statement -> if_statement .
    (30) if_statement -> if_statement . ELSE IF LSB expression RSB LMB root RMB
    (31) if_statement -> if_statement . ELSE LMB root RMB

    PASS            reduce using rule 4 (statement -> if_statement .)
    IF              reduce using rule 4 (statement -> if_statement .)
    WHILE           reduce using rule 4 (statement -> if_statement .)
    VAR             reduce using rule 4 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 4 (statement -> if_statement .)
    FUNCTION        reduce using rule 4 (statement -> if_statement .)
    USE             reduce using rule 4 (statement -> if_statement .)
    MINUS           reduce using rule 4 (statement -> if_statement .)
    LSB             reduce using rule 4 (statement -> if_statement .)
    INT             reduce using rule 4 (statement -> if_statement .)
    STRING          reduce using rule 4 (statement -> if_statement .)
    $end            reduce using rule 4 (statement -> if_statement .)
    RMB             reduce using rule 4 (statement -> if_statement .)
    ELSE            shift and go to state 28


state 5

    (5) statement -> while_statement .

    PASS            reduce using rule 5 (statement -> while_statement .)
    IF              reduce using rule 5 (statement -> while_statement .)
    WHILE           reduce using rule 5 (statement -> while_statement .)
    VAR             reduce using rule 5 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 5 (statement -> while_statement .)
    FUNCTION        reduce using rule 5 (statement -> while_statement .)
    USE             reduce using rule 5 (statement -> while_statement .)
    MINUS           reduce using rule 5 (statement -> while_statement .)
    LSB             reduce using rule 5 (statement -> while_statement .)
    INT             reduce using rule 5 (statement -> while_statement .)
    STRING          reduce using rule 5 (statement -> while_statement .)
    $end            reduce using rule 5 (statement -> while_statement .)
    RMB             reduce using rule 5 (statement -> while_statement .)


state 6

    (6) statement -> variable_declaration . SEMI

    SEMI            shift and go to state 29


state 7

    (7) statement -> variable_value_change . SEMI

    SEMI            shift and go to state 30


state 8

    (8) statement -> function_declaration .

    PASS            reduce using rule 8 (statement -> function_declaration .)
    IF              reduce using rule 8 (statement -> function_declaration .)
    WHILE           reduce using rule 8 (statement -> function_declaration .)
    VAR             reduce using rule 8 (statement -> function_declaration .)
    IDENTIFIER      reduce using rule 8 (statement -> function_declaration .)
    FUNCTION        reduce using rule 8 (statement -> function_declaration .)
    USE             reduce using rule 8 (statement -> function_declaration .)
    MINUS           reduce using rule 8 (statement -> function_declaration .)
    LSB             reduce using rule 8 (statement -> function_declaration .)
    INT             reduce using rule 8 (statement -> function_declaration .)
    STRING          reduce using rule 8 (statement -> function_declaration .)
    $end            reduce using rule 8 (statement -> function_declaration .)
    RMB             reduce using rule 8 (statement -> function_declaration .)


state 9

    (9) statement -> PASS . SEMI

    SEMI            shift and go to state 31


state 10

    (10) statement -> use . SEMI

    SEMI            shift and go to state 32


state 11

    (11) statement -> empty .

    PASS            reduce using rule 11 (statement -> empty .)
    IF              reduce using rule 11 (statement -> empty .)
    WHILE           reduce using rule 11 (statement -> empty .)
    VAR             reduce using rule 11 (statement -> empty .)
    IDENTIFIER      reduce using rule 11 (statement -> empty .)
    FUNCTION        reduce using rule 11 (statement -> empty .)
    USE             reduce using rule 11 (statement -> empty .)
    MINUS           reduce using rule 11 (statement -> empty .)
    LSB             reduce using rule 11 (statement -> empty .)
    INT             reduce using rule 11 (statement -> empty .)
    STRING          reduce using rule 11 (statement -> empty .)
    $end            reduce using rule 11 (statement -> empty .)
    RMB             reduce using rule 11 (statement -> empty .)


state 12

    (12) statement -> expression . SEMI

    SEMI            shift and go to state 33


state 13

    (29) if_statement -> IF . LSB expression RSB LMB root RMB

    LSB             shift and go to state 34


state 14

    (48) calculate -> LSB . calculate RSB
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER

    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 36

    calculate                      shift and go to state 35

state 15

    (28) while_statement -> WHILE . LSB expression RSB LMB root RMB

    LSB             shift and go to state 37


state 16

    (18) variable_declaration -> VAR . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 38


state 17

    (19) variable_value_change -> IDENTIFIER . EQUAL expression
    (50) calculate -> IDENTIFIER .
    (20) function_call -> IDENTIFIER . LSB function_call_parameter RSB

  ! shift/reduce conflict for EQUAL resolved as shift
    EQUAL           shift and go to state 39
    PLUS            reduce using rule 50 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 50 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 50 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 50 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 50 (calculate -> IDENTIFIER .)
    LB              reduce using rule 50 (calculate -> IDENTIFIER .)
    RB              reduce using rule 50 (calculate -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 50 (calculate -> IDENTIFIER .)
    LSB             shift and go to state 40

  ! EQUAL           [ reduce using rule 50 (calculate -> IDENTIFIER .) ]


state 18

    (24) function_declaration -> FUNCTION . IDENTIFIER LSB function_parameter RSB LMB root RMB

    IDENTIFIER      shift and go to state 41


state 19

    (17) use -> USE . IDENTIFIER

    IDENTIFIER      shift and go to state 42


state 20

    (13) expression -> calculate .
    (43) calculate -> calculate . PLUS calculate
    (44) calculate -> calculate . MINUS calculate
    (45) calculate -> calculate . MUL calculate
    (46) calculate -> calculate . DIV calculate
    (33) compare_expression -> calculate .

  ! reduce/reduce conflict for SEMI resolved using rule 13 (expression -> calculate .)
  ! reduce/reduce conflict for RSB resolved using rule 13 (expression -> calculate .)
    SEMI            reduce using rule 13 (expression -> calculate .)
    RSB             reduce using rule 13 (expression -> calculate .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIV             shift and go to state 46
    LB              reduce using rule 33 (compare_expression -> calculate .)
    RB              reduce using rule 33 (compare_expression -> calculate .)
    EQUAL           reduce using rule 33 (compare_expression -> calculate .)
    NOTEQUAL        reduce using rule 33 (compare_expression -> calculate .)

  ! SEMI            [ reduce using rule 33 (compare_expression -> calculate .) ]
  ! RSB             [ reduce using rule 33 (compare_expression -> calculate .) ]


state 21

    (14) expression -> string_calculate .
    (40) string_calculate -> string_calculate . stringoperator STRING
    (42) stringoperator -> . PLUS

    SEMI            reduce using rule 14 (expression -> string_calculate .)
    RSB             reduce using rule 14 (expression -> string_calculate .)
    PLUS            shift and go to state 48

    stringoperator                 shift and go to state 47

state 22

    (15) expression -> compare_expression .
    (32) compare_expression -> compare_expression . compare_operator calculate
    (34) compare_operator -> . LB
    (35) compare_operator -> . RB
    (36) compare_operator -> . LB EQUAL
    (37) compare_operator -> . RB EQUAL
    (38) compare_operator -> . EQUAL EQUAL
    (39) compare_operator -> . NOTEQUAL EQUAL

    SEMI            reduce using rule 15 (expression -> compare_expression .)
    RSB             reduce using rule 15 (expression -> compare_expression .)
    LB              shift and go to state 50
    RB              shift and go to state 51
    EQUAL           shift and go to state 52
    NOTEQUAL        shift and go to state 53

    compare_operator               shift and go to state 49

state 23

    (16) expression -> function_call .

    SEMI            reduce using rule 16 (expression -> function_call .)
    RSB             reduce using rule 16 (expression -> function_call .)


state 24

    (47) calculate -> MINUS . calculate
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER

    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 36

    calculate                      shift and go to state 54

state 25

    (49) calculate -> INT .

    PLUS            reduce using rule 49 (calculate -> INT .)
    MINUS           reduce using rule 49 (calculate -> INT .)
    MUL             reduce using rule 49 (calculate -> INT .)
    DIV             reduce using rule 49 (calculate -> INT .)
    SEMI            reduce using rule 49 (calculate -> INT .)
    LB              reduce using rule 49 (calculate -> INT .)
    RB              reduce using rule 49 (calculate -> INT .)
    EQUAL           reduce using rule 49 (calculate -> INT .)
    NOTEQUAL        reduce using rule 49 (calculate -> INT .)
    RSB             reduce using rule 49 (calculate -> INT .)
    COMMA           reduce using rule 49 (calculate -> INT .)


state 26

    (41) string_calculate -> STRING .

    PLUS            reduce using rule 41 (string_calculate -> STRING .)
    SEMI            reduce using rule 41 (string_calculate -> STRING .)
    RSB             reduce using rule 41 (string_calculate -> STRING .)


state 27

    (2) root -> root statement .

    PASS            reduce using rule 2 (root -> root statement .)
    IF              reduce using rule 2 (root -> root statement .)
    WHILE           reduce using rule 2 (root -> root statement .)
    VAR             reduce using rule 2 (root -> root statement .)
    IDENTIFIER      reduce using rule 2 (root -> root statement .)
    FUNCTION        reduce using rule 2 (root -> root statement .)
    USE             reduce using rule 2 (root -> root statement .)
    MINUS           reduce using rule 2 (root -> root statement .)
    LSB             reduce using rule 2 (root -> root statement .)
    INT             reduce using rule 2 (root -> root statement .)
    STRING          reduce using rule 2 (root -> root statement .)
    $end            reduce using rule 2 (root -> root statement .)
    RMB             reduce using rule 2 (root -> root statement .)


state 28

    (30) if_statement -> if_statement ELSE . IF LSB expression RSB LMB root RMB
    (31) if_statement -> if_statement ELSE . LMB root RMB

    IF              shift and go to state 55
    LMB             shift and go to state 56


state 29

    (6) statement -> variable_declaration SEMI .

    PASS            reduce using rule 6 (statement -> variable_declaration SEMI .)
    IF              reduce using rule 6 (statement -> variable_declaration SEMI .)
    WHILE           reduce using rule 6 (statement -> variable_declaration SEMI .)
    VAR             reduce using rule 6 (statement -> variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 6 (statement -> variable_declaration SEMI .)
    FUNCTION        reduce using rule 6 (statement -> variable_declaration SEMI .)
    USE             reduce using rule 6 (statement -> variable_declaration SEMI .)
    MINUS           reduce using rule 6 (statement -> variable_declaration SEMI .)
    LSB             reduce using rule 6 (statement -> variable_declaration SEMI .)
    INT             reduce using rule 6 (statement -> variable_declaration SEMI .)
    STRING          reduce using rule 6 (statement -> variable_declaration SEMI .)
    $end            reduce using rule 6 (statement -> variable_declaration SEMI .)
    RMB             reduce using rule 6 (statement -> variable_declaration SEMI .)


state 30

    (7) statement -> variable_value_change SEMI .

    PASS            reduce using rule 7 (statement -> variable_value_change SEMI .)
    IF              reduce using rule 7 (statement -> variable_value_change SEMI .)
    WHILE           reduce using rule 7 (statement -> variable_value_change SEMI .)
    VAR             reduce using rule 7 (statement -> variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 7 (statement -> variable_value_change SEMI .)
    FUNCTION        reduce using rule 7 (statement -> variable_value_change SEMI .)
    USE             reduce using rule 7 (statement -> variable_value_change SEMI .)
    MINUS           reduce using rule 7 (statement -> variable_value_change SEMI .)
    LSB             reduce using rule 7 (statement -> variable_value_change SEMI .)
    INT             reduce using rule 7 (statement -> variable_value_change SEMI .)
    STRING          reduce using rule 7 (statement -> variable_value_change SEMI .)
    $end            reduce using rule 7 (statement -> variable_value_change SEMI .)
    RMB             reduce using rule 7 (statement -> variable_value_change SEMI .)


state 31

    (9) statement -> PASS SEMI .

    PASS            reduce using rule 9 (statement -> PASS SEMI .)
    IF              reduce using rule 9 (statement -> PASS SEMI .)
    WHILE           reduce using rule 9 (statement -> PASS SEMI .)
    VAR             reduce using rule 9 (statement -> PASS SEMI .)
    IDENTIFIER      reduce using rule 9 (statement -> PASS SEMI .)
    FUNCTION        reduce using rule 9 (statement -> PASS SEMI .)
    USE             reduce using rule 9 (statement -> PASS SEMI .)
    MINUS           reduce using rule 9 (statement -> PASS SEMI .)
    LSB             reduce using rule 9 (statement -> PASS SEMI .)
    INT             reduce using rule 9 (statement -> PASS SEMI .)
    STRING          reduce using rule 9 (statement -> PASS SEMI .)
    $end            reduce using rule 9 (statement -> PASS SEMI .)
    RMB             reduce using rule 9 (statement -> PASS SEMI .)


state 32

    (10) statement -> use SEMI .

    PASS            reduce using rule 10 (statement -> use SEMI .)
    IF              reduce using rule 10 (statement -> use SEMI .)
    WHILE           reduce using rule 10 (statement -> use SEMI .)
    VAR             reduce using rule 10 (statement -> use SEMI .)
    IDENTIFIER      reduce using rule 10 (statement -> use SEMI .)
    FUNCTION        reduce using rule 10 (statement -> use SEMI .)
    USE             reduce using rule 10 (statement -> use SEMI .)
    MINUS           reduce using rule 10 (statement -> use SEMI .)
    LSB             reduce using rule 10 (statement -> use SEMI .)
    INT             reduce using rule 10 (statement -> use SEMI .)
    STRING          reduce using rule 10 (statement -> use SEMI .)
    $end            reduce using rule 10 (statement -> use SEMI .)
    RMB             reduce using rule 10 (statement -> use SEMI .)


state 33

    (12) statement -> expression SEMI .

    PASS            reduce using rule 12 (statement -> expression SEMI .)
    IF              reduce using rule 12 (statement -> expression SEMI .)
    WHILE           reduce using rule 12 (statement -> expression SEMI .)
    VAR             reduce using rule 12 (statement -> expression SEMI .)
    IDENTIFIER      reduce using rule 12 (statement -> expression SEMI .)
    FUNCTION        reduce using rule 12 (statement -> expression SEMI .)
    USE             reduce using rule 12 (statement -> expression SEMI .)
    MINUS           reduce using rule 12 (statement -> expression SEMI .)
    LSB             reduce using rule 12 (statement -> expression SEMI .)
    INT             reduce using rule 12 (statement -> expression SEMI .)
    STRING          reduce using rule 12 (statement -> expression SEMI .)
    $end            reduce using rule 12 (statement -> expression SEMI .)
    RMB             reduce using rule 12 (statement -> expression SEMI .)


state 34

    (29) if_statement -> IF LSB . expression RSB LMB root RMB
    (13) expression -> . calculate
    (14) expression -> . string_calculate
    (15) expression -> . compare_expression
    (16) expression -> . function_call
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER
    (40) string_calculate -> . string_calculate stringoperator STRING
    (41) string_calculate -> . STRING
    (32) compare_expression -> . compare_expression compare_operator calculate
    (33) compare_expression -> . calculate
    (20) function_call -> . IDENTIFIER LSB function_call_parameter RSB

    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 58
    STRING          shift and go to state 26

    expression                     shift and go to state 57
    calculate                      shift and go to state 20
    string_calculate               shift and go to state 21
    compare_expression             shift and go to state 22
    function_call                  shift and go to state 23

state 35

    (48) calculate -> LSB calculate . RSB
    (43) calculate -> calculate . PLUS calculate
    (44) calculate -> calculate . MINUS calculate
    (45) calculate -> calculate . MUL calculate
    (46) calculate -> calculate . DIV calculate

    RSB             shift and go to state 59
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIV             shift and go to state 46


state 36

    (50) calculate -> IDENTIFIER .

    RSB             reduce using rule 50 (calculate -> IDENTIFIER .)
    PLUS            reduce using rule 50 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 50 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 50 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 50 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 50 (calculate -> IDENTIFIER .)
    LB              reduce using rule 50 (calculate -> IDENTIFIER .)
    RB              reduce using rule 50 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 50 (calculate -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 50 (calculate -> IDENTIFIER .)
    COMMA           reduce using rule 50 (calculate -> IDENTIFIER .)


state 37

    (28) while_statement -> WHILE LSB . expression RSB LMB root RMB
    (13) expression -> . calculate
    (14) expression -> . string_calculate
    (15) expression -> . compare_expression
    (16) expression -> . function_call
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER
    (40) string_calculate -> . string_calculate stringoperator STRING
    (41) string_calculate -> . STRING
    (32) compare_expression -> . compare_expression compare_operator calculate
    (33) compare_expression -> . calculate
    (20) function_call -> . IDENTIFIER LSB function_call_parameter RSB

    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 58
    STRING          shift and go to state 26

    expression                     shift and go to state 60
    calculate                      shift and go to state 20
    string_calculate               shift and go to state 21
    compare_expression             shift and go to state 22
    function_call                  shift and go to state 23

state 38

    (18) variable_declaration -> VAR IDENTIFIER . EQUAL expression

    EQUAL           shift and go to state 61


state 39

    (19) variable_value_change -> IDENTIFIER EQUAL . expression
    (13) expression -> . calculate
    (14) expression -> . string_calculate
    (15) expression -> . compare_expression
    (16) expression -> . function_call
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER
    (40) string_calculate -> . string_calculate stringoperator STRING
    (41) string_calculate -> . STRING
    (32) compare_expression -> . compare_expression compare_operator calculate
    (33) compare_expression -> . calculate
    (20) function_call -> . IDENTIFIER LSB function_call_parameter RSB

    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 58
    STRING          shift and go to state 26

    expression                     shift and go to state 62
    calculate                      shift and go to state 20
    string_calculate               shift and go to state 21
    compare_expression             shift and go to state 22
    function_call                  shift and go to state 23

state 40

    (20) function_call -> IDENTIFIER LSB . function_call_parameter RSB
    (21) function_call_parameter -> . function_call_parameter COMMA calculate
    (22) function_call_parameter -> . calculate
    (23) function_call_parameter -> . empty
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER
    (51) empty -> .

    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 36
    RSB             reduce using rule 51 (empty -> .)
    COMMA           reduce using rule 51 (empty -> .)

    function_call_parameter        shift and go to state 63
    calculate                      shift and go to state 64
    empty                          shift and go to state 65

state 41

    (24) function_declaration -> FUNCTION IDENTIFIER . LSB function_parameter RSB LMB root RMB

    LSB             shift and go to state 66


state 42

    (17) use -> USE IDENTIFIER .

    SEMI            reduce using rule 17 (use -> USE IDENTIFIER .)


state 43

    (43) calculate -> calculate PLUS . calculate
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER

    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 36

    calculate                      shift and go to state 67

state 44

    (44) calculate -> calculate MINUS . calculate
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER

    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 36

    calculate                      shift and go to state 68

state 45

    (45) calculate -> calculate MUL . calculate
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER

    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 36

    calculate                      shift and go to state 69

state 46

    (46) calculate -> calculate DIV . calculate
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER

    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 36

    calculate                      shift and go to state 70

state 47

    (40) string_calculate -> string_calculate stringoperator . STRING

    STRING          shift and go to state 71


state 48

    (42) stringoperator -> PLUS .

    STRING          reduce using rule 42 (stringoperator -> PLUS .)


state 49

    (32) compare_expression -> compare_expression compare_operator . calculate
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER

    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 36

    calculate                      shift and go to state 72

state 50

    (34) compare_operator -> LB .
    (36) compare_operator -> LB . EQUAL

    MINUS           reduce using rule 34 (compare_operator -> LB .)
    LSB             reduce using rule 34 (compare_operator -> LB .)
    INT             reduce using rule 34 (compare_operator -> LB .)
    IDENTIFIER      reduce using rule 34 (compare_operator -> LB .)
    EQUAL           shift and go to state 73


state 51

    (35) compare_operator -> RB .
    (37) compare_operator -> RB . EQUAL

    MINUS           reduce using rule 35 (compare_operator -> RB .)
    LSB             reduce using rule 35 (compare_operator -> RB .)
    INT             reduce using rule 35 (compare_operator -> RB .)
    IDENTIFIER      reduce using rule 35 (compare_operator -> RB .)
    EQUAL           shift and go to state 74


state 52

    (38) compare_operator -> EQUAL . EQUAL

    EQUAL           shift and go to state 75


state 53

    (39) compare_operator -> NOTEQUAL . EQUAL

    EQUAL           shift and go to state 76


state 54

    (47) calculate -> MINUS calculate .
    (43) calculate -> calculate . PLUS calculate
    (44) calculate -> calculate . MINUS calculate
    (45) calculate -> calculate . MUL calculate
    (46) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 47 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 47 (calculate -> MINUS calculate .)
    MUL             reduce using rule 47 (calculate -> MINUS calculate .)
    DIV             reduce using rule 47 (calculate -> MINUS calculate .)
    SEMI            reduce using rule 47 (calculate -> MINUS calculate .)
    LB              reduce using rule 47 (calculate -> MINUS calculate .)
    RB              reduce using rule 47 (calculate -> MINUS calculate .)
    EQUAL           reduce using rule 47 (calculate -> MINUS calculate .)
    NOTEQUAL        reduce using rule 47 (calculate -> MINUS calculate .)
    RSB             reduce using rule 47 (calculate -> MINUS calculate .)
    COMMA           reduce using rule 47 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! MUL             [ shift and go to state 45 ]
  ! DIV             [ shift and go to state 46 ]


state 55

    (30) if_statement -> if_statement ELSE IF . LSB expression RSB LMB root RMB

    LSB             shift and go to state 77


state 56

    (31) if_statement -> if_statement ELSE LMB . root RMB
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . use SEMI
    (11) statement -> . empty
    (12) statement -> . expression SEMI
    (29) if_statement -> . IF LSB expression RSB LMB root RMB
    (30) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (31) if_statement -> . if_statement ELSE LMB root RMB
    (28) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (18) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (19) variable_value_change -> . IDENTIFIER EQUAL expression
    (24) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (17) use -> . USE IDENTIFIER
    (51) empty -> .
    (13) expression -> . calculate
    (14) expression -> . string_calculate
    (15) expression -> . compare_expression
    (16) expression -> . function_call
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER
    (40) string_calculate -> . string_calculate stringoperator STRING
    (41) string_calculate -> . STRING
    (32) compare_expression -> . compare_expression compare_operator calculate
    (33) compare_expression -> . calculate
    (20) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PASS            shift and go to state 9
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    USE             shift and go to state 19
    RMB             reduce using rule 51 (empty -> .)
    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    STRING          shift and go to state 26

  ! PASS            [ reduce using rule 51 (empty -> .) ]
  ! IF              [ reduce using rule 51 (empty -> .) ]
  ! WHILE           [ reduce using rule 51 (empty -> .) ]
  ! VAR             [ reduce using rule 51 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 51 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 51 (empty -> .) ]
  ! USE             [ reduce using rule 51 (empty -> .) ]
  ! MINUS           [ reduce using rule 51 (empty -> .) ]
  ! LSB             [ reduce using rule 51 (empty -> .) ]
  ! INT             [ reduce using rule 51 (empty -> .) ]
  ! STRING          [ reduce using rule 51 (empty -> .) ]

    if_statement                   shift and go to state 4
    root                           shift and go to state 78
    statement                      shift and go to state 3
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    use                            shift and go to state 10
    empty                          shift and go to state 11
    expression                     shift and go to state 12
    calculate                      shift and go to state 20
    string_calculate               shift and go to state 21
    compare_expression             shift and go to state 22
    function_call                  shift and go to state 23

state 57

    (29) if_statement -> IF LSB expression . RSB LMB root RMB

    RSB             shift and go to state 79


state 58

    (50) calculate -> IDENTIFIER .
    (20) function_call -> IDENTIFIER . LSB function_call_parameter RSB

    PLUS            reduce using rule 50 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 50 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 50 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 50 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 50 (calculate -> IDENTIFIER .)
    LB              reduce using rule 50 (calculate -> IDENTIFIER .)
    RB              reduce using rule 50 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 50 (calculate -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 50 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 50 (calculate -> IDENTIFIER .)
    LSB             shift and go to state 40


state 59

    (48) calculate -> LSB calculate RSB .

    PLUS            reduce using rule 48 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 48 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 48 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 48 (calculate -> LSB calculate RSB .)
    SEMI            reduce using rule 48 (calculate -> LSB calculate RSB .)
    LB              reduce using rule 48 (calculate -> LSB calculate RSB .)
    RB              reduce using rule 48 (calculate -> LSB calculate RSB .)
    EQUAL           reduce using rule 48 (calculate -> LSB calculate RSB .)
    NOTEQUAL        reduce using rule 48 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 48 (calculate -> LSB calculate RSB .)
    COMMA           reduce using rule 48 (calculate -> LSB calculate RSB .)


state 60

    (28) while_statement -> WHILE LSB expression . RSB LMB root RMB

    RSB             shift and go to state 80


state 61

    (18) variable_declaration -> VAR IDENTIFIER EQUAL . expression
    (13) expression -> . calculate
    (14) expression -> . string_calculate
    (15) expression -> . compare_expression
    (16) expression -> . function_call
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER
    (40) string_calculate -> . string_calculate stringoperator STRING
    (41) string_calculate -> . STRING
    (32) compare_expression -> . compare_expression compare_operator calculate
    (33) compare_expression -> . calculate
    (20) function_call -> . IDENTIFIER LSB function_call_parameter RSB

    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 58
    STRING          shift and go to state 26

    expression                     shift and go to state 81
    calculate                      shift and go to state 20
    string_calculate               shift and go to state 21
    compare_expression             shift and go to state 22
    function_call                  shift and go to state 23

state 62

    (19) variable_value_change -> IDENTIFIER EQUAL expression .

    SEMI            reduce using rule 19 (variable_value_change -> IDENTIFIER EQUAL expression .)


state 63

    (20) function_call -> IDENTIFIER LSB function_call_parameter . RSB
    (21) function_call_parameter -> function_call_parameter . COMMA calculate

    RSB             shift and go to state 82
    COMMA           shift and go to state 83


state 64

    (22) function_call_parameter -> calculate .
    (43) calculate -> calculate . PLUS calculate
    (44) calculate -> calculate . MINUS calculate
    (45) calculate -> calculate . MUL calculate
    (46) calculate -> calculate . DIV calculate

    RSB             reduce using rule 22 (function_call_parameter -> calculate .)
    COMMA           reduce using rule 22 (function_call_parameter -> calculate .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIV             shift and go to state 46


state 65

    (23) function_call_parameter -> empty .

    RSB             reduce using rule 23 (function_call_parameter -> empty .)
    COMMA           reduce using rule 23 (function_call_parameter -> empty .)


state 66

    (24) function_declaration -> FUNCTION IDENTIFIER LSB . function_parameter RSB LMB root RMB
    (25) function_parameter -> . function_parameter COMMA IDENTIFIER
    (26) function_parameter -> . IDENTIFIER
    (27) function_parameter -> . empty
    (51) empty -> .

    IDENTIFIER      shift and go to state 84
    RSB             reduce using rule 51 (empty -> .)
    COMMA           reduce using rule 51 (empty -> .)

    function_parameter             shift and go to state 85
    empty                          shift and go to state 86

state 67

    (43) calculate -> calculate PLUS calculate .
    (43) calculate -> calculate . PLUS calculate
    (44) calculate -> calculate . MINUS calculate
    (45) calculate -> calculate . MUL calculate
    (46) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 43 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 43 (calculate -> calculate PLUS calculate .)
    SEMI            reduce using rule 43 (calculate -> calculate PLUS calculate .)
    LB              reduce using rule 43 (calculate -> calculate PLUS calculate .)
    RB              reduce using rule 43 (calculate -> calculate PLUS calculate .)
    EQUAL           reduce using rule 43 (calculate -> calculate PLUS calculate .)
    NOTEQUAL        reduce using rule 43 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 43 (calculate -> calculate PLUS calculate .)
    COMMA           reduce using rule 43 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 45
    DIV             shift and go to state 46

  ! MUL             [ reduce using rule 43 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 43 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]


state 68

    (44) calculate -> calculate MINUS calculate .
    (43) calculate -> calculate . PLUS calculate
    (44) calculate -> calculate . MINUS calculate
    (45) calculate -> calculate . MUL calculate
    (46) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 44 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 44 (calculate -> calculate MINUS calculate .)
    SEMI            reduce using rule 44 (calculate -> calculate MINUS calculate .)
    LB              reduce using rule 44 (calculate -> calculate MINUS calculate .)
    RB              reduce using rule 44 (calculate -> calculate MINUS calculate .)
    EQUAL           reduce using rule 44 (calculate -> calculate MINUS calculate .)
    NOTEQUAL        reduce using rule 44 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 44 (calculate -> calculate MINUS calculate .)
    COMMA           reduce using rule 44 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 45
    DIV             shift and go to state 46

  ! MUL             [ reduce using rule 44 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 44 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]


state 69

    (45) calculate -> calculate MUL calculate .
    (43) calculate -> calculate . PLUS calculate
    (44) calculate -> calculate . MINUS calculate
    (45) calculate -> calculate . MUL calculate
    (46) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 45 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 45 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 45 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 45 (calculate -> calculate MUL calculate .)
    SEMI            reduce using rule 45 (calculate -> calculate MUL calculate .)
    LB              reduce using rule 45 (calculate -> calculate MUL calculate .)
    RB              reduce using rule 45 (calculate -> calculate MUL calculate .)
    EQUAL           reduce using rule 45 (calculate -> calculate MUL calculate .)
    NOTEQUAL        reduce using rule 45 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 45 (calculate -> calculate MUL calculate .)
    COMMA           reduce using rule 45 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! MUL             [ shift and go to state 45 ]
  ! DIV             [ shift and go to state 46 ]


state 70

    (46) calculate -> calculate DIV calculate .
    (43) calculate -> calculate . PLUS calculate
    (44) calculate -> calculate . MINUS calculate
    (45) calculate -> calculate . MUL calculate
    (46) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 46 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 46 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 46 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 46 (calculate -> calculate DIV calculate .)
    SEMI            reduce using rule 46 (calculate -> calculate DIV calculate .)
    LB              reduce using rule 46 (calculate -> calculate DIV calculate .)
    RB              reduce using rule 46 (calculate -> calculate DIV calculate .)
    EQUAL           reduce using rule 46 (calculate -> calculate DIV calculate .)
    NOTEQUAL        reduce using rule 46 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 46 (calculate -> calculate DIV calculate .)
    COMMA           reduce using rule 46 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! MUL             [ shift and go to state 45 ]
  ! DIV             [ shift and go to state 46 ]


state 71

    (40) string_calculate -> string_calculate stringoperator STRING .

    PLUS            reduce using rule 40 (string_calculate -> string_calculate stringoperator STRING .)
    SEMI            reduce using rule 40 (string_calculate -> string_calculate stringoperator STRING .)
    RSB             reduce using rule 40 (string_calculate -> string_calculate stringoperator STRING .)


state 72

    (32) compare_expression -> compare_expression compare_operator calculate .
    (43) calculate -> calculate . PLUS calculate
    (44) calculate -> calculate . MINUS calculate
    (45) calculate -> calculate . MUL calculate
    (46) calculate -> calculate . DIV calculate

    LB              reduce using rule 32 (compare_expression -> compare_expression compare_operator calculate .)
    RB              reduce using rule 32 (compare_expression -> compare_expression compare_operator calculate .)
    EQUAL           reduce using rule 32 (compare_expression -> compare_expression compare_operator calculate .)
    NOTEQUAL        reduce using rule 32 (compare_expression -> compare_expression compare_operator calculate .)
    SEMI            reduce using rule 32 (compare_expression -> compare_expression compare_operator calculate .)
    RSB             reduce using rule 32 (compare_expression -> compare_expression compare_operator calculate .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIV             shift and go to state 46


state 73

    (36) compare_operator -> LB EQUAL .

    MINUS           reduce using rule 36 (compare_operator -> LB EQUAL .)
    LSB             reduce using rule 36 (compare_operator -> LB EQUAL .)
    INT             reduce using rule 36 (compare_operator -> LB EQUAL .)
    IDENTIFIER      reduce using rule 36 (compare_operator -> LB EQUAL .)


state 74

    (37) compare_operator -> RB EQUAL .

    MINUS           reduce using rule 37 (compare_operator -> RB EQUAL .)
    LSB             reduce using rule 37 (compare_operator -> RB EQUAL .)
    INT             reduce using rule 37 (compare_operator -> RB EQUAL .)
    IDENTIFIER      reduce using rule 37 (compare_operator -> RB EQUAL .)


state 75

    (38) compare_operator -> EQUAL EQUAL .

    MINUS           reduce using rule 38 (compare_operator -> EQUAL EQUAL .)
    LSB             reduce using rule 38 (compare_operator -> EQUAL EQUAL .)
    INT             reduce using rule 38 (compare_operator -> EQUAL EQUAL .)
    IDENTIFIER      reduce using rule 38 (compare_operator -> EQUAL EQUAL .)


state 76

    (39) compare_operator -> NOTEQUAL EQUAL .

    MINUS           reduce using rule 39 (compare_operator -> NOTEQUAL EQUAL .)
    LSB             reduce using rule 39 (compare_operator -> NOTEQUAL EQUAL .)
    INT             reduce using rule 39 (compare_operator -> NOTEQUAL EQUAL .)
    IDENTIFIER      reduce using rule 39 (compare_operator -> NOTEQUAL EQUAL .)


state 77

    (30) if_statement -> if_statement ELSE IF LSB . expression RSB LMB root RMB
    (13) expression -> . calculate
    (14) expression -> . string_calculate
    (15) expression -> . compare_expression
    (16) expression -> . function_call
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER
    (40) string_calculate -> . string_calculate stringoperator STRING
    (41) string_calculate -> . STRING
    (32) compare_expression -> . compare_expression compare_operator calculate
    (33) compare_expression -> . calculate
    (20) function_call -> . IDENTIFIER LSB function_call_parameter RSB

    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 58
    STRING          shift and go to state 26

    expression                     shift and go to state 87
    calculate                      shift and go to state 20
    string_calculate               shift and go to state 21
    compare_expression             shift and go to state 22
    function_call                  shift and go to state 23

state 78

    (31) if_statement -> if_statement ELSE LMB root . RMB
    (2) root -> root . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . use SEMI
    (11) statement -> . empty
    (12) statement -> . expression SEMI
    (29) if_statement -> . IF LSB expression RSB LMB root RMB
    (30) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (31) if_statement -> . if_statement ELSE LMB root RMB
    (28) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (18) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (19) variable_value_change -> . IDENTIFIER EQUAL expression
    (24) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (17) use -> . USE IDENTIFIER
    (51) empty -> .
    (13) expression -> . calculate
    (14) expression -> . string_calculate
    (15) expression -> . compare_expression
    (16) expression -> . function_call
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER
    (40) string_calculate -> . string_calculate stringoperator STRING
    (41) string_calculate -> . STRING
    (32) compare_expression -> . compare_expression compare_operator calculate
    (33) compare_expression -> . calculate
    (20) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for RMB resolved as shift
  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    RMB             shift and go to state 88
    PASS            shift and go to state 9
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    USE             shift and go to state 19
    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    STRING          shift and go to state 26

  ! RMB             [ reduce using rule 51 (empty -> .) ]
  ! PASS            [ reduce using rule 51 (empty -> .) ]
  ! IF              [ reduce using rule 51 (empty -> .) ]
  ! WHILE           [ reduce using rule 51 (empty -> .) ]
  ! VAR             [ reduce using rule 51 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 51 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 51 (empty -> .) ]
  ! USE             [ reduce using rule 51 (empty -> .) ]
  ! MINUS           [ reduce using rule 51 (empty -> .) ]
  ! LSB             [ reduce using rule 51 (empty -> .) ]
  ! INT             [ reduce using rule 51 (empty -> .) ]
  ! STRING          [ reduce using rule 51 (empty -> .) ]

    if_statement                   shift and go to state 4
    statement                      shift and go to state 27
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    use                            shift and go to state 10
    empty                          shift and go to state 11
    expression                     shift and go to state 12
    calculate                      shift and go to state 20
    string_calculate               shift and go to state 21
    compare_expression             shift and go to state 22
    function_call                  shift and go to state 23

state 79

    (29) if_statement -> IF LSB expression RSB . LMB root RMB

    LMB             shift and go to state 89


state 80

    (28) while_statement -> WHILE LSB expression RSB . LMB root RMB

    LMB             shift and go to state 90


state 81

    (18) variable_declaration -> VAR IDENTIFIER EQUAL expression .

    SEMI            reduce using rule 18 (variable_declaration -> VAR IDENTIFIER EQUAL expression .)


state 82

    (20) function_call -> IDENTIFIER LSB function_call_parameter RSB .

    SEMI            reduce using rule 20 (function_call -> IDENTIFIER LSB function_call_parameter RSB .)
    RSB             reduce using rule 20 (function_call -> IDENTIFIER LSB function_call_parameter RSB .)


state 83

    (21) function_call_parameter -> function_call_parameter COMMA . calculate
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER

    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 36

    calculate                      shift and go to state 91

state 84

    (26) function_parameter -> IDENTIFIER .

    RSB             reduce using rule 26 (function_parameter -> IDENTIFIER .)
    COMMA           reduce using rule 26 (function_parameter -> IDENTIFIER .)


state 85

    (24) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter . RSB LMB root RMB
    (25) function_parameter -> function_parameter . COMMA IDENTIFIER

    RSB             shift and go to state 92
    COMMA           shift and go to state 93


state 86

    (27) function_parameter -> empty .

    RSB             reduce using rule 27 (function_parameter -> empty .)
    COMMA           reduce using rule 27 (function_parameter -> empty .)


state 87

    (30) if_statement -> if_statement ELSE IF LSB expression . RSB LMB root RMB

    RSB             shift and go to state 94


state 88

    (31) if_statement -> if_statement ELSE LMB root RMB .

    ELSE            reduce using rule 31 (if_statement -> if_statement ELSE LMB root RMB .)
    PASS            reduce using rule 31 (if_statement -> if_statement ELSE LMB root RMB .)
    IF              reduce using rule 31 (if_statement -> if_statement ELSE LMB root RMB .)
    WHILE           reduce using rule 31 (if_statement -> if_statement ELSE LMB root RMB .)
    VAR             reduce using rule 31 (if_statement -> if_statement ELSE LMB root RMB .)
    IDENTIFIER      reduce using rule 31 (if_statement -> if_statement ELSE LMB root RMB .)
    FUNCTION        reduce using rule 31 (if_statement -> if_statement ELSE LMB root RMB .)
    USE             reduce using rule 31 (if_statement -> if_statement ELSE LMB root RMB .)
    MINUS           reduce using rule 31 (if_statement -> if_statement ELSE LMB root RMB .)
    LSB             reduce using rule 31 (if_statement -> if_statement ELSE LMB root RMB .)
    INT             reduce using rule 31 (if_statement -> if_statement ELSE LMB root RMB .)
    STRING          reduce using rule 31 (if_statement -> if_statement ELSE LMB root RMB .)
    $end            reduce using rule 31 (if_statement -> if_statement ELSE LMB root RMB .)
    RMB             reduce using rule 31 (if_statement -> if_statement ELSE LMB root RMB .)


state 89

    (29) if_statement -> IF LSB expression RSB LMB . root RMB
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . use SEMI
    (11) statement -> . empty
    (12) statement -> . expression SEMI
    (29) if_statement -> . IF LSB expression RSB LMB root RMB
    (30) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (31) if_statement -> . if_statement ELSE LMB root RMB
    (28) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (18) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (19) variable_value_change -> . IDENTIFIER EQUAL expression
    (24) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (17) use -> . USE IDENTIFIER
    (51) empty -> .
    (13) expression -> . calculate
    (14) expression -> . string_calculate
    (15) expression -> . compare_expression
    (16) expression -> . function_call
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER
    (40) string_calculate -> . string_calculate stringoperator STRING
    (41) string_calculate -> . STRING
    (32) compare_expression -> . compare_expression compare_operator calculate
    (33) compare_expression -> . calculate
    (20) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PASS            shift and go to state 9
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    USE             shift and go to state 19
    RMB             reduce using rule 51 (empty -> .)
    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    STRING          shift and go to state 26

  ! PASS            [ reduce using rule 51 (empty -> .) ]
  ! IF              [ reduce using rule 51 (empty -> .) ]
  ! WHILE           [ reduce using rule 51 (empty -> .) ]
  ! VAR             [ reduce using rule 51 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 51 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 51 (empty -> .) ]
  ! USE             [ reduce using rule 51 (empty -> .) ]
  ! MINUS           [ reduce using rule 51 (empty -> .) ]
  ! LSB             [ reduce using rule 51 (empty -> .) ]
  ! INT             [ reduce using rule 51 (empty -> .) ]
  ! STRING          [ reduce using rule 51 (empty -> .) ]

    expression                     shift and go to state 12
    root                           shift and go to state 95
    statement                      shift and go to state 3
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    use                            shift and go to state 10
    empty                          shift and go to state 11
    calculate                      shift and go to state 20
    string_calculate               shift and go to state 21
    compare_expression             shift and go to state 22
    function_call                  shift and go to state 23

state 90

    (28) while_statement -> WHILE LSB expression RSB LMB . root RMB
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . use SEMI
    (11) statement -> . empty
    (12) statement -> . expression SEMI
    (29) if_statement -> . IF LSB expression RSB LMB root RMB
    (30) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (31) if_statement -> . if_statement ELSE LMB root RMB
    (28) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (18) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (19) variable_value_change -> . IDENTIFIER EQUAL expression
    (24) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (17) use -> . USE IDENTIFIER
    (51) empty -> .
    (13) expression -> . calculate
    (14) expression -> . string_calculate
    (15) expression -> . compare_expression
    (16) expression -> . function_call
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER
    (40) string_calculate -> . string_calculate stringoperator STRING
    (41) string_calculate -> . STRING
    (32) compare_expression -> . compare_expression compare_operator calculate
    (33) compare_expression -> . calculate
    (20) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PASS            shift and go to state 9
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    USE             shift and go to state 19
    RMB             reduce using rule 51 (empty -> .)
    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    STRING          shift and go to state 26

  ! PASS            [ reduce using rule 51 (empty -> .) ]
  ! IF              [ reduce using rule 51 (empty -> .) ]
  ! WHILE           [ reduce using rule 51 (empty -> .) ]
  ! VAR             [ reduce using rule 51 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 51 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 51 (empty -> .) ]
  ! USE             [ reduce using rule 51 (empty -> .) ]
  ! MINUS           [ reduce using rule 51 (empty -> .) ]
  ! LSB             [ reduce using rule 51 (empty -> .) ]
  ! INT             [ reduce using rule 51 (empty -> .) ]
  ! STRING          [ reduce using rule 51 (empty -> .) ]

    expression                     shift and go to state 12
    root                           shift and go to state 96
    statement                      shift and go to state 3
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    use                            shift and go to state 10
    empty                          shift and go to state 11
    calculate                      shift and go to state 20
    string_calculate               shift and go to state 21
    compare_expression             shift and go to state 22
    function_call                  shift and go to state 23

state 91

    (21) function_call_parameter -> function_call_parameter COMMA calculate .
    (43) calculate -> calculate . PLUS calculate
    (44) calculate -> calculate . MINUS calculate
    (45) calculate -> calculate . MUL calculate
    (46) calculate -> calculate . DIV calculate

    RSB             reduce using rule 21 (function_call_parameter -> function_call_parameter COMMA calculate .)
    COMMA           reduce using rule 21 (function_call_parameter -> function_call_parameter COMMA calculate .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIV             shift and go to state 46


state 92

    (24) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB . LMB root RMB

    LMB             shift and go to state 97


state 93

    (25) function_parameter -> function_parameter COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 98


state 94

    (30) if_statement -> if_statement ELSE IF LSB expression RSB . LMB root RMB

    LMB             shift and go to state 99


state 95

    (29) if_statement -> IF LSB expression RSB LMB root . RMB
    (2) root -> root . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . use SEMI
    (11) statement -> . empty
    (12) statement -> . expression SEMI
    (29) if_statement -> . IF LSB expression RSB LMB root RMB
    (30) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (31) if_statement -> . if_statement ELSE LMB root RMB
    (28) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (18) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (19) variable_value_change -> . IDENTIFIER EQUAL expression
    (24) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (17) use -> . USE IDENTIFIER
    (51) empty -> .
    (13) expression -> . calculate
    (14) expression -> . string_calculate
    (15) expression -> . compare_expression
    (16) expression -> . function_call
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER
    (40) string_calculate -> . string_calculate stringoperator STRING
    (41) string_calculate -> . STRING
    (32) compare_expression -> . compare_expression compare_operator calculate
    (33) compare_expression -> . calculate
    (20) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for RMB resolved as shift
  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    RMB             shift and go to state 100
    PASS            shift and go to state 9
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    USE             shift and go to state 19
    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    STRING          shift and go to state 26

  ! RMB             [ reduce using rule 51 (empty -> .) ]
  ! PASS            [ reduce using rule 51 (empty -> .) ]
  ! IF              [ reduce using rule 51 (empty -> .) ]
  ! WHILE           [ reduce using rule 51 (empty -> .) ]
  ! VAR             [ reduce using rule 51 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 51 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 51 (empty -> .) ]
  ! USE             [ reduce using rule 51 (empty -> .) ]
  ! MINUS           [ reduce using rule 51 (empty -> .) ]
  ! LSB             [ reduce using rule 51 (empty -> .) ]
  ! INT             [ reduce using rule 51 (empty -> .) ]
  ! STRING          [ reduce using rule 51 (empty -> .) ]

    expression                     shift and go to state 12
    statement                      shift and go to state 27
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    use                            shift and go to state 10
    empty                          shift and go to state 11
    calculate                      shift and go to state 20
    string_calculate               shift and go to state 21
    compare_expression             shift and go to state 22
    function_call                  shift and go to state 23

state 96

    (28) while_statement -> WHILE LSB expression RSB LMB root . RMB
    (2) root -> root . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . use SEMI
    (11) statement -> . empty
    (12) statement -> . expression SEMI
    (29) if_statement -> . IF LSB expression RSB LMB root RMB
    (30) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (31) if_statement -> . if_statement ELSE LMB root RMB
    (28) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (18) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (19) variable_value_change -> . IDENTIFIER EQUAL expression
    (24) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (17) use -> . USE IDENTIFIER
    (51) empty -> .
    (13) expression -> . calculate
    (14) expression -> . string_calculate
    (15) expression -> . compare_expression
    (16) expression -> . function_call
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER
    (40) string_calculate -> . string_calculate stringoperator STRING
    (41) string_calculate -> . STRING
    (32) compare_expression -> . compare_expression compare_operator calculate
    (33) compare_expression -> . calculate
    (20) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for RMB resolved as shift
  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    RMB             shift and go to state 101
    PASS            shift and go to state 9
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    USE             shift and go to state 19
    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    STRING          shift and go to state 26

  ! RMB             [ reduce using rule 51 (empty -> .) ]
  ! PASS            [ reduce using rule 51 (empty -> .) ]
  ! IF              [ reduce using rule 51 (empty -> .) ]
  ! WHILE           [ reduce using rule 51 (empty -> .) ]
  ! VAR             [ reduce using rule 51 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 51 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 51 (empty -> .) ]
  ! USE             [ reduce using rule 51 (empty -> .) ]
  ! MINUS           [ reduce using rule 51 (empty -> .) ]
  ! LSB             [ reduce using rule 51 (empty -> .) ]
  ! INT             [ reduce using rule 51 (empty -> .) ]
  ! STRING          [ reduce using rule 51 (empty -> .) ]

    expression                     shift and go to state 12
    statement                      shift and go to state 27
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    use                            shift and go to state 10
    empty                          shift and go to state 11
    calculate                      shift and go to state 20
    string_calculate               shift and go to state 21
    compare_expression             shift and go to state 22
    function_call                  shift and go to state 23

state 97

    (24) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB . root RMB
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . use SEMI
    (11) statement -> . empty
    (12) statement -> . expression SEMI
    (29) if_statement -> . IF LSB expression RSB LMB root RMB
    (30) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (31) if_statement -> . if_statement ELSE LMB root RMB
    (28) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (18) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (19) variable_value_change -> . IDENTIFIER EQUAL expression
    (24) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (17) use -> . USE IDENTIFIER
    (51) empty -> .
    (13) expression -> . calculate
    (14) expression -> . string_calculate
    (15) expression -> . compare_expression
    (16) expression -> . function_call
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER
    (40) string_calculate -> . string_calculate stringoperator STRING
    (41) string_calculate -> . STRING
    (32) compare_expression -> . compare_expression compare_operator calculate
    (33) compare_expression -> . calculate
    (20) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PASS            shift and go to state 9
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    USE             shift and go to state 19
    RMB             reduce using rule 51 (empty -> .)
    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    STRING          shift and go to state 26

  ! PASS            [ reduce using rule 51 (empty -> .) ]
  ! IF              [ reduce using rule 51 (empty -> .) ]
  ! WHILE           [ reduce using rule 51 (empty -> .) ]
  ! VAR             [ reduce using rule 51 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 51 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 51 (empty -> .) ]
  ! USE             [ reduce using rule 51 (empty -> .) ]
  ! MINUS           [ reduce using rule 51 (empty -> .) ]
  ! LSB             [ reduce using rule 51 (empty -> .) ]
  ! INT             [ reduce using rule 51 (empty -> .) ]
  ! STRING          [ reduce using rule 51 (empty -> .) ]

    root                           shift and go to state 102
    statement                      shift and go to state 3
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    use                            shift and go to state 10
    empty                          shift and go to state 11
    expression                     shift and go to state 12
    calculate                      shift and go to state 20
    string_calculate               shift and go to state 21
    compare_expression             shift and go to state 22
    function_call                  shift and go to state 23

state 98

    (25) function_parameter -> function_parameter COMMA IDENTIFIER .

    RSB             reduce using rule 25 (function_parameter -> function_parameter COMMA IDENTIFIER .)
    COMMA           reduce using rule 25 (function_parameter -> function_parameter COMMA IDENTIFIER .)


state 99

    (30) if_statement -> if_statement ELSE IF LSB expression RSB LMB . root RMB
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . use SEMI
    (11) statement -> . empty
    (12) statement -> . expression SEMI
    (29) if_statement -> . IF LSB expression RSB LMB root RMB
    (30) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (31) if_statement -> . if_statement ELSE LMB root RMB
    (28) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (18) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (19) variable_value_change -> . IDENTIFIER EQUAL expression
    (24) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (17) use -> . USE IDENTIFIER
    (51) empty -> .
    (13) expression -> . calculate
    (14) expression -> . string_calculate
    (15) expression -> . compare_expression
    (16) expression -> . function_call
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER
    (40) string_calculate -> . string_calculate stringoperator STRING
    (41) string_calculate -> . STRING
    (32) compare_expression -> . compare_expression compare_operator calculate
    (33) compare_expression -> . calculate
    (20) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PASS            shift and go to state 9
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    USE             shift and go to state 19
    RMB             reduce using rule 51 (empty -> .)
    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    STRING          shift and go to state 26

  ! PASS            [ reduce using rule 51 (empty -> .) ]
  ! IF              [ reduce using rule 51 (empty -> .) ]
  ! WHILE           [ reduce using rule 51 (empty -> .) ]
  ! VAR             [ reduce using rule 51 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 51 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 51 (empty -> .) ]
  ! USE             [ reduce using rule 51 (empty -> .) ]
  ! MINUS           [ reduce using rule 51 (empty -> .) ]
  ! LSB             [ reduce using rule 51 (empty -> .) ]
  ! INT             [ reduce using rule 51 (empty -> .) ]
  ! STRING          [ reduce using rule 51 (empty -> .) ]

    if_statement                   shift and go to state 4
    expression                     shift and go to state 12
    root                           shift and go to state 103
    statement                      shift and go to state 3
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    use                            shift and go to state 10
    empty                          shift and go to state 11
    calculate                      shift and go to state 20
    string_calculate               shift and go to state 21
    compare_expression             shift and go to state 22
    function_call                  shift and go to state 23

state 100

    (29) if_statement -> IF LSB expression RSB LMB root RMB .

    ELSE            reduce using rule 29 (if_statement -> IF LSB expression RSB LMB root RMB .)
    PASS            reduce using rule 29 (if_statement -> IF LSB expression RSB LMB root RMB .)
    IF              reduce using rule 29 (if_statement -> IF LSB expression RSB LMB root RMB .)
    WHILE           reduce using rule 29 (if_statement -> IF LSB expression RSB LMB root RMB .)
    VAR             reduce using rule 29 (if_statement -> IF LSB expression RSB LMB root RMB .)
    IDENTIFIER      reduce using rule 29 (if_statement -> IF LSB expression RSB LMB root RMB .)
    FUNCTION        reduce using rule 29 (if_statement -> IF LSB expression RSB LMB root RMB .)
    USE             reduce using rule 29 (if_statement -> IF LSB expression RSB LMB root RMB .)
    MINUS           reduce using rule 29 (if_statement -> IF LSB expression RSB LMB root RMB .)
    LSB             reduce using rule 29 (if_statement -> IF LSB expression RSB LMB root RMB .)
    INT             reduce using rule 29 (if_statement -> IF LSB expression RSB LMB root RMB .)
    STRING          reduce using rule 29 (if_statement -> IF LSB expression RSB LMB root RMB .)
    $end            reduce using rule 29 (if_statement -> IF LSB expression RSB LMB root RMB .)
    RMB             reduce using rule 29 (if_statement -> IF LSB expression RSB LMB root RMB .)


state 101

    (28) while_statement -> WHILE LSB expression RSB LMB root RMB .

    PASS            reduce using rule 28 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    IF              reduce using rule 28 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    WHILE           reduce using rule 28 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    VAR             reduce using rule 28 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    IDENTIFIER      reduce using rule 28 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    FUNCTION        reduce using rule 28 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    USE             reduce using rule 28 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    MINUS           reduce using rule 28 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    LSB             reduce using rule 28 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    INT             reduce using rule 28 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    STRING          reduce using rule 28 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    $end            reduce using rule 28 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    RMB             reduce using rule 28 (while_statement -> WHILE LSB expression RSB LMB root RMB .)


state 102

    (24) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root . RMB
    (2) root -> root . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . use SEMI
    (11) statement -> . empty
    (12) statement -> . expression SEMI
    (29) if_statement -> . IF LSB expression RSB LMB root RMB
    (30) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (31) if_statement -> . if_statement ELSE LMB root RMB
    (28) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (18) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (19) variable_value_change -> . IDENTIFIER EQUAL expression
    (24) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (17) use -> . USE IDENTIFIER
    (51) empty -> .
    (13) expression -> . calculate
    (14) expression -> . string_calculate
    (15) expression -> . compare_expression
    (16) expression -> . function_call
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER
    (40) string_calculate -> . string_calculate stringoperator STRING
    (41) string_calculate -> . STRING
    (32) compare_expression -> . compare_expression compare_operator calculate
    (33) compare_expression -> . calculate
    (20) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for RMB resolved as shift
  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    RMB             shift and go to state 104
    PASS            shift and go to state 9
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    USE             shift and go to state 19
    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    STRING          shift and go to state 26

  ! RMB             [ reduce using rule 51 (empty -> .) ]
  ! PASS            [ reduce using rule 51 (empty -> .) ]
  ! IF              [ reduce using rule 51 (empty -> .) ]
  ! WHILE           [ reduce using rule 51 (empty -> .) ]
  ! VAR             [ reduce using rule 51 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 51 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 51 (empty -> .) ]
  ! USE             [ reduce using rule 51 (empty -> .) ]
  ! MINUS           [ reduce using rule 51 (empty -> .) ]
  ! LSB             [ reduce using rule 51 (empty -> .) ]
  ! INT             [ reduce using rule 51 (empty -> .) ]
  ! STRING          [ reduce using rule 51 (empty -> .) ]

    statement                      shift and go to state 27
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    use                            shift and go to state 10
    empty                          shift and go to state 11
    expression                     shift and go to state 12
    calculate                      shift and go to state 20
    string_calculate               shift and go to state 21
    compare_expression             shift and go to state 22
    function_call                  shift and go to state 23

state 103

    (30) if_statement -> if_statement ELSE IF LSB expression RSB LMB root . RMB
    (2) root -> root . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . use SEMI
    (11) statement -> . empty
    (12) statement -> . expression SEMI
    (29) if_statement -> . IF LSB expression RSB LMB root RMB
    (30) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (31) if_statement -> . if_statement ELSE LMB root RMB
    (28) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (18) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (19) variable_value_change -> . IDENTIFIER EQUAL expression
    (24) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (17) use -> . USE IDENTIFIER
    (51) empty -> .
    (13) expression -> . calculate
    (14) expression -> . string_calculate
    (15) expression -> . compare_expression
    (16) expression -> . function_call
    (43) calculate -> . calculate PLUS calculate
    (44) calculate -> . calculate MINUS calculate
    (45) calculate -> . calculate MUL calculate
    (46) calculate -> . calculate DIV calculate
    (47) calculate -> . MINUS calculate
    (48) calculate -> . LSB calculate RSB
    (49) calculate -> . INT
    (50) calculate -> . IDENTIFIER
    (40) string_calculate -> . string_calculate stringoperator STRING
    (41) string_calculate -> . STRING
    (32) compare_expression -> . compare_expression compare_operator calculate
    (33) compare_expression -> . calculate
    (20) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for RMB resolved as shift
  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    RMB             shift and go to state 105
    PASS            shift and go to state 9
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    USE             shift and go to state 19
    MINUS           shift and go to state 24
    LSB             shift and go to state 14
    INT             shift and go to state 25
    STRING          shift and go to state 26

  ! RMB             [ reduce using rule 51 (empty -> .) ]
  ! PASS            [ reduce using rule 51 (empty -> .) ]
  ! IF              [ reduce using rule 51 (empty -> .) ]
  ! WHILE           [ reduce using rule 51 (empty -> .) ]
  ! VAR             [ reduce using rule 51 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 51 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 51 (empty -> .) ]
  ! USE             [ reduce using rule 51 (empty -> .) ]
  ! MINUS           [ reduce using rule 51 (empty -> .) ]
  ! LSB             [ reduce using rule 51 (empty -> .) ]
  ! INT             [ reduce using rule 51 (empty -> .) ]
  ! STRING          [ reduce using rule 51 (empty -> .) ]

    if_statement                   shift and go to state 4
    expression                     shift and go to state 12
    statement                      shift and go to state 27
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    use                            shift and go to state 10
    empty                          shift and go to state 11
    calculate                      shift and go to state 20
    string_calculate               shift and go to state 21
    compare_expression             shift and go to state 22
    function_call                  shift and go to state 23

state 104

    (24) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .

    PASS            reduce using rule 24 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    IF              reduce using rule 24 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    WHILE           reduce using rule 24 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    VAR             reduce using rule 24 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    IDENTIFIER      reduce using rule 24 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    FUNCTION        reduce using rule 24 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    USE             reduce using rule 24 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    MINUS           reduce using rule 24 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    LSB             reduce using rule 24 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    INT             reduce using rule 24 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    STRING          reduce using rule 24 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    $end            reduce using rule 24 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    RMB             reduce using rule 24 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)


state 105

    (30) if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .

    ELSE            reduce using rule 30 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    PASS            reduce using rule 30 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    IF              reduce using rule 30 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    WHILE           reduce using rule 30 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    VAR             reduce using rule 30 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    IDENTIFIER      reduce using rule 30 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    FUNCTION        reduce using rule 30 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    USE             reduce using rule 30 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    MINUS           reduce using rule 30 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    LSB             reduce using rule 30 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    INT             reduce using rule 30 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    STRING          reduce using rule 30 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    $end            reduce using rule 30 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    RMB             reduce using rule 30 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PASS in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for USE in state 0 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 0 resolved as shift
WARNING: shift/reduce conflict for LSB in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for PASS in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for USE in state 2 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 2 resolved as shift
WARNING: shift/reduce conflict for LSB in state 2 resolved as shift
WARNING: shift/reduce conflict for INT in state 2 resolved as shift
WARNING: shift/reduce conflict for STRING in state 2 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 17 resolved as shift
WARNING: shift/reduce conflict for PASS in state 56 resolved as shift
WARNING: shift/reduce conflict for IF in state 56 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 56 resolved as shift
WARNING: shift/reduce conflict for VAR in state 56 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 56 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 56 resolved as shift
WARNING: shift/reduce conflict for USE in state 56 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 56 resolved as shift
WARNING: shift/reduce conflict for LSB in state 56 resolved as shift
WARNING: shift/reduce conflict for INT in state 56 resolved as shift
WARNING: shift/reduce conflict for STRING in state 56 resolved as shift
WARNING: shift/reduce conflict for RMB in state 78 resolved as shift
WARNING: shift/reduce conflict for PASS in state 78 resolved as shift
WARNING: shift/reduce conflict for IF in state 78 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 78 resolved as shift
WARNING: shift/reduce conflict for VAR in state 78 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 78 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 78 resolved as shift
WARNING: shift/reduce conflict for USE in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 78 resolved as shift
WARNING: shift/reduce conflict for LSB in state 78 resolved as shift
WARNING: shift/reduce conflict for INT in state 78 resolved as shift
WARNING: shift/reduce conflict for STRING in state 78 resolved as shift
WARNING: shift/reduce conflict for PASS in state 89 resolved as shift
WARNING: shift/reduce conflict for IF in state 89 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 89 resolved as shift
WARNING: shift/reduce conflict for VAR in state 89 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 89 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 89 resolved as shift
WARNING: shift/reduce conflict for USE in state 89 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 89 resolved as shift
WARNING: shift/reduce conflict for LSB in state 89 resolved as shift
WARNING: shift/reduce conflict for INT in state 89 resolved as shift
WARNING: shift/reduce conflict for STRING in state 89 resolved as shift
WARNING: shift/reduce conflict for PASS in state 90 resolved as shift
WARNING: shift/reduce conflict for IF in state 90 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 90 resolved as shift
WARNING: shift/reduce conflict for VAR in state 90 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 90 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 90 resolved as shift
WARNING: shift/reduce conflict for USE in state 90 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 90 resolved as shift
WARNING: shift/reduce conflict for LSB in state 90 resolved as shift
WARNING: shift/reduce conflict for INT in state 90 resolved as shift
WARNING: shift/reduce conflict for STRING in state 90 resolved as shift
WARNING: shift/reduce conflict for RMB in state 95 resolved as shift
WARNING: shift/reduce conflict for PASS in state 95 resolved as shift
WARNING: shift/reduce conflict for IF in state 95 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 95 resolved as shift
WARNING: shift/reduce conflict for VAR in state 95 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 95 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 95 resolved as shift
WARNING: shift/reduce conflict for USE in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for LSB in state 95 resolved as shift
WARNING: shift/reduce conflict for INT in state 95 resolved as shift
WARNING: shift/reduce conflict for STRING in state 95 resolved as shift
WARNING: shift/reduce conflict for RMB in state 96 resolved as shift
WARNING: shift/reduce conflict for PASS in state 96 resolved as shift
WARNING: shift/reduce conflict for IF in state 96 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 96 resolved as shift
WARNING: shift/reduce conflict for VAR in state 96 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 96 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 96 resolved as shift
WARNING: shift/reduce conflict for USE in state 96 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 96 resolved as shift
WARNING: shift/reduce conflict for LSB in state 96 resolved as shift
WARNING: shift/reduce conflict for INT in state 96 resolved as shift
WARNING: shift/reduce conflict for STRING in state 96 resolved as shift
WARNING: shift/reduce conflict for PASS in state 97 resolved as shift
WARNING: shift/reduce conflict for IF in state 97 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 97 resolved as shift
WARNING: shift/reduce conflict for VAR in state 97 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 97 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 97 resolved as shift
WARNING: shift/reduce conflict for USE in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for LSB in state 97 resolved as shift
WARNING: shift/reduce conflict for INT in state 97 resolved as shift
WARNING: shift/reduce conflict for STRING in state 97 resolved as shift
WARNING: shift/reduce conflict for PASS in state 99 resolved as shift
WARNING: shift/reduce conflict for IF in state 99 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 99 resolved as shift
WARNING: shift/reduce conflict for VAR in state 99 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 99 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 99 resolved as shift
WARNING: shift/reduce conflict for USE in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for LSB in state 99 resolved as shift
WARNING: shift/reduce conflict for INT in state 99 resolved as shift
WARNING: shift/reduce conflict for STRING in state 99 resolved as shift
WARNING: shift/reduce conflict for RMB in state 102 resolved as shift
WARNING: shift/reduce conflict for PASS in state 102 resolved as shift
WARNING: shift/reduce conflict for IF in state 102 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 102 resolved as shift
WARNING: shift/reduce conflict for VAR in state 102 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 102 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 102 resolved as shift
WARNING: shift/reduce conflict for USE in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for LSB in state 102 resolved as shift
WARNING: shift/reduce conflict for INT in state 102 resolved as shift
WARNING: shift/reduce conflict for STRING in state 102 resolved as shift
WARNING: shift/reduce conflict for RMB in state 103 resolved as shift
WARNING: shift/reduce conflict for PASS in state 103 resolved as shift
WARNING: shift/reduce conflict for IF in state 103 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 103 resolved as shift
WARNING: shift/reduce conflict for VAR in state 103 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 103 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 103 resolved as shift
WARNING: shift/reduce conflict for USE in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for LSB in state 103 resolved as shift
WARNING: shift/reduce conflict for INT in state 103 resolved as shift
WARNING: shift/reduce conflict for STRING in state 103 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (program -> root)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 20 resolved using rule (expression -> calculate)
WARNING: rejected rule (compare_expression -> calculate) in state 20
