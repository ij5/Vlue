Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CATCH
    CLASS
    COLON
    DEBUG
    DO
    DOT
    END
    FLOAT
    FOR
    GLOBAL
    IN
    LBB
    LIST
    PYTHON
    RBB
    REPEAT
    TRY
    USE

Grammar

Rule 0     S' -> program
Rule 1     program -> root
Rule 2     root -> root statement
Rule 3     root -> statement
Rule 4     statement -> if_statement
Rule 5     statement -> while_statement
Rule 6     statement -> variable_declaration SEMI
Rule 7     statement -> variable_value_change SEMI
Rule 8     statement -> function_declaration
Rule 9     statement -> empty
Rule 10    statement -> expression SEMI
Rule 11    expression -> calculate
Rule 12    expression -> string_calculate
Rule 13    expression -> compare_expression
Rule 14    expression -> function_call
Rule 15    variable_declaration -> VAR IDENTIFIER EQUAL expression
Rule 16    variable_value_change -> IDENTIFIER EQUAL expression
Rule 17    function_call -> IDENTIFIER LSB function_call_parameter RSB
Rule 18    function_call_parameter -> function_call_parameter COMMA calculate
Rule 19    function_call_parameter -> calculate
Rule 20    function_call_parameter -> empty
Rule 21    function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
Rule 22    function_parameter -> function_parameter COMMA IDENTIFIER
Rule 23    function_parameter -> IDENTIFIER
Rule 24    function_parameter -> empty
Rule 25    while_statement -> WHILE LSB compare_expression RSB LMB root RMB
Rule 26    if_statement -> IF LSB compare_expression RSB LMB root RMB
Rule 27    if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB root RMB
Rule 28    if_statement -> if_statement ELSE LMB root RMB
Rule 29    compare_expression -> compare_expression compare_operator calculate
Rule 30    compare_expression -> calculate
Rule 31    compare_operator -> LB
Rule 32    compare_operator -> RB
Rule 33    compare_operator -> LB EQUAL
Rule 34    compare_operator -> RB EQUAL
Rule 35    compare_operator -> EQUAL EQUAL
Rule 36    compare_operator -> NOTEQUAL EQUAL
Rule 37    string_calculate -> string_calculate stringoperator STRING
Rule 38    string_calculate -> STRING
Rule 39    stringoperator -> PLUS
Rule 40    calculate -> calculate PLUS calculate
Rule 41    calculate -> calculate MINUS calculate
Rule 42    calculate -> calculate MUL calculate
Rule 43    calculate -> calculate DIV calculate
Rule 44    calculate -> MINUS calculate
Rule 45    calculate -> LSB calculate RSB
Rule 46    calculate -> INT
Rule 47    calculate -> IDENTIFIER
Rule 48    empty -> <empty>

Terminals, with rules where they appear

CATCH                : 
CLASS                : 
COLON                : 
COMMA                : 18 22
DEBUG                : 
DIV                  : 43
DO                   : 
DOT                  : 
ELSE                 : 27 28
END                  : 
EQUAL                : 15 16 33 34 35 35 36
FLOAT                : 
FOR                  : 
FUNCTION             : 21
GLOBAL               : 
IDENTIFIER           : 15 16 17 21 22 23 47
IF                   : 26 27
IN                   : 
INT                  : 46
LB                   : 31 33
LBB                  : 
LIST                 : 
LMB                  : 21 25 26 27 28
LSB                  : 17 21 25 26 27 45
MINUS                : 41 44
MUL                  : 42
NOTEQUAL             : 36
PLUS                 : 39 40
PYTHON               : 
RB                   : 32 34
RBB                  : 
REPEAT               : 
RMB                  : 21 25 26 27 28
RSB                  : 17 21 25 26 27 45
SEMI                 : 6 7 10
STRING               : 37 38
TRY                  : 
USE                  : 
VAR                  : 15
WHILE                : 25
error                : 

Nonterminals, with rules where they appear

calculate            : 11 18 19 29 30 40 40 41 41 42 42 43 43 44 45
compare_expression   : 13 25 26 27 29
compare_operator     : 29
empty                : 9 20 24
expression           : 10 15 16
function_call        : 14
function_call_parameter : 17 18
function_declaration : 8
function_parameter   : 21 22
if_statement         : 4 27 28
program              : 0
root                 : 1 2 21 25 26 27 28
statement            : 2 3
string_calculate     : 12 37
stringoperator       : 37
variable_declaration : 6
variable_value_change : 7
while_statement      : 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . root
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) statement -> . expression SEMI
    (26) if_statement -> . IF LSB compare_expression RSB LMB root RMB
    (27) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE LMB root RMB
    (25) while_statement -> . WHILE LSB compare_expression RSB LMB root RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (21) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (48) empty -> .
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER
    (37) string_calculate -> . string_calculate stringoperator STRING
    (38) string_calculate -> . STRING
    (29) compare_expression -> . compare_expression compare_operator calculate
    (30) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    $end            reduce using rule 48 (empty -> .)
    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    STRING          shift and go to state 23

  ! IF              [ reduce using rule 48 (empty -> .) ]
  ! WHILE           [ reduce using rule 48 (empty -> .) ]
  ! VAR             [ reduce using rule 48 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 48 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 48 (empty -> .) ]
  ! MINUS           [ reduce using rule 48 (empty -> .) ]
  ! LSB             [ reduce using rule 48 (empty -> .) ]
  ! INT             [ reduce using rule 48 (empty -> .) ]
  ! STRING          [ reduce using rule 48 (empty -> .) ]

    program                        shift and go to state 1
    root                           shift and go to state 2
    statement                      shift and go to state 3
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    expression                     shift and go to state 10
    compare_expression             shift and go to state 13
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    function_call                  shift and go to state 20

state 1

    (0) S' -> program .



state 2

    (1) program -> root .
    (2) root -> root . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) statement -> . expression SEMI
    (26) if_statement -> . IF LSB compare_expression RSB LMB root RMB
    (27) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE LMB root RMB
    (25) while_statement -> . WHILE LSB compare_expression RSB LMB root RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (21) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (48) empty -> .
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER
    (37) string_calculate -> . string_calculate stringoperator STRING
    (38) string_calculate -> . STRING
    (29) compare_expression -> . compare_expression compare_operator calculate
    (30) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (program -> root .)
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    $end            reduce using rule 1 (program -> root .)
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    STRING          shift and go to state 23

  ! IF              [ reduce using rule 48 (empty -> .) ]
  ! WHILE           [ reduce using rule 48 (empty -> .) ]
  ! VAR             [ reduce using rule 48 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 48 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 48 (empty -> .) ]
  ! MINUS           [ reduce using rule 48 (empty -> .) ]
  ! LSB             [ reduce using rule 48 (empty -> .) ]
  ! INT             [ reduce using rule 48 (empty -> .) ]
  ! STRING          [ reduce using rule 48 (empty -> .) ]
  ! $end            [ reduce using rule 48 (empty -> .) ]

    statement                      shift and go to state 24
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    expression                     shift and go to state 10
    compare_expression             shift and go to state 13
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    function_call                  shift and go to state 20

state 3

    (3) root -> statement .

    IF              reduce using rule 3 (root -> statement .)
    WHILE           reduce using rule 3 (root -> statement .)
    VAR             reduce using rule 3 (root -> statement .)
    IDENTIFIER      reduce using rule 3 (root -> statement .)
    FUNCTION        reduce using rule 3 (root -> statement .)
    MINUS           reduce using rule 3 (root -> statement .)
    LSB             reduce using rule 3 (root -> statement .)
    INT             reduce using rule 3 (root -> statement .)
    STRING          reduce using rule 3 (root -> statement .)
    $end            reduce using rule 3 (root -> statement .)
    RMB             reduce using rule 3 (root -> statement .)


state 4

    (4) statement -> if_statement .
    (27) if_statement -> if_statement . ELSE IF LSB compare_expression RSB LMB root RMB
    (28) if_statement -> if_statement . ELSE LMB root RMB

    IF              reduce using rule 4 (statement -> if_statement .)
    WHILE           reduce using rule 4 (statement -> if_statement .)
    VAR             reduce using rule 4 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 4 (statement -> if_statement .)
    FUNCTION        reduce using rule 4 (statement -> if_statement .)
    MINUS           reduce using rule 4 (statement -> if_statement .)
    LSB             reduce using rule 4 (statement -> if_statement .)
    INT             reduce using rule 4 (statement -> if_statement .)
    STRING          reduce using rule 4 (statement -> if_statement .)
    $end            reduce using rule 4 (statement -> if_statement .)
    RMB             reduce using rule 4 (statement -> if_statement .)
    ELSE            shift and go to state 25


state 5

    (5) statement -> while_statement .

    IF              reduce using rule 5 (statement -> while_statement .)
    WHILE           reduce using rule 5 (statement -> while_statement .)
    VAR             reduce using rule 5 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 5 (statement -> while_statement .)
    FUNCTION        reduce using rule 5 (statement -> while_statement .)
    MINUS           reduce using rule 5 (statement -> while_statement .)
    LSB             reduce using rule 5 (statement -> while_statement .)
    INT             reduce using rule 5 (statement -> while_statement .)
    STRING          reduce using rule 5 (statement -> while_statement .)
    $end            reduce using rule 5 (statement -> while_statement .)
    RMB             reduce using rule 5 (statement -> while_statement .)


state 6

    (6) statement -> variable_declaration . SEMI

    SEMI            shift and go to state 26


state 7

    (7) statement -> variable_value_change . SEMI

    SEMI            shift and go to state 27


state 8

    (8) statement -> function_declaration .

    IF              reduce using rule 8 (statement -> function_declaration .)
    WHILE           reduce using rule 8 (statement -> function_declaration .)
    VAR             reduce using rule 8 (statement -> function_declaration .)
    IDENTIFIER      reduce using rule 8 (statement -> function_declaration .)
    FUNCTION        reduce using rule 8 (statement -> function_declaration .)
    MINUS           reduce using rule 8 (statement -> function_declaration .)
    LSB             reduce using rule 8 (statement -> function_declaration .)
    INT             reduce using rule 8 (statement -> function_declaration .)
    STRING          reduce using rule 8 (statement -> function_declaration .)
    $end            reduce using rule 8 (statement -> function_declaration .)
    RMB             reduce using rule 8 (statement -> function_declaration .)


state 9

    (9) statement -> empty .

    IF              reduce using rule 9 (statement -> empty .)
    WHILE           reduce using rule 9 (statement -> empty .)
    VAR             reduce using rule 9 (statement -> empty .)
    IDENTIFIER      reduce using rule 9 (statement -> empty .)
    FUNCTION        reduce using rule 9 (statement -> empty .)
    MINUS           reduce using rule 9 (statement -> empty .)
    LSB             reduce using rule 9 (statement -> empty .)
    INT             reduce using rule 9 (statement -> empty .)
    STRING          reduce using rule 9 (statement -> empty .)
    $end            reduce using rule 9 (statement -> empty .)
    RMB             reduce using rule 9 (statement -> empty .)


state 10

    (10) statement -> expression . SEMI

    SEMI            shift and go to state 28


state 11

    (26) if_statement -> IF . LSB compare_expression RSB LMB root RMB

    LSB             shift and go to state 29


state 12

    (45) calculate -> LSB . calculate RSB
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER

    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    IDENTIFIER      shift and go to state 31

    calculate                      shift and go to state 30

state 13

    (13) expression -> compare_expression .
    (29) compare_expression -> compare_expression . compare_operator calculate
    (31) compare_operator -> . LB
    (32) compare_operator -> . RB
    (33) compare_operator -> . LB EQUAL
    (34) compare_operator -> . RB EQUAL
    (35) compare_operator -> . EQUAL EQUAL
    (36) compare_operator -> . NOTEQUAL EQUAL

    SEMI            reduce using rule 13 (expression -> compare_expression .)
    LB              shift and go to state 33
    RB              shift and go to state 34
    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36

    compare_operator               shift and go to state 32

state 14

    (25) while_statement -> WHILE . LSB compare_expression RSB LMB root RMB

    LSB             shift and go to state 37


state 15

    (15) variable_declaration -> VAR . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 38


state 16

    (16) variable_value_change -> IDENTIFIER . EQUAL expression
    (47) calculate -> IDENTIFIER .
    (17) function_call -> IDENTIFIER . LSB function_call_parameter RSB

  ! shift/reduce conflict for EQUAL resolved as shift
    EQUAL           shift and go to state 39
    PLUS            reduce using rule 47 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 47 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 47 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 47 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 47 (calculate -> IDENTIFIER .)
    LB              reduce using rule 47 (calculate -> IDENTIFIER .)
    RB              reduce using rule 47 (calculate -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 47 (calculate -> IDENTIFIER .)
    LSB             shift and go to state 40

  ! EQUAL           [ reduce using rule 47 (calculate -> IDENTIFIER .) ]


state 17

    (21) function_declaration -> FUNCTION . IDENTIFIER LSB function_parameter RSB LMB root RMB

    IDENTIFIER      shift and go to state 41


state 18

    (11) expression -> calculate .
    (40) calculate -> calculate . PLUS calculate
    (41) calculate -> calculate . MINUS calculate
    (42) calculate -> calculate . MUL calculate
    (43) calculate -> calculate . DIV calculate
    (30) compare_expression -> calculate .

  ! reduce/reduce conflict for SEMI resolved using rule 11 (expression -> calculate .)
    SEMI            reduce using rule 11 (expression -> calculate .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIV             shift and go to state 45
    LB              reduce using rule 30 (compare_expression -> calculate .)
    RB              reduce using rule 30 (compare_expression -> calculate .)
    EQUAL           reduce using rule 30 (compare_expression -> calculate .)
    NOTEQUAL        reduce using rule 30 (compare_expression -> calculate .)

  ! SEMI            [ reduce using rule 30 (compare_expression -> calculate .) ]


state 19

    (12) expression -> string_calculate .
    (37) string_calculate -> string_calculate . stringoperator STRING
    (39) stringoperator -> . PLUS

    SEMI            reduce using rule 12 (expression -> string_calculate .)
    PLUS            shift and go to state 47

    stringoperator                 shift and go to state 46

state 20

    (14) expression -> function_call .

    SEMI            reduce using rule 14 (expression -> function_call .)


state 21

    (44) calculate -> MINUS . calculate
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER

    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    IDENTIFIER      shift and go to state 31

    calculate                      shift and go to state 48

state 22

    (46) calculate -> INT .

    PLUS            reduce using rule 46 (calculate -> INT .)
    MINUS           reduce using rule 46 (calculate -> INT .)
    MUL             reduce using rule 46 (calculate -> INT .)
    DIV             reduce using rule 46 (calculate -> INT .)
    SEMI            reduce using rule 46 (calculate -> INT .)
    LB              reduce using rule 46 (calculate -> INT .)
    RB              reduce using rule 46 (calculate -> INT .)
    EQUAL           reduce using rule 46 (calculate -> INT .)
    NOTEQUAL        reduce using rule 46 (calculate -> INT .)
    RSB             reduce using rule 46 (calculate -> INT .)
    COMMA           reduce using rule 46 (calculate -> INT .)


state 23

    (38) string_calculate -> STRING .

    PLUS            reduce using rule 38 (string_calculate -> STRING .)
    SEMI            reduce using rule 38 (string_calculate -> STRING .)


state 24

    (2) root -> root statement .

    IF              reduce using rule 2 (root -> root statement .)
    WHILE           reduce using rule 2 (root -> root statement .)
    VAR             reduce using rule 2 (root -> root statement .)
    IDENTIFIER      reduce using rule 2 (root -> root statement .)
    FUNCTION        reduce using rule 2 (root -> root statement .)
    MINUS           reduce using rule 2 (root -> root statement .)
    LSB             reduce using rule 2 (root -> root statement .)
    INT             reduce using rule 2 (root -> root statement .)
    STRING          reduce using rule 2 (root -> root statement .)
    $end            reduce using rule 2 (root -> root statement .)
    RMB             reduce using rule 2 (root -> root statement .)


state 25

    (27) if_statement -> if_statement ELSE . IF LSB compare_expression RSB LMB root RMB
    (28) if_statement -> if_statement ELSE . LMB root RMB

    IF              shift and go to state 49
    LMB             shift and go to state 50


state 26

    (6) statement -> variable_declaration SEMI .

    IF              reduce using rule 6 (statement -> variable_declaration SEMI .)
    WHILE           reduce using rule 6 (statement -> variable_declaration SEMI .)
    VAR             reduce using rule 6 (statement -> variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 6 (statement -> variable_declaration SEMI .)
    FUNCTION        reduce using rule 6 (statement -> variable_declaration SEMI .)
    MINUS           reduce using rule 6 (statement -> variable_declaration SEMI .)
    LSB             reduce using rule 6 (statement -> variable_declaration SEMI .)
    INT             reduce using rule 6 (statement -> variable_declaration SEMI .)
    STRING          reduce using rule 6 (statement -> variable_declaration SEMI .)
    $end            reduce using rule 6 (statement -> variable_declaration SEMI .)
    RMB             reduce using rule 6 (statement -> variable_declaration SEMI .)


state 27

    (7) statement -> variable_value_change SEMI .

    IF              reduce using rule 7 (statement -> variable_value_change SEMI .)
    WHILE           reduce using rule 7 (statement -> variable_value_change SEMI .)
    VAR             reduce using rule 7 (statement -> variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 7 (statement -> variable_value_change SEMI .)
    FUNCTION        reduce using rule 7 (statement -> variable_value_change SEMI .)
    MINUS           reduce using rule 7 (statement -> variable_value_change SEMI .)
    LSB             reduce using rule 7 (statement -> variable_value_change SEMI .)
    INT             reduce using rule 7 (statement -> variable_value_change SEMI .)
    STRING          reduce using rule 7 (statement -> variable_value_change SEMI .)
    $end            reduce using rule 7 (statement -> variable_value_change SEMI .)
    RMB             reduce using rule 7 (statement -> variable_value_change SEMI .)


state 28

    (10) statement -> expression SEMI .

    IF              reduce using rule 10 (statement -> expression SEMI .)
    WHILE           reduce using rule 10 (statement -> expression SEMI .)
    VAR             reduce using rule 10 (statement -> expression SEMI .)
    IDENTIFIER      reduce using rule 10 (statement -> expression SEMI .)
    FUNCTION        reduce using rule 10 (statement -> expression SEMI .)
    MINUS           reduce using rule 10 (statement -> expression SEMI .)
    LSB             reduce using rule 10 (statement -> expression SEMI .)
    INT             reduce using rule 10 (statement -> expression SEMI .)
    STRING          reduce using rule 10 (statement -> expression SEMI .)
    $end            reduce using rule 10 (statement -> expression SEMI .)
    RMB             reduce using rule 10 (statement -> expression SEMI .)


state 29

    (26) if_statement -> IF LSB . compare_expression RSB LMB root RMB
    (29) compare_expression -> . compare_expression compare_operator calculate
    (30) compare_expression -> . calculate
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER

    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    IDENTIFIER      shift and go to state 31

    compare_expression             shift and go to state 51
    calculate                      shift and go to state 52

state 30

    (45) calculate -> LSB calculate . RSB
    (40) calculate -> calculate . PLUS calculate
    (41) calculate -> calculate . MINUS calculate
    (42) calculate -> calculate . MUL calculate
    (43) calculate -> calculate . DIV calculate

    RSB             shift and go to state 53
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIV             shift and go to state 45


state 31

    (47) calculate -> IDENTIFIER .

    RSB             reduce using rule 47 (calculate -> IDENTIFIER .)
    PLUS            reduce using rule 47 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 47 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 47 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 47 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 47 (calculate -> IDENTIFIER .)
    LB              reduce using rule 47 (calculate -> IDENTIFIER .)
    RB              reduce using rule 47 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 47 (calculate -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 47 (calculate -> IDENTIFIER .)
    COMMA           reduce using rule 47 (calculate -> IDENTIFIER .)


state 32

    (29) compare_expression -> compare_expression compare_operator . calculate
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER

    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    IDENTIFIER      shift and go to state 31

    calculate                      shift and go to state 54

state 33

    (31) compare_operator -> LB .
    (33) compare_operator -> LB . EQUAL

    MINUS           reduce using rule 31 (compare_operator -> LB .)
    LSB             reduce using rule 31 (compare_operator -> LB .)
    INT             reduce using rule 31 (compare_operator -> LB .)
    IDENTIFIER      reduce using rule 31 (compare_operator -> LB .)
    EQUAL           shift and go to state 55


state 34

    (32) compare_operator -> RB .
    (34) compare_operator -> RB . EQUAL

    MINUS           reduce using rule 32 (compare_operator -> RB .)
    LSB             reduce using rule 32 (compare_operator -> RB .)
    INT             reduce using rule 32 (compare_operator -> RB .)
    IDENTIFIER      reduce using rule 32 (compare_operator -> RB .)
    EQUAL           shift and go to state 56


state 35

    (35) compare_operator -> EQUAL . EQUAL

    EQUAL           shift and go to state 57


state 36

    (36) compare_operator -> NOTEQUAL . EQUAL

    EQUAL           shift and go to state 58


state 37

    (25) while_statement -> WHILE LSB . compare_expression RSB LMB root RMB
    (29) compare_expression -> . compare_expression compare_operator calculate
    (30) compare_expression -> . calculate
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER

    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    IDENTIFIER      shift and go to state 31

    compare_expression             shift and go to state 59
    calculate                      shift and go to state 52

state 38

    (15) variable_declaration -> VAR IDENTIFIER . EQUAL expression

    EQUAL           shift and go to state 60


state 39

    (16) variable_value_change -> IDENTIFIER EQUAL . expression
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER
    (37) string_calculate -> . string_calculate stringoperator STRING
    (38) string_calculate -> . STRING
    (29) compare_expression -> . compare_expression compare_operator calculate
    (30) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_call_parameter RSB

    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    IDENTIFIER      shift and go to state 61
    STRING          shift and go to state 23

    expression                     shift and go to state 62
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 13
    function_call                  shift and go to state 20

state 40

    (17) function_call -> IDENTIFIER LSB . function_call_parameter RSB
    (18) function_call_parameter -> . function_call_parameter COMMA calculate
    (19) function_call_parameter -> . calculate
    (20) function_call_parameter -> . empty
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER
    (48) empty -> .

    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    IDENTIFIER      shift and go to state 31
    RSB             reduce using rule 48 (empty -> .)
    COMMA           reduce using rule 48 (empty -> .)

    function_call_parameter        shift and go to state 63
    calculate                      shift and go to state 64
    empty                          shift and go to state 65

state 41

    (21) function_declaration -> FUNCTION IDENTIFIER . LSB function_parameter RSB LMB root RMB

    LSB             shift and go to state 66


state 42

    (40) calculate -> calculate PLUS . calculate
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER

    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    IDENTIFIER      shift and go to state 31

    calculate                      shift and go to state 67

state 43

    (41) calculate -> calculate MINUS . calculate
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER

    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    IDENTIFIER      shift and go to state 31

    calculate                      shift and go to state 68

state 44

    (42) calculate -> calculate MUL . calculate
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER

    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    IDENTIFIER      shift and go to state 31

    calculate                      shift and go to state 69

state 45

    (43) calculate -> calculate DIV . calculate
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER

    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    IDENTIFIER      shift and go to state 31

    calculate                      shift and go to state 70

state 46

    (37) string_calculate -> string_calculate stringoperator . STRING

    STRING          shift and go to state 71


state 47

    (39) stringoperator -> PLUS .

    STRING          reduce using rule 39 (stringoperator -> PLUS .)


state 48

    (44) calculate -> MINUS calculate .
    (40) calculate -> calculate . PLUS calculate
    (41) calculate -> calculate . MINUS calculate
    (42) calculate -> calculate . MUL calculate
    (43) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 44 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 44 (calculate -> MINUS calculate .)
    MUL             reduce using rule 44 (calculate -> MINUS calculate .)
    DIV             reduce using rule 44 (calculate -> MINUS calculate .)
    SEMI            reduce using rule 44 (calculate -> MINUS calculate .)
    LB              reduce using rule 44 (calculate -> MINUS calculate .)
    RB              reduce using rule 44 (calculate -> MINUS calculate .)
    EQUAL           reduce using rule 44 (calculate -> MINUS calculate .)
    NOTEQUAL        reduce using rule 44 (calculate -> MINUS calculate .)
    RSB             reduce using rule 44 (calculate -> MINUS calculate .)
    COMMA           reduce using rule 44 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MUL             [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 45 ]


state 49

    (27) if_statement -> if_statement ELSE IF . LSB compare_expression RSB LMB root RMB

    LSB             shift and go to state 72


state 50

    (28) if_statement -> if_statement ELSE LMB . root RMB
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) statement -> . expression SEMI
    (26) if_statement -> . IF LSB compare_expression RSB LMB root RMB
    (27) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE LMB root RMB
    (25) while_statement -> . WHILE LSB compare_expression RSB LMB root RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (21) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (48) empty -> .
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER
    (37) string_calculate -> . string_calculate stringoperator STRING
    (38) string_calculate -> . STRING
    (29) compare_expression -> . compare_expression compare_operator calculate
    (30) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    RMB             reduce using rule 48 (empty -> .)
    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    STRING          shift and go to state 23

  ! IF              [ reduce using rule 48 (empty -> .) ]
  ! WHILE           [ reduce using rule 48 (empty -> .) ]
  ! VAR             [ reduce using rule 48 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 48 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 48 (empty -> .) ]
  ! MINUS           [ reduce using rule 48 (empty -> .) ]
  ! LSB             [ reduce using rule 48 (empty -> .) ]
  ! INT             [ reduce using rule 48 (empty -> .) ]
  ! STRING          [ reduce using rule 48 (empty -> .) ]

    if_statement                   shift and go to state 4
    root                           shift and go to state 73
    statement                      shift and go to state 3
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    expression                     shift and go to state 10
    compare_expression             shift and go to state 13
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    function_call                  shift and go to state 20

state 51

    (26) if_statement -> IF LSB compare_expression . RSB LMB root RMB
    (29) compare_expression -> compare_expression . compare_operator calculate
    (31) compare_operator -> . LB
    (32) compare_operator -> . RB
    (33) compare_operator -> . LB EQUAL
    (34) compare_operator -> . RB EQUAL
    (35) compare_operator -> . EQUAL EQUAL
    (36) compare_operator -> . NOTEQUAL EQUAL

    RSB             shift and go to state 74
    LB              shift and go to state 33
    RB              shift and go to state 34
    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36

    compare_operator               shift and go to state 32

state 52

    (30) compare_expression -> calculate .
    (40) calculate -> calculate . PLUS calculate
    (41) calculate -> calculate . MINUS calculate
    (42) calculate -> calculate . MUL calculate
    (43) calculate -> calculate . DIV calculate

    RSB             reduce using rule 30 (compare_expression -> calculate .)
    LB              reduce using rule 30 (compare_expression -> calculate .)
    RB              reduce using rule 30 (compare_expression -> calculate .)
    EQUAL           reduce using rule 30 (compare_expression -> calculate .)
    NOTEQUAL        reduce using rule 30 (compare_expression -> calculate .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIV             shift and go to state 45


state 53

    (45) calculate -> LSB calculate RSB .

    PLUS            reduce using rule 45 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 45 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 45 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 45 (calculate -> LSB calculate RSB .)
    SEMI            reduce using rule 45 (calculate -> LSB calculate RSB .)
    LB              reduce using rule 45 (calculate -> LSB calculate RSB .)
    RB              reduce using rule 45 (calculate -> LSB calculate RSB .)
    EQUAL           reduce using rule 45 (calculate -> LSB calculate RSB .)
    NOTEQUAL        reduce using rule 45 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 45 (calculate -> LSB calculate RSB .)
    COMMA           reduce using rule 45 (calculate -> LSB calculate RSB .)


state 54

    (29) compare_expression -> compare_expression compare_operator calculate .
    (40) calculate -> calculate . PLUS calculate
    (41) calculate -> calculate . MINUS calculate
    (42) calculate -> calculate . MUL calculate
    (43) calculate -> calculate . DIV calculate

    LB              reduce using rule 29 (compare_expression -> compare_expression compare_operator calculate .)
    RB              reduce using rule 29 (compare_expression -> compare_expression compare_operator calculate .)
    EQUAL           reduce using rule 29 (compare_expression -> compare_expression compare_operator calculate .)
    NOTEQUAL        reduce using rule 29 (compare_expression -> compare_expression compare_operator calculate .)
    SEMI            reduce using rule 29 (compare_expression -> compare_expression compare_operator calculate .)
    RSB             reduce using rule 29 (compare_expression -> compare_expression compare_operator calculate .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIV             shift and go to state 45


state 55

    (33) compare_operator -> LB EQUAL .

    MINUS           reduce using rule 33 (compare_operator -> LB EQUAL .)
    LSB             reduce using rule 33 (compare_operator -> LB EQUAL .)
    INT             reduce using rule 33 (compare_operator -> LB EQUAL .)
    IDENTIFIER      reduce using rule 33 (compare_operator -> LB EQUAL .)


state 56

    (34) compare_operator -> RB EQUAL .

    MINUS           reduce using rule 34 (compare_operator -> RB EQUAL .)
    LSB             reduce using rule 34 (compare_operator -> RB EQUAL .)
    INT             reduce using rule 34 (compare_operator -> RB EQUAL .)
    IDENTIFIER      reduce using rule 34 (compare_operator -> RB EQUAL .)


state 57

    (35) compare_operator -> EQUAL EQUAL .

    MINUS           reduce using rule 35 (compare_operator -> EQUAL EQUAL .)
    LSB             reduce using rule 35 (compare_operator -> EQUAL EQUAL .)
    INT             reduce using rule 35 (compare_operator -> EQUAL EQUAL .)
    IDENTIFIER      reduce using rule 35 (compare_operator -> EQUAL EQUAL .)


state 58

    (36) compare_operator -> NOTEQUAL EQUAL .

    MINUS           reduce using rule 36 (compare_operator -> NOTEQUAL EQUAL .)
    LSB             reduce using rule 36 (compare_operator -> NOTEQUAL EQUAL .)
    INT             reduce using rule 36 (compare_operator -> NOTEQUAL EQUAL .)
    IDENTIFIER      reduce using rule 36 (compare_operator -> NOTEQUAL EQUAL .)


state 59

    (25) while_statement -> WHILE LSB compare_expression . RSB LMB root RMB
    (29) compare_expression -> compare_expression . compare_operator calculate
    (31) compare_operator -> . LB
    (32) compare_operator -> . RB
    (33) compare_operator -> . LB EQUAL
    (34) compare_operator -> . RB EQUAL
    (35) compare_operator -> . EQUAL EQUAL
    (36) compare_operator -> . NOTEQUAL EQUAL

    RSB             shift and go to state 75
    LB              shift and go to state 33
    RB              shift and go to state 34
    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36

    compare_operator               shift and go to state 32

state 60

    (15) variable_declaration -> VAR IDENTIFIER EQUAL . expression
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER
    (37) string_calculate -> . string_calculate stringoperator STRING
    (38) string_calculate -> . STRING
    (29) compare_expression -> . compare_expression compare_operator calculate
    (30) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_call_parameter RSB

    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    IDENTIFIER      shift and go to state 61
    STRING          shift and go to state 23

    expression                     shift and go to state 76
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 13
    function_call                  shift and go to state 20

state 61

    (47) calculate -> IDENTIFIER .
    (17) function_call -> IDENTIFIER . LSB function_call_parameter RSB

    PLUS            reduce using rule 47 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 47 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 47 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 47 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 47 (calculate -> IDENTIFIER .)
    LB              reduce using rule 47 (calculate -> IDENTIFIER .)
    RB              reduce using rule 47 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 47 (calculate -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 47 (calculate -> IDENTIFIER .)
    LSB             shift and go to state 40


state 62

    (16) variable_value_change -> IDENTIFIER EQUAL expression .

    SEMI            reduce using rule 16 (variable_value_change -> IDENTIFIER EQUAL expression .)


state 63

    (17) function_call -> IDENTIFIER LSB function_call_parameter . RSB
    (18) function_call_parameter -> function_call_parameter . COMMA calculate

    RSB             shift and go to state 77
    COMMA           shift and go to state 78


state 64

    (19) function_call_parameter -> calculate .
    (40) calculate -> calculate . PLUS calculate
    (41) calculate -> calculate . MINUS calculate
    (42) calculate -> calculate . MUL calculate
    (43) calculate -> calculate . DIV calculate

    RSB             reduce using rule 19 (function_call_parameter -> calculate .)
    COMMA           reduce using rule 19 (function_call_parameter -> calculate .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIV             shift and go to state 45


state 65

    (20) function_call_parameter -> empty .

    RSB             reduce using rule 20 (function_call_parameter -> empty .)
    COMMA           reduce using rule 20 (function_call_parameter -> empty .)


state 66

    (21) function_declaration -> FUNCTION IDENTIFIER LSB . function_parameter RSB LMB root RMB
    (22) function_parameter -> . function_parameter COMMA IDENTIFIER
    (23) function_parameter -> . IDENTIFIER
    (24) function_parameter -> . empty
    (48) empty -> .

    IDENTIFIER      shift and go to state 79
    RSB             reduce using rule 48 (empty -> .)
    COMMA           reduce using rule 48 (empty -> .)

    function_parameter             shift and go to state 80
    empty                          shift and go to state 81

state 67

    (40) calculate -> calculate PLUS calculate .
    (40) calculate -> calculate . PLUS calculate
    (41) calculate -> calculate . MINUS calculate
    (42) calculate -> calculate . MUL calculate
    (43) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 40 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 40 (calculate -> calculate PLUS calculate .)
    SEMI            reduce using rule 40 (calculate -> calculate PLUS calculate .)
    LB              reduce using rule 40 (calculate -> calculate PLUS calculate .)
    RB              reduce using rule 40 (calculate -> calculate PLUS calculate .)
    EQUAL           reduce using rule 40 (calculate -> calculate PLUS calculate .)
    NOTEQUAL        reduce using rule 40 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 40 (calculate -> calculate PLUS calculate .)
    COMMA           reduce using rule 40 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 44
    DIV             shift and go to state 45

  ! MUL             [ reduce using rule 40 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 40 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]


state 68

    (41) calculate -> calculate MINUS calculate .
    (40) calculate -> calculate . PLUS calculate
    (41) calculate -> calculate . MINUS calculate
    (42) calculate -> calculate . MUL calculate
    (43) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 41 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 41 (calculate -> calculate MINUS calculate .)
    SEMI            reduce using rule 41 (calculate -> calculate MINUS calculate .)
    LB              reduce using rule 41 (calculate -> calculate MINUS calculate .)
    RB              reduce using rule 41 (calculate -> calculate MINUS calculate .)
    EQUAL           reduce using rule 41 (calculate -> calculate MINUS calculate .)
    NOTEQUAL        reduce using rule 41 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 41 (calculate -> calculate MINUS calculate .)
    COMMA           reduce using rule 41 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 44
    DIV             shift and go to state 45

  ! MUL             [ reduce using rule 41 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 41 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]


state 69

    (42) calculate -> calculate MUL calculate .
    (40) calculate -> calculate . PLUS calculate
    (41) calculate -> calculate . MINUS calculate
    (42) calculate -> calculate . MUL calculate
    (43) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 42 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 42 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 42 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 42 (calculate -> calculate MUL calculate .)
    SEMI            reduce using rule 42 (calculate -> calculate MUL calculate .)
    LB              reduce using rule 42 (calculate -> calculate MUL calculate .)
    RB              reduce using rule 42 (calculate -> calculate MUL calculate .)
    EQUAL           reduce using rule 42 (calculate -> calculate MUL calculate .)
    NOTEQUAL        reduce using rule 42 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 42 (calculate -> calculate MUL calculate .)
    COMMA           reduce using rule 42 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MUL             [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 45 ]


state 70

    (43) calculate -> calculate DIV calculate .
    (40) calculate -> calculate . PLUS calculate
    (41) calculate -> calculate . MINUS calculate
    (42) calculate -> calculate . MUL calculate
    (43) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 43 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 43 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 43 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 43 (calculate -> calculate DIV calculate .)
    SEMI            reduce using rule 43 (calculate -> calculate DIV calculate .)
    LB              reduce using rule 43 (calculate -> calculate DIV calculate .)
    RB              reduce using rule 43 (calculate -> calculate DIV calculate .)
    EQUAL           reduce using rule 43 (calculate -> calculate DIV calculate .)
    NOTEQUAL        reduce using rule 43 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 43 (calculate -> calculate DIV calculate .)
    COMMA           reduce using rule 43 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MUL             [ shift and go to state 44 ]
  ! DIV             [ shift and go to state 45 ]


state 71

    (37) string_calculate -> string_calculate stringoperator STRING .

    PLUS            reduce using rule 37 (string_calculate -> string_calculate stringoperator STRING .)
    SEMI            reduce using rule 37 (string_calculate -> string_calculate stringoperator STRING .)


state 72

    (27) if_statement -> if_statement ELSE IF LSB . compare_expression RSB LMB root RMB
    (29) compare_expression -> . compare_expression compare_operator calculate
    (30) compare_expression -> . calculate
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER

    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    IDENTIFIER      shift and go to state 31

    compare_expression             shift and go to state 82
    calculate                      shift and go to state 52

state 73

    (28) if_statement -> if_statement ELSE LMB root . RMB
    (2) root -> root . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) statement -> . expression SEMI
    (26) if_statement -> . IF LSB compare_expression RSB LMB root RMB
    (27) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE LMB root RMB
    (25) while_statement -> . WHILE LSB compare_expression RSB LMB root RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (21) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (48) empty -> .
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER
    (37) string_calculate -> . string_calculate stringoperator STRING
    (38) string_calculate -> . STRING
    (29) compare_expression -> . compare_expression compare_operator calculate
    (30) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for RMB resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    RMB             shift and go to state 83
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    STRING          shift and go to state 23

  ! RMB             [ reduce using rule 48 (empty -> .) ]
  ! IF              [ reduce using rule 48 (empty -> .) ]
  ! WHILE           [ reduce using rule 48 (empty -> .) ]
  ! VAR             [ reduce using rule 48 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 48 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 48 (empty -> .) ]
  ! MINUS           [ reduce using rule 48 (empty -> .) ]
  ! LSB             [ reduce using rule 48 (empty -> .) ]
  ! INT             [ reduce using rule 48 (empty -> .) ]
  ! STRING          [ reduce using rule 48 (empty -> .) ]

    if_statement                   shift and go to state 4
    statement                      shift and go to state 24
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    expression                     shift and go to state 10
    compare_expression             shift and go to state 13
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    function_call                  shift and go to state 20

state 74

    (26) if_statement -> IF LSB compare_expression RSB . LMB root RMB

    LMB             shift and go to state 84


state 75

    (25) while_statement -> WHILE LSB compare_expression RSB . LMB root RMB

    LMB             shift and go to state 85


state 76

    (15) variable_declaration -> VAR IDENTIFIER EQUAL expression .

    SEMI            reduce using rule 15 (variable_declaration -> VAR IDENTIFIER EQUAL expression .)


state 77

    (17) function_call -> IDENTIFIER LSB function_call_parameter RSB .

    SEMI            reduce using rule 17 (function_call -> IDENTIFIER LSB function_call_parameter RSB .)


state 78

    (18) function_call_parameter -> function_call_parameter COMMA . calculate
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER

    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    IDENTIFIER      shift and go to state 31

    calculate                      shift and go to state 86

state 79

    (23) function_parameter -> IDENTIFIER .

    RSB             reduce using rule 23 (function_parameter -> IDENTIFIER .)
    COMMA           reduce using rule 23 (function_parameter -> IDENTIFIER .)


state 80

    (21) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter . RSB LMB root RMB
    (22) function_parameter -> function_parameter . COMMA IDENTIFIER

    RSB             shift and go to state 87
    COMMA           shift and go to state 88


state 81

    (24) function_parameter -> empty .

    RSB             reduce using rule 24 (function_parameter -> empty .)
    COMMA           reduce using rule 24 (function_parameter -> empty .)


state 82

    (27) if_statement -> if_statement ELSE IF LSB compare_expression . RSB LMB root RMB
    (29) compare_expression -> compare_expression . compare_operator calculate
    (31) compare_operator -> . LB
    (32) compare_operator -> . RB
    (33) compare_operator -> . LB EQUAL
    (34) compare_operator -> . RB EQUAL
    (35) compare_operator -> . EQUAL EQUAL
    (36) compare_operator -> . NOTEQUAL EQUAL

    RSB             shift and go to state 89
    LB              shift and go to state 33
    RB              shift and go to state 34
    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36

    compare_operator               shift and go to state 32

state 83

    (28) if_statement -> if_statement ELSE LMB root RMB .

    ELSE            reduce using rule 28 (if_statement -> if_statement ELSE LMB root RMB .)
    IF              reduce using rule 28 (if_statement -> if_statement ELSE LMB root RMB .)
    WHILE           reduce using rule 28 (if_statement -> if_statement ELSE LMB root RMB .)
    VAR             reduce using rule 28 (if_statement -> if_statement ELSE LMB root RMB .)
    IDENTIFIER      reduce using rule 28 (if_statement -> if_statement ELSE LMB root RMB .)
    FUNCTION        reduce using rule 28 (if_statement -> if_statement ELSE LMB root RMB .)
    MINUS           reduce using rule 28 (if_statement -> if_statement ELSE LMB root RMB .)
    LSB             reduce using rule 28 (if_statement -> if_statement ELSE LMB root RMB .)
    INT             reduce using rule 28 (if_statement -> if_statement ELSE LMB root RMB .)
    STRING          reduce using rule 28 (if_statement -> if_statement ELSE LMB root RMB .)
    $end            reduce using rule 28 (if_statement -> if_statement ELSE LMB root RMB .)
    RMB             reduce using rule 28 (if_statement -> if_statement ELSE LMB root RMB .)


state 84

    (26) if_statement -> IF LSB compare_expression RSB LMB . root RMB
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) statement -> . expression SEMI
    (26) if_statement -> . IF LSB compare_expression RSB LMB root RMB
    (27) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE LMB root RMB
    (25) while_statement -> . WHILE LSB compare_expression RSB LMB root RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (21) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (48) empty -> .
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER
    (37) string_calculate -> . string_calculate stringoperator STRING
    (38) string_calculate -> . STRING
    (29) compare_expression -> . compare_expression compare_operator calculate
    (30) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    RMB             reduce using rule 48 (empty -> .)
    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    STRING          shift and go to state 23

  ! IF              [ reduce using rule 48 (empty -> .) ]
  ! WHILE           [ reduce using rule 48 (empty -> .) ]
  ! VAR             [ reduce using rule 48 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 48 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 48 (empty -> .) ]
  ! MINUS           [ reduce using rule 48 (empty -> .) ]
  ! LSB             [ reduce using rule 48 (empty -> .) ]
  ! INT             [ reduce using rule 48 (empty -> .) ]
  ! STRING          [ reduce using rule 48 (empty -> .) ]

    compare_expression             shift and go to state 13
    root                           shift and go to state 90
    statement                      shift and go to state 3
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    expression                     shift and go to state 10
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    function_call                  shift and go to state 20

state 85

    (25) while_statement -> WHILE LSB compare_expression RSB LMB . root RMB
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) statement -> . expression SEMI
    (26) if_statement -> . IF LSB compare_expression RSB LMB root RMB
    (27) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE LMB root RMB
    (25) while_statement -> . WHILE LSB compare_expression RSB LMB root RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (21) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (48) empty -> .
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER
    (37) string_calculate -> . string_calculate stringoperator STRING
    (38) string_calculate -> . STRING
    (29) compare_expression -> . compare_expression compare_operator calculate
    (30) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    RMB             reduce using rule 48 (empty -> .)
    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    STRING          shift and go to state 23

  ! IF              [ reduce using rule 48 (empty -> .) ]
  ! WHILE           [ reduce using rule 48 (empty -> .) ]
  ! VAR             [ reduce using rule 48 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 48 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 48 (empty -> .) ]
  ! MINUS           [ reduce using rule 48 (empty -> .) ]
  ! LSB             [ reduce using rule 48 (empty -> .) ]
  ! INT             [ reduce using rule 48 (empty -> .) ]
  ! STRING          [ reduce using rule 48 (empty -> .) ]

    compare_expression             shift and go to state 13
    root                           shift and go to state 91
    statement                      shift and go to state 3
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    expression                     shift and go to state 10
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    function_call                  shift and go to state 20

state 86

    (18) function_call_parameter -> function_call_parameter COMMA calculate .
    (40) calculate -> calculate . PLUS calculate
    (41) calculate -> calculate . MINUS calculate
    (42) calculate -> calculate . MUL calculate
    (43) calculate -> calculate . DIV calculate

    RSB             reduce using rule 18 (function_call_parameter -> function_call_parameter COMMA calculate .)
    COMMA           reduce using rule 18 (function_call_parameter -> function_call_parameter COMMA calculate .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIV             shift and go to state 45


state 87

    (21) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB . LMB root RMB

    LMB             shift and go to state 92


state 88

    (22) function_parameter -> function_parameter COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 93


state 89

    (27) if_statement -> if_statement ELSE IF LSB compare_expression RSB . LMB root RMB

    LMB             shift and go to state 94


state 90

    (26) if_statement -> IF LSB compare_expression RSB LMB root . RMB
    (2) root -> root . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) statement -> . expression SEMI
    (26) if_statement -> . IF LSB compare_expression RSB LMB root RMB
    (27) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE LMB root RMB
    (25) while_statement -> . WHILE LSB compare_expression RSB LMB root RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (21) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (48) empty -> .
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER
    (37) string_calculate -> . string_calculate stringoperator STRING
    (38) string_calculate -> . STRING
    (29) compare_expression -> . compare_expression compare_operator calculate
    (30) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for RMB resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    RMB             shift and go to state 95
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    STRING          shift and go to state 23

  ! RMB             [ reduce using rule 48 (empty -> .) ]
  ! IF              [ reduce using rule 48 (empty -> .) ]
  ! WHILE           [ reduce using rule 48 (empty -> .) ]
  ! VAR             [ reduce using rule 48 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 48 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 48 (empty -> .) ]
  ! MINUS           [ reduce using rule 48 (empty -> .) ]
  ! LSB             [ reduce using rule 48 (empty -> .) ]
  ! INT             [ reduce using rule 48 (empty -> .) ]
  ! STRING          [ reduce using rule 48 (empty -> .) ]

    compare_expression             shift and go to state 13
    statement                      shift and go to state 24
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    expression                     shift and go to state 10
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    function_call                  shift and go to state 20

state 91

    (25) while_statement -> WHILE LSB compare_expression RSB LMB root . RMB
    (2) root -> root . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) statement -> . expression SEMI
    (26) if_statement -> . IF LSB compare_expression RSB LMB root RMB
    (27) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE LMB root RMB
    (25) while_statement -> . WHILE LSB compare_expression RSB LMB root RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (21) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (48) empty -> .
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER
    (37) string_calculate -> . string_calculate stringoperator STRING
    (38) string_calculate -> . STRING
    (29) compare_expression -> . compare_expression compare_operator calculate
    (30) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for RMB resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    RMB             shift and go to state 96
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    STRING          shift and go to state 23

  ! RMB             [ reduce using rule 48 (empty -> .) ]
  ! IF              [ reduce using rule 48 (empty -> .) ]
  ! WHILE           [ reduce using rule 48 (empty -> .) ]
  ! VAR             [ reduce using rule 48 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 48 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 48 (empty -> .) ]
  ! MINUS           [ reduce using rule 48 (empty -> .) ]
  ! LSB             [ reduce using rule 48 (empty -> .) ]
  ! INT             [ reduce using rule 48 (empty -> .) ]
  ! STRING          [ reduce using rule 48 (empty -> .) ]

    compare_expression             shift and go to state 13
    statement                      shift and go to state 24
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    expression                     shift and go to state 10
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    function_call                  shift and go to state 20

state 92

    (21) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB . root RMB
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) statement -> . expression SEMI
    (26) if_statement -> . IF LSB compare_expression RSB LMB root RMB
    (27) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE LMB root RMB
    (25) while_statement -> . WHILE LSB compare_expression RSB LMB root RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (21) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (48) empty -> .
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER
    (37) string_calculate -> . string_calculate stringoperator STRING
    (38) string_calculate -> . STRING
    (29) compare_expression -> . compare_expression compare_operator calculate
    (30) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    RMB             reduce using rule 48 (empty -> .)
    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    STRING          shift and go to state 23

  ! IF              [ reduce using rule 48 (empty -> .) ]
  ! WHILE           [ reduce using rule 48 (empty -> .) ]
  ! VAR             [ reduce using rule 48 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 48 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 48 (empty -> .) ]
  ! MINUS           [ reduce using rule 48 (empty -> .) ]
  ! LSB             [ reduce using rule 48 (empty -> .) ]
  ! INT             [ reduce using rule 48 (empty -> .) ]
  ! STRING          [ reduce using rule 48 (empty -> .) ]

    root                           shift and go to state 97
    statement                      shift and go to state 3
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    expression                     shift and go to state 10
    compare_expression             shift and go to state 13
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    function_call                  shift and go to state 20

state 93

    (22) function_parameter -> function_parameter COMMA IDENTIFIER .

    RSB             reduce using rule 22 (function_parameter -> function_parameter COMMA IDENTIFIER .)
    COMMA           reduce using rule 22 (function_parameter -> function_parameter COMMA IDENTIFIER .)


state 94

    (27) if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB . root RMB
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) statement -> . expression SEMI
    (26) if_statement -> . IF LSB compare_expression RSB LMB root RMB
    (27) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE LMB root RMB
    (25) while_statement -> . WHILE LSB compare_expression RSB LMB root RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (21) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (48) empty -> .
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER
    (37) string_calculate -> . string_calculate stringoperator STRING
    (38) string_calculate -> . STRING
    (29) compare_expression -> . compare_expression compare_operator calculate
    (30) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    RMB             reduce using rule 48 (empty -> .)
    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    STRING          shift and go to state 23

  ! IF              [ reduce using rule 48 (empty -> .) ]
  ! WHILE           [ reduce using rule 48 (empty -> .) ]
  ! VAR             [ reduce using rule 48 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 48 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 48 (empty -> .) ]
  ! MINUS           [ reduce using rule 48 (empty -> .) ]
  ! LSB             [ reduce using rule 48 (empty -> .) ]
  ! INT             [ reduce using rule 48 (empty -> .) ]
  ! STRING          [ reduce using rule 48 (empty -> .) ]

    if_statement                   shift and go to state 4
    compare_expression             shift and go to state 13
    root                           shift and go to state 98
    statement                      shift and go to state 3
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    expression                     shift and go to state 10
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    function_call                  shift and go to state 20

state 95

    (26) if_statement -> IF LSB compare_expression RSB LMB root RMB .

    ELSE            reduce using rule 26 (if_statement -> IF LSB compare_expression RSB LMB root RMB .)
    IF              reduce using rule 26 (if_statement -> IF LSB compare_expression RSB LMB root RMB .)
    WHILE           reduce using rule 26 (if_statement -> IF LSB compare_expression RSB LMB root RMB .)
    VAR             reduce using rule 26 (if_statement -> IF LSB compare_expression RSB LMB root RMB .)
    IDENTIFIER      reduce using rule 26 (if_statement -> IF LSB compare_expression RSB LMB root RMB .)
    FUNCTION        reduce using rule 26 (if_statement -> IF LSB compare_expression RSB LMB root RMB .)
    MINUS           reduce using rule 26 (if_statement -> IF LSB compare_expression RSB LMB root RMB .)
    LSB             reduce using rule 26 (if_statement -> IF LSB compare_expression RSB LMB root RMB .)
    INT             reduce using rule 26 (if_statement -> IF LSB compare_expression RSB LMB root RMB .)
    STRING          reduce using rule 26 (if_statement -> IF LSB compare_expression RSB LMB root RMB .)
    $end            reduce using rule 26 (if_statement -> IF LSB compare_expression RSB LMB root RMB .)
    RMB             reduce using rule 26 (if_statement -> IF LSB compare_expression RSB LMB root RMB .)


state 96

    (25) while_statement -> WHILE LSB compare_expression RSB LMB root RMB .

    IF              reduce using rule 25 (while_statement -> WHILE LSB compare_expression RSB LMB root RMB .)
    WHILE           reduce using rule 25 (while_statement -> WHILE LSB compare_expression RSB LMB root RMB .)
    VAR             reduce using rule 25 (while_statement -> WHILE LSB compare_expression RSB LMB root RMB .)
    IDENTIFIER      reduce using rule 25 (while_statement -> WHILE LSB compare_expression RSB LMB root RMB .)
    FUNCTION        reduce using rule 25 (while_statement -> WHILE LSB compare_expression RSB LMB root RMB .)
    MINUS           reduce using rule 25 (while_statement -> WHILE LSB compare_expression RSB LMB root RMB .)
    LSB             reduce using rule 25 (while_statement -> WHILE LSB compare_expression RSB LMB root RMB .)
    INT             reduce using rule 25 (while_statement -> WHILE LSB compare_expression RSB LMB root RMB .)
    STRING          reduce using rule 25 (while_statement -> WHILE LSB compare_expression RSB LMB root RMB .)
    $end            reduce using rule 25 (while_statement -> WHILE LSB compare_expression RSB LMB root RMB .)
    RMB             reduce using rule 25 (while_statement -> WHILE LSB compare_expression RSB LMB root RMB .)


state 97

    (21) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root . RMB
    (2) root -> root . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) statement -> . expression SEMI
    (26) if_statement -> . IF LSB compare_expression RSB LMB root RMB
    (27) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE LMB root RMB
    (25) while_statement -> . WHILE LSB compare_expression RSB LMB root RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (21) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (48) empty -> .
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER
    (37) string_calculate -> . string_calculate stringoperator STRING
    (38) string_calculate -> . STRING
    (29) compare_expression -> . compare_expression compare_operator calculate
    (30) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for RMB resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    RMB             shift and go to state 99
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    STRING          shift and go to state 23

  ! RMB             [ reduce using rule 48 (empty -> .) ]
  ! IF              [ reduce using rule 48 (empty -> .) ]
  ! WHILE           [ reduce using rule 48 (empty -> .) ]
  ! VAR             [ reduce using rule 48 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 48 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 48 (empty -> .) ]
  ! MINUS           [ reduce using rule 48 (empty -> .) ]
  ! LSB             [ reduce using rule 48 (empty -> .) ]
  ! INT             [ reduce using rule 48 (empty -> .) ]
  ! STRING          [ reduce using rule 48 (empty -> .) ]

    statement                      shift and go to state 24
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    expression                     shift and go to state 10
    compare_expression             shift and go to state 13
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    function_call                  shift and go to state 20

state 98

    (27) if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB root . RMB
    (2) root -> root . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) statement -> . expression SEMI
    (26) if_statement -> . IF LSB compare_expression RSB LMB root RMB
    (27) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE LMB root RMB
    (25) while_statement -> . WHILE LSB compare_expression RSB LMB root RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (21) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (48) empty -> .
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (40) calculate -> . calculate PLUS calculate
    (41) calculate -> . calculate MINUS calculate
    (42) calculate -> . calculate MUL calculate
    (43) calculate -> . calculate DIV calculate
    (44) calculate -> . MINUS calculate
    (45) calculate -> . LSB calculate RSB
    (46) calculate -> . INT
    (47) calculate -> . IDENTIFIER
    (37) string_calculate -> . string_calculate stringoperator STRING
    (38) string_calculate -> . STRING
    (29) compare_expression -> . compare_expression compare_operator calculate
    (30) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for RMB resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    RMB             shift and go to state 100
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    MINUS           shift and go to state 21
    LSB             shift and go to state 12
    INT             shift and go to state 22
    STRING          shift and go to state 23

  ! RMB             [ reduce using rule 48 (empty -> .) ]
  ! IF              [ reduce using rule 48 (empty -> .) ]
  ! WHILE           [ reduce using rule 48 (empty -> .) ]
  ! VAR             [ reduce using rule 48 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 48 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 48 (empty -> .) ]
  ! MINUS           [ reduce using rule 48 (empty -> .) ]
  ! LSB             [ reduce using rule 48 (empty -> .) ]
  ! INT             [ reduce using rule 48 (empty -> .) ]
  ! STRING          [ reduce using rule 48 (empty -> .) ]

    if_statement                   shift and go to state 4
    compare_expression             shift and go to state 13
    statement                      shift and go to state 24
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    expression                     shift and go to state 10
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    function_call                  shift and go to state 20

state 99

    (21) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .

    IF              reduce using rule 21 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    WHILE           reduce using rule 21 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    VAR             reduce using rule 21 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    IDENTIFIER      reduce using rule 21 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    FUNCTION        reduce using rule 21 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    MINUS           reduce using rule 21 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    LSB             reduce using rule 21 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    INT             reduce using rule 21 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    STRING          reduce using rule 21 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    $end            reduce using rule 21 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    RMB             reduce using rule 21 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)


state 100

    (27) if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB root RMB .

    ELSE            reduce using rule 27 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB root RMB .)
    IF              reduce using rule 27 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB root RMB .)
    WHILE           reduce using rule 27 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB root RMB .)
    VAR             reduce using rule 27 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB root RMB .)
    IDENTIFIER      reduce using rule 27 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB root RMB .)
    FUNCTION        reduce using rule 27 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB root RMB .)
    MINUS           reduce using rule 27 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB root RMB .)
    LSB             reduce using rule 27 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB root RMB .)
    INT             reduce using rule 27 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB root RMB .)
    STRING          reduce using rule 27 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB root RMB .)
    $end            reduce using rule 27 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB root RMB .)
    RMB             reduce using rule 27 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB root RMB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 0 resolved as shift
WARNING: shift/reduce conflict for LSB in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 2 resolved as shift
WARNING: shift/reduce conflict for LSB in state 2 resolved as shift
WARNING: shift/reduce conflict for INT in state 2 resolved as shift
WARNING: shift/reduce conflict for STRING in state 2 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 16 resolved as shift
WARNING: shift/reduce conflict for IF in state 50 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 50 resolved as shift
WARNING: shift/reduce conflict for VAR in state 50 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 50 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 50 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 50 resolved as shift
WARNING: shift/reduce conflict for LSB in state 50 resolved as shift
WARNING: shift/reduce conflict for INT in state 50 resolved as shift
WARNING: shift/reduce conflict for STRING in state 50 resolved as shift
WARNING: shift/reduce conflict for RMB in state 73 resolved as shift
WARNING: shift/reduce conflict for IF in state 73 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 73 resolved as shift
WARNING: shift/reduce conflict for VAR in state 73 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 73 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for LSB in state 73 resolved as shift
WARNING: shift/reduce conflict for INT in state 73 resolved as shift
WARNING: shift/reduce conflict for STRING in state 73 resolved as shift
WARNING: shift/reduce conflict for IF in state 84 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 84 resolved as shift
WARNING: shift/reduce conflict for VAR in state 84 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 84 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for LSB in state 84 resolved as shift
WARNING: shift/reduce conflict for INT in state 84 resolved as shift
WARNING: shift/reduce conflict for STRING in state 84 resolved as shift
WARNING: shift/reduce conflict for IF in state 85 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 85 resolved as shift
WARNING: shift/reduce conflict for VAR in state 85 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 85 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for LSB in state 85 resolved as shift
WARNING: shift/reduce conflict for INT in state 85 resolved as shift
WARNING: shift/reduce conflict for STRING in state 85 resolved as shift
WARNING: shift/reduce conflict for RMB in state 90 resolved as shift
WARNING: shift/reduce conflict for IF in state 90 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 90 resolved as shift
WARNING: shift/reduce conflict for VAR in state 90 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 90 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 90 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 90 resolved as shift
WARNING: shift/reduce conflict for LSB in state 90 resolved as shift
WARNING: shift/reduce conflict for INT in state 90 resolved as shift
WARNING: shift/reduce conflict for STRING in state 90 resolved as shift
WARNING: shift/reduce conflict for RMB in state 91 resolved as shift
WARNING: shift/reduce conflict for IF in state 91 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 91 resolved as shift
WARNING: shift/reduce conflict for VAR in state 91 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 91 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 91 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 91 resolved as shift
WARNING: shift/reduce conflict for LSB in state 91 resolved as shift
WARNING: shift/reduce conflict for INT in state 91 resolved as shift
WARNING: shift/reduce conflict for STRING in state 91 resolved as shift
WARNING: shift/reduce conflict for IF in state 92 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 92 resolved as shift
WARNING: shift/reduce conflict for VAR in state 92 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 92 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for LSB in state 92 resolved as shift
WARNING: shift/reduce conflict for INT in state 92 resolved as shift
WARNING: shift/reduce conflict for STRING in state 92 resolved as shift
WARNING: shift/reduce conflict for IF in state 94 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 94 resolved as shift
WARNING: shift/reduce conflict for VAR in state 94 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 94 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for LSB in state 94 resolved as shift
WARNING: shift/reduce conflict for INT in state 94 resolved as shift
WARNING: shift/reduce conflict for STRING in state 94 resolved as shift
WARNING: shift/reduce conflict for RMB in state 97 resolved as shift
WARNING: shift/reduce conflict for IF in state 97 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 97 resolved as shift
WARNING: shift/reduce conflict for VAR in state 97 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 97 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for LSB in state 97 resolved as shift
WARNING: shift/reduce conflict for INT in state 97 resolved as shift
WARNING: shift/reduce conflict for STRING in state 97 resolved as shift
WARNING: shift/reduce conflict for RMB in state 98 resolved as shift
WARNING: shift/reduce conflict for IF in state 98 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 98 resolved as shift
WARNING: shift/reduce conflict for VAR in state 98 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 98 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for LSB in state 98 resolved as shift
WARNING: shift/reduce conflict for INT in state 98 resolved as shift
WARNING: shift/reduce conflict for STRING in state 98 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (program -> root)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 18 resolved using rule (expression -> calculate)
WARNING: rejected rule (compare_expression -> calculate) in state 18
