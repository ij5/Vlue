Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CATCH
    CLASS
    COLON
    DEBUG
    DO
    DOT
    END
    FOR
    GLOBAL
    IN
    LB
    LBB
    LIST
    PYTHON
    RB
    RBB
    REPEAT
    STRING
    TRY
    USE

Grammar

Rule 0     S' -> program
Rule 1     program -> root
Rule 2     root -> root statement
Rule 3     root -> statement
Rule 4     statement -> expression
Rule 5     statement -> if_statement
Rule 6     statement -> while_statement
Rule 7     statement -> variable_declaration
Rule 8     statement -> variable_value_change
Rule 9     statement -> function_declaration
Rule 10    statement -> empty
Rule 11    expression -> calculate
Rule 12    expression -> compare_expression
Rule 13    variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI
Rule 14    variable_value_change -> IDENTIFIER EQUAL expression SEMI
Rule 15    function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
Rule 16    function_parameter -> function_parameter COMMA IDENTIFIER
Rule 17    function_parameter -> IDENTIFIER
Rule 18    function_parameter -> empty
Rule 19    while_statement -> WHILE LSB compare_expression RSB LMB statement RMB
Rule 20    if_statement -> IF LSB compare_expression RSB LMB statement RMB
Rule 21    if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
Rule 22    if_statement -> if_statement ELSE LMB statement RMB
Rule 23    compare_expression -> compare_expression compare_operator calculate
Rule 24    compare_expression -> calculate
Rule 25    compare_operator -> GT
Rule 26    compare_operator -> LT
Rule 27    compare_operator -> GTE
Rule 28    compare_operator -> LTE
Rule 29    compare_operator -> EQUAL
Rule 30    compare_operator -> NE
Rule 31    calculate -> calculate baseoperator INT
Rule 32    calculate -> calculate baseoperator FLOAT
Rule 33    calculate -> calculate baseoperator IDENTIFIER
Rule 34    calculate -> INT
Rule 35    calculate -> FLOAT
Rule 36    calculate -> IDENTIFIER
Rule 37    baseoperator -> PLUS
Rule 38    baseoperator -> MINUS
Rule 39    baseoperator -> MUL
Rule 40    baseoperator -> DIV
Rule 41    empty -> <empty>

Terminals, with rules where they appear

CATCH                : 
CLASS                : 
COLON                : 
COMMA                : 16
DEBUG                : 
DIV                  : 40
DO                   : 
DOT                  : 
ELSE                 : 21 22
END                  : 
EQUAL                : 13 14 29
FLOAT                : 32 35
FOR                  : 
FUNCTION             : 15
GLOBAL               : 
GT                   : 25
GTE                  : 27
IDENTIFIER           : 13 14 15 16 17 33 36
IF                   : 20 21
IN                   : 
INT                  : 31 34
LB                   : 
LBB                  : 
LIST                 : 
LMB                  : 15 19 20 21 22
LSB                  : 15 19 20 21
LT                   : 26
LTE                  : 28
MINUS                : 38
MUL                  : 39
NE                   : 30
PLUS                 : 37
PYTHON               : 
RB                   : 
RBB                  : 
REPEAT               : 
RMB                  : 15 19 20 21 22
RSB                  : 15 19 20 21
SEMI                 : 13 14
STRING               : 
TRY                  : 
USE                  : 
VAR                  : 13
WHILE                : 19
error                : 

Nonterminals, with rules where they appear

baseoperator         : 31 32 33
calculate            : 11 23 24 31 32 33
compare_expression   : 12 19 20 21 23
compare_operator     : 23
empty                : 10 18
expression           : 4 13 14
function_declaration : 9
function_parameter   : 15 16
if_statement         : 5 21 22
program              : 0
root                 : 1 2
statement            : 2 3 15 19 20 21 22
variable_declaration : 7
variable_value_change : 8
while_statement      : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . root
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . variable_value_change
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . compare_expression
    (20) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (21) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (22) if_statement -> . if_statement ELSE LMB statement RMB
    (19) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (13) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (14) variable_value_change -> . IDENTIFIER EQUAL expression SEMI
    (15) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (41) empty -> .
    (31) calculate -> . calculate baseoperator INT
    (32) calculate -> . calculate baseoperator FLOAT
    (33) calculate -> . calculate baseoperator IDENTIFIER
    (34) calculate -> . INT
    (35) calculate -> . FLOAT
    (36) calculate -> . IDENTIFIER
    (23) compare_expression -> . compare_expression compare_operator calculate
    (24) compare_expression -> . calculate

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    $end            reduce using rule 41 (empty -> .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19

  ! IF              [ reduce using rule 41 (empty -> .) ]
  ! WHILE           [ reduce using rule 41 (empty -> .) ]
  ! VAR             [ reduce using rule 41 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 41 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 41 (empty -> .) ]
  ! INT             [ reduce using rule 41 (empty -> .) ]
  ! FLOAT           [ reduce using rule 41 (empty -> .) ]

    program                        shift and go to state 1
    root                           shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11
    compare_expression             shift and go to state 12

state 1

    (0) S' -> program .



state 2

    (1) program -> root .
    (2) root -> root . statement
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . variable_value_change
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . compare_expression
    (20) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (21) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (22) if_statement -> . if_statement ELSE LMB statement RMB
    (19) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (13) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (14) variable_value_change -> . IDENTIFIER EQUAL expression SEMI
    (15) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (41) empty -> .
    (31) calculate -> . calculate baseoperator INT
    (32) calculate -> . calculate baseoperator FLOAT
    (33) calculate -> . calculate baseoperator IDENTIFIER
    (34) calculate -> . INT
    (35) calculate -> . FLOAT
    (36) calculate -> . IDENTIFIER
    (23) compare_expression -> . compare_expression compare_operator calculate
    (24) compare_expression -> . calculate

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (program -> root .)
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    $end            reduce using rule 1 (program -> root .)
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19

  ! IF              [ reduce using rule 41 (empty -> .) ]
  ! WHILE           [ reduce using rule 41 (empty -> .) ]
  ! VAR             [ reduce using rule 41 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 41 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 41 (empty -> .) ]
  ! INT             [ reduce using rule 41 (empty -> .) ]
  ! FLOAT           [ reduce using rule 41 (empty -> .) ]
  ! $end            [ reduce using rule 41 (empty -> .) ]

    statement                      shift and go to state 20
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11
    compare_expression             shift and go to state 12

state 3

    (3) root -> statement .

    IF              reduce using rule 3 (root -> statement .)
    WHILE           reduce using rule 3 (root -> statement .)
    VAR             reduce using rule 3 (root -> statement .)
    IDENTIFIER      reduce using rule 3 (root -> statement .)
    FUNCTION        reduce using rule 3 (root -> statement .)
    INT             reduce using rule 3 (root -> statement .)
    FLOAT           reduce using rule 3 (root -> statement .)
    $end            reduce using rule 3 (root -> statement .)


state 4

    (4) statement -> expression .

    IF              reduce using rule 4 (statement -> expression .)
    WHILE           reduce using rule 4 (statement -> expression .)
    VAR             reduce using rule 4 (statement -> expression .)
    IDENTIFIER      reduce using rule 4 (statement -> expression .)
    FUNCTION        reduce using rule 4 (statement -> expression .)
    INT             reduce using rule 4 (statement -> expression .)
    FLOAT           reduce using rule 4 (statement -> expression .)
    $end            reduce using rule 4 (statement -> expression .)
    RMB             reduce using rule 4 (statement -> expression .)


state 5

    (5) statement -> if_statement .
    (21) if_statement -> if_statement . ELSE IF LSB compare_expression RSB LMB statement RMB
    (22) if_statement -> if_statement . ELSE LMB statement RMB

    IF              reduce using rule 5 (statement -> if_statement .)
    WHILE           reduce using rule 5 (statement -> if_statement .)
    VAR             reduce using rule 5 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 5 (statement -> if_statement .)
    FUNCTION        reduce using rule 5 (statement -> if_statement .)
    INT             reduce using rule 5 (statement -> if_statement .)
    FLOAT           reduce using rule 5 (statement -> if_statement .)
    $end            reduce using rule 5 (statement -> if_statement .)
    RMB             reduce using rule 5 (statement -> if_statement .)
    ELSE            shift and go to state 21


state 6

    (6) statement -> while_statement .

    IF              reduce using rule 6 (statement -> while_statement .)
    WHILE           reduce using rule 6 (statement -> while_statement .)
    VAR             reduce using rule 6 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 6 (statement -> while_statement .)
    FUNCTION        reduce using rule 6 (statement -> while_statement .)
    INT             reduce using rule 6 (statement -> while_statement .)
    FLOAT           reduce using rule 6 (statement -> while_statement .)
    $end            reduce using rule 6 (statement -> while_statement .)
    RMB             reduce using rule 6 (statement -> while_statement .)


state 7

    (7) statement -> variable_declaration .

    IF              reduce using rule 7 (statement -> variable_declaration .)
    WHILE           reduce using rule 7 (statement -> variable_declaration .)
    VAR             reduce using rule 7 (statement -> variable_declaration .)
    IDENTIFIER      reduce using rule 7 (statement -> variable_declaration .)
    FUNCTION        reduce using rule 7 (statement -> variable_declaration .)
    INT             reduce using rule 7 (statement -> variable_declaration .)
    FLOAT           reduce using rule 7 (statement -> variable_declaration .)
    $end            reduce using rule 7 (statement -> variable_declaration .)
    RMB             reduce using rule 7 (statement -> variable_declaration .)


state 8

    (8) statement -> variable_value_change .

    IF              reduce using rule 8 (statement -> variable_value_change .)
    WHILE           reduce using rule 8 (statement -> variable_value_change .)
    VAR             reduce using rule 8 (statement -> variable_value_change .)
    IDENTIFIER      reduce using rule 8 (statement -> variable_value_change .)
    FUNCTION        reduce using rule 8 (statement -> variable_value_change .)
    INT             reduce using rule 8 (statement -> variable_value_change .)
    FLOAT           reduce using rule 8 (statement -> variable_value_change .)
    $end            reduce using rule 8 (statement -> variable_value_change .)
    RMB             reduce using rule 8 (statement -> variable_value_change .)


state 9

    (9) statement -> function_declaration .

    IF              reduce using rule 9 (statement -> function_declaration .)
    WHILE           reduce using rule 9 (statement -> function_declaration .)
    VAR             reduce using rule 9 (statement -> function_declaration .)
    IDENTIFIER      reduce using rule 9 (statement -> function_declaration .)
    FUNCTION        reduce using rule 9 (statement -> function_declaration .)
    INT             reduce using rule 9 (statement -> function_declaration .)
    FLOAT           reduce using rule 9 (statement -> function_declaration .)
    $end            reduce using rule 9 (statement -> function_declaration .)
    RMB             reduce using rule 9 (statement -> function_declaration .)


state 10

    (10) statement -> empty .

    IF              reduce using rule 10 (statement -> empty .)
    WHILE           reduce using rule 10 (statement -> empty .)
    VAR             reduce using rule 10 (statement -> empty .)
    IDENTIFIER      reduce using rule 10 (statement -> empty .)
    FUNCTION        reduce using rule 10 (statement -> empty .)
    INT             reduce using rule 10 (statement -> empty .)
    FLOAT           reduce using rule 10 (statement -> empty .)
    $end            reduce using rule 10 (statement -> empty .)
    RMB             reduce using rule 10 (statement -> empty .)


state 11

    (11) expression -> calculate .
    (31) calculate -> calculate . baseoperator INT
    (32) calculate -> calculate . baseoperator FLOAT
    (33) calculate -> calculate . baseoperator IDENTIFIER
    (24) compare_expression -> calculate .
    (37) baseoperator -> . PLUS
    (38) baseoperator -> . MINUS
    (39) baseoperator -> . MUL
    (40) baseoperator -> . DIV

  ! reduce/reduce conflict for IF resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for VAR resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for INT resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for $end resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for SEMI resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for RMB resolved using rule 11 (expression -> calculate .)
    IF              reduce using rule 11 (expression -> calculate .)
    WHILE           reduce using rule 11 (expression -> calculate .)
    VAR             reduce using rule 11 (expression -> calculate .)
    IDENTIFIER      reduce using rule 11 (expression -> calculate .)
    FUNCTION        reduce using rule 11 (expression -> calculate .)
    INT             reduce using rule 11 (expression -> calculate .)
    FLOAT           reduce using rule 11 (expression -> calculate .)
    $end            reduce using rule 11 (expression -> calculate .)
    SEMI            reduce using rule 11 (expression -> calculate .)
    RMB             reduce using rule 11 (expression -> calculate .)
    GT              reduce using rule 24 (compare_expression -> calculate .)
    LT              reduce using rule 24 (compare_expression -> calculate .)
    GTE             reduce using rule 24 (compare_expression -> calculate .)
    LTE             reduce using rule 24 (compare_expression -> calculate .)
    EQUAL           reduce using rule 24 (compare_expression -> calculate .)
    NE              reduce using rule 24 (compare_expression -> calculate .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIV             shift and go to state 26

  ! IF              [ reduce using rule 24 (compare_expression -> calculate .) ]
  ! WHILE           [ reduce using rule 24 (compare_expression -> calculate .) ]
  ! VAR             [ reduce using rule 24 (compare_expression -> calculate .) ]
  ! IDENTIFIER      [ reduce using rule 24 (compare_expression -> calculate .) ]
  ! FUNCTION        [ reduce using rule 24 (compare_expression -> calculate .) ]
  ! INT             [ reduce using rule 24 (compare_expression -> calculate .) ]
  ! FLOAT           [ reduce using rule 24 (compare_expression -> calculate .) ]
  ! $end            [ reduce using rule 24 (compare_expression -> calculate .) ]
  ! SEMI            [ reduce using rule 24 (compare_expression -> calculate .) ]
  ! RMB             [ reduce using rule 24 (compare_expression -> calculate .) ]

    baseoperator                   shift and go to state 22

state 12

    (12) expression -> compare_expression .
    (23) compare_expression -> compare_expression . compare_operator calculate
    (25) compare_operator -> . GT
    (26) compare_operator -> . LT
    (27) compare_operator -> . GTE
    (28) compare_operator -> . LTE
    (29) compare_operator -> . EQUAL
    (30) compare_operator -> . NE

    IF              reduce using rule 12 (expression -> compare_expression .)
    WHILE           reduce using rule 12 (expression -> compare_expression .)
    VAR             reduce using rule 12 (expression -> compare_expression .)
    IDENTIFIER      reduce using rule 12 (expression -> compare_expression .)
    FUNCTION        reduce using rule 12 (expression -> compare_expression .)
    INT             reduce using rule 12 (expression -> compare_expression .)
    FLOAT           reduce using rule 12 (expression -> compare_expression .)
    $end            reduce using rule 12 (expression -> compare_expression .)
    SEMI            reduce using rule 12 (expression -> compare_expression .)
    RMB             reduce using rule 12 (expression -> compare_expression .)
    GT              shift and go to state 28
    LT              shift and go to state 29
    GTE             shift and go to state 30
    LTE             shift and go to state 31
    EQUAL           shift and go to state 32
    NE              shift and go to state 33

    compare_operator               shift and go to state 27

state 13

    (20) if_statement -> IF . LSB compare_expression RSB LMB statement RMB

    LSB             shift and go to state 34


state 14

    (19) while_statement -> WHILE . LSB compare_expression RSB LMB statement RMB

    LSB             shift and go to state 35


state 15

    (13) variable_declaration -> VAR . IDENTIFIER EQUAL expression SEMI

    IDENTIFIER      shift and go to state 36


state 16

    (14) variable_value_change -> IDENTIFIER . EQUAL expression SEMI
    (36) calculate -> IDENTIFIER .

  ! shift/reduce conflict for EQUAL resolved as shift
    EQUAL           shift and go to state 37
    PLUS            reduce using rule 36 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 36 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 36 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 36 (calculate -> IDENTIFIER .)
    IF              reduce using rule 36 (calculate -> IDENTIFIER .)
    WHILE           reduce using rule 36 (calculate -> IDENTIFIER .)
    VAR             reduce using rule 36 (calculate -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 36 (calculate -> IDENTIFIER .)
    FUNCTION        reduce using rule 36 (calculate -> IDENTIFIER .)
    INT             reduce using rule 36 (calculate -> IDENTIFIER .)
    FLOAT           reduce using rule 36 (calculate -> IDENTIFIER .)
    $end            reduce using rule 36 (calculate -> IDENTIFIER .)
    GT              reduce using rule 36 (calculate -> IDENTIFIER .)
    LT              reduce using rule 36 (calculate -> IDENTIFIER .)
    GTE             reduce using rule 36 (calculate -> IDENTIFIER .)
    LTE             reduce using rule 36 (calculate -> IDENTIFIER .)
    NE              reduce using rule 36 (calculate -> IDENTIFIER .)
    RMB             reduce using rule 36 (calculate -> IDENTIFIER .)

  ! EQUAL           [ reduce using rule 36 (calculate -> IDENTIFIER .) ]


state 17

    (15) function_declaration -> FUNCTION . IDENTIFIER LSB function_parameter RSB LMB statement RMB

    IDENTIFIER      shift and go to state 38


state 18

    (34) calculate -> INT .

    PLUS            reduce using rule 34 (calculate -> INT .)
    MINUS           reduce using rule 34 (calculate -> INT .)
    MUL             reduce using rule 34 (calculate -> INT .)
    DIV             reduce using rule 34 (calculate -> INT .)
    IF              reduce using rule 34 (calculate -> INT .)
    WHILE           reduce using rule 34 (calculate -> INT .)
    VAR             reduce using rule 34 (calculate -> INT .)
    IDENTIFIER      reduce using rule 34 (calculate -> INT .)
    FUNCTION        reduce using rule 34 (calculate -> INT .)
    INT             reduce using rule 34 (calculate -> INT .)
    FLOAT           reduce using rule 34 (calculate -> INT .)
    $end            reduce using rule 34 (calculate -> INT .)
    GT              reduce using rule 34 (calculate -> INT .)
    LT              reduce using rule 34 (calculate -> INT .)
    GTE             reduce using rule 34 (calculate -> INT .)
    LTE             reduce using rule 34 (calculate -> INT .)
    EQUAL           reduce using rule 34 (calculate -> INT .)
    NE              reduce using rule 34 (calculate -> INT .)
    RSB             reduce using rule 34 (calculate -> INT .)
    SEMI            reduce using rule 34 (calculate -> INT .)
    RMB             reduce using rule 34 (calculate -> INT .)


state 19

    (35) calculate -> FLOAT .

    PLUS            reduce using rule 35 (calculate -> FLOAT .)
    MINUS           reduce using rule 35 (calculate -> FLOAT .)
    MUL             reduce using rule 35 (calculate -> FLOAT .)
    DIV             reduce using rule 35 (calculate -> FLOAT .)
    IF              reduce using rule 35 (calculate -> FLOAT .)
    WHILE           reduce using rule 35 (calculate -> FLOAT .)
    VAR             reduce using rule 35 (calculate -> FLOAT .)
    IDENTIFIER      reduce using rule 35 (calculate -> FLOAT .)
    FUNCTION        reduce using rule 35 (calculate -> FLOAT .)
    INT             reduce using rule 35 (calculate -> FLOAT .)
    FLOAT           reduce using rule 35 (calculate -> FLOAT .)
    $end            reduce using rule 35 (calculate -> FLOAT .)
    GT              reduce using rule 35 (calculate -> FLOAT .)
    LT              reduce using rule 35 (calculate -> FLOAT .)
    GTE             reduce using rule 35 (calculate -> FLOAT .)
    LTE             reduce using rule 35 (calculate -> FLOAT .)
    EQUAL           reduce using rule 35 (calculate -> FLOAT .)
    NE              reduce using rule 35 (calculate -> FLOAT .)
    RSB             reduce using rule 35 (calculate -> FLOAT .)
    SEMI            reduce using rule 35 (calculate -> FLOAT .)
    RMB             reduce using rule 35 (calculate -> FLOAT .)


state 20

    (2) root -> root statement .

    IF              reduce using rule 2 (root -> root statement .)
    WHILE           reduce using rule 2 (root -> root statement .)
    VAR             reduce using rule 2 (root -> root statement .)
    IDENTIFIER      reduce using rule 2 (root -> root statement .)
    FUNCTION        reduce using rule 2 (root -> root statement .)
    INT             reduce using rule 2 (root -> root statement .)
    FLOAT           reduce using rule 2 (root -> root statement .)
    $end            reduce using rule 2 (root -> root statement .)


state 21

    (21) if_statement -> if_statement ELSE . IF LSB compare_expression RSB LMB statement RMB
    (22) if_statement -> if_statement ELSE . LMB statement RMB

    IF              shift and go to state 39
    LMB             shift and go to state 40


state 22

    (31) calculate -> calculate baseoperator . INT
    (32) calculate -> calculate baseoperator . FLOAT
    (33) calculate -> calculate baseoperator . IDENTIFIER

    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    IDENTIFIER      shift and go to state 43


state 23

    (37) baseoperator -> PLUS .

    INT             reduce using rule 37 (baseoperator -> PLUS .)
    FLOAT           reduce using rule 37 (baseoperator -> PLUS .)
    IDENTIFIER      reduce using rule 37 (baseoperator -> PLUS .)


state 24

    (38) baseoperator -> MINUS .

    INT             reduce using rule 38 (baseoperator -> MINUS .)
    FLOAT           reduce using rule 38 (baseoperator -> MINUS .)
    IDENTIFIER      reduce using rule 38 (baseoperator -> MINUS .)


state 25

    (39) baseoperator -> MUL .

    INT             reduce using rule 39 (baseoperator -> MUL .)
    FLOAT           reduce using rule 39 (baseoperator -> MUL .)
    IDENTIFIER      reduce using rule 39 (baseoperator -> MUL .)


state 26

    (40) baseoperator -> DIV .

    INT             reduce using rule 40 (baseoperator -> DIV .)
    FLOAT           reduce using rule 40 (baseoperator -> DIV .)
    IDENTIFIER      reduce using rule 40 (baseoperator -> DIV .)


state 27

    (23) compare_expression -> compare_expression compare_operator . calculate
    (31) calculate -> . calculate baseoperator INT
    (32) calculate -> . calculate baseoperator FLOAT
    (33) calculate -> . calculate baseoperator IDENTIFIER
    (34) calculate -> . INT
    (35) calculate -> . FLOAT
    (36) calculate -> . IDENTIFIER

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    IDENTIFIER      shift and go to state 45

    calculate                      shift and go to state 44

state 28

    (25) compare_operator -> GT .

    INT             reduce using rule 25 (compare_operator -> GT .)
    FLOAT           reduce using rule 25 (compare_operator -> GT .)
    IDENTIFIER      reduce using rule 25 (compare_operator -> GT .)


state 29

    (26) compare_operator -> LT .

    INT             reduce using rule 26 (compare_operator -> LT .)
    FLOAT           reduce using rule 26 (compare_operator -> LT .)
    IDENTIFIER      reduce using rule 26 (compare_operator -> LT .)


state 30

    (27) compare_operator -> GTE .

    INT             reduce using rule 27 (compare_operator -> GTE .)
    FLOAT           reduce using rule 27 (compare_operator -> GTE .)
    IDENTIFIER      reduce using rule 27 (compare_operator -> GTE .)


state 31

    (28) compare_operator -> LTE .

    INT             reduce using rule 28 (compare_operator -> LTE .)
    FLOAT           reduce using rule 28 (compare_operator -> LTE .)
    IDENTIFIER      reduce using rule 28 (compare_operator -> LTE .)


state 32

    (29) compare_operator -> EQUAL .

    INT             reduce using rule 29 (compare_operator -> EQUAL .)
    FLOAT           reduce using rule 29 (compare_operator -> EQUAL .)
    IDENTIFIER      reduce using rule 29 (compare_operator -> EQUAL .)


state 33

    (30) compare_operator -> NE .

    INT             reduce using rule 30 (compare_operator -> NE .)
    FLOAT           reduce using rule 30 (compare_operator -> NE .)
    IDENTIFIER      reduce using rule 30 (compare_operator -> NE .)


state 34

    (20) if_statement -> IF LSB . compare_expression RSB LMB statement RMB
    (23) compare_expression -> . compare_expression compare_operator calculate
    (24) compare_expression -> . calculate
    (31) calculate -> . calculate baseoperator INT
    (32) calculate -> . calculate baseoperator FLOAT
    (33) calculate -> . calculate baseoperator IDENTIFIER
    (34) calculate -> . INT
    (35) calculate -> . FLOAT
    (36) calculate -> . IDENTIFIER

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    IDENTIFIER      shift and go to state 45

    compare_expression             shift and go to state 46
    calculate                      shift and go to state 47

state 35

    (19) while_statement -> WHILE LSB . compare_expression RSB LMB statement RMB
    (23) compare_expression -> . compare_expression compare_operator calculate
    (24) compare_expression -> . calculate
    (31) calculate -> . calculate baseoperator INT
    (32) calculate -> . calculate baseoperator FLOAT
    (33) calculate -> . calculate baseoperator IDENTIFIER
    (34) calculate -> . INT
    (35) calculate -> . FLOAT
    (36) calculate -> . IDENTIFIER

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    IDENTIFIER      shift and go to state 45

    compare_expression             shift and go to state 48
    calculate                      shift and go to state 47

state 36

    (13) variable_declaration -> VAR IDENTIFIER . EQUAL expression SEMI

    EQUAL           shift and go to state 49


state 37

    (14) variable_value_change -> IDENTIFIER EQUAL . expression SEMI
    (11) expression -> . calculate
    (12) expression -> . compare_expression
    (31) calculate -> . calculate baseoperator INT
    (32) calculate -> . calculate baseoperator FLOAT
    (33) calculate -> . calculate baseoperator IDENTIFIER
    (34) calculate -> . INT
    (35) calculate -> . FLOAT
    (36) calculate -> . IDENTIFIER
    (23) compare_expression -> . compare_expression compare_operator calculate
    (24) compare_expression -> . calculate

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    IDENTIFIER      shift and go to state 45

    expression                     shift and go to state 50
    calculate                      shift and go to state 11
    compare_expression             shift and go to state 12

state 38

    (15) function_declaration -> FUNCTION IDENTIFIER . LSB function_parameter RSB LMB statement RMB

    LSB             shift and go to state 51


state 39

    (21) if_statement -> if_statement ELSE IF . LSB compare_expression RSB LMB statement RMB

    LSB             shift and go to state 52


state 40

    (22) if_statement -> if_statement ELSE LMB . statement RMB
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . variable_value_change
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . compare_expression
    (20) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (21) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (22) if_statement -> . if_statement ELSE LMB statement RMB
    (19) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (13) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (14) variable_value_change -> . IDENTIFIER EQUAL expression SEMI
    (15) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (41) empty -> .
    (31) calculate -> . calculate baseoperator INT
    (32) calculate -> . calculate baseoperator FLOAT
    (33) calculate -> . calculate baseoperator IDENTIFIER
    (34) calculate -> . INT
    (35) calculate -> . FLOAT
    (36) calculate -> . IDENTIFIER
    (23) compare_expression -> . compare_expression compare_operator calculate
    (24) compare_expression -> . calculate

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    RMB             reduce using rule 41 (empty -> .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19

    if_statement                   shift and go to state 5
    statement                      shift and go to state 53
    expression                     shift and go to state 4
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11
    compare_expression             shift and go to state 12

state 41

    (31) calculate -> calculate baseoperator INT .

    PLUS            reduce using rule 31 (calculate -> calculate baseoperator INT .)
    MINUS           reduce using rule 31 (calculate -> calculate baseoperator INT .)
    MUL             reduce using rule 31 (calculate -> calculate baseoperator INT .)
    DIV             reduce using rule 31 (calculate -> calculate baseoperator INT .)
    IF              reduce using rule 31 (calculate -> calculate baseoperator INT .)
    WHILE           reduce using rule 31 (calculate -> calculate baseoperator INT .)
    VAR             reduce using rule 31 (calculate -> calculate baseoperator INT .)
    IDENTIFIER      reduce using rule 31 (calculate -> calculate baseoperator INT .)
    FUNCTION        reduce using rule 31 (calculate -> calculate baseoperator INT .)
    INT             reduce using rule 31 (calculate -> calculate baseoperator INT .)
    FLOAT           reduce using rule 31 (calculate -> calculate baseoperator INT .)
    $end            reduce using rule 31 (calculate -> calculate baseoperator INT .)
    GT              reduce using rule 31 (calculate -> calculate baseoperator INT .)
    LT              reduce using rule 31 (calculate -> calculate baseoperator INT .)
    GTE             reduce using rule 31 (calculate -> calculate baseoperator INT .)
    LTE             reduce using rule 31 (calculate -> calculate baseoperator INT .)
    EQUAL           reduce using rule 31 (calculate -> calculate baseoperator INT .)
    NE              reduce using rule 31 (calculate -> calculate baseoperator INT .)
    RSB             reduce using rule 31 (calculate -> calculate baseoperator INT .)
    SEMI            reduce using rule 31 (calculate -> calculate baseoperator INT .)
    RMB             reduce using rule 31 (calculate -> calculate baseoperator INT .)


state 42

    (32) calculate -> calculate baseoperator FLOAT .

    PLUS            reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    MINUS           reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    MUL             reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    DIV             reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    IF              reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    WHILE           reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    VAR             reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    IDENTIFIER      reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    FUNCTION        reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    INT             reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    FLOAT           reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    $end            reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    GT              reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    LT              reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    GTE             reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    LTE             reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    EQUAL           reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    NE              reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    RSB             reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    SEMI            reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)
    RMB             reduce using rule 32 (calculate -> calculate baseoperator FLOAT .)


state 43

    (33) calculate -> calculate baseoperator IDENTIFIER .

    PLUS            reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    MINUS           reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    MUL             reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    DIV             reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    IF              reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    WHILE           reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    VAR             reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    IDENTIFIER      reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    FUNCTION        reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    INT             reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    FLOAT           reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    $end            reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    GT              reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    LT              reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    GTE             reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    LTE             reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    EQUAL           reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    NE              reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    RSB             reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    SEMI            reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)
    RMB             reduce using rule 33 (calculate -> calculate baseoperator IDENTIFIER .)


state 44

    (23) compare_expression -> compare_expression compare_operator calculate .
    (31) calculate -> calculate . baseoperator INT
    (32) calculate -> calculate . baseoperator FLOAT
    (33) calculate -> calculate . baseoperator IDENTIFIER
    (37) baseoperator -> . PLUS
    (38) baseoperator -> . MINUS
    (39) baseoperator -> . MUL
    (40) baseoperator -> . DIV

    GT              reduce using rule 23 (compare_expression -> compare_expression compare_operator calculate .)
    LT              reduce using rule 23 (compare_expression -> compare_expression compare_operator calculate .)
    GTE             reduce using rule 23 (compare_expression -> compare_expression compare_operator calculate .)
    LTE             reduce using rule 23 (compare_expression -> compare_expression compare_operator calculate .)
    EQUAL           reduce using rule 23 (compare_expression -> compare_expression compare_operator calculate .)
    NE              reduce using rule 23 (compare_expression -> compare_expression compare_operator calculate .)
    IF              reduce using rule 23 (compare_expression -> compare_expression compare_operator calculate .)
    WHILE           reduce using rule 23 (compare_expression -> compare_expression compare_operator calculate .)
    VAR             reduce using rule 23 (compare_expression -> compare_expression compare_operator calculate .)
    IDENTIFIER      reduce using rule 23 (compare_expression -> compare_expression compare_operator calculate .)
    FUNCTION        reduce using rule 23 (compare_expression -> compare_expression compare_operator calculate .)
    INT             reduce using rule 23 (compare_expression -> compare_expression compare_operator calculate .)
    FLOAT           reduce using rule 23 (compare_expression -> compare_expression compare_operator calculate .)
    $end            reduce using rule 23 (compare_expression -> compare_expression compare_operator calculate .)
    RSB             reduce using rule 23 (compare_expression -> compare_expression compare_operator calculate .)
    SEMI            reduce using rule 23 (compare_expression -> compare_expression compare_operator calculate .)
    RMB             reduce using rule 23 (compare_expression -> compare_expression compare_operator calculate .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIV             shift and go to state 26

    baseoperator                   shift and go to state 22

state 45

    (36) calculate -> IDENTIFIER .

    PLUS            reduce using rule 36 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 36 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 36 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 36 (calculate -> IDENTIFIER .)
    GT              reduce using rule 36 (calculate -> IDENTIFIER .)
    LT              reduce using rule 36 (calculate -> IDENTIFIER .)
    GTE             reduce using rule 36 (calculate -> IDENTIFIER .)
    LTE             reduce using rule 36 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 36 (calculate -> IDENTIFIER .)
    NE              reduce using rule 36 (calculate -> IDENTIFIER .)
    IF              reduce using rule 36 (calculate -> IDENTIFIER .)
    WHILE           reduce using rule 36 (calculate -> IDENTIFIER .)
    VAR             reduce using rule 36 (calculate -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 36 (calculate -> IDENTIFIER .)
    FUNCTION        reduce using rule 36 (calculate -> IDENTIFIER .)
    INT             reduce using rule 36 (calculate -> IDENTIFIER .)
    FLOAT           reduce using rule 36 (calculate -> IDENTIFIER .)
    $end            reduce using rule 36 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 36 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 36 (calculate -> IDENTIFIER .)
    RMB             reduce using rule 36 (calculate -> IDENTIFIER .)


state 46

    (20) if_statement -> IF LSB compare_expression . RSB LMB statement RMB
    (23) compare_expression -> compare_expression . compare_operator calculate
    (25) compare_operator -> . GT
    (26) compare_operator -> . LT
    (27) compare_operator -> . GTE
    (28) compare_operator -> . LTE
    (29) compare_operator -> . EQUAL
    (30) compare_operator -> . NE

    RSB             shift and go to state 54
    GT              shift and go to state 28
    LT              shift and go to state 29
    GTE             shift and go to state 30
    LTE             shift and go to state 31
    EQUAL           shift and go to state 32
    NE              shift and go to state 33

    compare_operator               shift and go to state 27

state 47

    (24) compare_expression -> calculate .
    (31) calculate -> calculate . baseoperator INT
    (32) calculate -> calculate . baseoperator FLOAT
    (33) calculate -> calculate . baseoperator IDENTIFIER
    (37) baseoperator -> . PLUS
    (38) baseoperator -> . MINUS
    (39) baseoperator -> . MUL
    (40) baseoperator -> . DIV

    RSB             reduce using rule 24 (compare_expression -> calculate .)
    GT              reduce using rule 24 (compare_expression -> calculate .)
    LT              reduce using rule 24 (compare_expression -> calculate .)
    GTE             reduce using rule 24 (compare_expression -> calculate .)
    LTE             reduce using rule 24 (compare_expression -> calculate .)
    EQUAL           reduce using rule 24 (compare_expression -> calculate .)
    NE              reduce using rule 24 (compare_expression -> calculate .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIV             shift and go to state 26

    baseoperator                   shift and go to state 22

state 48

    (19) while_statement -> WHILE LSB compare_expression . RSB LMB statement RMB
    (23) compare_expression -> compare_expression . compare_operator calculate
    (25) compare_operator -> . GT
    (26) compare_operator -> . LT
    (27) compare_operator -> . GTE
    (28) compare_operator -> . LTE
    (29) compare_operator -> . EQUAL
    (30) compare_operator -> . NE

    RSB             shift and go to state 55
    GT              shift and go to state 28
    LT              shift and go to state 29
    GTE             shift and go to state 30
    LTE             shift and go to state 31
    EQUAL           shift and go to state 32
    NE              shift and go to state 33

    compare_operator               shift and go to state 27

state 49

    (13) variable_declaration -> VAR IDENTIFIER EQUAL . expression SEMI
    (11) expression -> . calculate
    (12) expression -> . compare_expression
    (31) calculate -> . calculate baseoperator INT
    (32) calculate -> . calculate baseoperator FLOAT
    (33) calculate -> . calculate baseoperator IDENTIFIER
    (34) calculate -> . INT
    (35) calculate -> . FLOAT
    (36) calculate -> . IDENTIFIER
    (23) compare_expression -> . compare_expression compare_operator calculate
    (24) compare_expression -> . calculate

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    IDENTIFIER      shift and go to state 45

    expression                     shift and go to state 56
    calculate                      shift and go to state 11
    compare_expression             shift and go to state 12

state 50

    (14) variable_value_change -> IDENTIFIER EQUAL expression . SEMI

    SEMI            shift and go to state 57


state 51

    (15) function_declaration -> FUNCTION IDENTIFIER LSB . function_parameter RSB LMB statement RMB
    (16) function_parameter -> . function_parameter COMMA IDENTIFIER
    (17) function_parameter -> . IDENTIFIER
    (18) function_parameter -> . empty
    (41) empty -> .

    IDENTIFIER      shift and go to state 58
    RSB             reduce using rule 41 (empty -> .)
    COMMA           reduce using rule 41 (empty -> .)

    function_parameter             shift and go to state 59
    empty                          shift and go to state 60

state 52

    (21) if_statement -> if_statement ELSE IF LSB . compare_expression RSB LMB statement RMB
    (23) compare_expression -> . compare_expression compare_operator calculate
    (24) compare_expression -> . calculate
    (31) calculate -> . calculate baseoperator INT
    (32) calculate -> . calculate baseoperator FLOAT
    (33) calculate -> . calculate baseoperator IDENTIFIER
    (34) calculate -> . INT
    (35) calculate -> . FLOAT
    (36) calculate -> . IDENTIFIER

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    IDENTIFIER      shift and go to state 45

    compare_expression             shift and go to state 61
    calculate                      shift and go to state 47

state 53

    (22) if_statement -> if_statement ELSE LMB statement . RMB

    RMB             shift and go to state 62


state 54

    (20) if_statement -> IF LSB compare_expression RSB . LMB statement RMB

    LMB             shift and go to state 63


state 55

    (19) while_statement -> WHILE LSB compare_expression RSB . LMB statement RMB

    LMB             shift and go to state 64


state 56

    (13) variable_declaration -> VAR IDENTIFIER EQUAL expression . SEMI

    SEMI            shift and go to state 65


state 57

    (14) variable_value_change -> IDENTIFIER EQUAL expression SEMI .

    IF              reduce using rule 14 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)
    WHILE           reduce using rule 14 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)
    VAR             reduce using rule 14 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)
    IDENTIFIER      reduce using rule 14 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)
    FUNCTION        reduce using rule 14 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)
    INT             reduce using rule 14 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)
    FLOAT           reduce using rule 14 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)
    $end            reduce using rule 14 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)
    RMB             reduce using rule 14 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)


state 58

    (17) function_parameter -> IDENTIFIER .

    RSB             reduce using rule 17 (function_parameter -> IDENTIFIER .)
    COMMA           reduce using rule 17 (function_parameter -> IDENTIFIER .)


state 59

    (15) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter . RSB LMB statement RMB
    (16) function_parameter -> function_parameter . COMMA IDENTIFIER

    RSB             shift and go to state 66
    COMMA           shift and go to state 67


state 60

    (18) function_parameter -> empty .

    RSB             reduce using rule 18 (function_parameter -> empty .)
    COMMA           reduce using rule 18 (function_parameter -> empty .)


state 61

    (21) if_statement -> if_statement ELSE IF LSB compare_expression . RSB LMB statement RMB
    (23) compare_expression -> compare_expression . compare_operator calculate
    (25) compare_operator -> . GT
    (26) compare_operator -> . LT
    (27) compare_operator -> . GTE
    (28) compare_operator -> . LTE
    (29) compare_operator -> . EQUAL
    (30) compare_operator -> . NE

    RSB             shift and go to state 68
    GT              shift and go to state 28
    LT              shift and go to state 29
    GTE             shift and go to state 30
    LTE             shift and go to state 31
    EQUAL           shift and go to state 32
    NE              shift and go to state 33

    compare_operator               shift and go to state 27

state 62

    (22) if_statement -> if_statement ELSE LMB statement RMB .

    ELSE            reduce using rule 22 (if_statement -> if_statement ELSE LMB statement RMB .)
    IF              reduce using rule 22 (if_statement -> if_statement ELSE LMB statement RMB .)
    WHILE           reduce using rule 22 (if_statement -> if_statement ELSE LMB statement RMB .)
    VAR             reduce using rule 22 (if_statement -> if_statement ELSE LMB statement RMB .)
    IDENTIFIER      reduce using rule 22 (if_statement -> if_statement ELSE LMB statement RMB .)
    FUNCTION        reduce using rule 22 (if_statement -> if_statement ELSE LMB statement RMB .)
    INT             reduce using rule 22 (if_statement -> if_statement ELSE LMB statement RMB .)
    FLOAT           reduce using rule 22 (if_statement -> if_statement ELSE LMB statement RMB .)
    $end            reduce using rule 22 (if_statement -> if_statement ELSE LMB statement RMB .)
    RMB             reduce using rule 22 (if_statement -> if_statement ELSE LMB statement RMB .)


state 63

    (20) if_statement -> IF LSB compare_expression RSB LMB . statement RMB
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . variable_value_change
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . compare_expression
    (20) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (21) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (22) if_statement -> . if_statement ELSE LMB statement RMB
    (19) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (13) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (14) variable_value_change -> . IDENTIFIER EQUAL expression SEMI
    (15) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (41) empty -> .
    (31) calculate -> . calculate baseoperator INT
    (32) calculate -> . calculate baseoperator FLOAT
    (33) calculate -> . calculate baseoperator IDENTIFIER
    (34) calculate -> . INT
    (35) calculate -> . FLOAT
    (36) calculate -> . IDENTIFIER
    (23) compare_expression -> . compare_expression compare_operator calculate
    (24) compare_expression -> . calculate

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    RMB             reduce using rule 41 (empty -> .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19

    compare_expression             shift and go to state 12
    statement                      shift and go to state 69
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11

state 64

    (19) while_statement -> WHILE LSB compare_expression RSB LMB . statement RMB
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . variable_value_change
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . compare_expression
    (20) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (21) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (22) if_statement -> . if_statement ELSE LMB statement RMB
    (19) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (13) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (14) variable_value_change -> . IDENTIFIER EQUAL expression SEMI
    (15) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (41) empty -> .
    (31) calculate -> . calculate baseoperator INT
    (32) calculate -> . calculate baseoperator FLOAT
    (33) calculate -> . calculate baseoperator IDENTIFIER
    (34) calculate -> . INT
    (35) calculate -> . FLOAT
    (36) calculate -> . IDENTIFIER
    (23) compare_expression -> . compare_expression compare_operator calculate
    (24) compare_expression -> . calculate

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    RMB             reduce using rule 41 (empty -> .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19

    compare_expression             shift and go to state 12
    statement                      shift and go to state 70
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11

state 65

    (13) variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .

    IF              reduce using rule 13 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    WHILE           reduce using rule 13 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    VAR             reduce using rule 13 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    IDENTIFIER      reduce using rule 13 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    FUNCTION        reduce using rule 13 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    INT             reduce using rule 13 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    FLOAT           reduce using rule 13 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    $end            reduce using rule 13 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    RMB             reduce using rule 13 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)


state 66

    (15) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB . LMB statement RMB

    LMB             shift and go to state 71


state 67

    (16) function_parameter -> function_parameter COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 72


state 68

    (21) if_statement -> if_statement ELSE IF LSB compare_expression RSB . LMB statement RMB

    LMB             shift and go to state 73


state 69

    (20) if_statement -> IF LSB compare_expression RSB LMB statement . RMB

    RMB             shift and go to state 74


state 70

    (19) while_statement -> WHILE LSB compare_expression RSB LMB statement . RMB

    RMB             shift and go to state 75


state 71

    (15) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB . statement RMB
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . variable_value_change
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . compare_expression
    (20) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (21) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (22) if_statement -> . if_statement ELSE LMB statement RMB
    (19) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (13) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (14) variable_value_change -> . IDENTIFIER EQUAL expression SEMI
    (15) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (41) empty -> .
    (31) calculate -> . calculate baseoperator INT
    (32) calculate -> . calculate baseoperator FLOAT
    (33) calculate -> . calculate baseoperator IDENTIFIER
    (34) calculate -> . INT
    (35) calculate -> . FLOAT
    (36) calculate -> . IDENTIFIER
    (23) compare_expression -> . compare_expression compare_operator calculate
    (24) compare_expression -> . calculate

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    RMB             reduce using rule 41 (empty -> .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19

    statement                      shift and go to state 76
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11
    compare_expression             shift and go to state 12

state 72

    (16) function_parameter -> function_parameter COMMA IDENTIFIER .

    RSB             reduce using rule 16 (function_parameter -> function_parameter COMMA IDENTIFIER .)
    COMMA           reduce using rule 16 (function_parameter -> function_parameter COMMA IDENTIFIER .)


state 73

    (21) if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB . statement RMB
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . variable_value_change
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . compare_expression
    (20) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (21) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (22) if_statement -> . if_statement ELSE LMB statement RMB
    (19) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (13) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (14) variable_value_change -> . IDENTIFIER EQUAL expression SEMI
    (15) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (41) empty -> .
    (31) calculate -> . calculate baseoperator INT
    (32) calculate -> . calculate baseoperator FLOAT
    (33) calculate -> . calculate baseoperator IDENTIFIER
    (34) calculate -> . INT
    (35) calculate -> . FLOAT
    (36) calculate -> . IDENTIFIER
    (23) compare_expression -> . compare_expression compare_operator calculate
    (24) compare_expression -> . calculate

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    RMB             reduce using rule 41 (empty -> .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19

    if_statement                   shift and go to state 5
    compare_expression             shift and go to state 12
    statement                      shift and go to state 77
    expression                     shift and go to state 4
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11

state 74

    (20) if_statement -> IF LSB compare_expression RSB LMB statement RMB .

    ELSE            reduce using rule 20 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    IF              reduce using rule 20 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    WHILE           reduce using rule 20 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    VAR             reduce using rule 20 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    IDENTIFIER      reduce using rule 20 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    FUNCTION        reduce using rule 20 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    INT             reduce using rule 20 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    FLOAT           reduce using rule 20 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    $end            reduce using rule 20 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    RMB             reduce using rule 20 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)


state 75

    (19) while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .

    IF              reduce using rule 19 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    WHILE           reduce using rule 19 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    VAR             reduce using rule 19 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    IDENTIFIER      reduce using rule 19 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    FUNCTION        reduce using rule 19 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    INT             reduce using rule 19 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    FLOAT           reduce using rule 19 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    $end            reduce using rule 19 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    RMB             reduce using rule 19 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)


state 76

    (15) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement . RMB

    RMB             shift and go to state 78


state 77

    (21) if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement . RMB

    RMB             shift and go to state 79


state 78

    (15) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .

    IF              reduce using rule 15 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    WHILE           reduce using rule 15 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    VAR             reduce using rule 15 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    IDENTIFIER      reduce using rule 15 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    FUNCTION        reduce using rule 15 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    INT             reduce using rule 15 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    FLOAT           reduce using rule 15 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    $end            reduce using rule 15 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    RMB             reduce using rule 15 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)


state 79

    (21) if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .

    ELSE            reduce using rule 21 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    IF              reduce using rule 21 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    WHILE           reduce using rule 21 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    VAR             reduce using rule 21 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    IDENTIFIER      reduce using rule 21 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    FUNCTION        reduce using rule 21 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    INT             reduce using rule 21 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    FLOAT           reduce using rule 21 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    $end            reduce using rule 21 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    RMB             reduce using rule 21 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for INT in state 2 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 2 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 16 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (program -> root)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 11 resolved using rule (expression -> calculate)
WARNING: rejected rule (compare_expression -> calculate) in state 11
