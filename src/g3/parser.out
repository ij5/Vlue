Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    ELSE

Grammar

Rule 0     S' -> root
Rule 1     root -> expression
Rule 2     expression -> expression variable_declaration SEMI
Rule 3     expression -> expression variable_value_change SEMI
Rule 4     expression -> expression if_statement
Rule 5     expression -> expression function
Rule 6     expression -> expression function_call SEMI
Rule 7     expression -> expression repeat
Rule 8     expression -> expression for
Rule 9     expression -> expression while
Rule 10    expression -> variable_declaration SEMI
Rule 11    expression -> variable_value_change SEMI
Rule 12    expression -> if_statement
Rule 13    expression -> function
Rule 14    expression -> function_call
Rule 15    expression -> repeat
Rule 16    expression -> for
Rule 17    expression -> while
Rule 18    expression -> empty
Rule 19    for -> for_head for_body
Rule 20    for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB
Rule 21    for_body -> LMB expression RMB
Rule 22    while -> while_head while_body
Rule 23    while_head -> WHILE LSB condition RSB
Rule 24    while_body -> LMB expression RMB
Rule 25    repeat -> repeat_head repeat_body
Rule 26    repeat_head -> REPEAT LSB calculate RSB
Rule 27    repeat_body -> LMB expression RMB
Rule 28    function -> function_head function_body
Rule 29    function_head -> FUNCTION IDENTIFIER LSB empty RSB
Rule 30    function_head -> FUNCTION IDENTIFIER LSB parameter RSB
Rule 31    function_body -> LMB expression RMB
Rule 32    function_call -> IDENTIFIER LSB parameter RSB
Rule 33    parameter -> parameter COMMA calculate
Rule 34    parameter -> calculate
Rule 35    parameter -> empty
Rule 36    if_statement -> if_statement_head if_statement_body
Rule 37    if_statement_head -> IF LSB condition RSB
Rule 38    if_statement_body -> LMB expression RMB
Rule 39    condition -> condition LB calculate
Rule 40    condition -> condition RB calculate
Rule 41    condition -> condition LB EQUAL calculate
Rule 42    condition -> condition RB EQUAL calculate
Rule 43    condition -> condition EQUAL calculate
Rule 44    condition -> calculate
Rule 45    use -> USE IDENTIFIER
Rule 46    variable_value_change -> IDENTIFIER EQUAL LIST
Rule 47    variable_value_change -> IDENTIFIER EQUAL calculate
Rule 48    variable_declaration -> VAR IDENTIFIER EQUAL LIST
Rule 49    variable_declaration -> VAR IDENTIFIER EQUAL calculate
Rule 50    variable_declaration -> VAR IDENTIFIER
Rule 51    calculate -> calculate PLUS calculate
Rule 52    calculate -> calculate MINUS calculate
Rule 53    calculate -> MINUS calculate
Rule 54    calculate -> calculate MUL calculate
Rule 55    calculate -> calculate DIV calculate
Rule 56    calculate -> INT
Rule 57    calculate -> FLOAT
Rule 58    calculate -> STRING
Rule 59    calculate -> IDENTIFIER
Rule 60    calculate -> LSB calculate RSB
Rule 61    empty -> <empty>

Terminals, with rules where they appear

COLON                : 
COMMA                : 33
DIV                  : 55
ELSE                 : 
EQUAL                : 41 42 43 46 47 48 49
FLOAT                : 57
FOR                  : 20
FUNCTION             : 29 30
IDENTIFIER           : 20 20 29 30 32 45 46 47 48 49 50 59
IF                   : 37
IN                   : 20
INT                  : 56
LB                   : 39 41
LIST                 : 46 48
LMB                  : 21 24 27 31 38
LSB                  : 20 23 26 29 30 32 37 60
MINUS                : 52 53
MUL                  : 54
PLUS                 : 51
RB                   : 40 42
REPEAT               : 26
RMB                  : 21 24 27 31 38
RSB                  : 20 23 26 29 30 32 37 60
SEMI                 : 2 3 6 10 11
STRING               : 58
USE                  : 45
VAR                  : 48 49 50
WHILE                : 23
error                : 

Nonterminals, with rules where they appear

calculate            : 26 33 34 39 40 41 42 43 44 47 49 51 51 52 52 53 54 54 55 55 60
condition            : 23 37 39 40 41 42 43
empty                : 18 29 35
expression           : 1 2 3 4 5 6 7 8 9 21 24 27 31 38
for                  : 8 16
for_body             : 19
for_head             : 19
function             : 5 13
function_body        : 28
function_call        : 6 14
function_head        : 28
if_statement         : 4 12
if_statement_body    : 36
if_statement_head    : 36
parameter            : 30 32 33
repeat               : 7 15
repeat_body          : 25
repeat_head          : 25
root                 : 0
use                  : 
variable_declaration : 2 10
variable_value_change : 3 11
while                : 9 17
while_body           : 22
while_head           : 22

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . expression
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . variable_declaration SEMI
    (11) expression -> . variable_value_change SEMI
    (12) expression -> . if_statement
    (13) expression -> . function
    (14) expression -> . function_call
    (15) expression -> . repeat
    (16) expression -> . for
    (17) expression -> . while
    (18) expression -> . empty
    (48) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (49) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (50) variable_declaration -> . VAR IDENTIFIER
    (46) variable_value_change -> . IDENTIFIER EQUAL LIST
    (47) variable_value_change -> . IDENTIFIER EQUAL calculate
    (36) if_statement -> . if_statement_head if_statement_body
    (28) function -> . function_head function_body
    (32) function_call -> . IDENTIFIER LSB parameter RSB
    (25) repeat -> . repeat_head repeat_body
    (19) for -> . for_head for_body
    (22) while -> . while_head while_body
    (61) empty -> .
    (37) if_statement_head -> . IF LSB condition RSB
    (29) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (30) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (26) repeat_head -> . REPEAT LSB calculate RSB
    (20) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (23) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    $end            reduce using rule 61 (empty -> .)
    IF              shift and go to state 19
    FUNCTION        shift and go to state 20
    REPEAT          shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

  ! VAR             [ reduce using rule 61 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 61 (empty -> .) ]
  ! IF              [ reduce using rule 61 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 61 (empty -> .) ]
  ! REPEAT          [ reduce using rule 61 (empty -> .) ]
  ! FOR             [ reduce using rule 61 (empty -> .) ]
  ! WHILE           [ reduce using rule 61 (empty -> .) ]

    root                           shift and go to state 1
    expression                     shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    empty                          shift and go to state 11
    if_statement_head              shift and go to state 14
    function_head                  shift and go to state 15
    repeat_head                    shift and go to state 16
    for_head                       shift and go to state 17
    while_head                     shift and go to state 18

state 1

    (0) S' -> root .



state 2

    (1) root -> expression .
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (48) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (49) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (50) variable_declaration -> . VAR IDENTIFIER
    (46) variable_value_change -> . IDENTIFIER EQUAL LIST
    (47) variable_value_change -> . IDENTIFIER EQUAL calculate
    (36) if_statement -> . if_statement_head if_statement_body
    (28) function -> . function_head function_body
    (32) function_call -> . IDENTIFIER LSB parameter RSB
    (25) repeat -> . repeat_head repeat_body
    (19) for -> . for_head for_body
    (22) while -> . while_head while_body
    (37) if_statement_head -> . IF LSB condition RSB
    (29) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (30) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (26) repeat_head -> . REPEAT LSB calculate RSB
    (20) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (23) while_head -> . WHILE LSB condition RSB

    $end            reduce using rule 1 (root -> expression .)
    VAR             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 19
    FUNCTION        shift and go to state 20
    REPEAT          shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

    variable_declaration           shift and go to state 24
    variable_value_change          shift and go to state 25
    if_statement                   shift and go to state 26
    function                       shift and go to state 27
    function_call                  shift and go to state 28
    repeat                         shift and go to state 29
    for                            shift and go to state 30
    while                          shift and go to state 31
    if_statement_head              shift and go to state 14
    function_head                  shift and go to state 15
    repeat_head                    shift and go to state 16
    for_head                       shift and go to state 17
    while_head                     shift and go to state 18

state 3

    (10) expression -> variable_declaration . SEMI

    SEMI            shift and go to state 32


state 4

    (11) expression -> variable_value_change . SEMI

    SEMI            shift and go to state 33


state 5

    (12) expression -> if_statement .

    VAR             reduce using rule 12 (expression -> if_statement .)
    IDENTIFIER      reduce using rule 12 (expression -> if_statement .)
    IF              reduce using rule 12 (expression -> if_statement .)
    FUNCTION        reduce using rule 12 (expression -> if_statement .)
    REPEAT          reduce using rule 12 (expression -> if_statement .)
    FOR             reduce using rule 12 (expression -> if_statement .)
    WHILE           reduce using rule 12 (expression -> if_statement .)
    $end            reduce using rule 12 (expression -> if_statement .)
    RMB             reduce using rule 12 (expression -> if_statement .)


state 6

    (13) expression -> function .

    VAR             reduce using rule 13 (expression -> function .)
    IDENTIFIER      reduce using rule 13 (expression -> function .)
    IF              reduce using rule 13 (expression -> function .)
    FUNCTION        reduce using rule 13 (expression -> function .)
    REPEAT          reduce using rule 13 (expression -> function .)
    FOR             reduce using rule 13 (expression -> function .)
    WHILE           reduce using rule 13 (expression -> function .)
    $end            reduce using rule 13 (expression -> function .)
    RMB             reduce using rule 13 (expression -> function .)


state 7

    (14) expression -> function_call .

    VAR             reduce using rule 14 (expression -> function_call .)
    IDENTIFIER      reduce using rule 14 (expression -> function_call .)
    IF              reduce using rule 14 (expression -> function_call .)
    FUNCTION        reduce using rule 14 (expression -> function_call .)
    REPEAT          reduce using rule 14 (expression -> function_call .)
    FOR             reduce using rule 14 (expression -> function_call .)
    WHILE           reduce using rule 14 (expression -> function_call .)
    $end            reduce using rule 14 (expression -> function_call .)
    RMB             reduce using rule 14 (expression -> function_call .)


state 8

    (15) expression -> repeat .

    VAR             reduce using rule 15 (expression -> repeat .)
    IDENTIFIER      reduce using rule 15 (expression -> repeat .)
    IF              reduce using rule 15 (expression -> repeat .)
    FUNCTION        reduce using rule 15 (expression -> repeat .)
    REPEAT          reduce using rule 15 (expression -> repeat .)
    FOR             reduce using rule 15 (expression -> repeat .)
    WHILE           reduce using rule 15 (expression -> repeat .)
    $end            reduce using rule 15 (expression -> repeat .)
    RMB             reduce using rule 15 (expression -> repeat .)


state 9

    (16) expression -> for .

    VAR             reduce using rule 16 (expression -> for .)
    IDENTIFIER      reduce using rule 16 (expression -> for .)
    IF              reduce using rule 16 (expression -> for .)
    FUNCTION        reduce using rule 16 (expression -> for .)
    REPEAT          reduce using rule 16 (expression -> for .)
    FOR             reduce using rule 16 (expression -> for .)
    WHILE           reduce using rule 16 (expression -> for .)
    $end            reduce using rule 16 (expression -> for .)
    RMB             reduce using rule 16 (expression -> for .)


state 10

    (17) expression -> while .

    VAR             reduce using rule 17 (expression -> while .)
    IDENTIFIER      reduce using rule 17 (expression -> while .)
    IF              reduce using rule 17 (expression -> while .)
    FUNCTION        reduce using rule 17 (expression -> while .)
    REPEAT          reduce using rule 17 (expression -> while .)
    FOR             reduce using rule 17 (expression -> while .)
    WHILE           reduce using rule 17 (expression -> while .)
    $end            reduce using rule 17 (expression -> while .)
    RMB             reduce using rule 17 (expression -> while .)


state 11

    (18) expression -> empty .

    VAR             reduce using rule 18 (expression -> empty .)
    IDENTIFIER      reduce using rule 18 (expression -> empty .)
    IF              reduce using rule 18 (expression -> empty .)
    FUNCTION        reduce using rule 18 (expression -> empty .)
    REPEAT          reduce using rule 18 (expression -> empty .)
    FOR             reduce using rule 18 (expression -> empty .)
    WHILE           reduce using rule 18 (expression -> empty .)
    $end            reduce using rule 18 (expression -> empty .)
    RMB             reduce using rule 18 (expression -> empty .)


state 12

    (48) variable_declaration -> VAR . IDENTIFIER EQUAL LIST
    (49) variable_declaration -> VAR . IDENTIFIER EQUAL calculate
    (50) variable_declaration -> VAR . IDENTIFIER

    IDENTIFIER      shift and go to state 34


state 13

    (46) variable_value_change -> IDENTIFIER . EQUAL LIST
    (47) variable_value_change -> IDENTIFIER . EQUAL calculate
    (32) function_call -> IDENTIFIER . LSB parameter RSB

    EQUAL           shift and go to state 35
    LSB             shift and go to state 36


state 14

    (36) if_statement -> if_statement_head . if_statement_body
    (38) if_statement_body -> . LMB expression RMB

    LMB             shift and go to state 38

    if_statement_body              shift and go to state 37

state 15

    (28) function -> function_head . function_body
    (31) function_body -> . LMB expression RMB

    LMB             shift and go to state 40

    function_body                  shift and go to state 39

state 16

    (25) repeat -> repeat_head . repeat_body
    (27) repeat_body -> . LMB expression RMB

    LMB             shift and go to state 42

    repeat_body                    shift and go to state 41

state 17

    (19) for -> for_head . for_body
    (21) for_body -> . LMB expression RMB

    LMB             shift and go to state 44

    for_body                       shift and go to state 43

state 18

    (22) while -> while_head . while_body
    (24) while_body -> . LMB expression RMB

    LMB             shift and go to state 46

    while_body                     shift and go to state 45

state 19

    (37) if_statement_head -> IF . LSB condition RSB

    LSB             shift and go to state 47


state 20

    (29) function_head -> FUNCTION . IDENTIFIER LSB empty RSB
    (30) function_head -> FUNCTION . IDENTIFIER LSB parameter RSB

    IDENTIFIER      shift and go to state 48


state 21

    (26) repeat_head -> REPEAT . LSB calculate RSB

    LSB             shift and go to state 49


state 22

    (20) for_head -> FOR . LSB IDENTIFIER IN IDENTIFIER RSB

    LSB             shift and go to state 50


state 23

    (23) while_head -> WHILE . LSB condition RSB

    LSB             shift and go to state 51


state 24

    (2) expression -> expression variable_declaration . SEMI

    SEMI            shift and go to state 52


state 25

    (3) expression -> expression variable_value_change . SEMI

    SEMI            shift and go to state 53


state 26

    (4) expression -> expression if_statement .

    VAR             reduce using rule 4 (expression -> expression if_statement .)
    IDENTIFIER      reduce using rule 4 (expression -> expression if_statement .)
    IF              reduce using rule 4 (expression -> expression if_statement .)
    FUNCTION        reduce using rule 4 (expression -> expression if_statement .)
    REPEAT          reduce using rule 4 (expression -> expression if_statement .)
    FOR             reduce using rule 4 (expression -> expression if_statement .)
    WHILE           reduce using rule 4 (expression -> expression if_statement .)
    $end            reduce using rule 4 (expression -> expression if_statement .)
    RMB             reduce using rule 4 (expression -> expression if_statement .)


state 27

    (5) expression -> expression function .

    VAR             reduce using rule 5 (expression -> expression function .)
    IDENTIFIER      reduce using rule 5 (expression -> expression function .)
    IF              reduce using rule 5 (expression -> expression function .)
    FUNCTION        reduce using rule 5 (expression -> expression function .)
    REPEAT          reduce using rule 5 (expression -> expression function .)
    FOR             reduce using rule 5 (expression -> expression function .)
    WHILE           reduce using rule 5 (expression -> expression function .)
    $end            reduce using rule 5 (expression -> expression function .)
    RMB             reduce using rule 5 (expression -> expression function .)


state 28

    (6) expression -> expression function_call . SEMI

    SEMI            shift and go to state 54


state 29

    (7) expression -> expression repeat .

    VAR             reduce using rule 7 (expression -> expression repeat .)
    IDENTIFIER      reduce using rule 7 (expression -> expression repeat .)
    IF              reduce using rule 7 (expression -> expression repeat .)
    FUNCTION        reduce using rule 7 (expression -> expression repeat .)
    REPEAT          reduce using rule 7 (expression -> expression repeat .)
    FOR             reduce using rule 7 (expression -> expression repeat .)
    WHILE           reduce using rule 7 (expression -> expression repeat .)
    $end            reduce using rule 7 (expression -> expression repeat .)
    RMB             reduce using rule 7 (expression -> expression repeat .)


state 30

    (8) expression -> expression for .

    VAR             reduce using rule 8 (expression -> expression for .)
    IDENTIFIER      reduce using rule 8 (expression -> expression for .)
    IF              reduce using rule 8 (expression -> expression for .)
    FUNCTION        reduce using rule 8 (expression -> expression for .)
    REPEAT          reduce using rule 8 (expression -> expression for .)
    FOR             reduce using rule 8 (expression -> expression for .)
    WHILE           reduce using rule 8 (expression -> expression for .)
    $end            reduce using rule 8 (expression -> expression for .)
    RMB             reduce using rule 8 (expression -> expression for .)


state 31

    (9) expression -> expression while .

    VAR             reduce using rule 9 (expression -> expression while .)
    IDENTIFIER      reduce using rule 9 (expression -> expression while .)
    IF              reduce using rule 9 (expression -> expression while .)
    FUNCTION        reduce using rule 9 (expression -> expression while .)
    REPEAT          reduce using rule 9 (expression -> expression while .)
    FOR             reduce using rule 9 (expression -> expression while .)
    WHILE           reduce using rule 9 (expression -> expression while .)
    $end            reduce using rule 9 (expression -> expression while .)
    RMB             reduce using rule 9 (expression -> expression while .)


state 32

    (10) expression -> variable_declaration SEMI .

    VAR             reduce using rule 10 (expression -> variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 10 (expression -> variable_declaration SEMI .)
    IF              reduce using rule 10 (expression -> variable_declaration SEMI .)
    FUNCTION        reduce using rule 10 (expression -> variable_declaration SEMI .)
    REPEAT          reduce using rule 10 (expression -> variable_declaration SEMI .)
    FOR             reduce using rule 10 (expression -> variable_declaration SEMI .)
    WHILE           reduce using rule 10 (expression -> variable_declaration SEMI .)
    $end            reduce using rule 10 (expression -> variable_declaration SEMI .)
    RMB             reduce using rule 10 (expression -> variable_declaration SEMI .)


state 33

    (11) expression -> variable_value_change SEMI .

    VAR             reduce using rule 11 (expression -> variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 11 (expression -> variable_value_change SEMI .)
    IF              reduce using rule 11 (expression -> variable_value_change SEMI .)
    FUNCTION        reduce using rule 11 (expression -> variable_value_change SEMI .)
    REPEAT          reduce using rule 11 (expression -> variable_value_change SEMI .)
    FOR             reduce using rule 11 (expression -> variable_value_change SEMI .)
    WHILE           reduce using rule 11 (expression -> variable_value_change SEMI .)
    $end            reduce using rule 11 (expression -> variable_value_change SEMI .)
    RMB             reduce using rule 11 (expression -> variable_value_change SEMI .)


state 34

    (48) variable_declaration -> VAR IDENTIFIER . EQUAL LIST
    (49) variable_declaration -> VAR IDENTIFIER . EQUAL calculate
    (50) variable_declaration -> VAR IDENTIFIER .

    EQUAL           shift and go to state 55
    SEMI            reduce using rule 50 (variable_declaration -> VAR IDENTIFIER .)


state 35

    (46) variable_value_change -> IDENTIFIER EQUAL . LIST
    (47) variable_value_change -> IDENTIFIER EQUAL . calculate
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB

    LIST            shift and go to state 57
    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63

    calculate                      shift and go to state 58

state 36

    (32) function_call -> IDENTIFIER LSB . parameter RSB
    (33) parameter -> . parameter COMMA calculate
    (34) parameter -> . calculate
    (35) parameter -> . empty
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB
    (61) empty -> .

    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63
    RSB             reduce using rule 61 (empty -> .)
    COMMA           reduce using rule 61 (empty -> .)

    parameter                      shift and go to state 64
    calculate                      shift and go to state 65
    empty                          shift and go to state 66

state 37

    (36) if_statement -> if_statement_head if_statement_body .

    VAR             reduce using rule 36 (if_statement -> if_statement_head if_statement_body .)
    IDENTIFIER      reduce using rule 36 (if_statement -> if_statement_head if_statement_body .)
    IF              reduce using rule 36 (if_statement -> if_statement_head if_statement_body .)
    FUNCTION        reduce using rule 36 (if_statement -> if_statement_head if_statement_body .)
    REPEAT          reduce using rule 36 (if_statement -> if_statement_head if_statement_body .)
    FOR             reduce using rule 36 (if_statement -> if_statement_head if_statement_body .)
    WHILE           reduce using rule 36 (if_statement -> if_statement_head if_statement_body .)
    $end            reduce using rule 36 (if_statement -> if_statement_head if_statement_body .)
    RMB             reduce using rule 36 (if_statement -> if_statement_head if_statement_body .)


state 38

    (38) if_statement_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . variable_declaration SEMI
    (11) expression -> . variable_value_change SEMI
    (12) expression -> . if_statement
    (13) expression -> . function
    (14) expression -> . function_call
    (15) expression -> . repeat
    (16) expression -> . for
    (17) expression -> . while
    (18) expression -> . empty
    (48) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (49) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (50) variable_declaration -> . VAR IDENTIFIER
    (46) variable_value_change -> . IDENTIFIER EQUAL LIST
    (47) variable_value_change -> . IDENTIFIER EQUAL calculate
    (36) if_statement -> . if_statement_head if_statement_body
    (28) function -> . function_head function_body
    (32) function_call -> . IDENTIFIER LSB parameter RSB
    (25) repeat -> . repeat_head repeat_body
    (19) for -> . for_head for_body
    (22) while -> . while_head while_body
    (61) empty -> .
    (37) if_statement_head -> . IF LSB condition RSB
    (29) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (30) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (26) repeat_head -> . REPEAT LSB calculate RSB
    (20) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (23) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RMB             reduce using rule 61 (empty -> .)
    IF              shift and go to state 19
    FUNCTION        shift and go to state 20
    REPEAT          shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

  ! VAR             [ reduce using rule 61 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 61 (empty -> .) ]
  ! IF              [ reduce using rule 61 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 61 (empty -> .) ]
  ! REPEAT          [ reduce using rule 61 (empty -> .) ]
  ! FOR             [ reduce using rule 61 (empty -> .) ]
  ! WHILE           [ reduce using rule 61 (empty -> .) ]

    expression                     shift and go to state 67
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    empty                          shift and go to state 11
    if_statement_head              shift and go to state 14
    function_head                  shift and go to state 15
    repeat_head                    shift and go to state 16
    for_head                       shift and go to state 17
    while_head                     shift and go to state 18

state 39

    (28) function -> function_head function_body .

    VAR             reduce using rule 28 (function -> function_head function_body .)
    IDENTIFIER      reduce using rule 28 (function -> function_head function_body .)
    IF              reduce using rule 28 (function -> function_head function_body .)
    FUNCTION        reduce using rule 28 (function -> function_head function_body .)
    REPEAT          reduce using rule 28 (function -> function_head function_body .)
    FOR             reduce using rule 28 (function -> function_head function_body .)
    WHILE           reduce using rule 28 (function -> function_head function_body .)
    $end            reduce using rule 28 (function -> function_head function_body .)
    RMB             reduce using rule 28 (function -> function_head function_body .)


state 40

    (31) function_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . variable_declaration SEMI
    (11) expression -> . variable_value_change SEMI
    (12) expression -> . if_statement
    (13) expression -> . function
    (14) expression -> . function_call
    (15) expression -> . repeat
    (16) expression -> . for
    (17) expression -> . while
    (18) expression -> . empty
    (48) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (49) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (50) variable_declaration -> . VAR IDENTIFIER
    (46) variable_value_change -> . IDENTIFIER EQUAL LIST
    (47) variable_value_change -> . IDENTIFIER EQUAL calculate
    (36) if_statement -> . if_statement_head if_statement_body
    (28) function -> . function_head function_body
    (32) function_call -> . IDENTIFIER LSB parameter RSB
    (25) repeat -> . repeat_head repeat_body
    (19) for -> . for_head for_body
    (22) while -> . while_head while_body
    (61) empty -> .
    (37) if_statement_head -> . IF LSB condition RSB
    (29) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (30) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (26) repeat_head -> . REPEAT LSB calculate RSB
    (20) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (23) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RMB             reduce using rule 61 (empty -> .)
    IF              shift and go to state 19
    FUNCTION        shift and go to state 20
    REPEAT          shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

  ! VAR             [ reduce using rule 61 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 61 (empty -> .) ]
  ! IF              [ reduce using rule 61 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 61 (empty -> .) ]
  ! REPEAT          [ reduce using rule 61 (empty -> .) ]
  ! FOR             [ reduce using rule 61 (empty -> .) ]
  ! WHILE           [ reduce using rule 61 (empty -> .) ]

    expression                     shift and go to state 68
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    empty                          shift and go to state 11
    if_statement_head              shift and go to state 14
    function_head                  shift and go to state 15
    repeat_head                    shift and go to state 16
    for_head                       shift and go to state 17
    while_head                     shift and go to state 18

state 41

    (25) repeat -> repeat_head repeat_body .

    VAR             reduce using rule 25 (repeat -> repeat_head repeat_body .)
    IDENTIFIER      reduce using rule 25 (repeat -> repeat_head repeat_body .)
    IF              reduce using rule 25 (repeat -> repeat_head repeat_body .)
    FUNCTION        reduce using rule 25 (repeat -> repeat_head repeat_body .)
    REPEAT          reduce using rule 25 (repeat -> repeat_head repeat_body .)
    FOR             reduce using rule 25 (repeat -> repeat_head repeat_body .)
    WHILE           reduce using rule 25 (repeat -> repeat_head repeat_body .)
    $end            reduce using rule 25 (repeat -> repeat_head repeat_body .)
    RMB             reduce using rule 25 (repeat -> repeat_head repeat_body .)


state 42

    (27) repeat_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . variable_declaration SEMI
    (11) expression -> . variable_value_change SEMI
    (12) expression -> . if_statement
    (13) expression -> . function
    (14) expression -> . function_call
    (15) expression -> . repeat
    (16) expression -> . for
    (17) expression -> . while
    (18) expression -> . empty
    (48) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (49) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (50) variable_declaration -> . VAR IDENTIFIER
    (46) variable_value_change -> . IDENTIFIER EQUAL LIST
    (47) variable_value_change -> . IDENTIFIER EQUAL calculate
    (36) if_statement -> . if_statement_head if_statement_body
    (28) function -> . function_head function_body
    (32) function_call -> . IDENTIFIER LSB parameter RSB
    (25) repeat -> . repeat_head repeat_body
    (19) for -> . for_head for_body
    (22) while -> . while_head while_body
    (61) empty -> .
    (37) if_statement_head -> . IF LSB condition RSB
    (29) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (30) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (26) repeat_head -> . REPEAT LSB calculate RSB
    (20) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (23) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RMB             reduce using rule 61 (empty -> .)
    IF              shift and go to state 19
    FUNCTION        shift and go to state 20
    REPEAT          shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

  ! VAR             [ reduce using rule 61 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 61 (empty -> .) ]
  ! IF              [ reduce using rule 61 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 61 (empty -> .) ]
  ! REPEAT          [ reduce using rule 61 (empty -> .) ]
  ! FOR             [ reduce using rule 61 (empty -> .) ]
  ! WHILE           [ reduce using rule 61 (empty -> .) ]

    expression                     shift and go to state 69
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    empty                          shift and go to state 11
    if_statement_head              shift and go to state 14
    function_head                  shift and go to state 15
    repeat_head                    shift and go to state 16
    for_head                       shift and go to state 17
    while_head                     shift and go to state 18

state 43

    (19) for -> for_head for_body .

    VAR             reduce using rule 19 (for -> for_head for_body .)
    IDENTIFIER      reduce using rule 19 (for -> for_head for_body .)
    IF              reduce using rule 19 (for -> for_head for_body .)
    FUNCTION        reduce using rule 19 (for -> for_head for_body .)
    REPEAT          reduce using rule 19 (for -> for_head for_body .)
    FOR             reduce using rule 19 (for -> for_head for_body .)
    WHILE           reduce using rule 19 (for -> for_head for_body .)
    $end            reduce using rule 19 (for -> for_head for_body .)
    RMB             reduce using rule 19 (for -> for_head for_body .)


state 44

    (21) for_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . variable_declaration SEMI
    (11) expression -> . variable_value_change SEMI
    (12) expression -> . if_statement
    (13) expression -> . function
    (14) expression -> . function_call
    (15) expression -> . repeat
    (16) expression -> . for
    (17) expression -> . while
    (18) expression -> . empty
    (48) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (49) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (50) variable_declaration -> . VAR IDENTIFIER
    (46) variable_value_change -> . IDENTIFIER EQUAL LIST
    (47) variable_value_change -> . IDENTIFIER EQUAL calculate
    (36) if_statement -> . if_statement_head if_statement_body
    (28) function -> . function_head function_body
    (32) function_call -> . IDENTIFIER LSB parameter RSB
    (25) repeat -> . repeat_head repeat_body
    (19) for -> . for_head for_body
    (22) while -> . while_head while_body
    (61) empty -> .
    (37) if_statement_head -> . IF LSB condition RSB
    (29) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (30) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (26) repeat_head -> . REPEAT LSB calculate RSB
    (20) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (23) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RMB             reduce using rule 61 (empty -> .)
    IF              shift and go to state 19
    FUNCTION        shift and go to state 20
    REPEAT          shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

  ! VAR             [ reduce using rule 61 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 61 (empty -> .) ]
  ! IF              [ reduce using rule 61 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 61 (empty -> .) ]
  ! REPEAT          [ reduce using rule 61 (empty -> .) ]
  ! FOR             [ reduce using rule 61 (empty -> .) ]
  ! WHILE           [ reduce using rule 61 (empty -> .) ]

    expression                     shift and go to state 70
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    empty                          shift and go to state 11
    if_statement_head              shift and go to state 14
    function_head                  shift and go to state 15
    repeat_head                    shift and go to state 16
    for_head                       shift and go to state 17
    while_head                     shift and go to state 18

state 45

    (22) while -> while_head while_body .

    VAR             reduce using rule 22 (while -> while_head while_body .)
    IDENTIFIER      reduce using rule 22 (while -> while_head while_body .)
    IF              reduce using rule 22 (while -> while_head while_body .)
    FUNCTION        reduce using rule 22 (while -> while_head while_body .)
    REPEAT          reduce using rule 22 (while -> while_head while_body .)
    FOR             reduce using rule 22 (while -> while_head while_body .)
    WHILE           reduce using rule 22 (while -> while_head while_body .)
    $end            reduce using rule 22 (while -> while_head while_body .)
    RMB             reduce using rule 22 (while -> while_head while_body .)


state 46

    (24) while_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . variable_declaration SEMI
    (11) expression -> . variable_value_change SEMI
    (12) expression -> . if_statement
    (13) expression -> . function
    (14) expression -> . function_call
    (15) expression -> . repeat
    (16) expression -> . for
    (17) expression -> . while
    (18) expression -> . empty
    (48) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (49) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (50) variable_declaration -> . VAR IDENTIFIER
    (46) variable_value_change -> . IDENTIFIER EQUAL LIST
    (47) variable_value_change -> . IDENTIFIER EQUAL calculate
    (36) if_statement -> . if_statement_head if_statement_body
    (28) function -> . function_head function_body
    (32) function_call -> . IDENTIFIER LSB parameter RSB
    (25) repeat -> . repeat_head repeat_body
    (19) for -> . for_head for_body
    (22) while -> . while_head while_body
    (61) empty -> .
    (37) if_statement_head -> . IF LSB condition RSB
    (29) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (30) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (26) repeat_head -> . REPEAT LSB calculate RSB
    (20) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (23) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RMB             reduce using rule 61 (empty -> .)
    IF              shift and go to state 19
    FUNCTION        shift and go to state 20
    REPEAT          shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

  ! VAR             [ reduce using rule 61 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 61 (empty -> .) ]
  ! IF              [ reduce using rule 61 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 61 (empty -> .) ]
  ! REPEAT          [ reduce using rule 61 (empty -> .) ]
  ! FOR             [ reduce using rule 61 (empty -> .) ]
  ! WHILE           [ reduce using rule 61 (empty -> .) ]

    expression                     shift and go to state 71
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    empty                          shift and go to state 11
    if_statement_head              shift and go to state 14
    function_head                  shift and go to state 15
    repeat_head                    shift and go to state 16
    for_head                       shift and go to state 17
    while_head                     shift and go to state 18

state 47

    (37) if_statement_head -> IF LSB . condition RSB
    (39) condition -> . condition LB calculate
    (40) condition -> . condition RB calculate
    (41) condition -> . condition LB EQUAL calculate
    (42) condition -> . condition RB EQUAL calculate
    (43) condition -> . condition EQUAL calculate
    (44) condition -> . calculate
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63

    condition                      shift and go to state 72
    calculate                      shift and go to state 73

state 48

    (29) function_head -> FUNCTION IDENTIFIER . LSB empty RSB
    (30) function_head -> FUNCTION IDENTIFIER . LSB parameter RSB

    LSB             shift and go to state 74


state 49

    (26) repeat_head -> REPEAT LSB . calculate RSB
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63

    calculate                      shift and go to state 75

state 50

    (20) for_head -> FOR LSB . IDENTIFIER IN IDENTIFIER RSB

    IDENTIFIER      shift and go to state 76


state 51

    (23) while_head -> WHILE LSB . condition RSB
    (39) condition -> . condition LB calculate
    (40) condition -> . condition RB calculate
    (41) condition -> . condition LB EQUAL calculate
    (42) condition -> . condition RB EQUAL calculate
    (43) condition -> . condition EQUAL calculate
    (44) condition -> . calculate
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63

    condition                      shift and go to state 77
    calculate                      shift and go to state 73

state 52

    (2) expression -> expression variable_declaration SEMI .

    VAR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IF              reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FUNCTION        reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    REPEAT          reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FOR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    WHILE           reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    $end            reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    RMB             reduce using rule 2 (expression -> expression variable_declaration SEMI .)


state 53

    (3) expression -> expression variable_value_change SEMI .

    VAR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IF              reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FUNCTION        reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    REPEAT          reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FOR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    WHILE           reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    $end            reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    RMB             reduce using rule 3 (expression -> expression variable_value_change SEMI .)


state 54

    (6) expression -> expression function_call SEMI .

    VAR             reduce using rule 6 (expression -> expression function_call SEMI .)
    IDENTIFIER      reduce using rule 6 (expression -> expression function_call SEMI .)
    IF              reduce using rule 6 (expression -> expression function_call SEMI .)
    FUNCTION        reduce using rule 6 (expression -> expression function_call SEMI .)
    REPEAT          reduce using rule 6 (expression -> expression function_call SEMI .)
    FOR             reduce using rule 6 (expression -> expression function_call SEMI .)
    WHILE           reduce using rule 6 (expression -> expression function_call SEMI .)
    $end            reduce using rule 6 (expression -> expression function_call SEMI .)
    RMB             reduce using rule 6 (expression -> expression function_call SEMI .)


state 55

    (48) variable_declaration -> VAR IDENTIFIER EQUAL . LIST
    (49) variable_declaration -> VAR IDENTIFIER EQUAL . calculate
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB

    LIST            shift and go to state 78
    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63

    calculate                      shift and go to state 79

state 56

    (59) calculate -> IDENTIFIER .

    PLUS            reduce using rule 59 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 59 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 59 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 59 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 59 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 59 (calculate -> IDENTIFIER .)
    COMMA           reduce using rule 59 (calculate -> IDENTIFIER .)
    LB              reduce using rule 59 (calculate -> IDENTIFIER .)
    RB              reduce using rule 59 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 59 (calculate -> IDENTIFIER .)


state 57

    (46) variable_value_change -> IDENTIFIER EQUAL LIST .

    SEMI            reduce using rule 46 (variable_value_change -> IDENTIFIER EQUAL LIST .)


state 58

    (47) variable_value_change -> IDENTIFIER EQUAL calculate .
    (51) calculate -> calculate . PLUS calculate
    (52) calculate -> calculate . MINUS calculate
    (54) calculate -> calculate . MUL calculate
    (55) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 47 (variable_value_change -> IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83


state 59

    (53) calculate -> MINUS . calculate
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63

    calculate                      shift and go to state 84

state 60

    (56) calculate -> INT .

    PLUS            reduce using rule 56 (calculate -> INT .)
    MINUS           reduce using rule 56 (calculate -> INT .)
    MUL             reduce using rule 56 (calculate -> INT .)
    DIV             reduce using rule 56 (calculate -> INT .)
    SEMI            reduce using rule 56 (calculate -> INT .)
    RSB             reduce using rule 56 (calculate -> INT .)
    COMMA           reduce using rule 56 (calculate -> INT .)
    LB              reduce using rule 56 (calculate -> INT .)
    RB              reduce using rule 56 (calculate -> INT .)
    EQUAL           reduce using rule 56 (calculate -> INT .)


state 61

    (57) calculate -> FLOAT .

    PLUS            reduce using rule 57 (calculate -> FLOAT .)
    MINUS           reduce using rule 57 (calculate -> FLOAT .)
    MUL             reduce using rule 57 (calculate -> FLOAT .)
    DIV             reduce using rule 57 (calculate -> FLOAT .)
    SEMI            reduce using rule 57 (calculate -> FLOAT .)
    RSB             reduce using rule 57 (calculate -> FLOAT .)
    COMMA           reduce using rule 57 (calculate -> FLOAT .)
    LB              reduce using rule 57 (calculate -> FLOAT .)
    RB              reduce using rule 57 (calculate -> FLOAT .)
    EQUAL           reduce using rule 57 (calculate -> FLOAT .)


state 62

    (58) calculate -> STRING .

    PLUS            reduce using rule 58 (calculate -> STRING .)
    MINUS           reduce using rule 58 (calculate -> STRING .)
    MUL             reduce using rule 58 (calculate -> STRING .)
    DIV             reduce using rule 58 (calculate -> STRING .)
    SEMI            reduce using rule 58 (calculate -> STRING .)
    RSB             reduce using rule 58 (calculate -> STRING .)
    COMMA           reduce using rule 58 (calculate -> STRING .)
    LB              reduce using rule 58 (calculate -> STRING .)
    RB              reduce using rule 58 (calculate -> STRING .)
    EQUAL           reduce using rule 58 (calculate -> STRING .)


state 63

    (60) calculate -> LSB . calculate RSB
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63

    calculate                      shift and go to state 85

state 64

    (32) function_call -> IDENTIFIER LSB parameter . RSB
    (33) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 86
    COMMA           shift and go to state 87


state 65

    (34) parameter -> calculate .
    (51) calculate -> calculate . PLUS calculate
    (52) calculate -> calculate . MINUS calculate
    (54) calculate -> calculate . MUL calculate
    (55) calculate -> calculate . DIV calculate

    RSB             reduce using rule 34 (parameter -> calculate .)
    COMMA           reduce using rule 34 (parameter -> calculate .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83


state 66

    (35) parameter -> empty .

    RSB             reduce using rule 35 (parameter -> empty .)
    COMMA           reduce using rule 35 (parameter -> empty .)


state 67

    (38) if_statement_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (48) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (49) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (50) variable_declaration -> . VAR IDENTIFIER
    (46) variable_value_change -> . IDENTIFIER EQUAL LIST
    (47) variable_value_change -> . IDENTIFIER EQUAL calculate
    (36) if_statement -> . if_statement_head if_statement_body
    (28) function -> . function_head function_body
    (32) function_call -> . IDENTIFIER LSB parameter RSB
    (25) repeat -> . repeat_head repeat_body
    (19) for -> . for_head for_body
    (22) while -> . while_head while_body
    (37) if_statement_head -> . IF LSB condition RSB
    (29) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (30) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (26) repeat_head -> . REPEAT LSB calculate RSB
    (20) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (23) while_head -> . WHILE LSB condition RSB

    RMB             shift and go to state 88
    VAR             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 19
    FUNCTION        shift and go to state 20
    REPEAT          shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

    variable_declaration           shift and go to state 24
    variable_value_change          shift and go to state 25
    if_statement                   shift and go to state 26
    function                       shift and go to state 27
    function_call                  shift and go to state 28
    repeat                         shift and go to state 29
    for                            shift and go to state 30
    while                          shift and go to state 31
    if_statement_head              shift and go to state 14
    function_head                  shift and go to state 15
    repeat_head                    shift and go to state 16
    for_head                       shift and go to state 17
    while_head                     shift and go to state 18

state 68

    (31) function_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (48) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (49) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (50) variable_declaration -> . VAR IDENTIFIER
    (46) variable_value_change -> . IDENTIFIER EQUAL LIST
    (47) variable_value_change -> . IDENTIFIER EQUAL calculate
    (36) if_statement -> . if_statement_head if_statement_body
    (28) function -> . function_head function_body
    (32) function_call -> . IDENTIFIER LSB parameter RSB
    (25) repeat -> . repeat_head repeat_body
    (19) for -> . for_head for_body
    (22) while -> . while_head while_body
    (37) if_statement_head -> . IF LSB condition RSB
    (29) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (30) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (26) repeat_head -> . REPEAT LSB calculate RSB
    (20) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (23) while_head -> . WHILE LSB condition RSB

    RMB             shift and go to state 89
    VAR             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 19
    FUNCTION        shift and go to state 20
    REPEAT          shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

    variable_declaration           shift and go to state 24
    variable_value_change          shift and go to state 25
    if_statement                   shift and go to state 26
    function                       shift and go to state 27
    function_call                  shift and go to state 28
    repeat                         shift and go to state 29
    for                            shift and go to state 30
    while                          shift and go to state 31
    if_statement_head              shift and go to state 14
    function_head                  shift and go to state 15
    repeat_head                    shift and go to state 16
    for_head                       shift and go to state 17
    while_head                     shift and go to state 18

state 69

    (27) repeat_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (48) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (49) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (50) variable_declaration -> . VAR IDENTIFIER
    (46) variable_value_change -> . IDENTIFIER EQUAL LIST
    (47) variable_value_change -> . IDENTIFIER EQUAL calculate
    (36) if_statement -> . if_statement_head if_statement_body
    (28) function -> . function_head function_body
    (32) function_call -> . IDENTIFIER LSB parameter RSB
    (25) repeat -> . repeat_head repeat_body
    (19) for -> . for_head for_body
    (22) while -> . while_head while_body
    (37) if_statement_head -> . IF LSB condition RSB
    (29) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (30) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (26) repeat_head -> . REPEAT LSB calculate RSB
    (20) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (23) while_head -> . WHILE LSB condition RSB

    RMB             shift and go to state 90
    VAR             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 19
    FUNCTION        shift and go to state 20
    REPEAT          shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

    variable_declaration           shift and go to state 24
    variable_value_change          shift and go to state 25
    if_statement                   shift and go to state 26
    function                       shift and go to state 27
    function_call                  shift and go to state 28
    repeat                         shift and go to state 29
    for                            shift and go to state 30
    while                          shift and go to state 31
    if_statement_head              shift and go to state 14
    function_head                  shift and go to state 15
    repeat_head                    shift and go to state 16
    for_head                       shift and go to state 17
    while_head                     shift and go to state 18

state 70

    (21) for_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (48) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (49) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (50) variable_declaration -> . VAR IDENTIFIER
    (46) variable_value_change -> . IDENTIFIER EQUAL LIST
    (47) variable_value_change -> . IDENTIFIER EQUAL calculate
    (36) if_statement -> . if_statement_head if_statement_body
    (28) function -> . function_head function_body
    (32) function_call -> . IDENTIFIER LSB parameter RSB
    (25) repeat -> . repeat_head repeat_body
    (19) for -> . for_head for_body
    (22) while -> . while_head while_body
    (37) if_statement_head -> . IF LSB condition RSB
    (29) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (30) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (26) repeat_head -> . REPEAT LSB calculate RSB
    (20) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (23) while_head -> . WHILE LSB condition RSB

    RMB             shift and go to state 91
    VAR             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 19
    FUNCTION        shift and go to state 20
    REPEAT          shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

    variable_declaration           shift and go to state 24
    variable_value_change          shift and go to state 25
    if_statement                   shift and go to state 26
    function                       shift and go to state 27
    function_call                  shift and go to state 28
    repeat                         shift and go to state 29
    for                            shift and go to state 30
    while                          shift and go to state 31
    if_statement_head              shift and go to state 14
    function_head                  shift and go to state 15
    repeat_head                    shift and go to state 16
    for_head                       shift and go to state 17
    while_head                     shift and go to state 18

state 71

    (24) while_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (48) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (49) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (50) variable_declaration -> . VAR IDENTIFIER
    (46) variable_value_change -> . IDENTIFIER EQUAL LIST
    (47) variable_value_change -> . IDENTIFIER EQUAL calculate
    (36) if_statement -> . if_statement_head if_statement_body
    (28) function -> . function_head function_body
    (32) function_call -> . IDENTIFIER LSB parameter RSB
    (25) repeat -> . repeat_head repeat_body
    (19) for -> . for_head for_body
    (22) while -> . while_head while_body
    (37) if_statement_head -> . IF LSB condition RSB
    (29) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (30) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (26) repeat_head -> . REPEAT LSB calculate RSB
    (20) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (23) while_head -> . WHILE LSB condition RSB

    RMB             shift and go to state 92
    VAR             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 19
    FUNCTION        shift and go to state 20
    REPEAT          shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

    variable_declaration           shift and go to state 24
    variable_value_change          shift and go to state 25
    if_statement                   shift and go to state 26
    function                       shift and go to state 27
    function_call                  shift and go to state 28
    repeat                         shift and go to state 29
    for                            shift and go to state 30
    while                          shift and go to state 31
    if_statement_head              shift and go to state 14
    function_head                  shift and go to state 15
    repeat_head                    shift and go to state 16
    for_head                       shift and go to state 17
    while_head                     shift and go to state 18

state 72

    (37) if_statement_head -> IF LSB condition . RSB
    (39) condition -> condition . LB calculate
    (40) condition -> condition . RB calculate
    (41) condition -> condition . LB EQUAL calculate
    (42) condition -> condition . RB EQUAL calculate
    (43) condition -> condition . EQUAL calculate

    RSB             shift and go to state 93
    LB              shift and go to state 94
    RB              shift and go to state 95
    EQUAL           shift and go to state 96


state 73

    (44) condition -> calculate .
    (51) calculate -> calculate . PLUS calculate
    (52) calculate -> calculate . MINUS calculate
    (54) calculate -> calculate . MUL calculate
    (55) calculate -> calculate . DIV calculate

    RSB             reduce using rule 44 (condition -> calculate .)
    LB              reduce using rule 44 (condition -> calculate .)
    RB              reduce using rule 44 (condition -> calculate .)
    EQUAL           reduce using rule 44 (condition -> calculate .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83


state 74

    (29) function_head -> FUNCTION IDENTIFIER LSB . empty RSB
    (30) function_head -> FUNCTION IDENTIFIER LSB . parameter RSB
    (61) empty -> .
    (33) parameter -> . parameter COMMA calculate
    (34) parameter -> . calculate
    (35) parameter -> . empty
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB

    RSB             reduce using rule 61 (empty -> .)
    COMMA           reduce using rule 61 (empty -> .)
    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63

    empty                          shift and go to state 97
    parameter                      shift and go to state 98
    calculate                      shift and go to state 65

state 75

    (26) repeat_head -> REPEAT LSB calculate . RSB
    (51) calculate -> calculate . PLUS calculate
    (52) calculate -> calculate . MINUS calculate
    (54) calculate -> calculate . MUL calculate
    (55) calculate -> calculate . DIV calculate

    RSB             shift and go to state 99
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83


state 76

    (20) for_head -> FOR LSB IDENTIFIER . IN IDENTIFIER RSB

    IN              shift and go to state 100


state 77

    (23) while_head -> WHILE LSB condition . RSB
    (39) condition -> condition . LB calculate
    (40) condition -> condition . RB calculate
    (41) condition -> condition . LB EQUAL calculate
    (42) condition -> condition . RB EQUAL calculate
    (43) condition -> condition . EQUAL calculate

    RSB             shift and go to state 101
    LB              shift and go to state 94
    RB              shift and go to state 95
    EQUAL           shift and go to state 96


state 78

    (48) variable_declaration -> VAR IDENTIFIER EQUAL LIST .

    SEMI            reduce using rule 48 (variable_declaration -> VAR IDENTIFIER EQUAL LIST .)


state 79

    (49) variable_declaration -> VAR IDENTIFIER EQUAL calculate .
    (51) calculate -> calculate . PLUS calculate
    (52) calculate -> calculate . MINUS calculate
    (54) calculate -> calculate . MUL calculate
    (55) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 49 (variable_declaration -> VAR IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83


state 80

    (51) calculate -> calculate PLUS . calculate
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63

    calculate                      shift and go to state 102

state 81

    (52) calculate -> calculate MINUS . calculate
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63

    calculate                      shift and go to state 103

state 82

    (54) calculate -> calculate MUL . calculate
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63

    calculate                      shift and go to state 104

state 83

    (55) calculate -> calculate DIV . calculate
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63

    calculate                      shift and go to state 105

state 84

    (53) calculate -> MINUS calculate .
    (51) calculate -> calculate . PLUS calculate
    (52) calculate -> calculate . MINUS calculate
    (54) calculate -> calculate . MUL calculate
    (55) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 53 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 53 (calculate -> MINUS calculate .)
    MUL             reduce using rule 53 (calculate -> MINUS calculate .)
    DIV             reduce using rule 53 (calculate -> MINUS calculate .)
    SEMI            reduce using rule 53 (calculate -> MINUS calculate .)
    RSB             reduce using rule 53 (calculate -> MINUS calculate .)
    COMMA           reduce using rule 53 (calculate -> MINUS calculate .)
    LB              reduce using rule 53 (calculate -> MINUS calculate .)
    RB              reduce using rule 53 (calculate -> MINUS calculate .)
    EQUAL           reduce using rule 53 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]
  ! MUL             [ shift and go to state 82 ]
  ! DIV             [ shift and go to state 83 ]


state 85

    (60) calculate -> LSB calculate . RSB
    (51) calculate -> calculate . PLUS calculate
    (52) calculate -> calculate . MINUS calculate
    (54) calculate -> calculate . MUL calculate
    (55) calculate -> calculate . DIV calculate

    RSB             shift and go to state 106
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83


state 86

    (32) function_call -> IDENTIFIER LSB parameter RSB .

    VAR             reduce using rule 32 (function_call -> IDENTIFIER LSB parameter RSB .)
    IDENTIFIER      reduce using rule 32 (function_call -> IDENTIFIER LSB parameter RSB .)
    IF              reduce using rule 32 (function_call -> IDENTIFIER LSB parameter RSB .)
    FUNCTION        reduce using rule 32 (function_call -> IDENTIFIER LSB parameter RSB .)
    REPEAT          reduce using rule 32 (function_call -> IDENTIFIER LSB parameter RSB .)
    FOR             reduce using rule 32 (function_call -> IDENTIFIER LSB parameter RSB .)
    WHILE           reduce using rule 32 (function_call -> IDENTIFIER LSB parameter RSB .)
    $end            reduce using rule 32 (function_call -> IDENTIFIER LSB parameter RSB .)
    SEMI            reduce using rule 32 (function_call -> IDENTIFIER LSB parameter RSB .)
    RMB             reduce using rule 32 (function_call -> IDENTIFIER LSB parameter RSB .)


state 87

    (33) parameter -> parameter COMMA . calculate
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63

    calculate                      shift and go to state 107

state 88

    (38) if_statement_body -> LMB expression RMB .

    VAR             reduce using rule 38 (if_statement_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 38 (if_statement_body -> LMB expression RMB .)
    IF              reduce using rule 38 (if_statement_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 38 (if_statement_body -> LMB expression RMB .)
    REPEAT          reduce using rule 38 (if_statement_body -> LMB expression RMB .)
    FOR             reduce using rule 38 (if_statement_body -> LMB expression RMB .)
    WHILE           reduce using rule 38 (if_statement_body -> LMB expression RMB .)
    $end            reduce using rule 38 (if_statement_body -> LMB expression RMB .)
    RMB             reduce using rule 38 (if_statement_body -> LMB expression RMB .)


state 89

    (31) function_body -> LMB expression RMB .

    VAR             reduce using rule 31 (function_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 31 (function_body -> LMB expression RMB .)
    IF              reduce using rule 31 (function_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 31 (function_body -> LMB expression RMB .)
    REPEAT          reduce using rule 31 (function_body -> LMB expression RMB .)
    FOR             reduce using rule 31 (function_body -> LMB expression RMB .)
    WHILE           reduce using rule 31 (function_body -> LMB expression RMB .)
    $end            reduce using rule 31 (function_body -> LMB expression RMB .)
    RMB             reduce using rule 31 (function_body -> LMB expression RMB .)


state 90

    (27) repeat_body -> LMB expression RMB .

    VAR             reduce using rule 27 (repeat_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 27 (repeat_body -> LMB expression RMB .)
    IF              reduce using rule 27 (repeat_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 27 (repeat_body -> LMB expression RMB .)
    REPEAT          reduce using rule 27 (repeat_body -> LMB expression RMB .)
    FOR             reduce using rule 27 (repeat_body -> LMB expression RMB .)
    WHILE           reduce using rule 27 (repeat_body -> LMB expression RMB .)
    $end            reduce using rule 27 (repeat_body -> LMB expression RMB .)
    RMB             reduce using rule 27 (repeat_body -> LMB expression RMB .)


state 91

    (21) for_body -> LMB expression RMB .

    VAR             reduce using rule 21 (for_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 21 (for_body -> LMB expression RMB .)
    IF              reduce using rule 21 (for_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 21 (for_body -> LMB expression RMB .)
    REPEAT          reduce using rule 21 (for_body -> LMB expression RMB .)
    FOR             reduce using rule 21 (for_body -> LMB expression RMB .)
    WHILE           reduce using rule 21 (for_body -> LMB expression RMB .)
    $end            reduce using rule 21 (for_body -> LMB expression RMB .)
    RMB             reduce using rule 21 (for_body -> LMB expression RMB .)


state 92

    (24) while_body -> LMB expression RMB .

    VAR             reduce using rule 24 (while_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 24 (while_body -> LMB expression RMB .)
    IF              reduce using rule 24 (while_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 24 (while_body -> LMB expression RMB .)
    REPEAT          reduce using rule 24 (while_body -> LMB expression RMB .)
    FOR             reduce using rule 24 (while_body -> LMB expression RMB .)
    WHILE           reduce using rule 24 (while_body -> LMB expression RMB .)
    $end            reduce using rule 24 (while_body -> LMB expression RMB .)
    RMB             reduce using rule 24 (while_body -> LMB expression RMB .)


state 93

    (37) if_statement_head -> IF LSB condition RSB .

    LMB             reduce using rule 37 (if_statement_head -> IF LSB condition RSB .)


state 94

    (39) condition -> condition LB . calculate
    (41) condition -> condition LB . EQUAL calculate
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 109
    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63

    calculate                      shift and go to state 108

state 95

    (40) condition -> condition RB . calculate
    (42) condition -> condition RB . EQUAL calculate
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 111
    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63

    calculate                      shift and go to state 110

state 96

    (43) condition -> condition EQUAL . calculate
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63

    calculate                      shift and go to state 112

state 97

    (29) function_head -> FUNCTION IDENTIFIER LSB empty . RSB
    (35) parameter -> empty .

  ! shift/reduce conflict for RSB resolved as shift
    RSB             shift and go to state 113
    COMMA           reduce using rule 35 (parameter -> empty .)

  ! RSB             [ reduce using rule 35 (parameter -> empty .) ]


state 98

    (30) function_head -> FUNCTION IDENTIFIER LSB parameter . RSB
    (33) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 114
    COMMA           shift and go to state 87


state 99

    (26) repeat_head -> REPEAT LSB calculate RSB .

    LMB             reduce using rule 26 (repeat_head -> REPEAT LSB calculate RSB .)


state 100

    (20) for_head -> FOR LSB IDENTIFIER IN . IDENTIFIER RSB

    IDENTIFIER      shift and go to state 115


state 101

    (23) while_head -> WHILE LSB condition RSB .

    LMB             reduce using rule 23 (while_head -> WHILE LSB condition RSB .)


state 102

    (51) calculate -> calculate PLUS calculate .
    (51) calculate -> calculate . PLUS calculate
    (52) calculate -> calculate . MINUS calculate
    (54) calculate -> calculate . MUL calculate
    (55) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 51 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 51 (calculate -> calculate PLUS calculate .)
    SEMI            reduce using rule 51 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 51 (calculate -> calculate PLUS calculate .)
    COMMA           reduce using rule 51 (calculate -> calculate PLUS calculate .)
    LB              reduce using rule 51 (calculate -> calculate PLUS calculate .)
    RB              reduce using rule 51 (calculate -> calculate PLUS calculate .)
    EQUAL           reduce using rule 51 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 82
    DIV             shift and go to state 83

  ! MUL             [ reduce using rule 51 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 51 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]


state 103

    (52) calculate -> calculate MINUS calculate .
    (51) calculate -> calculate . PLUS calculate
    (52) calculate -> calculate . MINUS calculate
    (54) calculate -> calculate . MUL calculate
    (55) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 52 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 52 (calculate -> calculate MINUS calculate .)
    SEMI            reduce using rule 52 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 52 (calculate -> calculate MINUS calculate .)
    COMMA           reduce using rule 52 (calculate -> calculate MINUS calculate .)
    LB              reduce using rule 52 (calculate -> calculate MINUS calculate .)
    RB              reduce using rule 52 (calculate -> calculate MINUS calculate .)
    EQUAL           reduce using rule 52 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 82
    DIV             shift and go to state 83

  ! MUL             [ reduce using rule 52 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 52 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]


state 104

    (54) calculate -> calculate MUL calculate .
    (51) calculate -> calculate . PLUS calculate
    (52) calculate -> calculate . MINUS calculate
    (54) calculate -> calculate . MUL calculate
    (55) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 54 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 54 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 54 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 54 (calculate -> calculate MUL calculate .)
    SEMI            reduce using rule 54 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 54 (calculate -> calculate MUL calculate .)
    COMMA           reduce using rule 54 (calculate -> calculate MUL calculate .)
    LB              reduce using rule 54 (calculate -> calculate MUL calculate .)
    RB              reduce using rule 54 (calculate -> calculate MUL calculate .)
    EQUAL           reduce using rule 54 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]
  ! MUL             [ shift and go to state 82 ]
  ! DIV             [ shift and go to state 83 ]


state 105

    (55) calculate -> calculate DIV calculate .
    (51) calculate -> calculate . PLUS calculate
    (52) calculate -> calculate . MINUS calculate
    (54) calculate -> calculate . MUL calculate
    (55) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 55 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 55 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 55 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 55 (calculate -> calculate DIV calculate .)
    SEMI            reduce using rule 55 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 55 (calculate -> calculate DIV calculate .)
    COMMA           reduce using rule 55 (calculate -> calculate DIV calculate .)
    LB              reduce using rule 55 (calculate -> calculate DIV calculate .)
    RB              reduce using rule 55 (calculate -> calculate DIV calculate .)
    EQUAL           reduce using rule 55 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]
  ! MUL             [ shift and go to state 82 ]
  ! DIV             [ shift and go to state 83 ]


state 106

    (60) calculate -> LSB calculate RSB .

    PLUS            reduce using rule 60 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 60 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 60 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 60 (calculate -> LSB calculate RSB .)
    SEMI            reduce using rule 60 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 60 (calculate -> LSB calculate RSB .)
    COMMA           reduce using rule 60 (calculate -> LSB calculate RSB .)
    LB              reduce using rule 60 (calculate -> LSB calculate RSB .)
    RB              reduce using rule 60 (calculate -> LSB calculate RSB .)
    EQUAL           reduce using rule 60 (calculate -> LSB calculate RSB .)


state 107

    (33) parameter -> parameter COMMA calculate .
    (51) calculate -> calculate . PLUS calculate
    (52) calculate -> calculate . MINUS calculate
    (54) calculate -> calculate . MUL calculate
    (55) calculate -> calculate . DIV calculate

    RSB             reduce using rule 33 (parameter -> parameter COMMA calculate .)
    COMMA           reduce using rule 33 (parameter -> parameter COMMA calculate .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83


state 108

    (39) condition -> condition LB calculate .
    (51) calculate -> calculate . PLUS calculate
    (52) calculate -> calculate . MINUS calculate
    (54) calculate -> calculate . MUL calculate
    (55) calculate -> calculate . DIV calculate

    RSB             reduce using rule 39 (condition -> condition LB calculate .)
    LB              reduce using rule 39 (condition -> condition LB calculate .)
    RB              reduce using rule 39 (condition -> condition LB calculate .)
    EQUAL           reduce using rule 39 (condition -> condition LB calculate .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83


state 109

    (41) condition -> condition LB EQUAL . calculate
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63

    calculate                      shift and go to state 116

state 110

    (40) condition -> condition RB calculate .
    (51) calculate -> calculate . PLUS calculate
    (52) calculate -> calculate . MINUS calculate
    (54) calculate -> calculate . MUL calculate
    (55) calculate -> calculate . DIV calculate

    RSB             reduce using rule 40 (condition -> condition RB calculate .)
    LB              reduce using rule 40 (condition -> condition RB calculate .)
    RB              reduce using rule 40 (condition -> condition RB calculate .)
    EQUAL           reduce using rule 40 (condition -> condition RB calculate .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83


state 111

    (42) condition -> condition RB EQUAL . calculate
    (51) calculate -> . calculate PLUS calculate
    (52) calculate -> . calculate MINUS calculate
    (53) calculate -> . MINUS calculate
    (54) calculate -> . calculate MUL calculate
    (55) calculate -> . calculate DIV calculate
    (56) calculate -> . INT
    (57) calculate -> . FLOAT
    (58) calculate -> . STRING
    (59) calculate -> . IDENTIFIER
    (60) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STRING          shift and go to state 62
    IDENTIFIER      shift and go to state 56
    LSB             shift and go to state 63

    calculate                      shift and go to state 117

state 112

    (43) condition -> condition EQUAL calculate .
    (51) calculate -> calculate . PLUS calculate
    (52) calculate -> calculate . MINUS calculate
    (54) calculate -> calculate . MUL calculate
    (55) calculate -> calculate . DIV calculate

    RSB             reduce using rule 43 (condition -> condition EQUAL calculate .)
    LB              reduce using rule 43 (condition -> condition EQUAL calculate .)
    RB              reduce using rule 43 (condition -> condition EQUAL calculate .)
    EQUAL           reduce using rule 43 (condition -> condition EQUAL calculate .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83


state 113

    (29) function_head -> FUNCTION IDENTIFIER LSB empty RSB .

    LMB             reduce using rule 29 (function_head -> FUNCTION IDENTIFIER LSB empty RSB .)


state 114

    (30) function_head -> FUNCTION IDENTIFIER LSB parameter RSB .

    LMB             reduce using rule 30 (function_head -> FUNCTION IDENTIFIER LSB parameter RSB .)


state 115

    (20) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER . RSB

    RSB             shift and go to state 118


state 116

    (41) condition -> condition LB EQUAL calculate .
    (51) calculate -> calculate . PLUS calculate
    (52) calculate -> calculate . MINUS calculate
    (54) calculate -> calculate . MUL calculate
    (55) calculate -> calculate . DIV calculate

    RSB             reduce using rule 41 (condition -> condition LB EQUAL calculate .)
    LB              reduce using rule 41 (condition -> condition LB EQUAL calculate .)
    RB              reduce using rule 41 (condition -> condition LB EQUAL calculate .)
    EQUAL           reduce using rule 41 (condition -> condition LB EQUAL calculate .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83


state 117

    (42) condition -> condition RB EQUAL calculate .
    (51) calculate -> calculate . PLUS calculate
    (52) calculate -> calculate . MINUS calculate
    (54) calculate -> calculate . MUL calculate
    (55) calculate -> calculate . DIV calculate

    RSB             reduce using rule 42 (condition -> condition RB EQUAL calculate .)
    LB              reduce using rule 42 (condition -> condition RB EQUAL calculate .)
    RB              reduce using rule 42 (condition -> condition RB EQUAL calculate .)
    EQUAL           reduce using rule 42 (condition -> condition RB EQUAL calculate .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83


state 118

    (20) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .

    LMB             reduce using rule 20 (for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 38 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 38 resolved as shift
WARNING: shift/reduce conflict for IF in state 38 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 38 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 38 resolved as shift
WARNING: shift/reduce conflict for FOR in state 38 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 38 resolved as shift
WARNING: shift/reduce conflict for VAR in state 40 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 40 resolved as shift
WARNING: shift/reduce conflict for IF in state 40 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 40 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 40 resolved as shift
WARNING: shift/reduce conflict for FOR in state 40 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 40 resolved as shift
WARNING: shift/reduce conflict for VAR in state 42 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 42 resolved as shift
WARNING: shift/reduce conflict for IF in state 42 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 42 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 42 resolved as shift
WARNING: shift/reduce conflict for FOR in state 42 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 42 resolved as shift
WARNING: shift/reduce conflict for VAR in state 44 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 44 resolved as shift
WARNING: shift/reduce conflict for IF in state 44 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 44 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 44 resolved as shift
WARNING: shift/reduce conflict for FOR in state 44 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 44 resolved as shift
WARNING: shift/reduce conflict for VAR in state 46 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 46 resolved as shift
WARNING: shift/reduce conflict for IF in state 46 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 46 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 46 resolved as shift
WARNING: shift/reduce conflict for FOR in state 46 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 46 resolved as shift
WARNING: shift/reduce conflict for RSB in state 97 resolved as shift
