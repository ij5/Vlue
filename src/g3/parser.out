Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CATCH
    CLASS
    COLON
    DEBUG
    DO
    DOT
    END
    FOR
    GLOBAL
    IN
    LBB
    LIST
    PYTHON
    RBB
    REPEAT
    TRY
    USE

Grammar

Rule 0     S' -> program
Rule 1     program -> root
Rule 2     root -> root statement
Rule 3     root -> statement
Rule 4     statement -> expression
Rule 5     statement -> if_statement
Rule 6     statement -> while_statement
Rule 7     statement -> variable_declaration
Rule 8     statement -> variable_value_change
Rule 9     statement -> function_declaration
Rule 10    statement -> empty
Rule 11    expression -> calculate
Rule 12    expression -> string_calculate
Rule 13    expression -> compare_expression
Rule 14    variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI
Rule 15    variable_value_change -> IDENTIFIER EQUAL expression SEMI
Rule 16    function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
Rule 17    function_parameter -> function_parameter COMMA IDENTIFIER
Rule 18    function_parameter -> IDENTIFIER
Rule 19    function_parameter -> empty
Rule 20    while_statement -> WHILE LSB compare_expression RSB LMB statement RMB
Rule 21    if_statement -> IF LSB compare_expression RSB LMB statement RMB
Rule 22    if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
Rule 23    if_statement -> if_statement ELSE LMB statement RMB
Rule 24    compare_expression -> compare_expression compare_operator calculate
Rule 25    compare_expression -> calculate
Rule 26    compare_operator -> LB
Rule 27    compare_operator -> RB
Rule 28    compare_operator -> LB EQUAL
Rule 29    compare_operator -> RB EQUAL
Rule 30    compare_operator -> EQUAL EQUAL
Rule 31    compare_operator -> NOTEQUAL EQUAL
Rule 32    string_calculate -> string_calculate stringoperator STRING
Rule 33    string_calculate -> STRING
Rule 34    stringoperator -> PLUS
Rule 35    calculate -> calculate baseoperator INT
Rule 36    calculate -> calculate baseoperator FLOAT
Rule 37    calculate -> calculate baseoperator IDENTIFIER
Rule 38    calculate -> INT
Rule 39    calculate -> FLOAT
Rule 40    calculate -> IDENTIFIER
Rule 41    baseoperator -> PLUS
Rule 42    baseoperator -> MINUS
Rule 43    baseoperator -> MUL
Rule 44    baseoperator -> DIV
Rule 45    empty -> <empty>

Terminals, with rules where they appear

CATCH                : 
CLASS                : 
COLON                : 
COMMA                : 17
DEBUG                : 
DIV                  : 44
DO                   : 
DOT                  : 
ELSE                 : 22 23
END                  : 
EQUAL                : 14 15 28 29 30 30 31
FLOAT                : 36 39
FOR                  : 
FUNCTION             : 16
GLOBAL               : 
IDENTIFIER           : 14 15 16 17 18 37 40
IF                   : 21 22
IN                   : 
INT                  : 35 38
LB                   : 26 28
LBB                  : 
LIST                 : 
LMB                  : 16 20 21 22 23
LSB                  : 16 20 21 22
MINUS                : 42
MUL                  : 43
NOTEQUAL             : 31
PLUS                 : 34 41
PYTHON               : 
RB                   : 27 29
RBB                  : 
REPEAT               : 
RMB                  : 16 20 21 22 23
RSB                  : 16 20 21 22
SEMI                 : 14 15
STRING               : 32 33
TRY                  : 
USE                  : 
VAR                  : 14
WHILE                : 20
error                : 

Nonterminals, with rules where they appear

baseoperator         : 35 36 37
calculate            : 11 24 25 35 36 37
compare_expression   : 13 20 21 22 24
compare_operator     : 24
empty                : 10 19
expression           : 4 14 15
function_declaration : 9
function_parameter   : 16 17
if_statement         : 5 22 23
program              : 0
root                 : 1 2
statement            : 2 3 16 20 21 22 23
string_calculate     : 12 32
stringoperator       : 32
variable_declaration : 7
variable_value_change : 8
while_statement      : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . root
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . variable_value_change
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (21) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (22) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (23) if_statement -> . if_statement ELSE LMB statement RMB
    (20) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (14) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (15) variable_value_change -> . IDENTIFIER EQUAL expression SEMI
    (16) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (45) empty -> .
    (35) calculate -> . calculate baseoperator INT
    (36) calculate -> . calculate baseoperator FLOAT
    (37) calculate -> . calculate baseoperator IDENTIFIER
    (38) calculate -> . INT
    (39) calculate -> . FLOAT
    (40) calculate -> . IDENTIFIER
    (32) string_calculate -> . string_calculate stringoperator STRING
    (33) string_calculate -> . STRING
    (24) compare_expression -> . compare_expression compare_operator calculate
    (25) compare_expression -> . calculate

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    $end            reduce using rule 45 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21

  ! IF              [ reduce using rule 45 (empty -> .) ]
  ! WHILE           [ reduce using rule 45 (empty -> .) ]
  ! VAR             [ reduce using rule 45 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 45 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 45 (empty -> .) ]
  ! INT             [ reduce using rule 45 (empty -> .) ]
  ! FLOAT           [ reduce using rule 45 (empty -> .) ]
  ! STRING          [ reduce using rule 45 (empty -> .) ]

    program                        shift and go to state 1
    root                           shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11
    string_calculate               shift and go to state 12
    compare_expression             shift and go to state 13

state 1

    (0) S' -> program .



state 2

    (1) program -> root .
    (2) root -> root . statement
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . variable_value_change
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (21) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (22) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (23) if_statement -> . if_statement ELSE LMB statement RMB
    (20) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (14) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (15) variable_value_change -> . IDENTIFIER EQUAL expression SEMI
    (16) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (45) empty -> .
    (35) calculate -> . calculate baseoperator INT
    (36) calculate -> . calculate baseoperator FLOAT
    (37) calculate -> . calculate baseoperator IDENTIFIER
    (38) calculate -> . INT
    (39) calculate -> . FLOAT
    (40) calculate -> . IDENTIFIER
    (32) string_calculate -> . string_calculate stringoperator STRING
    (33) string_calculate -> . STRING
    (24) compare_expression -> . compare_expression compare_operator calculate
    (25) compare_expression -> . calculate

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (program -> root .)
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    $end            reduce using rule 1 (program -> root .)
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21

  ! IF              [ reduce using rule 45 (empty -> .) ]
  ! WHILE           [ reduce using rule 45 (empty -> .) ]
  ! VAR             [ reduce using rule 45 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 45 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 45 (empty -> .) ]
  ! INT             [ reduce using rule 45 (empty -> .) ]
  ! FLOAT           [ reduce using rule 45 (empty -> .) ]
  ! STRING          [ reduce using rule 45 (empty -> .) ]
  ! $end            [ reduce using rule 45 (empty -> .) ]

    statement                      shift and go to state 22
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11
    string_calculate               shift and go to state 12
    compare_expression             shift and go to state 13

state 3

    (3) root -> statement .

    IF              reduce using rule 3 (root -> statement .)
    WHILE           reduce using rule 3 (root -> statement .)
    VAR             reduce using rule 3 (root -> statement .)
    IDENTIFIER      reduce using rule 3 (root -> statement .)
    FUNCTION        reduce using rule 3 (root -> statement .)
    INT             reduce using rule 3 (root -> statement .)
    FLOAT           reduce using rule 3 (root -> statement .)
    STRING          reduce using rule 3 (root -> statement .)
    $end            reduce using rule 3 (root -> statement .)


state 4

    (4) statement -> expression .

    IF              reduce using rule 4 (statement -> expression .)
    WHILE           reduce using rule 4 (statement -> expression .)
    VAR             reduce using rule 4 (statement -> expression .)
    IDENTIFIER      reduce using rule 4 (statement -> expression .)
    FUNCTION        reduce using rule 4 (statement -> expression .)
    INT             reduce using rule 4 (statement -> expression .)
    FLOAT           reduce using rule 4 (statement -> expression .)
    STRING          reduce using rule 4 (statement -> expression .)
    $end            reduce using rule 4 (statement -> expression .)
    RMB             reduce using rule 4 (statement -> expression .)


state 5

    (5) statement -> if_statement .
    (22) if_statement -> if_statement . ELSE IF LSB compare_expression RSB LMB statement RMB
    (23) if_statement -> if_statement . ELSE LMB statement RMB

    IF              reduce using rule 5 (statement -> if_statement .)
    WHILE           reduce using rule 5 (statement -> if_statement .)
    VAR             reduce using rule 5 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 5 (statement -> if_statement .)
    FUNCTION        reduce using rule 5 (statement -> if_statement .)
    INT             reduce using rule 5 (statement -> if_statement .)
    FLOAT           reduce using rule 5 (statement -> if_statement .)
    STRING          reduce using rule 5 (statement -> if_statement .)
    $end            reduce using rule 5 (statement -> if_statement .)
    RMB             reduce using rule 5 (statement -> if_statement .)
    ELSE            shift and go to state 23


state 6

    (6) statement -> while_statement .

    IF              reduce using rule 6 (statement -> while_statement .)
    WHILE           reduce using rule 6 (statement -> while_statement .)
    VAR             reduce using rule 6 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 6 (statement -> while_statement .)
    FUNCTION        reduce using rule 6 (statement -> while_statement .)
    INT             reduce using rule 6 (statement -> while_statement .)
    FLOAT           reduce using rule 6 (statement -> while_statement .)
    STRING          reduce using rule 6 (statement -> while_statement .)
    $end            reduce using rule 6 (statement -> while_statement .)
    RMB             reduce using rule 6 (statement -> while_statement .)


state 7

    (7) statement -> variable_declaration .

    IF              reduce using rule 7 (statement -> variable_declaration .)
    WHILE           reduce using rule 7 (statement -> variable_declaration .)
    VAR             reduce using rule 7 (statement -> variable_declaration .)
    IDENTIFIER      reduce using rule 7 (statement -> variable_declaration .)
    FUNCTION        reduce using rule 7 (statement -> variable_declaration .)
    INT             reduce using rule 7 (statement -> variable_declaration .)
    FLOAT           reduce using rule 7 (statement -> variable_declaration .)
    STRING          reduce using rule 7 (statement -> variable_declaration .)
    $end            reduce using rule 7 (statement -> variable_declaration .)
    RMB             reduce using rule 7 (statement -> variable_declaration .)


state 8

    (8) statement -> variable_value_change .

    IF              reduce using rule 8 (statement -> variable_value_change .)
    WHILE           reduce using rule 8 (statement -> variable_value_change .)
    VAR             reduce using rule 8 (statement -> variable_value_change .)
    IDENTIFIER      reduce using rule 8 (statement -> variable_value_change .)
    FUNCTION        reduce using rule 8 (statement -> variable_value_change .)
    INT             reduce using rule 8 (statement -> variable_value_change .)
    FLOAT           reduce using rule 8 (statement -> variable_value_change .)
    STRING          reduce using rule 8 (statement -> variable_value_change .)
    $end            reduce using rule 8 (statement -> variable_value_change .)
    RMB             reduce using rule 8 (statement -> variable_value_change .)


state 9

    (9) statement -> function_declaration .

    IF              reduce using rule 9 (statement -> function_declaration .)
    WHILE           reduce using rule 9 (statement -> function_declaration .)
    VAR             reduce using rule 9 (statement -> function_declaration .)
    IDENTIFIER      reduce using rule 9 (statement -> function_declaration .)
    FUNCTION        reduce using rule 9 (statement -> function_declaration .)
    INT             reduce using rule 9 (statement -> function_declaration .)
    FLOAT           reduce using rule 9 (statement -> function_declaration .)
    STRING          reduce using rule 9 (statement -> function_declaration .)
    $end            reduce using rule 9 (statement -> function_declaration .)
    RMB             reduce using rule 9 (statement -> function_declaration .)


state 10

    (10) statement -> empty .

    IF              reduce using rule 10 (statement -> empty .)
    WHILE           reduce using rule 10 (statement -> empty .)
    VAR             reduce using rule 10 (statement -> empty .)
    IDENTIFIER      reduce using rule 10 (statement -> empty .)
    FUNCTION        reduce using rule 10 (statement -> empty .)
    INT             reduce using rule 10 (statement -> empty .)
    FLOAT           reduce using rule 10 (statement -> empty .)
    STRING          reduce using rule 10 (statement -> empty .)
    $end            reduce using rule 10 (statement -> empty .)
    RMB             reduce using rule 10 (statement -> empty .)


state 11

    (11) expression -> calculate .
    (35) calculate -> calculate . baseoperator INT
    (36) calculate -> calculate . baseoperator FLOAT
    (37) calculate -> calculate . baseoperator IDENTIFIER
    (25) compare_expression -> calculate .
    (41) baseoperator -> . PLUS
    (42) baseoperator -> . MINUS
    (43) baseoperator -> . MUL
    (44) baseoperator -> . DIV

  ! reduce/reduce conflict for IF resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for VAR resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for INT resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for STRING resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for $end resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for SEMI resolved using rule 11 (expression -> calculate .)
  ! reduce/reduce conflict for RMB resolved using rule 11 (expression -> calculate .)
    IF              reduce using rule 11 (expression -> calculate .)
    WHILE           reduce using rule 11 (expression -> calculate .)
    VAR             reduce using rule 11 (expression -> calculate .)
    IDENTIFIER      reduce using rule 11 (expression -> calculate .)
    FUNCTION        reduce using rule 11 (expression -> calculate .)
    INT             reduce using rule 11 (expression -> calculate .)
    FLOAT           reduce using rule 11 (expression -> calculate .)
    STRING          reduce using rule 11 (expression -> calculate .)
    $end            reduce using rule 11 (expression -> calculate .)
    SEMI            reduce using rule 11 (expression -> calculate .)
    RMB             reduce using rule 11 (expression -> calculate .)
    LB              reduce using rule 25 (compare_expression -> calculate .)
    RB              reduce using rule 25 (compare_expression -> calculate .)
    EQUAL           reduce using rule 25 (compare_expression -> calculate .)
    NOTEQUAL        reduce using rule 25 (compare_expression -> calculate .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

  ! IF              [ reduce using rule 25 (compare_expression -> calculate .) ]
  ! WHILE           [ reduce using rule 25 (compare_expression -> calculate .) ]
  ! VAR             [ reduce using rule 25 (compare_expression -> calculate .) ]
  ! IDENTIFIER      [ reduce using rule 25 (compare_expression -> calculate .) ]
  ! FUNCTION        [ reduce using rule 25 (compare_expression -> calculate .) ]
  ! INT             [ reduce using rule 25 (compare_expression -> calculate .) ]
  ! FLOAT           [ reduce using rule 25 (compare_expression -> calculate .) ]
  ! STRING          [ reduce using rule 25 (compare_expression -> calculate .) ]
  ! $end            [ reduce using rule 25 (compare_expression -> calculate .) ]
  ! SEMI            [ reduce using rule 25 (compare_expression -> calculate .) ]
  ! RMB             [ reduce using rule 25 (compare_expression -> calculate .) ]

    baseoperator                   shift and go to state 24

state 12

    (12) expression -> string_calculate .
    (32) string_calculate -> string_calculate . stringoperator STRING
    (34) stringoperator -> . PLUS

    IF              reduce using rule 12 (expression -> string_calculate .)
    WHILE           reduce using rule 12 (expression -> string_calculate .)
    VAR             reduce using rule 12 (expression -> string_calculate .)
    IDENTIFIER      reduce using rule 12 (expression -> string_calculate .)
    FUNCTION        reduce using rule 12 (expression -> string_calculate .)
    INT             reduce using rule 12 (expression -> string_calculate .)
    FLOAT           reduce using rule 12 (expression -> string_calculate .)
    STRING          reduce using rule 12 (expression -> string_calculate .)
    $end            reduce using rule 12 (expression -> string_calculate .)
    SEMI            reduce using rule 12 (expression -> string_calculate .)
    RMB             reduce using rule 12 (expression -> string_calculate .)
    PLUS            shift and go to state 30

    stringoperator                 shift and go to state 29

state 13

    (13) expression -> compare_expression .
    (24) compare_expression -> compare_expression . compare_operator calculate
    (26) compare_operator -> . LB
    (27) compare_operator -> . RB
    (28) compare_operator -> . LB EQUAL
    (29) compare_operator -> . RB EQUAL
    (30) compare_operator -> . EQUAL EQUAL
    (31) compare_operator -> . NOTEQUAL EQUAL

    IF              reduce using rule 13 (expression -> compare_expression .)
    WHILE           reduce using rule 13 (expression -> compare_expression .)
    VAR             reduce using rule 13 (expression -> compare_expression .)
    IDENTIFIER      reduce using rule 13 (expression -> compare_expression .)
    FUNCTION        reduce using rule 13 (expression -> compare_expression .)
    INT             reduce using rule 13 (expression -> compare_expression .)
    FLOAT           reduce using rule 13 (expression -> compare_expression .)
    STRING          reduce using rule 13 (expression -> compare_expression .)
    $end            reduce using rule 13 (expression -> compare_expression .)
    SEMI            reduce using rule 13 (expression -> compare_expression .)
    RMB             reduce using rule 13 (expression -> compare_expression .)
    LB              shift and go to state 32
    RB              shift and go to state 33
    EQUAL           shift and go to state 34
    NOTEQUAL        shift and go to state 35

    compare_operator               shift and go to state 31

state 14

    (21) if_statement -> IF . LSB compare_expression RSB LMB statement RMB

    LSB             shift and go to state 36


state 15

    (20) while_statement -> WHILE . LSB compare_expression RSB LMB statement RMB

    LSB             shift and go to state 37


state 16

    (14) variable_declaration -> VAR . IDENTIFIER EQUAL expression SEMI

    IDENTIFIER      shift and go to state 38


state 17

    (15) variable_value_change -> IDENTIFIER . EQUAL expression SEMI
    (40) calculate -> IDENTIFIER .

  ! shift/reduce conflict for EQUAL resolved as shift
    EQUAL           shift and go to state 39
    PLUS            reduce using rule 40 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 40 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 40 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 40 (calculate -> IDENTIFIER .)
    IF              reduce using rule 40 (calculate -> IDENTIFIER .)
    WHILE           reduce using rule 40 (calculate -> IDENTIFIER .)
    VAR             reduce using rule 40 (calculate -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 40 (calculate -> IDENTIFIER .)
    FUNCTION        reduce using rule 40 (calculate -> IDENTIFIER .)
    INT             reduce using rule 40 (calculate -> IDENTIFIER .)
    FLOAT           reduce using rule 40 (calculate -> IDENTIFIER .)
    STRING          reduce using rule 40 (calculate -> IDENTIFIER .)
    $end            reduce using rule 40 (calculate -> IDENTIFIER .)
    LB              reduce using rule 40 (calculate -> IDENTIFIER .)
    RB              reduce using rule 40 (calculate -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 40 (calculate -> IDENTIFIER .)
    RMB             reduce using rule 40 (calculate -> IDENTIFIER .)

  ! EQUAL           [ reduce using rule 40 (calculate -> IDENTIFIER .) ]


state 18

    (16) function_declaration -> FUNCTION . IDENTIFIER LSB function_parameter RSB LMB statement RMB

    IDENTIFIER      shift and go to state 40


state 19

    (38) calculate -> INT .

    PLUS            reduce using rule 38 (calculate -> INT .)
    MINUS           reduce using rule 38 (calculate -> INT .)
    MUL             reduce using rule 38 (calculate -> INT .)
    DIV             reduce using rule 38 (calculate -> INT .)
    IF              reduce using rule 38 (calculate -> INT .)
    WHILE           reduce using rule 38 (calculate -> INT .)
    VAR             reduce using rule 38 (calculate -> INT .)
    IDENTIFIER      reduce using rule 38 (calculate -> INT .)
    FUNCTION        reduce using rule 38 (calculate -> INT .)
    INT             reduce using rule 38 (calculate -> INT .)
    FLOAT           reduce using rule 38 (calculate -> INT .)
    STRING          reduce using rule 38 (calculate -> INT .)
    $end            reduce using rule 38 (calculate -> INT .)
    LB              reduce using rule 38 (calculate -> INT .)
    RB              reduce using rule 38 (calculate -> INT .)
    EQUAL           reduce using rule 38 (calculate -> INT .)
    NOTEQUAL        reduce using rule 38 (calculate -> INT .)
    RSB             reduce using rule 38 (calculate -> INT .)
    SEMI            reduce using rule 38 (calculate -> INT .)
    RMB             reduce using rule 38 (calculate -> INT .)


state 20

    (39) calculate -> FLOAT .

    PLUS            reduce using rule 39 (calculate -> FLOAT .)
    MINUS           reduce using rule 39 (calculate -> FLOAT .)
    MUL             reduce using rule 39 (calculate -> FLOAT .)
    DIV             reduce using rule 39 (calculate -> FLOAT .)
    IF              reduce using rule 39 (calculate -> FLOAT .)
    WHILE           reduce using rule 39 (calculate -> FLOAT .)
    VAR             reduce using rule 39 (calculate -> FLOAT .)
    IDENTIFIER      reduce using rule 39 (calculate -> FLOAT .)
    FUNCTION        reduce using rule 39 (calculate -> FLOAT .)
    INT             reduce using rule 39 (calculate -> FLOAT .)
    FLOAT           reduce using rule 39 (calculate -> FLOAT .)
    STRING          reduce using rule 39 (calculate -> FLOAT .)
    $end            reduce using rule 39 (calculate -> FLOAT .)
    LB              reduce using rule 39 (calculate -> FLOAT .)
    RB              reduce using rule 39 (calculate -> FLOAT .)
    EQUAL           reduce using rule 39 (calculate -> FLOAT .)
    NOTEQUAL        reduce using rule 39 (calculate -> FLOAT .)
    RSB             reduce using rule 39 (calculate -> FLOAT .)
    SEMI            reduce using rule 39 (calculate -> FLOAT .)
    RMB             reduce using rule 39 (calculate -> FLOAT .)


state 21

    (33) string_calculate -> STRING .

    PLUS            reduce using rule 33 (string_calculate -> STRING .)
    IF              reduce using rule 33 (string_calculate -> STRING .)
    WHILE           reduce using rule 33 (string_calculate -> STRING .)
    VAR             reduce using rule 33 (string_calculate -> STRING .)
    IDENTIFIER      reduce using rule 33 (string_calculate -> STRING .)
    FUNCTION        reduce using rule 33 (string_calculate -> STRING .)
    INT             reduce using rule 33 (string_calculate -> STRING .)
    FLOAT           reduce using rule 33 (string_calculate -> STRING .)
    STRING          reduce using rule 33 (string_calculate -> STRING .)
    $end            reduce using rule 33 (string_calculate -> STRING .)
    SEMI            reduce using rule 33 (string_calculate -> STRING .)
    RMB             reduce using rule 33 (string_calculate -> STRING .)


state 22

    (2) root -> root statement .

    IF              reduce using rule 2 (root -> root statement .)
    WHILE           reduce using rule 2 (root -> root statement .)
    VAR             reduce using rule 2 (root -> root statement .)
    IDENTIFIER      reduce using rule 2 (root -> root statement .)
    FUNCTION        reduce using rule 2 (root -> root statement .)
    INT             reduce using rule 2 (root -> root statement .)
    FLOAT           reduce using rule 2 (root -> root statement .)
    STRING          reduce using rule 2 (root -> root statement .)
    $end            reduce using rule 2 (root -> root statement .)


state 23

    (22) if_statement -> if_statement ELSE . IF LSB compare_expression RSB LMB statement RMB
    (23) if_statement -> if_statement ELSE . LMB statement RMB

    IF              shift and go to state 41
    LMB             shift and go to state 42


state 24

    (35) calculate -> calculate baseoperator . INT
    (36) calculate -> calculate baseoperator . FLOAT
    (37) calculate -> calculate baseoperator . IDENTIFIER

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    IDENTIFIER      shift and go to state 45


state 25

    (41) baseoperator -> PLUS .

    INT             reduce using rule 41 (baseoperator -> PLUS .)
    FLOAT           reduce using rule 41 (baseoperator -> PLUS .)
    IDENTIFIER      reduce using rule 41 (baseoperator -> PLUS .)


state 26

    (42) baseoperator -> MINUS .

    INT             reduce using rule 42 (baseoperator -> MINUS .)
    FLOAT           reduce using rule 42 (baseoperator -> MINUS .)
    IDENTIFIER      reduce using rule 42 (baseoperator -> MINUS .)


state 27

    (43) baseoperator -> MUL .

    INT             reduce using rule 43 (baseoperator -> MUL .)
    FLOAT           reduce using rule 43 (baseoperator -> MUL .)
    IDENTIFIER      reduce using rule 43 (baseoperator -> MUL .)


state 28

    (44) baseoperator -> DIV .

    INT             reduce using rule 44 (baseoperator -> DIV .)
    FLOAT           reduce using rule 44 (baseoperator -> DIV .)
    IDENTIFIER      reduce using rule 44 (baseoperator -> DIV .)


state 29

    (32) string_calculate -> string_calculate stringoperator . STRING

    STRING          shift and go to state 46


state 30

    (34) stringoperator -> PLUS .

    STRING          reduce using rule 34 (stringoperator -> PLUS .)


state 31

    (24) compare_expression -> compare_expression compare_operator . calculate
    (35) calculate -> . calculate baseoperator INT
    (36) calculate -> . calculate baseoperator FLOAT
    (37) calculate -> . calculate baseoperator IDENTIFIER
    (38) calculate -> . INT
    (39) calculate -> . FLOAT
    (40) calculate -> . IDENTIFIER

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    IDENTIFIER      shift and go to state 48

    calculate                      shift and go to state 47

state 32

    (26) compare_operator -> LB .
    (28) compare_operator -> LB . EQUAL

    INT             reduce using rule 26 (compare_operator -> LB .)
    FLOAT           reduce using rule 26 (compare_operator -> LB .)
    IDENTIFIER      reduce using rule 26 (compare_operator -> LB .)
    EQUAL           shift and go to state 49


state 33

    (27) compare_operator -> RB .
    (29) compare_operator -> RB . EQUAL

    INT             reduce using rule 27 (compare_operator -> RB .)
    FLOAT           reduce using rule 27 (compare_operator -> RB .)
    IDENTIFIER      reduce using rule 27 (compare_operator -> RB .)
    EQUAL           shift and go to state 50


state 34

    (30) compare_operator -> EQUAL . EQUAL

    EQUAL           shift and go to state 51


state 35

    (31) compare_operator -> NOTEQUAL . EQUAL

    EQUAL           shift and go to state 52


state 36

    (21) if_statement -> IF LSB . compare_expression RSB LMB statement RMB
    (24) compare_expression -> . compare_expression compare_operator calculate
    (25) compare_expression -> . calculate
    (35) calculate -> . calculate baseoperator INT
    (36) calculate -> . calculate baseoperator FLOAT
    (37) calculate -> . calculate baseoperator IDENTIFIER
    (38) calculate -> . INT
    (39) calculate -> . FLOAT
    (40) calculate -> . IDENTIFIER

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    IDENTIFIER      shift and go to state 48

    compare_expression             shift and go to state 53
    calculate                      shift and go to state 54

state 37

    (20) while_statement -> WHILE LSB . compare_expression RSB LMB statement RMB
    (24) compare_expression -> . compare_expression compare_operator calculate
    (25) compare_expression -> . calculate
    (35) calculate -> . calculate baseoperator INT
    (36) calculate -> . calculate baseoperator FLOAT
    (37) calculate -> . calculate baseoperator IDENTIFIER
    (38) calculate -> . INT
    (39) calculate -> . FLOAT
    (40) calculate -> . IDENTIFIER

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    IDENTIFIER      shift and go to state 48

    compare_expression             shift and go to state 55
    calculate                      shift and go to state 54

state 38

    (14) variable_declaration -> VAR IDENTIFIER . EQUAL expression SEMI

    EQUAL           shift and go to state 56


state 39

    (15) variable_value_change -> IDENTIFIER EQUAL . expression SEMI
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (35) calculate -> . calculate baseoperator INT
    (36) calculate -> . calculate baseoperator FLOAT
    (37) calculate -> . calculate baseoperator IDENTIFIER
    (38) calculate -> . INT
    (39) calculate -> . FLOAT
    (40) calculate -> . IDENTIFIER
    (32) string_calculate -> . string_calculate stringoperator STRING
    (33) string_calculate -> . STRING
    (24) compare_expression -> . compare_expression compare_operator calculate
    (25) compare_expression -> . calculate

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    IDENTIFIER      shift and go to state 48
    STRING          shift and go to state 21

    expression                     shift and go to state 57
    calculate                      shift and go to state 11
    string_calculate               shift and go to state 12
    compare_expression             shift and go to state 13

state 40

    (16) function_declaration -> FUNCTION IDENTIFIER . LSB function_parameter RSB LMB statement RMB

    LSB             shift and go to state 58


state 41

    (22) if_statement -> if_statement ELSE IF . LSB compare_expression RSB LMB statement RMB

    LSB             shift and go to state 59


state 42

    (23) if_statement -> if_statement ELSE LMB . statement RMB
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . variable_value_change
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (21) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (22) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (23) if_statement -> . if_statement ELSE LMB statement RMB
    (20) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (14) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (15) variable_value_change -> . IDENTIFIER EQUAL expression SEMI
    (16) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (45) empty -> .
    (35) calculate -> . calculate baseoperator INT
    (36) calculate -> . calculate baseoperator FLOAT
    (37) calculate -> . calculate baseoperator IDENTIFIER
    (38) calculate -> . INT
    (39) calculate -> . FLOAT
    (40) calculate -> . IDENTIFIER
    (32) string_calculate -> . string_calculate stringoperator STRING
    (33) string_calculate -> . STRING
    (24) compare_expression -> . compare_expression compare_operator calculate
    (25) compare_expression -> . calculate

    IF              shift and go to state 14
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    RMB             reduce using rule 45 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21

    if_statement                   shift and go to state 5
    statement                      shift and go to state 60
    expression                     shift and go to state 4
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11
    string_calculate               shift and go to state 12
    compare_expression             shift and go to state 13

state 43

    (35) calculate -> calculate baseoperator INT .

    PLUS            reduce using rule 35 (calculate -> calculate baseoperator INT .)
    MINUS           reduce using rule 35 (calculate -> calculate baseoperator INT .)
    MUL             reduce using rule 35 (calculate -> calculate baseoperator INT .)
    DIV             reduce using rule 35 (calculate -> calculate baseoperator INT .)
    IF              reduce using rule 35 (calculate -> calculate baseoperator INT .)
    WHILE           reduce using rule 35 (calculate -> calculate baseoperator INT .)
    VAR             reduce using rule 35 (calculate -> calculate baseoperator INT .)
    IDENTIFIER      reduce using rule 35 (calculate -> calculate baseoperator INT .)
    FUNCTION        reduce using rule 35 (calculate -> calculate baseoperator INT .)
    INT             reduce using rule 35 (calculate -> calculate baseoperator INT .)
    FLOAT           reduce using rule 35 (calculate -> calculate baseoperator INT .)
    STRING          reduce using rule 35 (calculate -> calculate baseoperator INT .)
    $end            reduce using rule 35 (calculate -> calculate baseoperator INT .)
    LB              reduce using rule 35 (calculate -> calculate baseoperator INT .)
    RB              reduce using rule 35 (calculate -> calculate baseoperator INT .)
    EQUAL           reduce using rule 35 (calculate -> calculate baseoperator INT .)
    NOTEQUAL        reduce using rule 35 (calculate -> calculate baseoperator INT .)
    RSB             reduce using rule 35 (calculate -> calculate baseoperator INT .)
    SEMI            reduce using rule 35 (calculate -> calculate baseoperator INT .)
    RMB             reduce using rule 35 (calculate -> calculate baseoperator INT .)


state 44

    (36) calculate -> calculate baseoperator FLOAT .

    PLUS            reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    MINUS           reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    MUL             reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    DIV             reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    IF              reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    WHILE           reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    VAR             reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    IDENTIFIER      reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    FUNCTION        reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    INT             reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    FLOAT           reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    STRING          reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    $end            reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    LB              reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    RB              reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    EQUAL           reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    NOTEQUAL        reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    RSB             reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    SEMI            reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)
    RMB             reduce using rule 36 (calculate -> calculate baseoperator FLOAT .)


state 45

    (37) calculate -> calculate baseoperator IDENTIFIER .

    PLUS            reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    MINUS           reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    MUL             reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    DIV             reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    IF              reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    WHILE           reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    VAR             reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    IDENTIFIER      reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    FUNCTION        reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    INT             reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    FLOAT           reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    STRING          reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    $end            reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    LB              reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    RB              reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    EQUAL           reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    NOTEQUAL        reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    RSB             reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    SEMI            reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)
    RMB             reduce using rule 37 (calculate -> calculate baseoperator IDENTIFIER .)


state 46

    (32) string_calculate -> string_calculate stringoperator STRING .

    PLUS            reduce using rule 32 (string_calculate -> string_calculate stringoperator STRING .)
    IF              reduce using rule 32 (string_calculate -> string_calculate stringoperator STRING .)
    WHILE           reduce using rule 32 (string_calculate -> string_calculate stringoperator STRING .)
    VAR             reduce using rule 32 (string_calculate -> string_calculate stringoperator STRING .)
    IDENTIFIER      reduce using rule 32 (string_calculate -> string_calculate stringoperator STRING .)
    FUNCTION        reduce using rule 32 (string_calculate -> string_calculate stringoperator STRING .)
    INT             reduce using rule 32 (string_calculate -> string_calculate stringoperator STRING .)
    FLOAT           reduce using rule 32 (string_calculate -> string_calculate stringoperator STRING .)
    STRING          reduce using rule 32 (string_calculate -> string_calculate stringoperator STRING .)
    $end            reduce using rule 32 (string_calculate -> string_calculate stringoperator STRING .)
    SEMI            reduce using rule 32 (string_calculate -> string_calculate stringoperator STRING .)
    RMB             reduce using rule 32 (string_calculate -> string_calculate stringoperator STRING .)


state 47

    (24) compare_expression -> compare_expression compare_operator calculate .
    (35) calculate -> calculate . baseoperator INT
    (36) calculate -> calculate . baseoperator FLOAT
    (37) calculate -> calculate . baseoperator IDENTIFIER
    (41) baseoperator -> . PLUS
    (42) baseoperator -> . MINUS
    (43) baseoperator -> . MUL
    (44) baseoperator -> . DIV

    LB              reduce using rule 24 (compare_expression -> compare_expression compare_operator calculate .)
    RB              reduce using rule 24 (compare_expression -> compare_expression compare_operator calculate .)
    EQUAL           reduce using rule 24 (compare_expression -> compare_expression compare_operator calculate .)
    NOTEQUAL        reduce using rule 24 (compare_expression -> compare_expression compare_operator calculate .)
    IF              reduce using rule 24 (compare_expression -> compare_expression compare_operator calculate .)
    WHILE           reduce using rule 24 (compare_expression -> compare_expression compare_operator calculate .)
    VAR             reduce using rule 24 (compare_expression -> compare_expression compare_operator calculate .)
    IDENTIFIER      reduce using rule 24 (compare_expression -> compare_expression compare_operator calculate .)
    FUNCTION        reduce using rule 24 (compare_expression -> compare_expression compare_operator calculate .)
    INT             reduce using rule 24 (compare_expression -> compare_expression compare_operator calculate .)
    FLOAT           reduce using rule 24 (compare_expression -> compare_expression compare_operator calculate .)
    STRING          reduce using rule 24 (compare_expression -> compare_expression compare_operator calculate .)
    $end            reduce using rule 24 (compare_expression -> compare_expression compare_operator calculate .)
    RSB             reduce using rule 24 (compare_expression -> compare_expression compare_operator calculate .)
    SEMI            reduce using rule 24 (compare_expression -> compare_expression compare_operator calculate .)
    RMB             reduce using rule 24 (compare_expression -> compare_expression compare_operator calculate .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    baseoperator                   shift and go to state 24

state 48

    (40) calculate -> IDENTIFIER .

    PLUS            reduce using rule 40 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 40 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 40 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 40 (calculate -> IDENTIFIER .)
    LB              reduce using rule 40 (calculate -> IDENTIFIER .)
    RB              reduce using rule 40 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 40 (calculate -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 40 (calculate -> IDENTIFIER .)
    IF              reduce using rule 40 (calculate -> IDENTIFIER .)
    WHILE           reduce using rule 40 (calculate -> IDENTIFIER .)
    VAR             reduce using rule 40 (calculate -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 40 (calculate -> IDENTIFIER .)
    FUNCTION        reduce using rule 40 (calculate -> IDENTIFIER .)
    INT             reduce using rule 40 (calculate -> IDENTIFIER .)
    FLOAT           reduce using rule 40 (calculate -> IDENTIFIER .)
    STRING          reduce using rule 40 (calculate -> IDENTIFIER .)
    $end            reduce using rule 40 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 40 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 40 (calculate -> IDENTIFIER .)
    RMB             reduce using rule 40 (calculate -> IDENTIFIER .)


state 49

    (28) compare_operator -> LB EQUAL .

    INT             reduce using rule 28 (compare_operator -> LB EQUAL .)
    FLOAT           reduce using rule 28 (compare_operator -> LB EQUAL .)
    IDENTIFIER      reduce using rule 28 (compare_operator -> LB EQUAL .)


state 50

    (29) compare_operator -> RB EQUAL .

    INT             reduce using rule 29 (compare_operator -> RB EQUAL .)
    FLOAT           reduce using rule 29 (compare_operator -> RB EQUAL .)
    IDENTIFIER      reduce using rule 29 (compare_operator -> RB EQUAL .)


state 51

    (30) compare_operator -> EQUAL EQUAL .

    INT             reduce using rule 30 (compare_operator -> EQUAL EQUAL .)
    FLOAT           reduce using rule 30 (compare_operator -> EQUAL EQUAL .)
    IDENTIFIER      reduce using rule 30 (compare_operator -> EQUAL EQUAL .)


state 52

    (31) compare_operator -> NOTEQUAL EQUAL .

    INT             reduce using rule 31 (compare_operator -> NOTEQUAL EQUAL .)
    FLOAT           reduce using rule 31 (compare_operator -> NOTEQUAL EQUAL .)
    IDENTIFIER      reduce using rule 31 (compare_operator -> NOTEQUAL EQUAL .)


state 53

    (21) if_statement -> IF LSB compare_expression . RSB LMB statement RMB
    (24) compare_expression -> compare_expression . compare_operator calculate
    (26) compare_operator -> . LB
    (27) compare_operator -> . RB
    (28) compare_operator -> . LB EQUAL
    (29) compare_operator -> . RB EQUAL
    (30) compare_operator -> . EQUAL EQUAL
    (31) compare_operator -> . NOTEQUAL EQUAL

    RSB             shift and go to state 61
    LB              shift and go to state 32
    RB              shift and go to state 33
    EQUAL           shift and go to state 34
    NOTEQUAL        shift and go to state 35

    compare_operator               shift and go to state 31

state 54

    (25) compare_expression -> calculate .
    (35) calculate -> calculate . baseoperator INT
    (36) calculate -> calculate . baseoperator FLOAT
    (37) calculate -> calculate . baseoperator IDENTIFIER
    (41) baseoperator -> . PLUS
    (42) baseoperator -> . MINUS
    (43) baseoperator -> . MUL
    (44) baseoperator -> . DIV

    RSB             reduce using rule 25 (compare_expression -> calculate .)
    LB              reduce using rule 25 (compare_expression -> calculate .)
    RB              reduce using rule 25 (compare_expression -> calculate .)
    EQUAL           reduce using rule 25 (compare_expression -> calculate .)
    NOTEQUAL        reduce using rule 25 (compare_expression -> calculate .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    baseoperator                   shift and go to state 24

state 55

    (20) while_statement -> WHILE LSB compare_expression . RSB LMB statement RMB
    (24) compare_expression -> compare_expression . compare_operator calculate
    (26) compare_operator -> . LB
    (27) compare_operator -> . RB
    (28) compare_operator -> . LB EQUAL
    (29) compare_operator -> . RB EQUAL
    (30) compare_operator -> . EQUAL EQUAL
    (31) compare_operator -> . NOTEQUAL EQUAL

    RSB             shift and go to state 62
    LB              shift and go to state 32
    RB              shift and go to state 33
    EQUAL           shift and go to state 34
    NOTEQUAL        shift and go to state 35

    compare_operator               shift and go to state 31

state 56

    (14) variable_declaration -> VAR IDENTIFIER EQUAL . expression SEMI
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (35) calculate -> . calculate baseoperator INT
    (36) calculate -> . calculate baseoperator FLOAT
    (37) calculate -> . calculate baseoperator IDENTIFIER
    (38) calculate -> . INT
    (39) calculate -> . FLOAT
    (40) calculate -> . IDENTIFIER
    (32) string_calculate -> . string_calculate stringoperator STRING
    (33) string_calculate -> . STRING
    (24) compare_expression -> . compare_expression compare_operator calculate
    (25) compare_expression -> . calculate

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    IDENTIFIER      shift and go to state 48
    STRING          shift and go to state 21

    expression                     shift and go to state 63
    calculate                      shift and go to state 11
    string_calculate               shift and go to state 12
    compare_expression             shift and go to state 13

state 57

    (15) variable_value_change -> IDENTIFIER EQUAL expression . SEMI

    SEMI            shift and go to state 64


state 58

    (16) function_declaration -> FUNCTION IDENTIFIER LSB . function_parameter RSB LMB statement RMB
    (17) function_parameter -> . function_parameter COMMA IDENTIFIER
    (18) function_parameter -> . IDENTIFIER
    (19) function_parameter -> . empty
    (45) empty -> .

    IDENTIFIER      shift and go to state 65
    RSB             reduce using rule 45 (empty -> .)
    COMMA           reduce using rule 45 (empty -> .)

    function_parameter             shift and go to state 66
    empty                          shift and go to state 67

state 59

    (22) if_statement -> if_statement ELSE IF LSB . compare_expression RSB LMB statement RMB
    (24) compare_expression -> . compare_expression compare_operator calculate
    (25) compare_expression -> . calculate
    (35) calculate -> . calculate baseoperator INT
    (36) calculate -> . calculate baseoperator FLOAT
    (37) calculate -> . calculate baseoperator IDENTIFIER
    (38) calculate -> . INT
    (39) calculate -> . FLOAT
    (40) calculate -> . IDENTIFIER

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    IDENTIFIER      shift and go to state 48

    compare_expression             shift and go to state 68
    calculate                      shift and go to state 54

state 60

    (23) if_statement -> if_statement ELSE LMB statement . RMB

    RMB             shift and go to state 69


state 61

    (21) if_statement -> IF LSB compare_expression RSB . LMB statement RMB

    LMB             shift and go to state 70


state 62

    (20) while_statement -> WHILE LSB compare_expression RSB . LMB statement RMB

    LMB             shift and go to state 71


state 63

    (14) variable_declaration -> VAR IDENTIFIER EQUAL expression . SEMI

    SEMI            shift and go to state 72


state 64

    (15) variable_value_change -> IDENTIFIER EQUAL expression SEMI .

    IF              reduce using rule 15 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)
    WHILE           reduce using rule 15 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)
    VAR             reduce using rule 15 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)
    IDENTIFIER      reduce using rule 15 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)
    FUNCTION        reduce using rule 15 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)
    INT             reduce using rule 15 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)
    FLOAT           reduce using rule 15 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)
    STRING          reduce using rule 15 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)
    $end            reduce using rule 15 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)
    RMB             reduce using rule 15 (variable_value_change -> IDENTIFIER EQUAL expression SEMI .)


state 65

    (18) function_parameter -> IDENTIFIER .

    RSB             reduce using rule 18 (function_parameter -> IDENTIFIER .)
    COMMA           reduce using rule 18 (function_parameter -> IDENTIFIER .)


state 66

    (16) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter . RSB LMB statement RMB
    (17) function_parameter -> function_parameter . COMMA IDENTIFIER

    RSB             shift and go to state 73
    COMMA           shift and go to state 74


state 67

    (19) function_parameter -> empty .

    RSB             reduce using rule 19 (function_parameter -> empty .)
    COMMA           reduce using rule 19 (function_parameter -> empty .)


state 68

    (22) if_statement -> if_statement ELSE IF LSB compare_expression . RSB LMB statement RMB
    (24) compare_expression -> compare_expression . compare_operator calculate
    (26) compare_operator -> . LB
    (27) compare_operator -> . RB
    (28) compare_operator -> . LB EQUAL
    (29) compare_operator -> . RB EQUAL
    (30) compare_operator -> . EQUAL EQUAL
    (31) compare_operator -> . NOTEQUAL EQUAL

    RSB             shift and go to state 75
    LB              shift and go to state 32
    RB              shift and go to state 33
    EQUAL           shift and go to state 34
    NOTEQUAL        shift and go to state 35

    compare_operator               shift and go to state 31

state 69

    (23) if_statement -> if_statement ELSE LMB statement RMB .

    ELSE            reduce using rule 23 (if_statement -> if_statement ELSE LMB statement RMB .)
    IF              reduce using rule 23 (if_statement -> if_statement ELSE LMB statement RMB .)
    WHILE           reduce using rule 23 (if_statement -> if_statement ELSE LMB statement RMB .)
    VAR             reduce using rule 23 (if_statement -> if_statement ELSE LMB statement RMB .)
    IDENTIFIER      reduce using rule 23 (if_statement -> if_statement ELSE LMB statement RMB .)
    FUNCTION        reduce using rule 23 (if_statement -> if_statement ELSE LMB statement RMB .)
    INT             reduce using rule 23 (if_statement -> if_statement ELSE LMB statement RMB .)
    FLOAT           reduce using rule 23 (if_statement -> if_statement ELSE LMB statement RMB .)
    STRING          reduce using rule 23 (if_statement -> if_statement ELSE LMB statement RMB .)
    $end            reduce using rule 23 (if_statement -> if_statement ELSE LMB statement RMB .)
    RMB             reduce using rule 23 (if_statement -> if_statement ELSE LMB statement RMB .)


state 70

    (21) if_statement -> IF LSB compare_expression RSB LMB . statement RMB
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . variable_value_change
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (21) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (22) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (23) if_statement -> . if_statement ELSE LMB statement RMB
    (20) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (14) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (15) variable_value_change -> . IDENTIFIER EQUAL expression SEMI
    (16) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (45) empty -> .
    (35) calculate -> . calculate baseoperator INT
    (36) calculate -> . calculate baseoperator FLOAT
    (37) calculate -> . calculate baseoperator IDENTIFIER
    (38) calculate -> . INT
    (39) calculate -> . FLOAT
    (40) calculate -> . IDENTIFIER
    (32) string_calculate -> . string_calculate stringoperator STRING
    (33) string_calculate -> . STRING
    (24) compare_expression -> . compare_expression compare_operator calculate
    (25) compare_expression -> . calculate

    IF              shift and go to state 14
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    RMB             reduce using rule 45 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21

    compare_expression             shift and go to state 13
    statement                      shift and go to state 76
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11
    string_calculate               shift and go to state 12

state 71

    (20) while_statement -> WHILE LSB compare_expression RSB LMB . statement RMB
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . variable_value_change
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (21) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (22) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (23) if_statement -> . if_statement ELSE LMB statement RMB
    (20) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (14) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (15) variable_value_change -> . IDENTIFIER EQUAL expression SEMI
    (16) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (45) empty -> .
    (35) calculate -> . calculate baseoperator INT
    (36) calculate -> . calculate baseoperator FLOAT
    (37) calculate -> . calculate baseoperator IDENTIFIER
    (38) calculate -> . INT
    (39) calculate -> . FLOAT
    (40) calculate -> . IDENTIFIER
    (32) string_calculate -> . string_calculate stringoperator STRING
    (33) string_calculate -> . STRING
    (24) compare_expression -> . compare_expression compare_operator calculate
    (25) compare_expression -> . calculate

    IF              shift and go to state 14
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    RMB             reduce using rule 45 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21

    compare_expression             shift and go to state 13
    statement                      shift and go to state 77
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11
    string_calculate               shift and go to state 12

state 72

    (14) variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .

    IF              reduce using rule 14 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    WHILE           reduce using rule 14 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    VAR             reduce using rule 14 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    IDENTIFIER      reduce using rule 14 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    FUNCTION        reduce using rule 14 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    INT             reduce using rule 14 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    FLOAT           reduce using rule 14 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    STRING          reduce using rule 14 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    $end            reduce using rule 14 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    RMB             reduce using rule 14 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)


state 73

    (16) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB . LMB statement RMB

    LMB             shift and go to state 78


state 74

    (17) function_parameter -> function_parameter COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 79


state 75

    (22) if_statement -> if_statement ELSE IF LSB compare_expression RSB . LMB statement RMB

    LMB             shift and go to state 80


state 76

    (21) if_statement -> IF LSB compare_expression RSB LMB statement . RMB

    RMB             shift and go to state 81


state 77

    (20) while_statement -> WHILE LSB compare_expression RSB LMB statement . RMB

    RMB             shift and go to state 82


state 78

    (16) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB . statement RMB
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . variable_value_change
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (21) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (22) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (23) if_statement -> . if_statement ELSE LMB statement RMB
    (20) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (14) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (15) variable_value_change -> . IDENTIFIER EQUAL expression SEMI
    (16) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (45) empty -> .
    (35) calculate -> . calculate baseoperator INT
    (36) calculate -> . calculate baseoperator FLOAT
    (37) calculate -> . calculate baseoperator IDENTIFIER
    (38) calculate -> . INT
    (39) calculate -> . FLOAT
    (40) calculate -> . IDENTIFIER
    (32) string_calculate -> . string_calculate stringoperator STRING
    (33) string_calculate -> . STRING
    (24) compare_expression -> . compare_expression compare_operator calculate
    (25) compare_expression -> . calculate

    IF              shift and go to state 14
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    RMB             reduce using rule 45 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21

    statement                      shift and go to state 83
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11
    string_calculate               shift and go to state 12
    compare_expression             shift and go to state 13

state 79

    (17) function_parameter -> function_parameter COMMA IDENTIFIER .

    RSB             reduce using rule 17 (function_parameter -> function_parameter COMMA IDENTIFIER .)
    COMMA           reduce using rule 17 (function_parameter -> function_parameter COMMA IDENTIFIER .)


state 80

    (22) if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB . statement RMB
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . variable_value_change
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (21) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (22) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (23) if_statement -> . if_statement ELSE LMB statement RMB
    (20) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (14) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (15) variable_value_change -> . IDENTIFIER EQUAL expression SEMI
    (16) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (45) empty -> .
    (35) calculate -> . calculate baseoperator INT
    (36) calculate -> . calculate baseoperator FLOAT
    (37) calculate -> . calculate baseoperator IDENTIFIER
    (38) calculate -> . INT
    (39) calculate -> . FLOAT
    (40) calculate -> . IDENTIFIER
    (32) string_calculate -> . string_calculate stringoperator STRING
    (33) string_calculate -> . STRING
    (24) compare_expression -> . compare_expression compare_operator calculate
    (25) compare_expression -> . calculate

    IF              shift and go to state 14
    WHILE           shift and go to state 15
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    FUNCTION        shift and go to state 18
    RMB             reduce using rule 45 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21

    if_statement                   shift and go to state 5
    compare_expression             shift and go to state 13
    statement                      shift and go to state 84
    expression                     shift and go to state 4
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11
    string_calculate               shift and go to state 12

state 81

    (21) if_statement -> IF LSB compare_expression RSB LMB statement RMB .

    ELSE            reduce using rule 21 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    IF              reduce using rule 21 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    WHILE           reduce using rule 21 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    VAR             reduce using rule 21 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    IDENTIFIER      reduce using rule 21 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    FUNCTION        reduce using rule 21 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    INT             reduce using rule 21 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    FLOAT           reduce using rule 21 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    STRING          reduce using rule 21 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    $end            reduce using rule 21 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    RMB             reduce using rule 21 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)


state 82

    (20) while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .

    IF              reduce using rule 20 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    WHILE           reduce using rule 20 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    VAR             reduce using rule 20 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    IDENTIFIER      reduce using rule 20 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    FUNCTION        reduce using rule 20 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    INT             reduce using rule 20 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    FLOAT           reduce using rule 20 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    STRING          reduce using rule 20 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    $end            reduce using rule 20 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    RMB             reduce using rule 20 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)


state 83

    (16) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement . RMB

    RMB             shift and go to state 85


state 84

    (22) if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement . RMB

    RMB             shift and go to state 86


state 85

    (16) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .

    IF              reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    WHILE           reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    VAR             reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    IDENTIFIER      reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    FUNCTION        reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    INT             reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    FLOAT           reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    STRING          reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    $end            reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    RMB             reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)


state 86

    (22) if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .

    ELSE            reduce using rule 22 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    IF              reduce using rule 22 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    WHILE           reduce using rule 22 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    VAR             reduce using rule 22 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    IDENTIFIER      reduce using rule 22 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    FUNCTION        reduce using rule 22 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    INT             reduce using rule 22 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    FLOAT           reduce using rule 22 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    STRING          reduce using rule 22 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    $end            reduce using rule 22 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    RMB             reduce using rule 22 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for INT in state 2 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 2 resolved as shift
WARNING: shift/reduce conflict for STRING in state 2 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 17 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (program -> root)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 11 resolved using rule (expression -> calculate)
WARNING: rejected rule (compare_expression -> calculate) in state 11
