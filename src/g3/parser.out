Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELSE
    IF
    LMB
    RMB
    TAB

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression variable_declaration NEWLINE
Rule 2     expression -> expression variable_value_change NEWLINE
Rule 3     expression -> variable_declaration NEWLINE
Rule 4     expression -> variable_value_change
Rule 5     expression -> NEWLINE
Rule 6     variable_value_change -> IDENTIFIER EQUAL calculate
Rule 7     variable_declaration -> VAR IDENTIFIER EQUAL STRING
Rule 8     variable_declaration -> VAR IDENTIFIER EQUAL calculate
Rule 9     variable_declaration -> VAR IDENTIFIER
Rule 10    calculate -> calculate PLUS calculate
Rule 11    calculate -> calculate MINUS calculate
Rule 12    calculate -> MINUS calculate
Rule 13    calculate -> calculate MUL calculate
Rule 14    calculate -> calculate DIV calculate
Rule 15    calculate -> INT
Rule 16    calculate -> FLOAT
Rule 17    calculate -> IDENTIFIER
Rule 18    calculate -> LSB calculate RSB

Terminals, with rules where they appear

DIV                  : 14
ELSE                 : 
EQUAL                : 6 7 8
FLOAT                : 16
IDENTIFIER           : 6 7 8 9 17
IF                   : 
INT                  : 15
LMB                  : 
LSB                  : 18
MINUS                : 11 12
MUL                  : 13
NEWLINE              : 1 2 3 5
PLUS                 : 10
RMB                  : 
RSB                  : 18
STRING               : 7
TAB                  : 
VAR                  : 7 8 9
error                : 

Nonterminals, with rules where they appear

calculate            : 6 8 10 10 11 11 12 13 13 14 14 18
expression           : 1 2 0
variable_declaration : 1 3
variable_value_change : 2 4

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression variable_declaration NEWLINE
    (2) expression -> . expression variable_value_change NEWLINE
    (3) expression -> . variable_declaration NEWLINE
    (4) expression -> . variable_value_change
    (5) expression -> . NEWLINE
    (7) variable_declaration -> . VAR IDENTIFIER EQUAL STRING
    (8) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (9) variable_declaration -> . VAR IDENTIFIER
    (6) variable_value_change -> . IDENTIFIER EQUAL calculate

    NEWLINE         shift and go to state 3
    VAR             shift and go to state 5
    IDENTIFIER      shift and go to state 6

    expression                     shift and go to state 1
    variable_declaration           shift and go to state 2
    variable_value_change          shift and go to state 4

state 1

    (0) S' -> expression .
    (1) expression -> expression . variable_declaration NEWLINE
    (2) expression -> expression . variable_value_change NEWLINE
    (7) variable_declaration -> . VAR IDENTIFIER EQUAL STRING
    (8) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (9) variable_declaration -> . VAR IDENTIFIER
    (6) variable_value_change -> . IDENTIFIER EQUAL calculate

    VAR             shift and go to state 5
    IDENTIFIER      shift and go to state 6

    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8

state 2

    (3) expression -> variable_declaration . NEWLINE

    NEWLINE         shift and go to state 9


state 3

    (5) expression -> NEWLINE .

    VAR             reduce using rule 5 (expression -> NEWLINE .)
    IDENTIFIER      reduce using rule 5 (expression -> NEWLINE .)
    $end            reduce using rule 5 (expression -> NEWLINE .)


state 4

    (4) expression -> variable_value_change .

    VAR             reduce using rule 4 (expression -> variable_value_change .)
    IDENTIFIER      reduce using rule 4 (expression -> variable_value_change .)
    $end            reduce using rule 4 (expression -> variable_value_change .)


state 5

    (7) variable_declaration -> VAR . IDENTIFIER EQUAL STRING
    (8) variable_declaration -> VAR . IDENTIFIER EQUAL calculate
    (9) variable_declaration -> VAR . IDENTIFIER

    IDENTIFIER      shift and go to state 10


state 6

    (6) variable_value_change -> IDENTIFIER . EQUAL calculate

    EQUAL           shift and go to state 11


state 7

    (1) expression -> expression variable_declaration . NEWLINE

    NEWLINE         shift and go to state 12


state 8

    (2) expression -> expression variable_value_change . NEWLINE

    NEWLINE         shift and go to state 13


state 9

    (3) expression -> variable_declaration NEWLINE .

    VAR             reduce using rule 3 (expression -> variable_declaration NEWLINE .)
    IDENTIFIER      reduce using rule 3 (expression -> variable_declaration NEWLINE .)
    $end            reduce using rule 3 (expression -> variable_declaration NEWLINE .)


state 10

    (7) variable_declaration -> VAR IDENTIFIER . EQUAL STRING
    (8) variable_declaration -> VAR IDENTIFIER . EQUAL calculate
    (9) variable_declaration -> VAR IDENTIFIER .

    EQUAL           shift and go to state 14
    NEWLINE         reduce using rule 9 (variable_declaration -> VAR IDENTIFIER .)


state 11

    (6) variable_value_change -> IDENTIFIER EQUAL . calculate
    (10) calculate -> . calculate PLUS calculate
    (11) calculate -> . calculate MINUS calculate
    (12) calculate -> . MINUS calculate
    (13) calculate -> . calculate MUL calculate
    (14) calculate -> . calculate DIV calculate
    (15) calculate -> . INT
    (16) calculate -> . FLOAT
    (17) calculate -> . IDENTIFIER
    (18) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    IDENTIFIER      shift and go to state 15
    LSB             shift and go to state 20

    calculate                      shift and go to state 16

state 12

    (1) expression -> expression variable_declaration NEWLINE .

    VAR             reduce using rule 1 (expression -> expression variable_declaration NEWLINE .)
    IDENTIFIER      reduce using rule 1 (expression -> expression variable_declaration NEWLINE .)
    $end            reduce using rule 1 (expression -> expression variable_declaration NEWLINE .)


state 13

    (2) expression -> expression variable_value_change NEWLINE .

    VAR             reduce using rule 2 (expression -> expression variable_value_change NEWLINE .)
    IDENTIFIER      reduce using rule 2 (expression -> expression variable_value_change NEWLINE .)
    $end            reduce using rule 2 (expression -> expression variable_value_change NEWLINE .)


state 14

    (7) variable_declaration -> VAR IDENTIFIER EQUAL . STRING
    (8) variable_declaration -> VAR IDENTIFIER EQUAL . calculate
    (10) calculate -> . calculate PLUS calculate
    (11) calculate -> . calculate MINUS calculate
    (12) calculate -> . MINUS calculate
    (13) calculate -> . calculate MUL calculate
    (14) calculate -> . calculate DIV calculate
    (15) calculate -> . INT
    (16) calculate -> . FLOAT
    (17) calculate -> . IDENTIFIER
    (18) calculate -> . LSB calculate RSB

    STRING          shift and go to state 21
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    IDENTIFIER      shift and go to state 15
    LSB             shift and go to state 20

    calculate                      shift and go to state 22

state 15

    (17) calculate -> IDENTIFIER .

    PLUS            reduce using rule 17 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 17 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 17 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 17 (calculate -> IDENTIFIER .)
    VAR             reduce using rule 17 (calculate -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 17 (calculate -> IDENTIFIER .)
    $end            reduce using rule 17 (calculate -> IDENTIFIER .)
    NEWLINE         reduce using rule 17 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 17 (calculate -> IDENTIFIER .)


state 16

    (6) variable_value_change -> IDENTIFIER EQUAL calculate .
    (10) calculate -> calculate . PLUS calculate
    (11) calculate -> calculate . MINUS calculate
    (13) calculate -> calculate . MUL calculate
    (14) calculate -> calculate . DIV calculate

    VAR             reduce using rule 6 (variable_value_change -> IDENTIFIER EQUAL calculate .)
    IDENTIFIER      reduce using rule 6 (variable_value_change -> IDENTIFIER EQUAL calculate .)
    $end            reduce using rule 6 (variable_value_change -> IDENTIFIER EQUAL calculate .)
    NEWLINE         reduce using rule 6 (variable_value_change -> IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIV             shift and go to state 26


state 17

    (12) calculate -> MINUS . calculate
    (10) calculate -> . calculate PLUS calculate
    (11) calculate -> . calculate MINUS calculate
    (12) calculate -> . MINUS calculate
    (13) calculate -> . calculate MUL calculate
    (14) calculate -> . calculate DIV calculate
    (15) calculate -> . INT
    (16) calculate -> . FLOAT
    (17) calculate -> . IDENTIFIER
    (18) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    IDENTIFIER      shift and go to state 15
    LSB             shift and go to state 20

    calculate                      shift and go to state 27

state 18

    (15) calculate -> INT .

    PLUS            reduce using rule 15 (calculate -> INT .)
    MINUS           reduce using rule 15 (calculate -> INT .)
    MUL             reduce using rule 15 (calculate -> INT .)
    DIV             reduce using rule 15 (calculate -> INT .)
    VAR             reduce using rule 15 (calculate -> INT .)
    IDENTIFIER      reduce using rule 15 (calculate -> INT .)
    $end            reduce using rule 15 (calculate -> INT .)
    NEWLINE         reduce using rule 15 (calculate -> INT .)
    RSB             reduce using rule 15 (calculate -> INT .)


state 19

    (16) calculate -> FLOAT .

    PLUS            reduce using rule 16 (calculate -> FLOAT .)
    MINUS           reduce using rule 16 (calculate -> FLOAT .)
    MUL             reduce using rule 16 (calculate -> FLOAT .)
    DIV             reduce using rule 16 (calculate -> FLOAT .)
    VAR             reduce using rule 16 (calculate -> FLOAT .)
    IDENTIFIER      reduce using rule 16 (calculate -> FLOAT .)
    $end            reduce using rule 16 (calculate -> FLOAT .)
    NEWLINE         reduce using rule 16 (calculate -> FLOAT .)
    RSB             reduce using rule 16 (calculate -> FLOAT .)


state 20

    (18) calculate -> LSB . calculate RSB
    (10) calculate -> . calculate PLUS calculate
    (11) calculate -> . calculate MINUS calculate
    (12) calculate -> . MINUS calculate
    (13) calculate -> . calculate MUL calculate
    (14) calculate -> . calculate DIV calculate
    (15) calculate -> . INT
    (16) calculate -> . FLOAT
    (17) calculate -> . IDENTIFIER
    (18) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    IDENTIFIER      shift and go to state 15
    LSB             shift and go to state 20

    calculate                      shift and go to state 28

state 21

    (7) variable_declaration -> VAR IDENTIFIER EQUAL STRING .

    NEWLINE         reduce using rule 7 (variable_declaration -> VAR IDENTIFIER EQUAL STRING .)


state 22

    (8) variable_declaration -> VAR IDENTIFIER EQUAL calculate .
    (10) calculate -> calculate . PLUS calculate
    (11) calculate -> calculate . MINUS calculate
    (13) calculate -> calculate . MUL calculate
    (14) calculate -> calculate . DIV calculate

    NEWLINE         reduce using rule 8 (variable_declaration -> VAR IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIV             shift and go to state 26


state 23

    (10) calculate -> calculate PLUS . calculate
    (10) calculate -> . calculate PLUS calculate
    (11) calculate -> . calculate MINUS calculate
    (12) calculate -> . MINUS calculate
    (13) calculate -> . calculate MUL calculate
    (14) calculate -> . calculate DIV calculate
    (15) calculate -> . INT
    (16) calculate -> . FLOAT
    (17) calculate -> . IDENTIFIER
    (18) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    IDENTIFIER      shift and go to state 15
    LSB             shift and go to state 20

    calculate                      shift and go to state 29

state 24

    (11) calculate -> calculate MINUS . calculate
    (10) calculate -> . calculate PLUS calculate
    (11) calculate -> . calculate MINUS calculate
    (12) calculate -> . MINUS calculate
    (13) calculate -> . calculate MUL calculate
    (14) calculate -> . calculate DIV calculate
    (15) calculate -> . INT
    (16) calculate -> . FLOAT
    (17) calculate -> . IDENTIFIER
    (18) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    IDENTIFIER      shift and go to state 15
    LSB             shift and go to state 20

    calculate                      shift and go to state 30

state 25

    (13) calculate -> calculate MUL . calculate
    (10) calculate -> . calculate PLUS calculate
    (11) calculate -> . calculate MINUS calculate
    (12) calculate -> . MINUS calculate
    (13) calculate -> . calculate MUL calculate
    (14) calculate -> . calculate DIV calculate
    (15) calculate -> . INT
    (16) calculate -> . FLOAT
    (17) calculate -> . IDENTIFIER
    (18) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    IDENTIFIER      shift and go to state 15
    LSB             shift and go to state 20

    calculate                      shift and go to state 31

state 26

    (14) calculate -> calculate DIV . calculate
    (10) calculate -> . calculate PLUS calculate
    (11) calculate -> . calculate MINUS calculate
    (12) calculate -> . MINUS calculate
    (13) calculate -> . calculate MUL calculate
    (14) calculate -> . calculate DIV calculate
    (15) calculate -> . INT
    (16) calculate -> . FLOAT
    (17) calculate -> . IDENTIFIER
    (18) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    IDENTIFIER      shift and go to state 15
    LSB             shift and go to state 20

    calculate                      shift and go to state 32

state 27

    (12) calculate -> MINUS calculate .
    (10) calculate -> calculate . PLUS calculate
    (11) calculate -> calculate . MINUS calculate
    (13) calculate -> calculate . MUL calculate
    (14) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 12 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 12 (calculate -> MINUS calculate .)
    MUL             reduce using rule 12 (calculate -> MINUS calculate .)
    DIV             reduce using rule 12 (calculate -> MINUS calculate .)
    VAR             reduce using rule 12 (calculate -> MINUS calculate .)
    IDENTIFIER      reduce using rule 12 (calculate -> MINUS calculate .)
    $end            reduce using rule 12 (calculate -> MINUS calculate .)
    NEWLINE         reduce using rule 12 (calculate -> MINUS calculate .)
    RSB             reduce using rule 12 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! MUL             [ shift and go to state 25 ]
  ! DIV             [ shift and go to state 26 ]


state 28

    (18) calculate -> LSB calculate . RSB
    (10) calculate -> calculate . PLUS calculate
    (11) calculate -> calculate . MINUS calculate
    (13) calculate -> calculate . MUL calculate
    (14) calculate -> calculate . DIV calculate

    RSB             shift and go to state 33
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIV             shift and go to state 26


state 29

    (10) calculate -> calculate PLUS calculate .
    (10) calculate -> calculate . PLUS calculate
    (11) calculate -> calculate . MINUS calculate
    (13) calculate -> calculate . MUL calculate
    (14) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 10 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 10 (calculate -> calculate PLUS calculate .)
    VAR             reduce using rule 10 (calculate -> calculate PLUS calculate .)
    IDENTIFIER      reduce using rule 10 (calculate -> calculate PLUS calculate .)
    $end            reduce using rule 10 (calculate -> calculate PLUS calculate .)
    NEWLINE         reduce using rule 10 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 10 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 25
    DIV             shift and go to state 26

  ! MUL             [ reduce using rule 10 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 10 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]


state 30

    (11) calculate -> calculate MINUS calculate .
    (10) calculate -> calculate . PLUS calculate
    (11) calculate -> calculate . MINUS calculate
    (13) calculate -> calculate . MUL calculate
    (14) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 11 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 11 (calculate -> calculate MINUS calculate .)
    VAR             reduce using rule 11 (calculate -> calculate MINUS calculate .)
    IDENTIFIER      reduce using rule 11 (calculate -> calculate MINUS calculate .)
    $end            reduce using rule 11 (calculate -> calculate MINUS calculate .)
    NEWLINE         reduce using rule 11 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 11 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 25
    DIV             shift and go to state 26

  ! MUL             [ reduce using rule 11 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 11 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]


state 31

    (13) calculate -> calculate MUL calculate .
    (10) calculate -> calculate . PLUS calculate
    (11) calculate -> calculate . MINUS calculate
    (13) calculate -> calculate . MUL calculate
    (14) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 13 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 13 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 13 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 13 (calculate -> calculate MUL calculate .)
    VAR             reduce using rule 13 (calculate -> calculate MUL calculate .)
    IDENTIFIER      reduce using rule 13 (calculate -> calculate MUL calculate .)
    $end            reduce using rule 13 (calculate -> calculate MUL calculate .)
    NEWLINE         reduce using rule 13 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 13 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! MUL             [ shift and go to state 25 ]
  ! DIV             [ shift and go to state 26 ]


state 32

    (14) calculate -> calculate DIV calculate .
    (10) calculate -> calculate . PLUS calculate
    (11) calculate -> calculate . MINUS calculate
    (13) calculate -> calculate . MUL calculate
    (14) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 14 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 14 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 14 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 14 (calculate -> calculate DIV calculate .)
    VAR             reduce using rule 14 (calculate -> calculate DIV calculate .)
    IDENTIFIER      reduce using rule 14 (calculate -> calculate DIV calculate .)
    $end            reduce using rule 14 (calculate -> calculate DIV calculate .)
    NEWLINE         reduce using rule 14 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 14 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! MUL             [ shift and go to state 25 ]
  ! DIV             [ shift and go to state 26 ]


state 33

    (18) calculate -> LSB calculate RSB .

    PLUS            reduce using rule 18 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 18 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 18 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 18 (calculate -> LSB calculate RSB .)
    VAR             reduce using rule 18 (calculate -> LSB calculate RSB .)
    IDENTIFIER      reduce using rule 18 (calculate -> LSB calculate RSB .)
    $end            reduce using rule 18 (calculate -> LSB calculate RSB .)
    NEWLINE         reduce using rule 18 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 18 (calculate -> LSB calculate RSB .)

