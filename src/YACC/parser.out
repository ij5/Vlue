Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CATCH
    CLASS
    COLON
    COMMA
    DEBUG
    DIV
    DOT
    ELSE
    EQUAL
    FLOAT
    FOR
    FUNCTION
    GLOBAL
    IDENTIFIER
    IN
    LIST
    MINUS
    MUL
    PLUS
    PYTHON
    REPEAT
    SEMI
    STRING
    TRY
    USE
    VAR
    WHILE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     statement -> if_statement
Rule 3     if_statement -> IF LSB expression RSB LMB statement RMB
Rule 4     expression -> condition
Rule 5     expression -> empty
Rule 6     condition -> INT operator INT
Rule 7     operator -> LB
Rule 8     operator -> RB
Rule 9     empty -> <empty>

Terminals, with rules where they appear

CATCH                : 
CLASS                : 
COLON                : 
COMMA                : 
DEBUG                : 
DIV                  : 
DOT                  : 
ELSE                 : 
EQUAL                : 
FLOAT                : 
FOR                  : 
FUNCTION             : 
GLOBAL               : 
IDENTIFIER           : 
IF                   : 3
IN                   : 
INT                  : 6 6
LB                   : 7
LIST                 : 
LMB                  : 3
LSB                  : 3
MINUS                : 
MUL                  : 
PLUS                 : 
PYTHON               : 
RB                   : 8
REPEAT               : 
RMB                  : 3
RSB                  : 3
SEMI                 : 
STRING               : 
TRY                  : 
USE                  : 
VAR                  : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

condition            : 4
empty                : 5
expression           : 1 3
if_statement         : 2
operator             : 6
statement            : 3 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) statement -> . if_statement
    (4) expression -> . condition
    (5) expression -> . empty
    (3) if_statement -> . IF LSB expression RSB LMB statement RMB
    (6) condition -> . INT operator INT
    (9) empty -> .

    IF              shift and go to state 6
    INT             shift and go to state 7
    $end            reduce using rule 9 (empty -> .)

    statement                      shift and go to state 1
    expression                     shift and go to state 2
    if_statement                   shift and go to state 3
    condition                      shift and go to state 4
    empty                          shift and go to state 5

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .

    $end            reduce using rule 1 (statement -> expression .)
    RMB             reduce using rule 1 (statement -> expression .)


state 3

    (2) statement -> if_statement .

    $end            reduce using rule 2 (statement -> if_statement .)
    RMB             reduce using rule 2 (statement -> if_statement .)


state 4

    (4) expression -> condition .

    $end            reduce using rule 4 (expression -> condition .)
    RSB             reduce using rule 4 (expression -> condition .)
    RMB             reduce using rule 4 (expression -> condition .)


state 5

    (5) expression -> empty .

    $end            reduce using rule 5 (expression -> empty .)
    RSB             reduce using rule 5 (expression -> empty .)
    RMB             reduce using rule 5 (expression -> empty .)


state 6

    (3) if_statement -> IF . LSB expression RSB LMB statement RMB

    LSB             shift and go to state 8


state 7

    (6) condition -> INT . operator INT
    (7) operator -> . LB
    (8) operator -> . RB

    LB              shift and go to state 10
    RB              shift and go to state 11

    operator                       shift and go to state 9

state 8

    (3) if_statement -> IF LSB . expression RSB LMB statement RMB
    (4) expression -> . condition
    (5) expression -> . empty
    (6) condition -> . INT operator INT
    (9) empty -> .

    INT             shift and go to state 7
    RSB             reduce using rule 9 (empty -> .)

    expression                     shift and go to state 12
    condition                      shift and go to state 4
    empty                          shift and go to state 5

state 9

    (6) condition -> INT operator . INT

    INT             shift and go to state 13


state 10

    (7) operator -> LB .

    INT             reduce using rule 7 (operator -> LB .)


state 11

    (8) operator -> RB .

    INT             reduce using rule 8 (operator -> RB .)


state 12

    (3) if_statement -> IF LSB expression . RSB LMB statement RMB

    RSB             shift and go to state 14


state 13

    (6) condition -> INT operator INT .

    $end            reduce using rule 6 (condition -> INT operator INT .)
    RSB             reduce using rule 6 (condition -> INT operator INT .)
    RMB             reduce using rule 6 (condition -> INT operator INT .)


state 14

    (3) if_statement -> IF LSB expression RSB . LMB statement RMB

    LMB             shift and go to state 15


state 15

    (3) if_statement -> IF LSB expression RSB LMB . statement RMB
    (1) statement -> . expression
    (2) statement -> . if_statement
    (4) expression -> . condition
    (5) expression -> . empty
    (3) if_statement -> . IF LSB expression RSB LMB statement RMB
    (6) condition -> . INT operator INT
    (9) empty -> .

    IF              shift and go to state 6
    INT             shift and go to state 7
    RMB             reduce using rule 9 (empty -> .)

    expression                     shift and go to state 2
    statement                      shift and go to state 16
    if_statement                   shift and go to state 3
    condition                      shift and go to state 4
    empty                          shift and go to state 5

state 16

    (3) if_statement -> IF LSB expression RSB LMB statement . RMB

    RMB             shift and go to state 17


state 17

    (3) if_statement -> IF LSB expression RSB LMB statement RMB .

    $end            reduce using rule 3 (if_statement -> IF LSB expression RSB LMB statement RMB .)
    RMB             reduce using rule 3 (if_statement -> IF LSB expression RSB LMB statement RMB .)

