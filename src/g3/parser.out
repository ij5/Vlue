Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> root
Rule 1     root -> expression
Rule 2     expression -> expression variable_declaration SEMI
Rule 3     expression -> expression variable_value_change SEMI
Rule 4     expression -> expression if_statement
Rule 5     expression -> expression function
Rule 6     expression -> expression function_call SEMI
Rule 7     expression -> expression repeat
Rule 8     expression -> expression for
Rule 9     expression -> expression while
Rule 10    expression -> expression use
Rule 11    expression -> variable_declaration SEMI
Rule 12    expression -> variable_value_change SEMI
Rule 13    expression -> if_statement
Rule 14    expression -> function
Rule 15    expression -> function_call
Rule 16    expression -> repeat
Rule 17    expression -> for
Rule 18    expression -> while
Rule 19    expression -> use
Rule 20    expression -> empty
Rule 21    for -> for_head for_body
Rule 22    for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB
Rule 23    for_body -> LMB expression RMB
Rule 24    while -> while_head while_body
Rule 25    while_head -> WHILE LSB condition RSB
Rule 26    while_body -> LMB expression RMB
Rule 27    repeat -> repeat_head repeat_body
Rule 28    repeat_head -> REPEAT LSB calculate RSB
Rule 29    repeat_body -> LMB expression RMB
Rule 30    function -> function_head function_body
Rule 31    function_head -> FUNCTION IDENTIFIER LSB empty RSB
Rule 32    function_head -> FUNCTION IDENTIFIER LSB parameter RSB
Rule 33    function_body -> LMB expression RMB
Rule 34    function_call -> IDENTIFIER LSB parameter RSB
Rule 35    parameter -> parameter COMMA calculate
Rule 36    parameter -> calculate
Rule 37    parameter -> empty
Rule 38    if_statement -> if_statement_1 if_statement_2 if_statement_3
Rule 39    if_statement -> if_statement_1 if_statement_2
Rule 40    if_statement -> if_statement_1 if_statement_3
Rule 41    if_statement -> if_statement_1
Rule 42    if_statement_1 -> IF LSB condition RSB LMB expression RMB
Rule 43    if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB
Rule 44    if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
Rule 45    if_statement_3 -> ELSE LMB expression RMB
Rule 46    condition -> condition LB calculate
Rule 47    condition -> condition RB calculate
Rule 48    condition -> condition LB EQUAL calculate
Rule 49    condition -> condition RB EQUAL calculate
Rule 50    condition -> condition EQUAL calculate
Rule 51    condition -> calculate
Rule 52    use -> USE IDENTIFIER
Rule 53    variable_value_change -> IDENTIFIER EQUAL LIST
Rule 54    variable_value_change -> IDENTIFIER EQUAL calculate
Rule 55    variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate
Rule 56    variable_declaration -> VAR IDENTIFIER EQUAL calculate
Rule 57    variable_declaration -> VAR IDENTIFIER
Rule 58    calculate -> calculate PLUS calculate
Rule 59    calculate -> calculate MINUS calculate
Rule 60    calculate -> MINUS calculate
Rule 61    calculate -> calculate MUL calculate
Rule 62    calculate -> calculate DIV calculate
Rule 63    calculate -> INT
Rule 64    calculate -> FLOAT
Rule 65    calculate -> STRING
Rule 66    calculate -> IDENTIFIER
Rule 67    calculate -> IDENTIFIER LIST
Rule 68    calculate -> LIST
Rule 69    calculate -> LSB calculate RSB
Rule 70    empty -> <empty>

Terminals, with rules where they appear

COLON                : 
COMMA                : 35
DIV                  : 62
ELSE                 : 43 44 45
EQUAL                : 48 49 50 53 54 55 56
FLOAT                : 64
FOR                  : 22
FUNCTION             : 31 32
IDENTIFIER           : 22 22 31 32 34 52 53 54 55 56 57 66 67
IF                   : 42 43 44
IN                   : 22
INT                  : 63
LB                   : 46 48
LIST                 : 53 55 67 68
LMB                  : 23 26 29 33 42 43 44 45
LSB                  : 22 25 28 31 32 34 42 43 44 69
MINUS                : 59 60
MUL                  : 61
PLUS                 : 58
RB                   : 47 49
REPEAT               : 28
RMB                  : 23 26 29 33 42 43 44 45
RSB                  : 22 25 28 31 32 34 42 43 44 69
SEMI                 : 2 3 6 11 12
STRING               : 65
USE                  : 52
VAR                  : 55 56 57
WHILE                : 25
error                : 

Nonterminals, with rules where they appear

calculate            : 28 35 36 46 47 48 49 50 51 54 55 56 58 58 59 59 60 61 61 62 62 69
condition            : 25 42 43 44 46 47 48 49 50
empty                : 20 31 37
expression           : 1 2 3 4 5 6 7 8 9 10 23 26 29 33 42 43 44 45
for                  : 8 17
for_body             : 21
for_head             : 21
function             : 5 14
function_body        : 30
function_call        : 6 15
function_head        : 30
if_statement         : 4 13
if_statement_1       : 38 39 40 41
if_statement_2       : 38 39 44
if_statement_3       : 38 40
parameter            : 32 34 35
repeat               : 7 16
repeat_body          : 27
repeat_head          : 27
root                 : 0
use                  : 10 19
variable_declaration : 2 11
variable_value_change : 3 12
while                : 9 18
while_body           : 24
while_head           : 24

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . expression
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (55) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (57) variable_declaration -> . VAR IDENTIFIER
    (53) variable_value_change -> . IDENTIFIER EQUAL LIST
    (54) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (39) if_statement -> . if_statement_1 if_statement_2
    (40) if_statement -> . if_statement_1 if_statement_3
    (41) if_statement -> . if_statement_1
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (52) use -> . USE IDENTIFIER
    (70) empty -> .
    (42) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    $end            reduce using rule 70 (empty -> .)
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

  ! VAR             [ reduce using rule 70 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 70 (empty -> .) ]
  ! USE             [ reduce using rule 70 (empty -> .) ]
  ! IF              [ reduce using rule 70 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 70 (empty -> .) ]
  ! REPEAT          [ reduce using rule 70 (empty -> .) ]
  ! FOR             [ reduce using rule 70 (empty -> .) ]
  ! WHILE           [ reduce using rule 70 (empty -> .) ]

    root                           shift and go to state 1
    expression                     shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_1                 shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 1

    (0) S' -> root .



state 2

    (1) root -> expression .
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (55) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (57) variable_declaration -> . VAR IDENTIFIER
    (53) variable_value_change -> . IDENTIFIER EQUAL LIST
    (54) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (39) if_statement -> . if_statement_1 if_statement_2
    (40) if_statement -> . if_statement_1 if_statement_3
    (41) if_statement -> . if_statement_1
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (52) use -> . USE IDENTIFIER
    (42) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

    $end            reduce using rule 1 (root -> expression .)
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

    variable_declaration           shift and go to state 26
    variable_value_change          shift and go to state 27
    if_statement                   shift and go to state 28
    function                       shift and go to state 29
    function_call                  shift and go to state 30
    repeat                         shift and go to state 31
    for                            shift and go to state 32
    while                          shift and go to state 33
    use                            shift and go to state 34
    if_statement_1                 shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 3

    (11) expression -> variable_declaration . SEMI

    SEMI            shift and go to state 35


state 4

    (12) expression -> variable_value_change . SEMI

    SEMI            shift and go to state 36


state 5

    (13) expression -> if_statement .

    VAR             reduce using rule 13 (expression -> if_statement .)
    IDENTIFIER      reduce using rule 13 (expression -> if_statement .)
    USE             reduce using rule 13 (expression -> if_statement .)
    IF              reduce using rule 13 (expression -> if_statement .)
    FUNCTION        reduce using rule 13 (expression -> if_statement .)
    REPEAT          reduce using rule 13 (expression -> if_statement .)
    FOR             reduce using rule 13 (expression -> if_statement .)
    WHILE           reduce using rule 13 (expression -> if_statement .)
    $end            reduce using rule 13 (expression -> if_statement .)
    RMB             reduce using rule 13 (expression -> if_statement .)


state 6

    (14) expression -> function .

    VAR             reduce using rule 14 (expression -> function .)
    IDENTIFIER      reduce using rule 14 (expression -> function .)
    USE             reduce using rule 14 (expression -> function .)
    IF              reduce using rule 14 (expression -> function .)
    FUNCTION        reduce using rule 14 (expression -> function .)
    REPEAT          reduce using rule 14 (expression -> function .)
    FOR             reduce using rule 14 (expression -> function .)
    WHILE           reduce using rule 14 (expression -> function .)
    $end            reduce using rule 14 (expression -> function .)
    RMB             reduce using rule 14 (expression -> function .)


state 7

    (15) expression -> function_call .

    VAR             reduce using rule 15 (expression -> function_call .)
    IDENTIFIER      reduce using rule 15 (expression -> function_call .)
    USE             reduce using rule 15 (expression -> function_call .)
    IF              reduce using rule 15 (expression -> function_call .)
    FUNCTION        reduce using rule 15 (expression -> function_call .)
    REPEAT          reduce using rule 15 (expression -> function_call .)
    FOR             reduce using rule 15 (expression -> function_call .)
    WHILE           reduce using rule 15 (expression -> function_call .)
    $end            reduce using rule 15 (expression -> function_call .)
    RMB             reduce using rule 15 (expression -> function_call .)


state 8

    (16) expression -> repeat .

    VAR             reduce using rule 16 (expression -> repeat .)
    IDENTIFIER      reduce using rule 16 (expression -> repeat .)
    USE             reduce using rule 16 (expression -> repeat .)
    IF              reduce using rule 16 (expression -> repeat .)
    FUNCTION        reduce using rule 16 (expression -> repeat .)
    REPEAT          reduce using rule 16 (expression -> repeat .)
    FOR             reduce using rule 16 (expression -> repeat .)
    WHILE           reduce using rule 16 (expression -> repeat .)
    $end            reduce using rule 16 (expression -> repeat .)
    RMB             reduce using rule 16 (expression -> repeat .)


state 9

    (17) expression -> for .

    VAR             reduce using rule 17 (expression -> for .)
    IDENTIFIER      reduce using rule 17 (expression -> for .)
    USE             reduce using rule 17 (expression -> for .)
    IF              reduce using rule 17 (expression -> for .)
    FUNCTION        reduce using rule 17 (expression -> for .)
    REPEAT          reduce using rule 17 (expression -> for .)
    FOR             reduce using rule 17 (expression -> for .)
    WHILE           reduce using rule 17 (expression -> for .)
    $end            reduce using rule 17 (expression -> for .)
    RMB             reduce using rule 17 (expression -> for .)


state 10

    (18) expression -> while .

    VAR             reduce using rule 18 (expression -> while .)
    IDENTIFIER      reduce using rule 18 (expression -> while .)
    USE             reduce using rule 18 (expression -> while .)
    IF              reduce using rule 18 (expression -> while .)
    FUNCTION        reduce using rule 18 (expression -> while .)
    REPEAT          reduce using rule 18 (expression -> while .)
    FOR             reduce using rule 18 (expression -> while .)
    WHILE           reduce using rule 18 (expression -> while .)
    $end            reduce using rule 18 (expression -> while .)
    RMB             reduce using rule 18 (expression -> while .)


state 11

    (19) expression -> use .

    VAR             reduce using rule 19 (expression -> use .)
    IDENTIFIER      reduce using rule 19 (expression -> use .)
    USE             reduce using rule 19 (expression -> use .)
    IF              reduce using rule 19 (expression -> use .)
    FUNCTION        reduce using rule 19 (expression -> use .)
    REPEAT          reduce using rule 19 (expression -> use .)
    FOR             reduce using rule 19 (expression -> use .)
    WHILE           reduce using rule 19 (expression -> use .)
    $end            reduce using rule 19 (expression -> use .)
    RMB             reduce using rule 19 (expression -> use .)


state 12

    (20) expression -> empty .

    VAR             reduce using rule 20 (expression -> empty .)
    IDENTIFIER      reduce using rule 20 (expression -> empty .)
    USE             reduce using rule 20 (expression -> empty .)
    IF              reduce using rule 20 (expression -> empty .)
    FUNCTION        reduce using rule 20 (expression -> empty .)
    REPEAT          reduce using rule 20 (expression -> empty .)
    FOR             reduce using rule 20 (expression -> empty .)
    WHILE           reduce using rule 20 (expression -> empty .)
    $end            reduce using rule 20 (expression -> empty .)
    RMB             reduce using rule 20 (expression -> empty .)


state 13

    (55) variable_declaration -> VAR . IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> VAR . IDENTIFIER EQUAL calculate
    (57) variable_declaration -> VAR . IDENTIFIER

    IDENTIFIER      shift and go to state 37


state 14

    (53) variable_value_change -> IDENTIFIER . EQUAL LIST
    (54) variable_value_change -> IDENTIFIER . EQUAL calculate
    (34) function_call -> IDENTIFIER . LSB parameter RSB

    EQUAL           shift and go to state 38
    LSB             shift and go to state 39


state 15

    (38) if_statement -> if_statement_1 . if_statement_2 if_statement_3
    (39) if_statement -> if_statement_1 . if_statement_2
    (40) if_statement -> if_statement_1 . if_statement_3
    (41) if_statement -> if_statement_1 .
    (43) if_statement_2 -> . ELSE IF LSB condition RSB LMB expression RMB
    (44) if_statement_2 -> . if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
    (45) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 41 (if_statement -> if_statement_1 .)
    IDENTIFIER      reduce using rule 41 (if_statement -> if_statement_1 .)
    USE             reduce using rule 41 (if_statement -> if_statement_1 .)
    IF              reduce using rule 41 (if_statement -> if_statement_1 .)
    FUNCTION        reduce using rule 41 (if_statement -> if_statement_1 .)
    REPEAT          reduce using rule 41 (if_statement -> if_statement_1 .)
    FOR             reduce using rule 41 (if_statement -> if_statement_1 .)
    WHILE           reduce using rule 41 (if_statement -> if_statement_1 .)
    $end            reduce using rule 41 (if_statement -> if_statement_1 .)
    RMB             reduce using rule 41 (if_statement -> if_statement_1 .)
    ELSE            shift and go to state 42

    if_statement_2                 shift and go to state 40
    if_statement_3                 shift and go to state 41

state 16

    (30) function -> function_head . function_body
    (33) function_body -> . LMB expression RMB

    LMB             shift and go to state 44

    function_body                  shift and go to state 43

state 17

    (27) repeat -> repeat_head . repeat_body
    (29) repeat_body -> . LMB expression RMB

    LMB             shift and go to state 46

    repeat_body                    shift and go to state 45

state 18

    (21) for -> for_head . for_body
    (23) for_body -> . LMB expression RMB

    LMB             shift and go to state 48

    for_body                       shift and go to state 47

state 19

    (24) while -> while_head . while_body
    (26) while_body -> . LMB expression RMB

    LMB             shift and go to state 50

    while_body                     shift and go to state 49

state 20

    (52) use -> USE . IDENTIFIER

    IDENTIFIER      shift and go to state 51


state 21

    (42) if_statement_1 -> IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 52


state 22

    (31) function_head -> FUNCTION . IDENTIFIER LSB empty RSB
    (32) function_head -> FUNCTION . IDENTIFIER LSB parameter RSB

    IDENTIFIER      shift and go to state 53


state 23

    (28) repeat_head -> REPEAT . LSB calculate RSB

    LSB             shift and go to state 54


state 24

    (22) for_head -> FOR . LSB IDENTIFIER IN IDENTIFIER RSB

    LSB             shift and go to state 55


state 25

    (25) while_head -> WHILE . LSB condition RSB

    LSB             shift and go to state 56


state 26

    (2) expression -> expression variable_declaration . SEMI

    SEMI            shift and go to state 57


state 27

    (3) expression -> expression variable_value_change . SEMI

    SEMI            shift and go to state 58


state 28

    (4) expression -> expression if_statement .

    VAR             reduce using rule 4 (expression -> expression if_statement .)
    IDENTIFIER      reduce using rule 4 (expression -> expression if_statement .)
    USE             reduce using rule 4 (expression -> expression if_statement .)
    IF              reduce using rule 4 (expression -> expression if_statement .)
    FUNCTION        reduce using rule 4 (expression -> expression if_statement .)
    REPEAT          reduce using rule 4 (expression -> expression if_statement .)
    FOR             reduce using rule 4 (expression -> expression if_statement .)
    WHILE           reduce using rule 4 (expression -> expression if_statement .)
    $end            reduce using rule 4 (expression -> expression if_statement .)
    RMB             reduce using rule 4 (expression -> expression if_statement .)


state 29

    (5) expression -> expression function .

    VAR             reduce using rule 5 (expression -> expression function .)
    IDENTIFIER      reduce using rule 5 (expression -> expression function .)
    USE             reduce using rule 5 (expression -> expression function .)
    IF              reduce using rule 5 (expression -> expression function .)
    FUNCTION        reduce using rule 5 (expression -> expression function .)
    REPEAT          reduce using rule 5 (expression -> expression function .)
    FOR             reduce using rule 5 (expression -> expression function .)
    WHILE           reduce using rule 5 (expression -> expression function .)
    $end            reduce using rule 5 (expression -> expression function .)
    RMB             reduce using rule 5 (expression -> expression function .)


state 30

    (6) expression -> expression function_call . SEMI

    SEMI            shift and go to state 59


state 31

    (7) expression -> expression repeat .

    VAR             reduce using rule 7 (expression -> expression repeat .)
    IDENTIFIER      reduce using rule 7 (expression -> expression repeat .)
    USE             reduce using rule 7 (expression -> expression repeat .)
    IF              reduce using rule 7 (expression -> expression repeat .)
    FUNCTION        reduce using rule 7 (expression -> expression repeat .)
    REPEAT          reduce using rule 7 (expression -> expression repeat .)
    FOR             reduce using rule 7 (expression -> expression repeat .)
    WHILE           reduce using rule 7 (expression -> expression repeat .)
    $end            reduce using rule 7 (expression -> expression repeat .)
    RMB             reduce using rule 7 (expression -> expression repeat .)


state 32

    (8) expression -> expression for .

    VAR             reduce using rule 8 (expression -> expression for .)
    IDENTIFIER      reduce using rule 8 (expression -> expression for .)
    USE             reduce using rule 8 (expression -> expression for .)
    IF              reduce using rule 8 (expression -> expression for .)
    FUNCTION        reduce using rule 8 (expression -> expression for .)
    REPEAT          reduce using rule 8 (expression -> expression for .)
    FOR             reduce using rule 8 (expression -> expression for .)
    WHILE           reduce using rule 8 (expression -> expression for .)
    $end            reduce using rule 8 (expression -> expression for .)
    RMB             reduce using rule 8 (expression -> expression for .)


state 33

    (9) expression -> expression while .

    VAR             reduce using rule 9 (expression -> expression while .)
    IDENTIFIER      reduce using rule 9 (expression -> expression while .)
    USE             reduce using rule 9 (expression -> expression while .)
    IF              reduce using rule 9 (expression -> expression while .)
    FUNCTION        reduce using rule 9 (expression -> expression while .)
    REPEAT          reduce using rule 9 (expression -> expression while .)
    FOR             reduce using rule 9 (expression -> expression while .)
    WHILE           reduce using rule 9 (expression -> expression while .)
    $end            reduce using rule 9 (expression -> expression while .)
    RMB             reduce using rule 9 (expression -> expression while .)


state 34

    (10) expression -> expression use .

    VAR             reduce using rule 10 (expression -> expression use .)
    IDENTIFIER      reduce using rule 10 (expression -> expression use .)
    USE             reduce using rule 10 (expression -> expression use .)
    IF              reduce using rule 10 (expression -> expression use .)
    FUNCTION        reduce using rule 10 (expression -> expression use .)
    REPEAT          reduce using rule 10 (expression -> expression use .)
    FOR             reduce using rule 10 (expression -> expression use .)
    WHILE           reduce using rule 10 (expression -> expression use .)
    $end            reduce using rule 10 (expression -> expression use .)
    RMB             reduce using rule 10 (expression -> expression use .)


state 35

    (11) expression -> variable_declaration SEMI .

    VAR             reduce using rule 11 (expression -> variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 11 (expression -> variable_declaration SEMI .)
    USE             reduce using rule 11 (expression -> variable_declaration SEMI .)
    IF              reduce using rule 11 (expression -> variable_declaration SEMI .)
    FUNCTION        reduce using rule 11 (expression -> variable_declaration SEMI .)
    REPEAT          reduce using rule 11 (expression -> variable_declaration SEMI .)
    FOR             reduce using rule 11 (expression -> variable_declaration SEMI .)
    WHILE           reduce using rule 11 (expression -> variable_declaration SEMI .)
    $end            reduce using rule 11 (expression -> variable_declaration SEMI .)
    RMB             reduce using rule 11 (expression -> variable_declaration SEMI .)


state 36

    (12) expression -> variable_value_change SEMI .

    VAR             reduce using rule 12 (expression -> variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 12 (expression -> variable_value_change SEMI .)
    USE             reduce using rule 12 (expression -> variable_value_change SEMI .)
    IF              reduce using rule 12 (expression -> variable_value_change SEMI .)
    FUNCTION        reduce using rule 12 (expression -> variable_value_change SEMI .)
    REPEAT          reduce using rule 12 (expression -> variable_value_change SEMI .)
    FOR             reduce using rule 12 (expression -> variable_value_change SEMI .)
    WHILE           reduce using rule 12 (expression -> variable_value_change SEMI .)
    $end            reduce using rule 12 (expression -> variable_value_change SEMI .)
    RMB             reduce using rule 12 (expression -> variable_value_change SEMI .)


state 37

    (55) variable_declaration -> VAR IDENTIFIER . LIST EQUAL calculate
    (56) variable_declaration -> VAR IDENTIFIER . EQUAL calculate
    (57) variable_declaration -> VAR IDENTIFIER .

    LIST            shift and go to state 60
    EQUAL           shift and go to state 61
    SEMI            reduce using rule 57 (variable_declaration -> VAR IDENTIFIER .)


state 38

    (53) variable_value_change -> IDENTIFIER EQUAL . LIST
    (54) variable_value_change -> IDENTIFIER EQUAL . calculate
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    LIST            shift and go to state 63
    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LSB             shift and go to state 69

    calculate                      shift and go to state 64

state 39

    (34) function_call -> IDENTIFIER LSB . parameter RSB
    (35) parameter -> . parameter COMMA calculate
    (36) parameter -> . calculate
    (37) parameter -> . empty
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB
    (70) empty -> .

    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69
    RSB             reduce using rule 70 (empty -> .)
    COMMA           reduce using rule 70 (empty -> .)

    parameter                      shift and go to state 70
    calculate                      shift and go to state 71
    empty                          shift and go to state 72

state 40

    (38) if_statement -> if_statement_1 if_statement_2 . if_statement_3
    (39) if_statement -> if_statement_1 if_statement_2 .
    (44) if_statement_2 -> if_statement_2 . ELSE IF LSB condition RSB LMB expression RMB
    (45) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 39 (if_statement -> if_statement_1 if_statement_2 .)
    IDENTIFIER      reduce using rule 39 (if_statement -> if_statement_1 if_statement_2 .)
    USE             reduce using rule 39 (if_statement -> if_statement_1 if_statement_2 .)
    IF              reduce using rule 39 (if_statement -> if_statement_1 if_statement_2 .)
    FUNCTION        reduce using rule 39 (if_statement -> if_statement_1 if_statement_2 .)
    REPEAT          reduce using rule 39 (if_statement -> if_statement_1 if_statement_2 .)
    FOR             reduce using rule 39 (if_statement -> if_statement_1 if_statement_2 .)
    WHILE           reduce using rule 39 (if_statement -> if_statement_1 if_statement_2 .)
    $end            reduce using rule 39 (if_statement -> if_statement_1 if_statement_2 .)
    RMB             reduce using rule 39 (if_statement -> if_statement_1 if_statement_2 .)
    ELSE            shift and go to state 75

    if_statement_3                 shift and go to state 74

state 41

    (40) if_statement -> if_statement_1 if_statement_3 .

    VAR             reduce using rule 40 (if_statement -> if_statement_1 if_statement_3 .)
    IDENTIFIER      reduce using rule 40 (if_statement -> if_statement_1 if_statement_3 .)
    USE             reduce using rule 40 (if_statement -> if_statement_1 if_statement_3 .)
    IF              reduce using rule 40 (if_statement -> if_statement_1 if_statement_3 .)
    FUNCTION        reduce using rule 40 (if_statement -> if_statement_1 if_statement_3 .)
    REPEAT          reduce using rule 40 (if_statement -> if_statement_1 if_statement_3 .)
    FOR             reduce using rule 40 (if_statement -> if_statement_1 if_statement_3 .)
    WHILE           reduce using rule 40 (if_statement -> if_statement_1 if_statement_3 .)
    $end            reduce using rule 40 (if_statement -> if_statement_1 if_statement_3 .)
    RMB             reduce using rule 40 (if_statement -> if_statement_1 if_statement_3 .)


state 42

    (43) if_statement_2 -> ELSE . IF LSB condition RSB LMB expression RMB
    (45) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 76
    LMB             shift and go to state 77


state 43

    (30) function -> function_head function_body .

    VAR             reduce using rule 30 (function -> function_head function_body .)
    IDENTIFIER      reduce using rule 30 (function -> function_head function_body .)
    USE             reduce using rule 30 (function -> function_head function_body .)
    IF              reduce using rule 30 (function -> function_head function_body .)
    FUNCTION        reduce using rule 30 (function -> function_head function_body .)
    REPEAT          reduce using rule 30 (function -> function_head function_body .)
    FOR             reduce using rule 30 (function -> function_head function_body .)
    WHILE           reduce using rule 30 (function -> function_head function_body .)
    $end            reduce using rule 30 (function -> function_head function_body .)
    RMB             reduce using rule 30 (function -> function_head function_body .)


state 44

    (33) function_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (55) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (57) variable_declaration -> . VAR IDENTIFIER
    (53) variable_value_change -> . IDENTIFIER EQUAL LIST
    (54) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (39) if_statement -> . if_statement_1 if_statement_2
    (40) if_statement -> . if_statement_1 if_statement_3
    (41) if_statement -> . if_statement_1
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (52) use -> . USE IDENTIFIER
    (70) empty -> .
    (42) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    RMB             reduce using rule 70 (empty -> .)
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

  ! VAR             [ reduce using rule 70 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 70 (empty -> .) ]
  ! USE             [ reduce using rule 70 (empty -> .) ]
  ! IF              [ reduce using rule 70 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 70 (empty -> .) ]
  ! REPEAT          [ reduce using rule 70 (empty -> .) ]
  ! FOR             [ reduce using rule 70 (empty -> .) ]
  ! WHILE           [ reduce using rule 70 (empty -> .) ]

    expression                     shift and go to state 78
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_1                 shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 45

    (27) repeat -> repeat_head repeat_body .

    VAR             reduce using rule 27 (repeat -> repeat_head repeat_body .)
    IDENTIFIER      reduce using rule 27 (repeat -> repeat_head repeat_body .)
    USE             reduce using rule 27 (repeat -> repeat_head repeat_body .)
    IF              reduce using rule 27 (repeat -> repeat_head repeat_body .)
    FUNCTION        reduce using rule 27 (repeat -> repeat_head repeat_body .)
    REPEAT          reduce using rule 27 (repeat -> repeat_head repeat_body .)
    FOR             reduce using rule 27 (repeat -> repeat_head repeat_body .)
    WHILE           reduce using rule 27 (repeat -> repeat_head repeat_body .)
    $end            reduce using rule 27 (repeat -> repeat_head repeat_body .)
    RMB             reduce using rule 27 (repeat -> repeat_head repeat_body .)


state 46

    (29) repeat_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (55) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (57) variable_declaration -> . VAR IDENTIFIER
    (53) variable_value_change -> . IDENTIFIER EQUAL LIST
    (54) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (39) if_statement -> . if_statement_1 if_statement_2
    (40) if_statement -> . if_statement_1 if_statement_3
    (41) if_statement -> . if_statement_1
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (52) use -> . USE IDENTIFIER
    (70) empty -> .
    (42) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    RMB             reduce using rule 70 (empty -> .)
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

  ! VAR             [ reduce using rule 70 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 70 (empty -> .) ]
  ! USE             [ reduce using rule 70 (empty -> .) ]
  ! IF              [ reduce using rule 70 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 70 (empty -> .) ]
  ! REPEAT          [ reduce using rule 70 (empty -> .) ]
  ! FOR             [ reduce using rule 70 (empty -> .) ]
  ! WHILE           [ reduce using rule 70 (empty -> .) ]

    expression                     shift and go to state 79
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_1                 shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 47

    (21) for -> for_head for_body .

    VAR             reduce using rule 21 (for -> for_head for_body .)
    IDENTIFIER      reduce using rule 21 (for -> for_head for_body .)
    USE             reduce using rule 21 (for -> for_head for_body .)
    IF              reduce using rule 21 (for -> for_head for_body .)
    FUNCTION        reduce using rule 21 (for -> for_head for_body .)
    REPEAT          reduce using rule 21 (for -> for_head for_body .)
    FOR             reduce using rule 21 (for -> for_head for_body .)
    WHILE           reduce using rule 21 (for -> for_head for_body .)
    $end            reduce using rule 21 (for -> for_head for_body .)
    RMB             reduce using rule 21 (for -> for_head for_body .)


state 48

    (23) for_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (55) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (57) variable_declaration -> . VAR IDENTIFIER
    (53) variable_value_change -> . IDENTIFIER EQUAL LIST
    (54) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (39) if_statement -> . if_statement_1 if_statement_2
    (40) if_statement -> . if_statement_1 if_statement_3
    (41) if_statement -> . if_statement_1
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (52) use -> . USE IDENTIFIER
    (70) empty -> .
    (42) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    RMB             reduce using rule 70 (empty -> .)
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

  ! VAR             [ reduce using rule 70 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 70 (empty -> .) ]
  ! USE             [ reduce using rule 70 (empty -> .) ]
  ! IF              [ reduce using rule 70 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 70 (empty -> .) ]
  ! REPEAT          [ reduce using rule 70 (empty -> .) ]
  ! FOR             [ reduce using rule 70 (empty -> .) ]
  ! WHILE           [ reduce using rule 70 (empty -> .) ]

    expression                     shift and go to state 80
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_1                 shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 49

    (24) while -> while_head while_body .

    VAR             reduce using rule 24 (while -> while_head while_body .)
    IDENTIFIER      reduce using rule 24 (while -> while_head while_body .)
    USE             reduce using rule 24 (while -> while_head while_body .)
    IF              reduce using rule 24 (while -> while_head while_body .)
    FUNCTION        reduce using rule 24 (while -> while_head while_body .)
    REPEAT          reduce using rule 24 (while -> while_head while_body .)
    FOR             reduce using rule 24 (while -> while_head while_body .)
    WHILE           reduce using rule 24 (while -> while_head while_body .)
    $end            reduce using rule 24 (while -> while_head while_body .)
    RMB             reduce using rule 24 (while -> while_head while_body .)


state 50

    (26) while_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (55) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (57) variable_declaration -> . VAR IDENTIFIER
    (53) variable_value_change -> . IDENTIFIER EQUAL LIST
    (54) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (39) if_statement -> . if_statement_1 if_statement_2
    (40) if_statement -> . if_statement_1 if_statement_3
    (41) if_statement -> . if_statement_1
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (52) use -> . USE IDENTIFIER
    (70) empty -> .
    (42) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    RMB             reduce using rule 70 (empty -> .)
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

  ! VAR             [ reduce using rule 70 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 70 (empty -> .) ]
  ! USE             [ reduce using rule 70 (empty -> .) ]
  ! IF              [ reduce using rule 70 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 70 (empty -> .) ]
  ! REPEAT          [ reduce using rule 70 (empty -> .) ]
  ! FOR             [ reduce using rule 70 (empty -> .) ]
  ! WHILE           [ reduce using rule 70 (empty -> .) ]

    expression                     shift and go to state 81
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_1                 shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 51

    (52) use -> USE IDENTIFIER .

    VAR             reduce using rule 52 (use -> USE IDENTIFIER .)
    IDENTIFIER      reduce using rule 52 (use -> USE IDENTIFIER .)
    USE             reduce using rule 52 (use -> USE IDENTIFIER .)
    IF              reduce using rule 52 (use -> USE IDENTIFIER .)
    FUNCTION        reduce using rule 52 (use -> USE IDENTIFIER .)
    REPEAT          reduce using rule 52 (use -> USE IDENTIFIER .)
    FOR             reduce using rule 52 (use -> USE IDENTIFIER .)
    WHILE           reduce using rule 52 (use -> USE IDENTIFIER .)
    $end            reduce using rule 52 (use -> USE IDENTIFIER .)
    RMB             reduce using rule 52 (use -> USE IDENTIFIER .)


state 52

    (42) if_statement_1 -> IF LSB . condition RSB LMB expression RMB
    (46) condition -> . condition LB calculate
    (47) condition -> . condition RB calculate
    (48) condition -> . condition LB EQUAL calculate
    (49) condition -> . condition RB EQUAL calculate
    (50) condition -> . condition EQUAL calculate
    (51) condition -> . calculate
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    condition                      shift and go to state 82
    calculate                      shift and go to state 83

state 53

    (31) function_head -> FUNCTION IDENTIFIER . LSB empty RSB
    (32) function_head -> FUNCTION IDENTIFIER . LSB parameter RSB

    LSB             shift and go to state 84


state 54

    (28) repeat_head -> REPEAT LSB . calculate RSB
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    calculate                      shift and go to state 85

state 55

    (22) for_head -> FOR LSB . IDENTIFIER IN IDENTIFIER RSB

    IDENTIFIER      shift and go to state 86


state 56

    (25) while_head -> WHILE LSB . condition RSB
    (46) condition -> . condition LB calculate
    (47) condition -> . condition RB calculate
    (48) condition -> . condition LB EQUAL calculate
    (49) condition -> . condition RB EQUAL calculate
    (50) condition -> . condition EQUAL calculate
    (51) condition -> . calculate
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    condition                      shift and go to state 87
    calculate                      shift and go to state 83

state 57

    (2) expression -> expression variable_declaration SEMI .

    VAR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    USE             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IF              reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FUNCTION        reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    REPEAT          reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FOR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    WHILE           reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    $end            reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    RMB             reduce using rule 2 (expression -> expression variable_declaration SEMI .)


state 58

    (3) expression -> expression variable_value_change SEMI .

    VAR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    USE             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IF              reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FUNCTION        reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    REPEAT          reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FOR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    WHILE           reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    $end            reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    RMB             reduce using rule 3 (expression -> expression variable_value_change SEMI .)


state 59

    (6) expression -> expression function_call SEMI .

    VAR             reduce using rule 6 (expression -> expression function_call SEMI .)
    IDENTIFIER      reduce using rule 6 (expression -> expression function_call SEMI .)
    USE             reduce using rule 6 (expression -> expression function_call SEMI .)
    IF              reduce using rule 6 (expression -> expression function_call SEMI .)
    FUNCTION        reduce using rule 6 (expression -> expression function_call SEMI .)
    REPEAT          reduce using rule 6 (expression -> expression function_call SEMI .)
    FOR             reduce using rule 6 (expression -> expression function_call SEMI .)
    WHILE           reduce using rule 6 (expression -> expression function_call SEMI .)
    $end            reduce using rule 6 (expression -> expression function_call SEMI .)
    RMB             reduce using rule 6 (expression -> expression function_call SEMI .)


state 60

    (55) variable_declaration -> VAR IDENTIFIER LIST . EQUAL calculate

    EQUAL           shift and go to state 88


state 61

    (56) variable_declaration -> VAR IDENTIFIER EQUAL . calculate
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    calculate                      shift and go to state 89

state 62

    (66) calculate -> IDENTIFIER .
    (67) calculate -> IDENTIFIER . LIST

    PLUS            reduce using rule 66 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 66 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 66 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 66 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 66 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 66 (calculate -> IDENTIFIER .)
    COMMA           reduce using rule 66 (calculate -> IDENTIFIER .)
    LB              reduce using rule 66 (calculate -> IDENTIFIER .)
    RB              reduce using rule 66 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 66 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 90


state 63

    (53) variable_value_change -> IDENTIFIER EQUAL LIST .
    (68) calculate -> LIST .

  ! reduce/reduce conflict for SEMI resolved using rule 53 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    SEMI            reduce using rule 53 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    PLUS            reduce using rule 68 (calculate -> LIST .)
    MINUS           reduce using rule 68 (calculate -> LIST .)
    MUL             reduce using rule 68 (calculate -> LIST .)
    DIV             reduce using rule 68 (calculate -> LIST .)

  ! SEMI            [ reduce using rule 68 (calculate -> LIST .) ]


state 64

    (54) variable_value_change -> IDENTIFIER EQUAL calculate .
    (58) calculate -> calculate . PLUS calculate
    (59) calculate -> calculate . MINUS calculate
    (61) calculate -> calculate . MUL calculate
    (62) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 54 (variable_value_change -> IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    MUL             shift and go to state 93
    DIV             shift and go to state 94


state 65

    (60) calculate -> MINUS . calculate
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    calculate                      shift and go to state 95

state 66

    (63) calculate -> INT .

    PLUS            reduce using rule 63 (calculate -> INT .)
    MINUS           reduce using rule 63 (calculate -> INT .)
    MUL             reduce using rule 63 (calculate -> INT .)
    DIV             reduce using rule 63 (calculate -> INT .)
    SEMI            reduce using rule 63 (calculate -> INT .)
    RSB             reduce using rule 63 (calculate -> INT .)
    COMMA           reduce using rule 63 (calculate -> INT .)
    LB              reduce using rule 63 (calculate -> INT .)
    RB              reduce using rule 63 (calculate -> INT .)
    EQUAL           reduce using rule 63 (calculate -> INT .)


state 67

    (64) calculate -> FLOAT .

    PLUS            reduce using rule 64 (calculate -> FLOAT .)
    MINUS           reduce using rule 64 (calculate -> FLOAT .)
    MUL             reduce using rule 64 (calculate -> FLOAT .)
    DIV             reduce using rule 64 (calculate -> FLOAT .)
    SEMI            reduce using rule 64 (calculate -> FLOAT .)
    RSB             reduce using rule 64 (calculate -> FLOAT .)
    COMMA           reduce using rule 64 (calculate -> FLOAT .)
    LB              reduce using rule 64 (calculate -> FLOAT .)
    RB              reduce using rule 64 (calculate -> FLOAT .)
    EQUAL           reduce using rule 64 (calculate -> FLOAT .)


state 68

    (65) calculate -> STRING .

    PLUS            reduce using rule 65 (calculate -> STRING .)
    MINUS           reduce using rule 65 (calculate -> STRING .)
    MUL             reduce using rule 65 (calculate -> STRING .)
    DIV             reduce using rule 65 (calculate -> STRING .)
    SEMI            reduce using rule 65 (calculate -> STRING .)
    RSB             reduce using rule 65 (calculate -> STRING .)
    COMMA           reduce using rule 65 (calculate -> STRING .)
    LB              reduce using rule 65 (calculate -> STRING .)
    RB              reduce using rule 65 (calculate -> STRING .)
    EQUAL           reduce using rule 65 (calculate -> STRING .)


state 69

    (69) calculate -> LSB . calculate RSB
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    calculate                      shift and go to state 96

state 70

    (34) function_call -> IDENTIFIER LSB parameter . RSB
    (35) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 97
    COMMA           shift and go to state 98


state 71

    (36) parameter -> calculate .
    (58) calculate -> calculate . PLUS calculate
    (59) calculate -> calculate . MINUS calculate
    (61) calculate -> calculate . MUL calculate
    (62) calculate -> calculate . DIV calculate

    RSB             reduce using rule 36 (parameter -> calculate .)
    COMMA           reduce using rule 36 (parameter -> calculate .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    MUL             shift and go to state 93
    DIV             shift and go to state 94


state 72

    (37) parameter -> empty .

    RSB             reduce using rule 37 (parameter -> empty .)
    COMMA           reduce using rule 37 (parameter -> empty .)


state 73

    (68) calculate -> LIST .

    PLUS            reduce using rule 68 (calculate -> LIST .)
    MINUS           reduce using rule 68 (calculate -> LIST .)
    MUL             reduce using rule 68 (calculate -> LIST .)
    DIV             reduce using rule 68 (calculate -> LIST .)
    RSB             reduce using rule 68 (calculate -> LIST .)
    COMMA           reduce using rule 68 (calculate -> LIST .)
    LB              reduce using rule 68 (calculate -> LIST .)
    RB              reduce using rule 68 (calculate -> LIST .)
    EQUAL           reduce using rule 68 (calculate -> LIST .)
    SEMI            reduce using rule 68 (calculate -> LIST .)


state 74

    (38) if_statement -> if_statement_1 if_statement_2 if_statement_3 .

    VAR             reduce using rule 38 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IDENTIFIER      reduce using rule 38 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    USE             reduce using rule 38 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IF              reduce using rule 38 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FUNCTION        reduce using rule 38 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    REPEAT          reduce using rule 38 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FOR             reduce using rule 38 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    WHILE           reduce using rule 38 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    $end            reduce using rule 38 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    RMB             reduce using rule 38 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)


state 75

    (44) if_statement_2 -> if_statement_2 ELSE . IF LSB condition RSB LMB expression RMB
    (45) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 99
    LMB             shift and go to state 77


state 76

    (43) if_statement_2 -> ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 100


state 77

    (45) if_statement_3 -> ELSE LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (55) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (57) variable_declaration -> . VAR IDENTIFIER
    (53) variable_value_change -> . IDENTIFIER EQUAL LIST
    (54) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (39) if_statement -> . if_statement_1 if_statement_2
    (40) if_statement -> . if_statement_1 if_statement_3
    (41) if_statement -> . if_statement_1
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (52) use -> . USE IDENTIFIER
    (70) empty -> .
    (42) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    RMB             reduce using rule 70 (empty -> .)
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

  ! VAR             [ reduce using rule 70 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 70 (empty -> .) ]
  ! USE             [ reduce using rule 70 (empty -> .) ]
  ! IF              [ reduce using rule 70 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 70 (empty -> .) ]
  ! REPEAT          [ reduce using rule 70 (empty -> .) ]
  ! FOR             [ reduce using rule 70 (empty -> .) ]
  ! WHILE           [ reduce using rule 70 (empty -> .) ]

    expression                     shift and go to state 101
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_1                 shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 78

    (33) function_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (55) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (57) variable_declaration -> . VAR IDENTIFIER
    (53) variable_value_change -> . IDENTIFIER EQUAL LIST
    (54) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (39) if_statement -> . if_statement_1 if_statement_2
    (40) if_statement -> . if_statement_1 if_statement_3
    (41) if_statement -> . if_statement_1
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (52) use -> . USE IDENTIFIER
    (42) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

    RMB             shift and go to state 102
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

    variable_declaration           shift and go to state 26
    variable_value_change          shift and go to state 27
    if_statement                   shift and go to state 28
    function                       shift and go to state 29
    function_call                  shift and go to state 30
    repeat                         shift and go to state 31
    for                            shift and go to state 32
    while                          shift and go to state 33
    use                            shift and go to state 34
    if_statement_1                 shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 79

    (29) repeat_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (55) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (57) variable_declaration -> . VAR IDENTIFIER
    (53) variable_value_change -> . IDENTIFIER EQUAL LIST
    (54) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (39) if_statement -> . if_statement_1 if_statement_2
    (40) if_statement -> . if_statement_1 if_statement_3
    (41) if_statement -> . if_statement_1
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (52) use -> . USE IDENTIFIER
    (42) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

    RMB             shift and go to state 103
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

    variable_declaration           shift and go to state 26
    variable_value_change          shift and go to state 27
    if_statement                   shift and go to state 28
    function                       shift and go to state 29
    function_call                  shift and go to state 30
    repeat                         shift and go to state 31
    for                            shift and go to state 32
    while                          shift and go to state 33
    use                            shift and go to state 34
    if_statement_1                 shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 80

    (23) for_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (55) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (57) variable_declaration -> . VAR IDENTIFIER
    (53) variable_value_change -> . IDENTIFIER EQUAL LIST
    (54) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (39) if_statement -> . if_statement_1 if_statement_2
    (40) if_statement -> . if_statement_1 if_statement_3
    (41) if_statement -> . if_statement_1
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (52) use -> . USE IDENTIFIER
    (42) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

    RMB             shift and go to state 104
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

    variable_declaration           shift and go to state 26
    variable_value_change          shift and go to state 27
    if_statement                   shift and go to state 28
    function                       shift and go to state 29
    function_call                  shift and go to state 30
    repeat                         shift and go to state 31
    for                            shift and go to state 32
    while                          shift and go to state 33
    use                            shift and go to state 34
    if_statement_1                 shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 81

    (26) while_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (55) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (57) variable_declaration -> . VAR IDENTIFIER
    (53) variable_value_change -> . IDENTIFIER EQUAL LIST
    (54) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (39) if_statement -> . if_statement_1 if_statement_2
    (40) if_statement -> . if_statement_1 if_statement_3
    (41) if_statement -> . if_statement_1
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (52) use -> . USE IDENTIFIER
    (42) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

    RMB             shift and go to state 105
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

    variable_declaration           shift and go to state 26
    variable_value_change          shift and go to state 27
    if_statement                   shift and go to state 28
    function                       shift and go to state 29
    function_call                  shift and go to state 30
    repeat                         shift and go to state 31
    for                            shift and go to state 32
    while                          shift and go to state 33
    use                            shift and go to state 34
    if_statement_1                 shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 82

    (42) if_statement_1 -> IF LSB condition . RSB LMB expression RMB
    (46) condition -> condition . LB calculate
    (47) condition -> condition . RB calculate
    (48) condition -> condition . LB EQUAL calculate
    (49) condition -> condition . RB EQUAL calculate
    (50) condition -> condition . EQUAL calculate

    RSB             shift and go to state 106
    LB              shift and go to state 107
    RB              shift and go to state 108
    EQUAL           shift and go to state 109


state 83

    (51) condition -> calculate .
    (58) calculate -> calculate . PLUS calculate
    (59) calculate -> calculate . MINUS calculate
    (61) calculate -> calculate . MUL calculate
    (62) calculate -> calculate . DIV calculate

    RSB             reduce using rule 51 (condition -> calculate .)
    LB              reduce using rule 51 (condition -> calculate .)
    RB              reduce using rule 51 (condition -> calculate .)
    EQUAL           reduce using rule 51 (condition -> calculate .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    MUL             shift and go to state 93
    DIV             shift and go to state 94


state 84

    (31) function_head -> FUNCTION IDENTIFIER LSB . empty RSB
    (32) function_head -> FUNCTION IDENTIFIER LSB . parameter RSB
    (70) empty -> .
    (35) parameter -> . parameter COMMA calculate
    (36) parameter -> . calculate
    (37) parameter -> . empty
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    RSB             reduce using rule 70 (empty -> .)
    COMMA           reduce using rule 70 (empty -> .)
    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    empty                          shift and go to state 110
    parameter                      shift and go to state 111
    calculate                      shift and go to state 71

state 85

    (28) repeat_head -> REPEAT LSB calculate . RSB
    (58) calculate -> calculate . PLUS calculate
    (59) calculate -> calculate . MINUS calculate
    (61) calculate -> calculate . MUL calculate
    (62) calculate -> calculate . DIV calculate

    RSB             shift and go to state 112
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    MUL             shift and go to state 93
    DIV             shift and go to state 94


state 86

    (22) for_head -> FOR LSB IDENTIFIER . IN IDENTIFIER RSB

    IN              shift and go to state 113


state 87

    (25) while_head -> WHILE LSB condition . RSB
    (46) condition -> condition . LB calculate
    (47) condition -> condition . RB calculate
    (48) condition -> condition . LB EQUAL calculate
    (49) condition -> condition . RB EQUAL calculate
    (50) condition -> condition . EQUAL calculate

    RSB             shift and go to state 114
    LB              shift and go to state 107
    RB              shift and go to state 108
    EQUAL           shift and go to state 109


state 88

    (55) variable_declaration -> VAR IDENTIFIER LIST EQUAL . calculate
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    calculate                      shift and go to state 115

state 89

    (56) variable_declaration -> VAR IDENTIFIER EQUAL calculate .
    (58) calculate -> calculate . PLUS calculate
    (59) calculate -> calculate . MINUS calculate
    (61) calculate -> calculate . MUL calculate
    (62) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 56 (variable_declaration -> VAR IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    MUL             shift and go to state 93
    DIV             shift and go to state 94


state 90

    (67) calculate -> IDENTIFIER LIST .

    PLUS            reduce using rule 67 (calculate -> IDENTIFIER LIST .)
    MINUS           reduce using rule 67 (calculate -> IDENTIFIER LIST .)
    MUL             reduce using rule 67 (calculate -> IDENTIFIER LIST .)
    DIV             reduce using rule 67 (calculate -> IDENTIFIER LIST .)
    SEMI            reduce using rule 67 (calculate -> IDENTIFIER LIST .)
    RSB             reduce using rule 67 (calculate -> IDENTIFIER LIST .)
    COMMA           reduce using rule 67 (calculate -> IDENTIFIER LIST .)
    LB              reduce using rule 67 (calculate -> IDENTIFIER LIST .)
    RB              reduce using rule 67 (calculate -> IDENTIFIER LIST .)
    EQUAL           reduce using rule 67 (calculate -> IDENTIFIER LIST .)


state 91

    (58) calculate -> calculate PLUS . calculate
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    calculate                      shift and go to state 116

state 92

    (59) calculate -> calculate MINUS . calculate
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    calculate                      shift and go to state 117

state 93

    (61) calculate -> calculate MUL . calculate
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    calculate                      shift and go to state 118

state 94

    (62) calculate -> calculate DIV . calculate
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    calculate                      shift and go to state 119

state 95

    (60) calculate -> MINUS calculate .
    (58) calculate -> calculate . PLUS calculate
    (59) calculate -> calculate . MINUS calculate
    (61) calculate -> calculate . MUL calculate
    (62) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 60 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 60 (calculate -> MINUS calculate .)
    MUL             reduce using rule 60 (calculate -> MINUS calculate .)
    DIV             reduce using rule 60 (calculate -> MINUS calculate .)
    SEMI            reduce using rule 60 (calculate -> MINUS calculate .)
    RSB             reduce using rule 60 (calculate -> MINUS calculate .)
    COMMA           reduce using rule 60 (calculate -> MINUS calculate .)
    LB              reduce using rule 60 (calculate -> MINUS calculate .)
    RB              reduce using rule 60 (calculate -> MINUS calculate .)
    EQUAL           reduce using rule 60 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 92 ]
  ! MUL             [ shift and go to state 93 ]
  ! DIV             [ shift and go to state 94 ]


state 96

    (69) calculate -> LSB calculate . RSB
    (58) calculate -> calculate . PLUS calculate
    (59) calculate -> calculate . MINUS calculate
    (61) calculate -> calculate . MUL calculate
    (62) calculate -> calculate . DIV calculate

    RSB             shift and go to state 120
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    MUL             shift and go to state 93
    DIV             shift and go to state 94


state 97

    (34) function_call -> IDENTIFIER LSB parameter RSB .

    VAR             reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    IDENTIFIER      reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    USE             reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    IF              reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    FUNCTION        reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    REPEAT          reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    FOR             reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    WHILE           reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    $end            reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    SEMI            reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    RMB             reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)


state 98

    (35) parameter -> parameter COMMA . calculate
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    calculate                      shift and go to state 121

state 99

    (44) if_statement_2 -> if_statement_2 ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 122


state 100

    (43) if_statement_2 -> ELSE IF LSB . condition RSB LMB expression RMB
    (46) condition -> . condition LB calculate
    (47) condition -> . condition RB calculate
    (48) condition -> . condition LB EQUAL calculate
    (49) condition -> . condition RB EQUAL calculate
    (50) condition -> . condition EQUAL calculate
    (51) condition -> . calculate
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    condition                      shift and go to state 123
    calculate                      shift and go to state 83

state 101

    (45) if_statement_3 -> ELSE LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (55) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (57) variable_declaration -> . VAR IDENTIFIER
    (53) variable_value_change -> . IDENTIFIER EQUAL LIST
    (54) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (39) if_statement -> . if_statement_1 if_statement_2
    (40) if_statement -> . if_statement_1 if_statement_3
    (41) if_statement -> . if_statement_1
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (52) use -> . USE IDENTIFIER
    (42) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

    RMB             shift and go to state 124
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

    variable_declaration           shift and go to state 26
    variable_value_change          shift and go to state 27
    if_statement                   shift and go to state 28
    function                       shift and go to state 29
    function_call                  shift and go to state 30
    repeat                         shift and go to state 31
    for                            shift and go to state 32
    while                          shift and go to state 33
    use                            shift and go to state 34
    if_statement_1                 shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 102

    (33) function_body -> LMB expression RMB .

    VAR             reduce using rule 33 (function_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 33 (function_body -> LMB expression RMB .)
    USE             reduce using rule 33 (function_body -> LMB expression RMB .)
    IF              reduce using rule 33 (function_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 33 (function_body -> LMB expression RMB .)
    REPEAT          reduce using rule 33 (function_body -> LMB expression RMB .)
    FOR             reduce using rule 33 (function_body -> LMB expression RMB .)
    WHILE           reduce using rule 33 (function_body -> LMB expression RMB .)
    $end            reduce using rule 33 (function_body -> LMB expression RMB .)
    RMB             reduce using rule 33 (function_body -> LMB expression RMB .)


state 103

    (29) repeat_body -> LMB expression RMB .

    VAR             reduce using rule 29 (repeat_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 29 (repeat_body -> LMB expression RMB .)
    USE             reduce using rule 29 (repeat_body -> LMB expression RMB .)
    IF              reduce using rule 29 (repeat_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 29 (repeat_body -> LMB expression RMB .)
    REPEAT          reduce using rule 29 (repeat_body -> LMB expression RMB .)
    FOR             reduce using rule 29 (repeat_body -> LMB expression RMB .)
    WHILE           reduce using rule 29 (repeat_body -> LMB expression RMB .)
    $end            reduce using rule 29 (repeat_body -> LMB expression RMB .)
    RMB             reduce using rule 29 (repeat_body -> LMB expression RMB .)


state 104

    (23) for_body -> LMB expression RMB .

    VAR             reduce using rule 23 (for_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 23 (for_body -> LMB expression RMB .)
    USE             reduce using rule 23 (for_body -> LMB expression RMB .)
    IF              reduce using rule 23 (for_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 23 (for_body -> LMB expression RMB .)
    REPEAT          reduce using rule 23 (for_body -> LMB expression RMB .)
    FOR             reduce using rule 23 (for_body -> LMB expression RMB .)
    WHILE           reduce using rule 23 (for_body -> LMB expression RMB .)
    $end            reduce using rule 23 (for_body -> LMB expression RMB .)
    RMB             reduce using rule 23 (for_body -> LMB expression RMB .)


state 105

    (26) while_body -> LMB expression RMB .

    VAR             reduce using rule 26 (while_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 26 (while_body -> LMB expression RMB .)
    USE             reduce using rule 26 (while_body -> LMB expression RMB .)
    IF              reduce using rule 26 (while_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 26 (while_body -> LMB expression RMB .)
    REPEAT          reduce using rule 26 (while_body -> LMB expression RMB .)
    FOR             reduce using rule 26 (while_body -> LMB expression RMB .)
    WHILE           reduce using rule 26 (while_body -> LMB expression RMB .)
    $end            reduce using rule 26 (while_body -> LMB expression RMB .)
    RMB             reduce using rule 26 (while_body -> LMB expression RMB .)


state 106

    (42) if_statement_1 -> IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 125


state 107

    (46) condition -> condition LB . calculate
    (48) condition -> condition LB . EQUAL calculate
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 127
    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    calculate                      shift and go to state 126

state 108

    (47) condition -> condition RB . calculate
    (49) condition -> condition RB . EQUAL calculate
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 129
    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    calculate                      shift and go to state 128

state 109

    (50) condition -> condition EQUAL . calculate
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    calculate                      shift and go to state 130

state 110

    (31) function_head -> FUNCTION IDENTIFIER LSB empty . RSB
    (37) parameter -> empty .

  ! shift/reduce conflict for RSB resolved as shift
    RSB             shift and go to state 131
    COMMA           reduce using rule 37 (parameter -> empty .)

  ! RSB             [ reduce using rule 37 (parameter -> empty .) ]


state 111

    (32) function_head -> FUNCTION IDENTIFIER LSB parameter . RSB
    (35) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 132
    COMMA           shift and go to state 98


state 112

    (28) repeat_head -> REPEAT LSB calculate RSB .

    LMB             reduce using rule 28 (repeat_head -> REPEAT LSB calculate RSB .)


state 113

    (22) for_head -> FOR LSB IDENTIFIER IN . IDENTIFIER RSB

    IDENTIFIER      shift and go to state 133


state 114

    (25) while_head -> WHILE LSB condition RSB .

    LMB             reduce using rule 25 (while_head -> WHILE LSB condition RSB .)


state 115

    (55) variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .
    (58) calculate -> calculate . PLUS calculate
    (59) calculate -> calculate . MINUS calculate
    (61) calculate -> calculate . MUL calculate
    (62) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 55 (variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    MUL             shift and go to state 93
    DIV             shift and go to state 94


state 116

    (58) calculate -> calculate PLUS calculate .
    (58) calculate -> calculate . PLUS calculate
    (59) calculate -> calculate . MINUS calculate
    (61) calculate -> calculate . MUL calculate
    (62) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 58 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 58 (calculate -> calculate PLUS calculate .)
    SEMI            reduce using rule 58 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 58 (calculate -> calculate PLUS calculate .)
    COMMA           reduce using rule 58 (calculate -> calculate PLUS calculate .)
    LB              reduce using rule 58 (calculate -> calculate PLUS calculate .)
    RB              reduce using rule 58 (calculate -> calculate PLUS calculate .)
    EQUAL           reduce using rule 58 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 93
    DIV             shift and go to state 94

  ! MUL             [ reduce using rule 58 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 58 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 92 ]


state 117

    (59) calculate -> calculate MINUS calculate .
    (58) calculate -> calculate . PLUS calculate
    (59) calculate -> calculate . MINUS calculate
    (61) calculate -> calculate . MUL calculate
    (62) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 59 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 59 (calculate -> calculate MINUS calculate .)
    SEMI            reduce using rule 59 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 59 (calculate -> calculate MINUS calculate .)
    COMMA           reduce using rule 59 (calculate -> calculate MINUS calculate .)
    LB              reduce using rule 59 (calculate -> calculate MINUS calculate .)
    RB              reduce using rule 59 (calculate -> calculate MINUS calculate .)
    EQUAL           reduce using rule 59 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 93
    DIV             shift and go to state 94

  ! MUL             [ reduce using rule 59 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 59 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 92 ]


state 118

    (61) calculate -> calculate MUL calculate .
    (58) calculate -> calculate . PLUS calculate
    (59) calculate -> calculate . MINUS calculate
    (61) calculate -> calculate . MUL calculate
    (62) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 61 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 61 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 61 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 61 (calculate -> calculate MUL calculate .)
    SEMI            reduce using rule 61 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 61 (calculate -> calculate MUL calculate .)
    COMMA           reduce using rule 61 (calculate -> calculate MUL calculate .)
    LB              reduce using rule 61 (calculate -> calculate MUL calculate .)
    RB              reduce using rule 61 (calculate -> calculate MUL calculate .)
    EQUAL           reduce using rule 61 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 92 ]
  ! MUL             [ shift and go to state 93 ]
  ! DIV             [ shift and go to state 94 ]


state 119

    (62) calculate -> calculate DIV calculate .
    (58) calculate -> calculate . PLUS calculate
    (59) calculate -> calculate . MINUS calculate
    (61) calculate -> calculate . MUL calculate
    (62) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 62 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 62 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 62 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 62 (calculate -> calculate DIV calculate .)
    SEMI            reduce using rule 62 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 62 (calculate -> calculate DIV calculate .)
    COMMA           reduce using rule 62 (calculate -> calculate DIV calculate .)
    LB              reduce using rule 62 (calculate -> calculate DIV calculate .)
    RB              reduce using rule 62 (calculate -> calculate DIV calculate .)
    EQUAL           reduce using rule 62 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 92 ]
  ! MUL             [ shift and go to state 93 ]
  ! DIV             [ shift and go to state 94 ]


state 120

    (69) calculate -> LSB calculate RSB .

    PLUS            reduce using rule 69 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 69 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 69 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 69 (calculate -> LSB calculate RSB .)
    SEMI            reduce using rule 69 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 69 (calculate -> LSB calculate RSB .)
    COMMA           reduce using rule 69 (calculate -> LSB calculate RSB .)
    LB              reduce using rule 69 (calculate -> LSB calculate RSB .)
    RB              reduce using rule 69 (calculate -> LSB calculate RSB .)
    EQUAL           reduce using rule 69 (calculate -> LSB calculate RSB .)


state 121

    (35) parameter -> parameter COMMA calculate .
    (58) calculate -> calculate . PLUS calculate
    (59) calculate -> calculate . MINUS calculate
    (61) calculate -> calculate . MUL calculate
    (62) calculate -> calculate . DIV calculate

    RSB             reduce using rule 35 (parameter -> parameter COMMA calculate .)
    COMMA           reduce using rule 35 (parameter -> parameter COMMA calculate .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    MUL             shift and go to state 93
    DIV             shift and go to state 94


state 122

    (44) if_statement_2 -> if_statement_2 ELSE IF LSB . condition RSB LMB expression RMB
    (46) condition -> . condition LB calculate
    (47) condition -> . condition RB calculate
    (48) condition -> . condition LB EQUAL calculate
    (49) condition -> . condition RB EQUAL calculate
    (50) condition -> . condition EQUAL calculate
    (51) condition -> . calculate
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    condition                      shift and go to state 134
    calculate                      shift and go to state 83

state 123

    (43) if_statement_2 -> ELSE IF LSB condition . RSB LMB expression RMB
    (46) condition -> condition . LB calculate
    (47) condition -> condition . RB calculate
    (48) condition -> condition . LB EQUAL calculate
    (49) condition -> condition . RB EQUAL calculate
    (50) condition -> condition . EQUAL calculate

    RSB             shift and go to state 135
    LB              shift and go to state 107
    RB              shift and go to state 108
    EQUAL           shift and go to state 109


state 124

    (45) if_statement_3 -> ELSE LMB expression RMB .

    VAR             reduce using rule 45 (if_statement_3 -> ELSE LMB expression RMB .)
    IDENTIFIER      reduce using rule 45 (if_statement_3 -> ELSE LMB expression RMB .)
    USE             reduce using rule 45 (if_statement_3 -> ELSE LMB expression RMB .)
    IF              reduce using rule 45 (if_statement_3 -> ELSE LMB expression RMB .)
    FUNCTION        reduce using rule 45 (if_statement_3 -> ELSE LMB expression RMB .)
    REPEAT          reduce using rule 45 (if_statement_3 -> ELSE LMB expression RMB .)
    FOR             reduce using rule 45 (if_statement_3 -> ELSE LMB expression RMB .)
    WHILE           reduce using rule 45 (if_statement_3 -> ELSE LMB expression RMB .)
    $end            reduce using rule 45 (if_statement_3 -> ELSE LMB expression RMB .)
    RMB             reduce using rule 45 (if_statement_3 -> ELSE LMB expression RMB .)


state 125

    (42) if_statement_1 -> IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (55) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (57) variable_declaration -> . VAR IDENTIFIER
    (53) variable_value_change -> . IDENTIFIER EQUAL LIST
    (54) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (39) if_statement -> . if_statement_1 if_statement_2
    (40) if_statement -> . if_statement_1 if_statement_3
    (41) if_statement -> . if_statement_1
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (52) use -> . USE IDENTIFIER
    (70) empty -> .
    (42) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    RMB             reduce using rule 70 (empty -> .)
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

  ! VAR             [ reduce using rule 70 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 70 (empty -> .) ]
  ! USE             [ reduce using rule 70 (empty -> .) ]
  ! IF              [ reduce using rule 70 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 70 (empty -> .) ]
  ! REPEAT          [ reduce using rule 70 (empty -> .) ]
  ! FOR             [ reduce using rule 70 (empty -> .) ]
  ! WHILE           [ reduce using rule 70 (empty -> .) ]

    expression                     shift and go to state 136
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_1                 shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 126

    (46) condition -> condition LB calculate .
    (58) calculate -> calculate . PLUS calculate
    (59) calculate -> calculate . MINUS calculate
    (61) calculate -> calculate . MUL calculate
    (62) calculate -> calculate . DIV calculate

    RSB             reduce using rule 46 (condition -> condition LB calculate .)
    LB              reduce using rule 46 (condition -> condition LB calculate .)
    RB              reduce using rule 46 (condition -> condition LB calculate .)
    EQUAL           reduce using rule 46 (condition -> condition LB calculate .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    MUL             shift and go to state 93
    DIV             shift and go to state 94


state 127

    (48) condition -> condition LB EQUAL . calculate
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    calculate                      shift and go to state 137

state 128

    (47) condition -> condition RB calculate .
    (58) calculate -> calculate . PLUS calculate
    (59) calculate -> calculate . MINUS calculate
    (61) calculate -> calculate . MUL calculate
    (62) calculate -> calculate . DIV calculate

    RSB             reduce using rule 47 (condition -> condition RB calculate .)
    LB              reduce using rule 47 (condition -> condition RB calculate .)
    RB              reduce using rule 47 (condition -> condition RB calculate .)
    EQUAL           reduce using rule 47 (condition -> condition RB calculate .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    MUL             shift and go to state 93
    DIV             shift and go to state 94


state 129

    (49) condition -> condition RB EQUAL . calculate
    (58) calculate -> . calculate PLUS calculate
    (59) calculate -> . calculate MINUS calculate
    (60) calculate -> . MINUS calculate
    (61) calculate -> . calculate MUL calculate
    (62) calculate -> . calculate DIV calculate
    (63) calculate -> . INT
    (64) calculate -> . FLOAT
    (65) calculate -> . STRING
    (66) calculate -> . IDENTIFIER
    (67) calculate -> . IDENTIFIER LIST
    (68) calculate -> . LIST
    (69) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 65
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    IDENTIFIER      shift and go to state 62
    LIST            shift and go to state 73
    LSB             shift and go to state 69

    calculate                      shift and go to state 138

state 130

    (50) condition -> condition EQUAL calculate .
    (58) calculate -> calculate . PLUS calculate
    (59) calculate -> calculate . MINUS calculate
    (61) calculate -> calculate . MUL calculate
    (62) calculate -> calculate . DIV calculate

    RSB             reduce using rule 50 (condition -> condition EQUAL calculate .)
    LB              reduce using rule 50 (condition -> condition EQUAL calculate .)
    RB              reduce using rule 50 (condition -> condition EQUAL calculate .)
    EQUAL           reduce using rule 50 (condition -> condition EQUAL calculate .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    MUL             shift and go to state 93
    DIV             shift and go to state 94


state 131

    (31) function_head -> FUNCTION IDENTIFIER LSB empty RSB .

    LMB             reduce using rule 31 (function_head -> FUNCTION IDENTIFIER LSB empty RSB .)


state 132

    (32) function_head -> FUNCTION IDENTIFIER LSB parameter RSB .

    LMB             reduce using rule 32 (function_head -> FUNCTION IDENTIFIER LSB parameter RSB .)


state 133

    (22) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER . RSB

    RSB             shift and go to state 139


state 134

    (44) if_statement_2 -> if_statement_2 ELSE IF LSB condition . RSB LMB expression RMB
    (46) condition -> condition . LB calculate
    (47) condition -> condition . RB calculate
    (48) condition -> condition . LB EQUAL calculate
    (49) condition -> condition . RB EQUAL calculate
    (50) condition -> condition . EQUAL calculate

    RSB             shift and go to state 140
    LB              shift and go to state 107
    RB              shift and go to state 108
    EQUAL           shift and go to state 109


state 135

    (43) if_statement_2 -> ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 141


state 136

    (42) if_statement_1 -> IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (55) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (57) variable_declaration -> . VAR IDENTIFIER
    (53) variable_value_change -> . IDENTIFIER EQUAL LIST
    (54) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (39) if_statement -> . if_statement_1 if_statement_2
    (40) if_statement -> . if_statement_1 if_statement_3
    (41) if_statement -> . if_statement_1
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (52) use -> . USE IDENTIFIER
    (42) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

    RMB             shift and go to state 142
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

    variable_declaration           shift and go to state 26
    variable_value_change          shift and go to state 27
    if_statement                   shift and go to state 28
    function                       shift and go to state 29
    function_call                  shift and go to state 30
    repeat                         shift and go to state 31
    for                            shift and go to state 32
    while                          shift and go to state 33
    use                            shift and go to state 34
    if_statement_1                 shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 137

    (48) condition -> condition LB EQUAL calculate .
    (58) calculate -> calculate . PLUS calculate
    (59) calculate -> calculate . MINUS calculate
    (61) calculate -> calculate . MUL calculate
    (62) calculate -> calculate . DIV calculate

    RSB             reduce using rule 48 (condition -> condition LB EQUAL calculate .)
    LB              reduce using rule 48 (condition -> condition LB EQUAL calculate .)
    RB              reduce using rule 48 (condition -> condition LB EQUAL calculate .)
    EQUAL           reduce using rule 48 (condition -> condition LB EQUAL calculate .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    MUL             shift and go to state 93
    DIV             shift and go to state 94


state 138

    (49) condition -> condition RB EQUAL calculate .
    (58) calculate -> calculate . PLUS calculate
    (59) calculate -> calculate . MINUS calculate
    (61) calculate -> calculate . MUL calculate
    (62) calculate -> calculate . DIV calculate

    RSB             reduce using rule 49 (condition -> condition RB EQUAL calculate .)
    LB              reduce using rule 49 (condition -> condition RB EQUAL calculate .)
    RB              reduce using rule 49 (condition -> condition RB EQUAL calculate .)
    EQUAL           reduce using rule 49 (condition -> condition RB EQUAL calculate .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    MUL             shift and go to state 93
    DIV             shift and go to state 94


state 139

    (22) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .

    LMB             reduce using rule 22 (for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .)


state 140

    (44) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 143


state 141

    (43) if_statement_2 -> ELSE IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (55) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (57) variable_declaration -> . VAR IDENTIFIER
    (53) variable_value_change -> . IDENTIFIER EQUAL LIST
    (54) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (39) if_statement -> . if_statement_1 if_statement_2
    (40) if_statement -> . if_statement_1 if_statement_3
    (41) if_statement -> . if_statement_1
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (52) use -> . USE IDENTIFIER
    (70) empty -> .
    (42) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    RMB             reduce using rule 70 (empty -> .)
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

  ! VAR             [ reduce using rule 70 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 70 (empty -> .) ]
  ! USE             [ reduce using rule 70 (empty -> .) ]
  ! IF              [ reduce using rule 70 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 70 (empty -> .) ]
  ! REPEAT          [ reduce using rule 70 (empty -> .) ]
  ! FOR             [ reduce using rule 70 (empty -> .) ]
  ! WHILE           [ reduce using rule 70 (empty -> .) ]

    expression                     shift and go to state 144
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_1                 shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 142

    (42) if_statement_1 -> IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 42 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 42 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 42 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 42 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 42 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 42 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 42 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 42 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 42 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 42 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 42 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)


state 143

    (44) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (55) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (57) variable_declaration -> . VAR IDENTIFIER
    (53) variable_value_change -> . IDENTIFIER EQUAL LIST
    (54) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (39) if_statement -> . if_statement_1 if_statement_2
    (40) if_statement -> . if_statement_1 if_statement_3
    (41) if_statement -> . if_statement_1
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (52) use -> . USE IDENTIFIER
    (70) empty -> .
    (42) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    RMB             reduce using rule 70 (empty -> .)
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

  ! VAR             [ reduce using rule 70 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 70 (empty -> .) ]
  ! USE             [ reduce using rule 70 (empty -> .) ]
  ! IF              [ reduce using rule 70 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 70 (empty -> .) ]
  ! REPEAT          [ reduce using rule 70 (empty -> .) ]
  ! FOR             [ reduce using rule 70 (empty -> .) ]
  ! WHILE           [ reduce using rule 70 (empty -> .) ]

    expression                     shift and go to state 145
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_1                 shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 144

    (43) if_statement_2 -> ELSE IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (55) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (57) variable_declaration -> . VAR IDENTIFIER
    (53) variable_value_change -> . IDENTIFIER EQUAL LIST
    (54) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (39) if_statement -> . if_statement_1 if_statement_2
    (40) if_statement -> . if_statement_1 if_statement_3
    (41) if_statement -> . if_statement_1
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (52) use -> . USE IDENTIFIER
    (42) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

    RMB             shift and go to state 146
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

    variable_declaration           shift and go to state 26
    variable_value_change          shift and go to state 27
    if_statement                   shift and go to state 28
    function                       shift and go to state 29
    function_call                  shift and go to state 30
    repeat                         shift and go to state 31
    for                            shift and go to state 32
    while                          shift and go to state 33
    use                            shift and go to state 34
    if_statement_1                 shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 145

    (44) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (55) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (56) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (57) variable_declaration -> . VAR IDENTIFIER
    (53) variable_value_change -> . IDENTIFIER EQUAL LIST
    (54) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (39) if_statement -> . if_statement_1 if_statement_2
    (40) if_statement -> . if_statement_1 if_statement_3
    (41) if_statement -> . if_statement_1
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (52) use -> . USE IDENTIFIER
    (42) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

    RMB             shift and go to state 147
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

    variable_declaration           shift and go to state 26
    variable_value_change          shift and go to state 27
    if_statement                   shift and go to state 28
    function                       shift and go to state 29
    function_call                  shift and go to state 30
    repeat                         shift and go to state 31
    for                            shift and go to state 32
    while                          shift and go to state 33
    use                            shift and go to state 34
    if_statement_1                 shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 146

    (43) if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 43 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 43 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 43 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 43 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 43 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 43 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 43 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 43 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 43 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 43 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 43 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)


state 147

    (44) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 44 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 44 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 44 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 44 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 44 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 44 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 44 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 44 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 44 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 44 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 44 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for USE in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 44 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 44 resolved as shift
WARNING: shift/reduce conflict for USE in state 44 resolved as shift
WARNING: shift/reduce conflict for IF in state 44 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 44 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 44 resolved as shift
WARNING: shift/reduce conflict for FOR in state 44 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 44 resolved as shift
WARNING: shift/reduce conflict for VAR in state 46 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 46 resolved as shift
WARNING: shift/reduce conflict for USE in state 46 resolved as shift
WARNING: shift/reduce conflict for IF in state 46 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 46 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 46 resolved as shift
WARNING: shift/reduce conflict for FOR in state 46 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 46 resolved as shift
WARNING: shift/reduce conflict for VAR in state 48 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 48 resolved as shift
WARNING: shift/reduce conflict for USE in state 48 resolved as shift
WARNING: shift/reduce conflict for IF in state 48 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 48 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 48 resolved as shift
WARNING: shift/reduce conflict for FOR in state 48 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 48 resolved as shift
WARNING: shift/reduce conflict for VAR in state 50 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 50 resolved as shift
WARNING: shift/reduce conflict for USE in state 50 resolved as shift
WARNING: shift/reduce conflict for IF in state 50 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 50 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 50 resolved as shift
WARNING: shift/reduce conflict for FOR in state 50 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 50 resolved as shift
WARNING: shift/reduce conflict for VAR in state 77 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 77 resolved as shift
WARNING: shift/reduce conflict for USE in state 77 resolved as shift
WARNING: shift/reduce conflict for IF in state 77 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 77 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 77 resolved as shift
WARNING: shift/reduce conflict for FOR in state 77 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 77 resolved as shift
WARNING: shift/reduce conflict for RSB in state 110 resolved as shift
WARNING: shift/reduce conflict for VAR in state 125 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 125 resolved as shift
WARNING: shift/reduce conflict for USE in state 125 resolved as shift
WARNING: shift/reduce conflict for IF in state 125 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 125 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 125 resolved as shift
WARNING: shift/reduce conflict for FOR in state 125 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 125 resolved as shift
WARNING: shift/reduce conflict for VAR in state 141 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 141 resolved as shift
WARNING: shift/reduce conflict for USE in state 141 resolved as shift
WARNING: shift/reduce conflict for IF in state 141 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 141 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 141 resolved as shift
WARNING: shift/reduce conflict for FOR in state 141 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 141 resolved as shift
WARNING: shift/reduce conflict for VAR in state 143 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 143 resolved as shift
WARNING: shift/reduce conflict for USE in state 143 resolved as shift
WARNING: shift/reduce conflict for IF in state 143 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 143 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 143 resolved as shift
WARNING: shift/reduce conflict for FOR in state 143 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 143 resolved as shift
WARNING: reduce/reduce conflict in state 63 resolved using rule (variable_value_change -> IDENTIFIER EQUAL LIST)
WARNING: rejected rule (calculate -> LIST) in state 63
