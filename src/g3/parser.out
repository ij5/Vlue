Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> root
Rule 1     root -> expression
Rule 2     expression -> expression variable_declaration SEMI
Rule 3     expression -> expression variable_value_change SEMI
Rule 4     expression -> expression if_statement
Rule 5     expression -> expression function
Rule 6     expression -> expression function_call SEMI
Rule 7     expression -> expression repeat
Rule 8     expression -> expression for
Rule 9     expression -> expression while
Rule 10    expression -> expression use
Rule 11    expression -> expression error_handling
Rule 12    expression -> expression variable_alone
Rule 13    expression -> variable_declaration SEMI
Rule 14    expression -> variable_value_change SEMI
Rule 15    expression -> if_statement
Rule 16    expression -> function
Rule 17    expression -> function_call
Rule 18    expression -> repeat
Rule 19    expression -> for
Rule 20    expression -> while
Rule 21    expression -> use
Rule 22    expression -> error_handling
Rule 23    expression -> variable_alone
Rule 24    expression -> empty
Rule 25    error_handling -> try catch
Rule 26    try -> TRY LMB expression RMB
Rule 27    catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB
Rule 28    for -> for_head for_body
Rule 29    for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB
Rule 30    for_body -> LMB expression RMB
Rule 31    while -> while_head while_body
Rule 32    while_head -> WHILE LSB condition RSB
Rule 33    while_body -> LMB expression RMB
Rule 34    repeat -> repeat_head repeat_body
Rule 35    repeat_head -> REPEAT LSB calculate RSB
Rule 36    repeat_body -> LMB expression RMB
Rule 37    function -> function_head function_body
Rule 38    function_head -> FUNCTION IDENTIFIER LSB empty RSB
Rule 39    function_head -> FUNCTION IDENTIFIER LSB parameter RSB
Rule 40    function_body -> LMB expression RMB
Rule 41    function_call -> IDENTIFIER LSB parameter RSB
Rule 42    parameter -> parameter COMMA calculate
Rule 43    parameter -> calculate
Rule 44    parameter -> empty
Rule 45    if_statement -> if_statement_1 if_statement_2 if_statement_3
Rule 46    if_statement -> if_statement_1 if_statement_2
Rule 47    if_statement -> if_statement_1 if_statement_3
Rule 48    if_statement -> if_statement_1
Rule 49    if_statement_1 -> IF LSB condition RSB LMB expression RMB
Rule 50    if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB
Rule 51    if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
Rule 52    if_statement_3 -> ELSE LMB expression RMB
Rule 53    condition -> condition LB calculate
Rule 54    condition -> condition RB calculate
Rule 55    condition -> condition LB EQUAL calculate
Rule 56    condition -> condition RB EQUAL calculate
Rule 57    condition -> condition EQUAL calculate
Rule 58    condition -> calculate
Rule 59    use -> USE IDENTIFIER
Rule 60    variable_alone -> IDENTIFIER
Rule 61    variable_value_change -> IDENTIFIER EQUAL LIST
Rule 62    variable_value_change -> IDENTIFIER EQUAL calculate
Rule 63    variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate
Rule 64    variable_declaration -> VAR IDENTIFIER EQUAL calculate
Rule 65    variable_declaration -> VAR IDENTIFIER
Rule 66    calculate -> calculate PLUS calculate
Rule 67    calculate -> calculate MINUS calculate
Rule 68    calculate -> MINUS calculate
Rule 69    calculate -> calculate MUL calculate
Rule 70    calculate -> calculate DIV calculate
Rule 71    calculate -> INT
Rule 72    calculate -> FLOAT
Rule 73    calculate -> STRING
Rule 74    calculate -> IDENTIFIER
Rule 75    calculate -> IDENTIFIER LIST
Rule 76    calculate -> LIST
Rule 77    calculate -> LSB calculate RSB
Rule 78    empty -> <empty>

Terminals, with rules where they appear

CATCH                : 27
COLON                : 
COMMA                : 42
DIV                  : 70
ELSE                 : 50 51 52
EQUAL                : 55 56 57 61 62 63 64
FLOAT                : 72
FOR                  : 29
FUNCTION             : 38 39
IDENTIFIER           : 27 29 29 38 39 41 59 60 61 62 63 64 65 74 75
IF                   : 49 50 51
IN                   : 29
INT                  : 71
LB                   : 53 55
LIST                 : 61 63 75 76
LMB                  : 26 27 30 33 36 40 49 50 51 52
LSB                  : 27 29 32 35 38 39 41 49 50 51 77
MINUS                : 67 68
MUL                  : 69
PLUS                 : 66
RB                   : 54 56
REPEAT               : 35
RMB                  : 26 27 30 33 36 40 49 50 51 52
RSB                  : 27 29 32 35 38 39 41 49 50 51 77
SEMI                 : 2 3 6 13 14
STRING               : 73
TRY                  : 26
USE                  : 59
VAR                  : 63 64 65
WHILE                : 32
error                : 

Nonterminals, with rules where they appear

calculate            : 35 42 43 53 54 55 56 57 58 62 63 64 66 66 67 67 68 69 69 70 70 77
catch                : 25
condition            : 32 49 50 51 53 54 55 56 57
empty                : 24 38 44
error_handling       : 11 22
expression           : 1 2 3 4 5 6 7 8 9 10 11 12 26 27 30 33 36 40 49 50 51 52
for                  : 8 19
for_body             : 28
for_head             : 28
function             : 5 16
function_body        : 37
function_call        : 6 17
function_head        : 37
if_statement         : 4 15
if_statement_1       : 45 46 47 48
if_statement_2       : 45 46 51
if_statement_3       : 45 47
parameter            : 39 41 42
repeat               : 7 18
repeat_body          : 34
repeat_head          : 34
root                 : 0
try                  : 25
use                  : 10 21
variable_alone       : 12 23
variable_declaration : 2 13
variable_value_change : 3 14
while                : 9 20
while_body           : 31
while_head           : 31

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . expression
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone
    (13) expression -> . variable_declaration SEMI
    (14) expression -> . variable_value_change SEMI
    (15) expression -> . if_statement
    (16) expression -> . function
    (17) expression -> . function_call
    (18) expression -> . repeat
    (19) expression -> . for
    (20) expression -> . while
    (21) expression -> . use
    (22) expression -> . error_handling
    (23) expression -> . variable_alone
    (24) expression -> . empty
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (78) empty -> .
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    $end            reduce using rule 78 (empty -> .)
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

  ! VAR             [ reduce using rule 78 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 78 (empty -> .) ]
  ! USE             [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 78 (empty -> .) ]
  ! REPEAT          [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! TRY             [ reduce using rule 78 (empty -> .) ]

    root                           shift and go to state 1
    expression                     shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    empty                          shift and go to state 14
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 1

    (0) S' -> root .



state 2

    (1) root -> expression .
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

    $end            reduce using rule 1 (root -> expression .)
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

    variable_declaration           shift and go to state 30
    variable_value_change          shift and go to state 31
    if_statement                   shift and go to state 32
    function                       shift and go to state 33
    function_call                  shift and go to state 34
    repeat                         shift and go to state 35
    for                            shift and go to state 36
    while                          shift and go to state 37
    use                            shift and go to state 38
    error_handling                 shift and go to state 39
    variable_alone                 shift and go to state 40
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 3

    (13) expression -> variable_declaration . SEMI

    SEMI            shift and go to state 41


state 4

    (14) expression -> variable_value_change . SEMI

    SEMI            shift and go to state 42


state 5

    (15) expression -> if_statement .

    VAR             reduce using rule 15 (expression -> if_statement .)
    IDENTIFIER      reduce using rule 15 (expression -> if_statement .)
    USE             reduce using rule 15 (expression -> if_statement .)
    IF              reduce using rule 15 (expression -> if_statement .)
    FUNCTION        reduce using rule 15 (expression -> if_statement .)
    REPEAT          reduce using rule 15 (expression -> if_statement .)
    FOR             reduce using rule 15 (expression -> if_statement .)
    WHILE           reduce using rule 15 (expression -> if_statement .)
    TRY             reduce using rule 15 (expression -> if_statement .)
    $end            reduce using rule 15 (expression -> if_statement .)
    RMB             reduce using rule 15 (expression -> if_statement .)


state 6

    (16) expression -> function .

    VAR             reduce using rule 16 (expression -> function .)
    IDENTIFIER      reduce using rule 16 (expression -> function .)
    USE             reduce using rule 16 (expression -> function .)
    IF              reduce using rule 16 (expression -> function .)
    FUNCTION        reduce using rule 16 (expression -> function .)
    REPEAT          reduce using rule 16 (expression -> function .)
    FOR             reduce using rule 16 (expression -> function .)
    WHILE           reduce using rule 16 (expression -> function .)
    TRY             reduce using rule 16 (expression -> function .)
    $end            reduce using rule 16 (expression -> function .)
    RMB             reduce using rule 16 (expression -> function .)


state 7

    (17) expression -> function_call .

    VAR             reduce using rule 17 (expression -> function_call .)
    IDENTIFIER      reduce using rule 17 (expression -> function_call .)
    USE             reduce using rule 17 (expression -> function_call .)
    IF              reduce using rule 17 (expression -> function_call .)
    FUNCTION        reduce using rule 17 (expression -> function_call .)
    REPEAT          reduce using rule 17 (expression -> function_call .)
    FOR             reduce using rule 17 (expression -> function_call .)
    WHILE           reduce using rule 17 (expression -> function_call .)
    TRY             reduce using rule 17 (expression -> function_call .)
    $end            reduce using rule 17 (expression -> function_call .)
    RMB             reduce using rule 17 (expression -> function_call .)


state 8

    (18) expression -> repeat .

    VAR             reduce using rule 18 (expression -> repeat .)
    IDENTIFIER      reduce using rule 18 (expression -> repeat .)
    USE             reduce using rule 18 (expression -> repeat .)
    IF              reduce using rule 18 (expression -> repeat .)
    FUNCTION        reduce using rule 18 (expression -> repeat .)
    REPEAT          reduce using rule 18 (expression -> repeat .)
    FOR             reduce using rule 18 (expression -> repeat .)
    WHILE           reduce using rule 18 (expression -> repeat .)
    TRY             reduce using rule 18 (expression -> repeat .)
    $end            reduce using rule 18 (expression -> repeat .)
    RMB             reduce using rule 18 (expression -> repeat .)


state 9

    (19) expression -> for .

    VAR             reduce using rule 19 (expression -> for .)
    IDENTIFIER      reduce using rule 19 (expression -> for .)
    USE             reduce using rule 19 (expression -> for .)
    IF              reduce using rule 19 (expression -> for .)
    FUNCTION        reduce using rule 19 (expression -> for .)
    REPEAT          reduce using rule 19 (expression -> for .)
    FOR             reduce using rule 19 (expression -> for .)
    WHILE           reduce using rule 19 (expression -> for .)
    TRY             reduce using rule 19 (expression -> for .)
    $end            reduce using rule 19 (expression -> for .)
    RMB             reduce using rule 19 (expression -> for .)


state 10

    (20) expression -> while .

    VAR             reduce using rule 20 (expression -> while .)
    IDENTIFIER      reduce using rule 20 (expression -> while .)
    USE             reduce using rule 20 (expression -> while .)
    IF              reduce using rule 20 (expression -> while .)
    FUNCTION        reduce using rule 20 (expression -> while .)
    REPEAT          reduce using rule 20 (expression -> while .)
    FOR             reduce using rule 20 (expression -> while .)
    WHILE           reduce using rule 20 (expression -> while .)
    TRY             reduce using rule 20 (expression -> while .)
    $end            reduce using rule 20 (expression -> while .)
    RMB             reduce using rule 20 (expression -> while .)


state 11

    (21) expression -> use .

    VAR             reduce using rule 21 (expression -> use .)
    IDENTIFIER      reduce using rule 21 (expression -> use .)
    USE             reduce using rule 21 (expression -> use .)
    IF              reduce using rule 21 (expression -> use .)
    FUNCTION        reduce using rule 21 (expression -> use .)
    REPEAT          reduce using rule 21 (expression -> use .)
    FOR             reduce using rule 21 (expression -> use .)
    WHILE           reduce using rule 21 (expression -> use .)
    TRY             reduce using rule 21 (expression -> use .)
    $end            reduce using rule 21 (expression -> use .)
    RMB             reduce using rule 21 (expression -> use .)


state 12

    (22) expression -> error_handling .

    VAR             reduce using rule 22 (expression -> error_handling .)
    IDENTIFIER      reduce using rule 22 (expression -> error_handling .)
    USE             reduce using rule 22 (expression -> error_handling .)
    IF              reduce using rule 22 (expression -> error_handling .)
    FUNCTION        reduce using rule 22 (expression -> error_handling .)
    REPEAT          reduce using rule 22 (expression -> error_handling .)
    FOR             reduce using rule 22 (expression -> error_handling .)
    WHILE           reduce using rule 22 (expression -> error_handling .)
    TRY             reduce using rule 22 (expression -> error_handling .)
    $end            reduce using rule 22 (expression -> error_handling .)
    RMB             reduce using rule 22 (expression -> error_handling .)


state 13

    (23) expression -> variable_alone .

    VAR             reduce using rule 23 (expression -> variable_alone .)
    IDENTIFIER      reduce using rule 23 (expression -> variable_alone .)
    USE             reduce using rule 23 (expression -> variable_alone .)
    IF              reduce using rule 23 (expression -> variable_alone .)
    FUNCTION        reduce using rule 23 (expression -> variable_alone .)
    REPEAT          reduce using rule 23 (expression -> variable_alone .)
    FOR             reduce using rule 23 (expression -> variable_alone .)
    WHILE           reduce using rule 23 (expression -> variable_alone .)
    TRY             reduce using rule 23 (expression -> variable_alone .)
    $end            reduce using rule 23 (expression -> variable_alone .)
    RMB             reduce using rule 23 (expression -> variable_alone .)


state 14

    (24) expression -> empty .

    VAR             reduce using rule 24 (expression -> empty .)
    IDENTIFIER      reduce using rule 24 (expression -> empty .)
    USE             reduce using rule 24 (expression -> empty .)
    IF              reduce using rule 24 (expression -> empty .)
    FUNCTION        reduce using rule 24 (expression -> empty .)
    REPEAT          reduce using rule 24 (expression -> empty .)
    FOR             reduce using rule 24 (expression -> empty .)
    WHILE           reduce using rule 24 (expression -> empty .)
    TRY             reduce using rule 24 (expression -> empty .)
    $end            reduce using rule 24 (expression -> empty .)
    RMB             reduce using rule 24 (expression -> empty .)


state 15

    (63) variable_declaration -> VAR . IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> VAR . IDENTIFIER EQUAL calculate
    (65) variable_declaration -> VAR . IDENTIFIER

    IDENTIFIER      shift and go to state 43


state 16

    (61) variable_value_change -> IDENTIFIER . EQUAL LIST
    (62) variable_value_change -> IDENTIFIER . EQUAL calculate
    (41) function_call -> IDENTIFIER . LSB parameter RSB
    (60) variable_alone -> IDENTIFIER .

    EQUAL           shift and go to state 44
    LSB             shift and go to state 45
    VAR             reduce using rule 60 (variable_alone -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 60 (variable_alone -> IDENTIFIER .)
    USE             reduce using rule 60 (variable_alone -> IDENTIFIER .)
    IF              reduce using rule 60 (variable_alone -> IDENTIFIER .)
    FUNCTION        reduce using rule 60 (variable_alone -> IDENTIFIER .)
    REPEAT          reduce using rule 60 (variable_alone -> IDENTIFIER .)
    FOR             reduce using rule 60 (variable_alone -> IDENTIFIER .)
    WHILE           reduce using rule 60 (variable_alone -> IDENTIFIER .)
    TRY             reduce using rule 60 (variable_alone -> IDENTIFIER .)
    $end            reduce using rule 60 (variable_alone -> IDENTIFIER .)
    RMB             reduce using rule 60 (variable_alone -> IDENTIFIER .)


state 17

    (45) if_statement -> if_statement_1 . if_statement_2 if_statement_3
    (46) if_statement -> if_statement_1 . if_statement_2
    (47) if_statement -> if_statement_1 . if_statement_3
    (48) if_statement -> if_statement_1 .
    (50) if_statement_2 -> . ELSE IF LSB condition RSB LMB expression RMB
    (51) if_statement_2 -> . if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
    (52) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 48 (if_statement -> if_statement_1 .)
    IDENTIFIER      reduce using rule 48 (if_statement -> if_statement_1 .)
    USE             reduce using rule 48 (if_statement -> if_statement_1 .)
    IF              reduce using rule 48 (if_statement -> if_statement_1 .)
    FUNCTION        reduce using rule 48 (if_statement -> if_statement_1 .)
    REPEAT          reduce using rule 48 (if_statement -> if_statement_1 .)
    FOR             reduce using rule 48 (if_statement -> if_statement_1 .)
    WHILE           reduce using rule 48 (if_statement -> if_statement_1 .)
    TRY             reduce using rule 48 (if_statement -> if_statement_1 .)
    $end            reduce using rule 48 (if_statement -> if_statement_1 .)
    RMB             reduce using rule 48 (if_statement -> if_statement_1 .)
    ELSE            shift and go to state 48

    if_statement_2                 shift and go to state 46
    if_statement_3                 shift and go to state 47

state 18

    (37) function -> function_head . function_body
    (40) function_body -> . LMB expression RMB

    LMB             shift and go to state 50

    function_body                  shift and go to state 49

state 19

    (34) repeat -> repeat_head . repeat_body
    (36) repeat_body -> . LMB expression RMB

    LMB             shift and go to state 52

    repeat_body                    shift and go to state 51

state 20

    (28) for -> for_head . for_body
    (30) for_body -> . LMB expression RMB

    LMB             shift and go to state 54

    for_body                       shift and go to state 53

state 21

    (31) while -> while_head . while_body
    (33) while_body -> . LMB expression RMB

    LMB             shift and go to state 56

    while_body                     shift and go to state 55

state 22

    (59) use -> USE . IDENTIFIER

    IDENTIFIER      shift and go to state 57


state 23

    (25) error_handling -> try . catch
    (27) catch -> . CATCH LSB IDENTIFIER RSB LMB expression RMB

    CATCH           shift and go to state 59

    catch                          shift and go to state 58

state 24

    (49) if_statement_1 -> IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 60


state 25

    (38) function_head -> FUNCTION . IDENTIFIER LSB empty RSB
    (39) function_head -> FUNCTION . IDENTIFIER LSB parameter RSB

    IDENTIFIER      shift and go to state 61


state 26

    (35) repeat_head -> REPEAT . LSB calculate RSB

    LSB             shift and go to state 62


state 27

    (29) for_head -> FOR . LSB IDENTIFIER IN IDENTIFIER RSB

    LSB             shift and go to state 63


state 28

    (32) while_head -> WHILE . LSB condition RSB

    LSB             shift and go to state 64


state 29

    (26) try -> TRY . LMB expression RMB

    LMB             shift and go to state 65


state 30

    (2) expression -> expression variable_declaration . SEMI

    SEMI            shift and go to state 66


state 31

    (3) expression -> expression variable_value_change . SEMI

    SEMI            shift and go to state 67


state 32

    (4) expression -> expression if_statement .

    VAR             reduce using rule 4 (expression -> expression if_statement .)
    IDENTIFIER      reduce using rule 4 (expression -> expression if_statement .)
    USE             reduce using rule 4 (expression -> expression if_statement .)
    IF              reduce using rule 4 (expression -> expression if_statement .)
    FUNCTION        reduce using rule 4 (expression -> expression if_statement .)
    REPEAT          reduce using rule 4 (expression -> expression if_statement .)
    FOR             reduce using rule 4 (expression -> expression if_statement .)
    WHILE           reduce using rule 4 (expression -> expression if_statement .)
    TRY             reduce using rule 4 (expression -> expression if_statement .)
    $end            reduce using rule 4 (expression -> expression if_statement .)
    RMB             reduce using rule 4 (expression -> expression if_statement .)


state 33

    (5) expression -> expression function .

    VAR             reduce using rule 5 (expression -> expression function .)
    IDENTIFIER      reduce using rule 5 (expression -> expression function .)
    USE             reduce using rule 5 (expression -> expression function .)
    IF              reduce using rule 5 (expression -> expression function .)
    FUNCTION        reduce using rule 5 (expression -> expression function .)
    REPEAT          reduce using rule 5 (expression -> expression function .)
    FOR             reduce using rule 5 (expression -> expression function .)
    WHILE           reduce using rule 5 (expression -> expression function .)
    TRY             reduce using rule 5 (expression -> expression function .)
    $end            reduce using rule 5 (expression -> expression function .)
    RMB             reduce using rule 5 (expression -> expression function .)


state 34

    (6) expression -> expression function_call . SEMI

    SEMI            shift and go to state 68


state 35

    (7) expression -> expression repeat .

    VAR             reduce using rule 7 (expression -> expression repeat .)
    IDENTIFIER      reduce using rule 7 (expression -> expression repeat .)
    USE             reduce using rule 7 (expression -> expression repeat .)
    IF              reduce using rule 7 (expression -> expression repeat .)
    FUNCTION        reduce using rule 7 (expression -> expression repeat .)
    REPEAT          reduce using rule 7 (expression -> expression repeat .)
    FOR             reduce using rule 7 (expression -> expression repeat .)
    WHILE           reduce using rule 7 (expression -> expression repeat .)
    TRY             reduce using rule 7 (expression -> expression repeat .)
    $end            reduce using rule 7 (expression -> expression repeat .)
    RMB             reduce using rule 7 (expression -> expression repeat .)


state 36

    (8) expression -> expression for .

    VAR             reduce using rule 8 (expression -> expression for .)
    IDENTIFIER      reduce using rule 8 (expression -> expression for .)
    USE             reduce using rule 8 (expression -> expression for .)
    IF              reduce using rule 8 (expression -> expression for .)
    FUNCTION        reduce using rule 8 (expression -> expression for .)
    REPEAT          reduce using rule 8 (expression -> expression for .)
    FOR             reduce using rule 8 (expression -> expression for .)
    WHILE           reduce using rule 8 (expression -> expression for .)
    TRY             reduce using rule 8 (expression -> expression for .)
    $end            reduce using rule 8 (expression -> expression for .)
    RMB             reduce using rule 8 (expression -> expression for .)


state 37

    (9) expression -> expression while .

    VAR             reduce using rule 9 (expression -> expression while .)
    IDENTIFIER      reduce using rule 9 (expression -> expression while .)
    USE             reduce using rule 9 (expression -> expression while .)
    IF              reduce using rule 9 (expression -> expression while .)
    FUNCTION        reduce using rule 9 (expression -> expression while .)
    REPEAT          reduce using rule 9 (expression -> expression while .)
    FOR             reduce using rule 9 (expression -> expression while .)
    WHILE           reduce using rule 9 (expression -> expression while .)
    TRY             reduce using rule 9 (expression -> expression while .)
    $end            reduce using rule 9 (expression -> expression while .)
    RMB             reduce using rule 9 (expression -> expression while .)


state 38

    (10) expression -> expression use .

    VAR             reduce using rule 10 (expression -> expression use .)
    IDENTIFIER      reduce using rule 10 (expression -> expression use .)
    USE             reduce using rule 10 (expression -> expression use .)
    IF              reduce using rule 10 (expression -> expression use .)
    FUNCTION        reduce using rule 10 (expression -> expression use .)
    REPEAT          reduce using rule 10 (expression -> expression use .)
    FOR             reduce using rule 10 (expression -> expression use .)
    WHILE           reduce using rule 10 (expression -> expression use .)
    TRY             reduce using rule 10 (expression -> expression use .)
    $end            reduce using rule 10 (expression -> expression use .)
    RMB             reduce using rule 10 (expression -> expression use .)


state 39

    (11) expression -> expression error_handling .

    VAR             reduce using rule 11 (expression -> expression error_handling .)
    IDENTIFIER      reduce using rule 11 (expression -> expression error_handling .)
    USE             reduce using rule 11 (expression -> expression error_handling .)
    IF              reduce using rule 11 (expression -> expression error_handling .)
    FUNCTION        reduce using rule 11 (expression -> expression error_handling .)
    REPEAT          reduce using rule 11 (expression -> expression error_handling .)
    FOR             reduce using rule 11 (expression -> expression error_handling .)
    WHILE           reduce using rule 11 (expression -> expression error_handling .)
    TRY             reduce using rule 11 (expression -> expression error_handling .)
    $end            reduce using rule 11 (expression -> expression error_handling .)
    RMB             reduce using rule 11 (expression -> expression error_handling .)


state 40

    (12) expression -> expression variable_alone .

    VAR             reduce using rule 12 (expression -> expression variable_alone .)
    IDENTIFIER      reduce using rule 12 (expression -> expression variable_alone .)
    USE             reduce using rule 12 (expression -> expression variable_alone .)
    IF              reduce using rule 12 (expression -> expression variable_alone .)
    FUNCTION        reduce using rule 12 (expression -> expression variable_alone .)
    REPEAT          reduce using rule 12 (expression -> expression variable_alone .)
    FOR             reduce using rule 12 (expression -> expression variable_alone .)
    WHILE           reduce using rule 12 (expression -> expression variable_alone .)
    TRY             reduce using rule 12 (expression -> expression variable_alone .)
    $end            reduce using rule 12 (expression -> expression variable_alone .)
    RMB             reduce using rule 12 (expression -> expression variable_alone .)


state 41

    (13) expression -> variable_declaration SEMI .

    VAR             reduce using rule 13 (expression -> variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 13 (expression -> variable_declaration SEMI .)
    USE             reduce using rule 13 (expression -> variable_declaration SEMI .)
    IF              reduce using rule 13 (expression -> variable_declaration SEMI .)
    FUNCTION        reduce using rule 13 (expression -> variable_declaration SEMI .)
    REPEAT          reduce using rule 13 (expression -> variable_declaration SEMI .)
    FOR             reduce using rule 13 (expression -> variable_declaration SEMI .)
    WHILE           reduce using rule 13 (expression -> variable_declaration SEMI .)
    TRY             reduce using rule 13 (expression -> variable_declaration SEMI .)
    $end            reduce using rule 13 (expression -> variable_declaration SEMI .)
    RMB             reduce using rule 13 (expression -> variable_declaration SEMI .)


state 42

    (14) expression -> variable_value_change SEMI .

    VAR             reduce using rule 14 (expression -> variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 14 (expression -> variable_value_change SEMI .)
    USE             reduce using rule 14 (expression -> variable_value_change SEMI .)
    IF              reduce using rule 14 (expression -> variable_value_change SEMI .)
    FUNCTION        reduce using rule 14 (expression -> variable_value_change SEMI .)
    REPEAT          reduce using rule 14 (expression -> variable_value_change SEMI .)
    FOR             reduce using rule 14 (expression -> variable_value_change SEMI .)
    WHILE           reduce using rule 14 (expression -> variable_value_change SEMI .)
    TRY             reduce using rule 14 (expression -> variable_value_change SEMI .)
    $end            reduce using rule 14 (expression -> variable_value_change SEMI .)
    RMB             reduce using rule 14 (expression -> variable_value_change SEMI .)


state 43

    (63) variable_declaration -> VAR IDENTIFIER . LIST EQUAL calculate
    (64) variable_declaration -> VAR IDENTIFIER . EQUAL calculate
    (65) variable_declaration -> VAR IDENTIFIER .

    LIST            shift and go to state 69
    EQUAL           shift and go to state 70
    SEMI            reduce using rule 65 (variable_declaration -> VAR IDENTIFIER .)


state 44

    (61) variable_value_change -> IDENTIFIER EQUAL . LIST
    (62) variable_value_change -> IDENTIFIER EQUAL . calculate
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    LIST            shift and go to state 72
    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LSB             shift and go to state 78

    calculate                      shift and go to state 73

state 45

    (41) function_call -> IDENTIFIER LSB . parameter RSB
    (42) parameter -> . parameter COMMA calculate
    (43) parameter -> . calculate
    (44) parameter -> . empty
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB
    (78) empty -> .

    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78
    RSB             reduce using rule 78 (empty -> .)
    COMMA           reduce using rule 78 (empty -> .)

    parameter                      shift and go to state 79
    calculate                      shift and go to state 80
    empty                          shift and go to state 81

state 46

    (45) if_statement -> if_statement_1 if_statement_2 . if_statement_3
    (46) if_statement -> if_statement_1 if_statement_2 .
    (51) if_statement_2 -> if_statement_2 . ELSE IF LSB condition RSB LMB expression RMB
    (52) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 46 (if_statement -> if_statement_1 if_statement_2 .)
    IDENTIFIER      reduce using rule 46 (if_statement -> if_statement_1 if_statement_2 .)
    USE             reduce using rule 46 (if_statement -> if_statement_1 if_statement_2 .)
    IF              reduce using rule 46 (if_statement -> if_statement_1 if_statement_2 .)
    FUNCTION        reduce using rule 46 (if_statement -> if_statement_1 if_statement_2 .)
    REPEAT          reduce using rule 46 (if_statement -> if_statement_1 if_statement_2 .)
    FOR             reduce using rule 46 (if_statement -> if_statement_1 if_statement_2 .)
    WHILE           reduce using rule 46 (if_statement -> if_statement_1 if_statement_2 .)
    TRY             reduce using rule 46 (if_statement -> if_statement_1 if_statement_2 .)
    $end            reduce using rule 46 (if_statement -> if_statement_1 if_statement_2 .)
    RMB             reduce using rule 46 (if_statement -> if_statement_1 if_statement_2 .)
    ELSE            shift and go to state 84

    if_statement_3                 shift and go to state 83

state 47

    (47) if_statement -> if_statement_1 if_statement_3 .

    VAR             reduce using rule 47 (if_statement -> if_statement_1 if_statement_3 .)
    IDENTIFIER      reduce using rule 47 (if_statement -> if_statement_1 if_statement_3 .)
    USE             reduce using rule 47 (if_statement -> if_statement_1 if_statement_3 .)
    IF              reduce using rule 47 (if_statement -> if_statement_1 if_statement_3 .)
    FUNCTION        reduce using rule 47 (if_statement -> if_statement_1 if_statement_3 .)
    REPEAT          reduce using rule 47 (if_statement -> if_statement_1 if_statement_3 .)
    FOR             reduce using rule 47 (if_statement -> if_statement_1 if_statement_3 .)
    WHILE           reduce using rule 47 (if_statement -> if_statement_1 if_statement_3 .)
    TRY             reduce using rule 47 (if_statement -> if_statement_1 if_statement_3 .)
    $end            reduce using rule 47 (if_statement -> if_statement_1 if_statement_3 .)
    RMB             reduce using rule 47 (if_statement -> if_statement_1 if_statement_3 .)


state 48

    (50) if_statement_2 -> ELSE . IF LSB condition RSB LMB expression RMB
    (52) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 85
    LMB             shift and go to state 86


state 49

    (37) function -> function_head function_body .

    VAR             reduce using rule 37 (function -> function_head function_body .)
    IDENTIFIER      reduce using rule 37 (function -> function_head function_body .)
    USE             reduce using rule 37 (function -> function_head function_body .)
    IF              reduce using rule 37 (function -> function_head function_body .)
    FUNCTION        reduce using rule 37 (function -> function_head function_body .)
    REPEAT          reduce using rule 37 (function -> function_head function_body .)
    FOR             reduce using rule 37 (function -> function_head function_body .)
    WHILE           reduce using rule 37 (function -> function_head function_body .)
    TRY             reduce using rule 37 (function -> function_head function_body .)
    $end            reduce using rule 37 (function -> function_head function_body .)
    RMB             reduce using rule 37 (function -> function_head function_body .)


state 50

    (40) function_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone
    (13) expression -> . variable_declaration SEMI
    (14) expression -> . variable_value_change SEMI
    (15) expression -> . if_statement
    (16) expression -> . function
    (17) expression -> . function_call
    (18) expression -> . repeat
    (19) expression -> . for
    (20) expression -> . while
    (21) expression -> . use
    (22) expression -> . error_handling
    (23) expression -> . variable_alone
    (24) expression -> . empty
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (78) empty -> .
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    RMB             reduce using rule 78 (empty -> .)
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

  ! VAR             [ reduce using rule 78 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 78 (empty -> .) ]
  ! USE             [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 78 (empty -> .) ]
  ! REPEAT          [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! TRY             [ reduce using rule 78 (empty -> .) ]

    expression                     shift and go to state 87
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    empty                          shift and go to state 14
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 51

    (34) repeat -> repeat_head repeat_body .

    VAR             reduce using rule 34 (repeat -> repeat_head repeat_body .)
    IDENTIFIER      reduce using rule 34 (repeat -> repeat_head repeat_body .)
    USE             reduce using rule 34 (repeat -> repeat_head repeat_body .)
    IF              reduce using rule 34 (repeat -> repeat_head repeat_body .)
    FUNCTION        reduce using rule 34 (repeat -> repeat_head repeat_body .)
    REPEAT          reduce using rule 34 (repeat -> repeat_head repeat_body .)
    FOR             reduce using rule 34 (repeat -> repeat_head repeat_body .)
    WHILE           reduce using rule 34 (repeat -> repeat_head repeat_body .)
    TRY             reduce using rule 34 (repeat -> repeat_head repeat_body .)
    $end            reduce using rule 34 (repeat -> repeat_head repeat_body .)
    RMB             reduce using rule 34 (repeat -> repeat_head repeat_body .)


state 52

    (36) repeat_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone
    (13) expression -> . variable_declaration SEMI
    (14) expression -> . variable_value_change SEMI
    (15) expression -> . if_statement
    (16) expression -> . function
    (17) expression -> . function_call
    (18) expression -> . repeat
    (19) expression -> . for
    (20) expression -> . while
    (21) expression -> . use
    (22) expression -> . error_handling
    (23) expression -> . variable_alone
    (24) expression -> . empty
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (78) empty -> .
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    RMB             reduce using rule 78 (empty -> .)
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

  ! VAR             [ reduce using rule 78 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 78 (empty -> .) ]
  ! USE             [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 78 (empty -> .) ]
  ! REPEAT          [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! TRY             [ reduce using rule 78 (empty -> .) ]

    expression                     shift and go to state 88
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    empty                          shift and go to state 14
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 53

    (28) for -> for_head for_body .

    VAR             reduce using rule 28 (for -> for_head for_body .)
    IDENTIFIER      reduce using rule 28 (for -> for_head for_body .)
    USE             reduce using rule 28 (for -> for_head for_body .)
    IF              reduce using rule 28 (for -> for_head for_body .)
    FUNCTION        reduce using rule 28 (for -> for_head for_body .)
    REPEAT          reduce using rule 28 (for -> for_head for_body .)
    FOR             reduce using rule 28 (for -> for_head for_body .)
    WHILE           reduce using rule 28 (for -> for_head for_body .)
    TRY             reduce using rule 28 (for -> for_head for_body .)
    $end            reduce using rule 28 (for -> for_head for_body .)
    RMB             reduce using rule 28 (for -> for_head for_body .)


state 54

    (30) for_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone
    (13) expression -> . variable_declaration SEMI
    (14) expression -> . variable_value_change SEMI
    (15) expression -> . if_statement
    (16) expression -> . function
    (17) expression -> . function_call
    (18) expression -> . repeat
    (19) expression -> . for
    (20) expression -> . while
    (21) expression -> . use
    (22) expression -> . error_handling
    (23) expression -> . variable_alone
    (24) expression -> . empty
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (78) empty -> .
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    RMB             reduce using rule 78 (empty -> .)
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

  ! VAR             [ reduce using rule 78 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 78 (empty -> .) ]
  ! USE             [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 78 (empty -> .) ]
  ! REPEAT          [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! TRY             [ reduce using rule 78 (empty -> .) ]

    expression                     shift and go to state 89
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    empty                          shift and go to state 14
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 55

    (31) while -> while_head while_body .

    VAR             reduce using rule 31 (while -> while_head while_body .)
    IDENTIFIER      reduce using rule 31 (while -> while_head while_body .)
    USE             reduce using rule 31 (while -> while_head while_body .)
    IF              reduce using rule 31 (while -> while_head while_body .)
    FUNCTION        reduce using rule 31 (while -> while_head while_body .)
    REPEAT          reduce using rule 31 (while -> while_head while_body .)
    FOR             reduce using rule 31 (while -> while_head while_body .)
    WHILE           reduce using rule 31 (while -> while_head while_body .)
    TRY             reduce using rule 31 (while -> while_head while_body .)
    $end            reduce using rule 31 (while -> while_head while_body .)
    RMB             reduce using rule 31 (while -> while_head while_body .)


state 56

    (33) while_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone
    (13) expression -> . variable_declaration SEMI
    (14) expression -> . variable_value_change SEMI
    (15) expression -> . if_statement
    (16) expression -> . function
    (17) expression -> . function_call
    (18) expression -> . repeat
    (19) expression -> . for
    (20) expression -> . while
    (21) expression -> . use
    (22) expression -> . error_handling
    (23) expression -> . variable_alone
    (24) expression -> . empty
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (78) empty -> .
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    RMB             reduce using rule 78 (empty -> .)
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

  ! VAR             [ reduce using rule 78 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 78 (empty -> .) ]
  ! USE             [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 78 (empty -> .) ]
  ! REPEAT          [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! TRY             [ reduce using rule 78 (empty -> .) ]

    expression                     shift and go to state 90
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    empty                          shift and go to state 14
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 57

    (59) use -> USE IDENTIFIER .

    VAR             reduce using rule 59 (use -> USE IDENTIFIER .)
    IDENTIFIER      reduce using rule 59 (use -> USE IDENTIFIER .)
    USE             reduce using rule 59 (use -> USE IDENTIFIER .)
    IF              reduce using rule 59 (use -> USE IDENTIFIER .)
    FUNCTION        reduce using rule 59 (use -> USE IDENTIFIER .)
    REPEAT          reduce using rule 59 (use -> USE IDENTIFIER .)
    FOR             reduce using rule 59 (use -> USE IDENTIFIER .)
    WHILE           reduce using rule 59 (use -> USE IDENTIFIER .)
    TRY             reduce using rule 59 (use -> USE IDENTIFIER .)
    $end            reduce using rule 59 (use -> USE IDENTIFIER .)
    RMB             reduce using rule 59 (use -> USE IDENTIFIER .)


state 58

    (25) error_handling -> try catch .

    VAR             reduce using rule 25 (error_handling -> try catch .)
    IDENTIFIER      reduce using rule 25 (error_handling -> try catch .)
    USE             reduce using rule 25 (error_handling -> try catch .)
    IF              reduce using rule 25 (error_handling -> try catch .)
    FUNCTION        reduce using rule 25 (error_handling -> try catch .)
    REPEAT          reduce using rule 25 (error_handling -> try catch .)
    FOR             reduce using rule 25 (error_handling -> try catch .)
    WHILE           reduce using rule 25 (error_handling -> try catch .)
    TRY             reduce using rule 25 (error_handling -> try catch .)
    $end            reduce using rule 25 (error_handling -> try catch .)
    RMB             reduce using rule 25 (error_handling -> try catch .)


state 59

    (27) catch -> CATCH . LSB IDENTIFIER RSB LMB expression RMB

    LSB             shift and go to state 91


state 60

    (49) if_statement_1 -> IF LSB . condition RSB LMB expression RMB
    (53) condition -> . condition LB calculate
    (54) condition -> . condition RB calculate
    (55) condition -> . condition LB EQUAL calculate
    (56) condition -> . condition RB EQUAL calculate
    (57) condition -> . condition EQUAL calculate
    (58) condition -> . calculate
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    condition                      shift and go to state 92
    calculate                      shift and go to state 93

state 61

    (38) function_head -> FUNCTION IDENTIFIER . LSB empty RSB
    (39) function_head -> FUNCTION IDENTIFIER . LSB parameter RSB

    LSB             shift and go to state 94


state 62

    (35) repeat_head -> REPEAT LSB . calculate RSB
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    calculate                      shift and go to state 95

state 63

    (29) for_head -> FOR LSB . IDENTIFIER IN IDENTIFIER RSB

    IDENTIFIER      shift and go to state 96


state 64

    (32) while_head -> WHILE LSB . condition RSB
    (53) condition -> . condition LB calculate
    (54) condition -> . condition RB calculate
    (55) condition -> . condition LB EQUAL calculate
    (56) condition -> . condition RB EQUAL calculate
    (57) condition -> . condition EQUAL calculate
    (58) condition -> . calculate
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    condition                      shift and go to state 97
    calculate                      shift and go to state 93

state 65

    (26) try -> TRY LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone
    (13) expression -> . variable_declaration SEMI
    (14) expression -> . variable_value_change SEMI
    (15) expression -> . if_statement
    (16) expression -> . function
    (17) expression -> . function_call
    (18) expression -> . repeat
    (19) expression -> . for
    (20) expression -> . while
    (21) expression -> . use
    (22) expression -> . error_handling
    (23) expression -> . variable_alone
    (24) expression -> . empty
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (78) empty -> .
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    RMB             reduce using rule 78 (empty -> .)
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

  ! VAR             [ reduce using rule 78 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 78 (empty -> .) ]
  ! USE             [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 78 (empty -> .) ]
  ! REPEAT          [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! TRY             [ reduce using rule 78 (empty -> .) ]

    expression                     shift and go to state 98
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    empty                          shift and go to state 14
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 66

    (2) expression -> expression variable_declaration SEMI .

    VAR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    USE             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IF              reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FUNCTION        reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    REPEAT          reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FOR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    WHILE           reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    TRY             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    $end            reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    RMB             reduce using rule 2 (expression -> expression variable_declaration SEMI .)


state 67

    (3) expression -> expression variable_value_change SEMI .

    VAR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    USE             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IF              reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FUNCTION        reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    REPEAT          reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FOR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    WHILE           reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    TRY             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    $end            reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    RMB             reduce using rule 3 (expression -> expression variable_value_change SEMI .)


state 68

    (6) expression -> expression function_call SEMI .

    VAR             reduce using rule 6 (expression -> expression function_call SEMI .)
    IDENTIFIER      reduce using rule 6 (expression -> expression function_call SEMI .)
    USE             reduce using rule 6 (expression -> expression function_call SEMI .)
    IF              reduce using rule 6 (expression -> expression function_call SEMI .)
    FUNCTION        reduce using rule 6 (expression -> expression function_call SEMI .)
    REPEAT          reduce using rule 6 (expression -> expression function_call SEMI .)
    FOR             reduce using rule 6 (expression -> expression function_call SEMI .)
    WHILE           reduce using rule 6 (expression -> expression function_call SEMI .)
    TRY             reduce using rule 6 (expression -> expression function_call SEMI .)
    $end            reduce using rule 6 (expression -> expression function_call SEMI .)
    RMB             reduce using rule 6 (expression -> expression function_call SEMI .)


state 69

    (63) variable_declaration -> VAR IDENTIFIER LIST . EQUAL calculate

    EQUAL           shift and go to state 99


state 70

    (64) variable_declaration -> VAR IDENTIFIER EQUAL . calculate
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    calculate                      shift and go to state 100

state 71

    (74) calculate -> IDENTIFIER .
    (75) calculate -> IDENTIFIER . LIST

    PLUS            reduce using rule 74 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 74 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 74 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 74 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 74 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 74 (calculate -> IDENTIFIER .)
    COMMA           reduce using rule 74 (calculate -> IDENTIFIER .)
    LB              reduce using rule 74 (calculate -> IDENTIFIER .)
    RB              reduce using rule 74 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 74 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 101


state 72

    (61) variable_value_change -> IDENTIFIER EQUAL LIST .
    (76) calculate -> LIST .

  ! reduce/reduce conflict for SEMI resolved using rule 61 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    SEMI            reduce using rule 61 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    PLUS            reduce using rule 76 (calculate -> LIST .)
    MINUS           reduce using rule 76 (calculate -> LIST .)
    MUL             reduce using rule 76 (calculate -> LIST .)
    DIV             reduce using rule 76 (calculate -> LIST .)

  ! SEMI            [ reduce using rule 76 (calculate -> LIST .) ]


state 73

    (62) variable_value_change -> IDENTIFIER EQUAL calculate .
    (66) calculate -> calculate . PLUS calculate
    (67) calculate -> calculate . MINUS calculate
    (69) calculate -> calculate . MUL calculate
    (70) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 62 (variable_value_change -> IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    MUL             shift and go to state 104
    DIV             shift and go to state 105


state 74

    (68) calculate -> MINUS . calculate
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    calculate                      shift and go to state 106

state 75

    (71) calculate -> INT .

    PLUS            reduce using rule 71 (calculate -> INT .)
    MINUS           reduce using rule 71 (calculate -> INT .)
    MUL             reduce using rule 71 (calculate -> INT .)
    DIV             reduce using rule 71 (calculate -> INT .)
    SEMI            reduce using rule 71 (calculate -> INT .)
    RSB             reduce using rule 71 (calculate -> INT .)
    COMMA           reduce using rule 71 (calculate -> INT .)
    LB              reduce using rule 71 (calculate -> INT .)
    RB              reduce using rule 71 (calculate -> INT .)
    EQUAL           reduce using rule 71 (calculate -> INT .)


state 76

    (72) calculate -> FLOAT .

    PLUS            reduce using rule 72 (calculate -> FLOAT .)
    MINUS           reduce using rule 72 (calculate -> FLOAT .)
    MUL             reduce using rule 72 (calculate -> FLOAT .)
    DIV             reduce using rule 72 (calculate -> FLOAT .)
    SEMI            reduce using rule 72 (calculate -> FLOAT .)
    RSB             reduce using rule 72 (calculate -> FLOAT .)
    COMMA           reduce using rule 72 (calculate -> FLOAT .)
    LB              reduce using rule 72 (calculate -> FLOAT .)
    RB              reduce using rule 72 (calculate -> FLOAT .)
    EQUAL           reduce using rule 72 (calculate -> FLOAT .)


state 77

    (73) calculate -> STRING .

    PLUS            reduce using rule 73 (calculate -> STRING .)
    MINUS           reduce using rule 73 (calculate -> STRING .)
    MUL             reduce using rule 73 (calculate -> STRING .)
    DIV             reduce using rule 73 (calculate -> STRING .)
    SEMI            reduce using rule 73 (calculate -> STRING .)
    RSB             reduce using rule 73 (calculate -> STRING .)
    COMMA           reduce using rule 73 (calculate -> STRING .)
    LB              reduce using rule 73 (calculate -> STRING .)
    RB              reduce using rule 73 (calculate -> STRING .)
    EQUAL           reduce using rule 73 (calculate -> STRING .)


state 78

    (77) calculate -> LSB . calculate RSB
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    calculate                      shift and go to state 107

state 79

    (41) function_call -> IDENTIFIER LSB parameter . RSB
    (42) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 108
    COMMA           shift and go to state 109


state 80

    (43) parameter -> calculate .
    (66) calculate -> calculate . PLUS calculate
    (67) calculate -> calculate . MINUS calculate
    (69) calculate -> calculate . MUL calculate
    (70) calculate -> calculate . DIV calculate

    RSB             reduce using rule 43 (parameter -> calculate .)
    COMMA           reduce using rule 43 (parameter -> calculate .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    MUL             shift and go to state 104
    DIV             shift and go to state 105


state 81

    (44) parameter -> empty .

    RSB             reduce using rule 44 (parameter -> empty .)
    COMMA           reduce using rule 44 (parameter -> empty .)


state 82

    (76) calculate -> LIST .

    PLUS            reduce using rule 76 (calculate -> LIST .)
    MINUS           reduce using rule 76 (calculate -> LIST .)
    MUL             reduce using rule 76 (calculate -> LIST .)
    DIV             reduce using rule 76 (calculate -> LIST .)
    RSB             reduce using rule 76 (calculate -> LIST .)
    COMMA           reduce using rule 76 (calculate -> LIST .)
    LB              reduce using rule 76 (calculate -> LIST .)
    RB              reduce using rule 76 (calculate -> LIST .)
    EQUAL           reduce using rule 76 (calculate -> LIST .)
    SEMI            reduce using rule 76 (calculate -> LIST .)


state 83

    (45) if_statement -> if_statement_1 if_statement_2 if_statement_3 .

    VAR             reduce using rule 45 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IDENTIFIER      reduce using rule 45 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    USE             reduce using rule 45 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IF              reduce using rule 45 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FUNCTION        reduce using rule 45 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    REPEAT          reduce using rule 45 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FOR             reduce using rule 45 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    WHILE           reduce using rule 45 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    TRY             reduce using rule 45 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    $end            reduce using rule 45 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    RMB             reduce using rule 45 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)


state 84

    (51) if_statement_2 -> if_statement_2 ELSE . IF LSB condition RSB LMB expression RMB
    (52) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 110
    LMB             shift and go to state 86


state 85

    (50) if_statement_2 -> ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 111


state 86

    (52) if_statement_3 -> ELSE LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone
    (13) expression -> . variable_declaration SEMI
    (14) expression -> . variable_value_change SEMI
    (15) expression -> . if_statement
    (16) expression -> . function
    (17) expression -> . function_call
    (18) expression -> . repeat
    (19) expression -> . for
    (20) expression -> . while
    (21) expression -> . use
    (22) expression -> . error_handling
    (23) expression -> . variable_alone
    (24) expression -> . empty
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (78) empty -> .
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    RMB             reduce using rule 78 (empty -> .)
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

  ! VAR             [ reduce using rule 78 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 78 (empty -> .) ]
  ! USE             [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 78 (empty -> .) ]
  ! REPEAT          [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! TRY             [ reduce using rule 78 (empty -> .) ]

    expression                     shift and go to state 112
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    empty                          shift and go to state 14
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 87

    (40) function_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

    RMB             shift and go to state 113
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

    variable_declaration           shift and go to state 30
    variable_value_change          shift and go to state 31
    if_statement                   shift and go to state 32
    function                       shift and go to state 33
    function_call                  shift and go to state 34
    repeat                         shift and go to state 35
    for                            shift and go to state 36
    while                          shift and go to state 37
    use                            shift and go to state 38
    error_handling                 shift and go to state 39
    variable_alone                 shift and go to state 40
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 88

    (36) repeat_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

    RMB             shift and go to state 114
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

    variable_declaration           shift and go to state 30
    variable_value_change          shift and go to state 31
    if_statement                   shift and go to state 32
    function                       shift and go to state 33
    function_call                  shift and go to state 34
    repeat                         shift and go to state 35
    for                            shift and go to state 36
    while                          shift and go to state 37
    use                            shift and go to state 38
    error_handling                 shift and go to state 39
    variable_alone                 shift and go to state 40
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 89

    (30) for_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

    RMB             shift and go to state 115
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

    variable_declaration           shift and go to state 30
    variable_value_change          shift and go to state 31
    if_statement                   shift and go to state 32
    function                       shift and go to state 33
    function_call                  shift and go to state 34
    repeat                         shift and go to state 35
    for                            shift and go to state 36
    while                          shift and go to state 37
    use                            shift and go to state 38
    error_handling                 shift and go to state 39
    variable_alone                 shift and go to state 40
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 90

    (33) while_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

    RMB             shift and go to state 116
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

    variable_declaration           shift and go to state 30
    variable_value_change          shift and go to state 31
    if_statement                   shift and go to state 32
    function                       shift and go to state 33
    function_call                  shift and go to state 34
    repeat                         shift and go to state 35
    for                            shift and go to state 36
    while                          shift and go to state 37
    use                            shift and go to state 38
    error_handling                 shift and go to state 39
    variable_alone                 shift and go to state 40
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 91

    (27) catch -> CATCH LSB . IDENTIFIER RSB LMB expression RMB

    IDENTIFIER      shift and go to state 117


state 92

    (49) if_statement_1 -> IF LSB condition . RSB LMB expression RMB
    (53) condition -> condition . LB calculate
    (54) condition -> condition . RB calculate
    (55) condition -> condition . LB EQUAL calculate
    (56) condition -> condition . RB EQUAL calculate
    (57) condition -> condition . EQUAL calculate

    RSB             shift and go to state 118
    LB              shift and go to state 119
    RB              shift and go to state 120
    EQUAL           shift and go to state 121


state 93

    (58) condition -> calculate .
    (66) calculate -> calculate . PLUS calculate
    (67) calculate -> calculate . MINUS calculate
    (69) calculate -> calculate . MUL calculate
    (70) calculate -> calculate . DIV calculate

    RSB             reduce using rule 58 (condition -> calculate .)
    LB              reduce using rule 58 (condition -> calculate .)
    RB              reduce using rule 58 (condition -> calculate .)
    EQUAL           reduce using rule 58 (condition -> calculate .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    MUL             shift and go to state 104
    DIV             shift and go to state 105


state 94

    (38) function_head -> FUNCTION IDENTIFIER LSB . empty RSB
    (39) function_head -> FUNCTION IDENTIFIER LSB . parameter RSB
    (78) empty -> .
    (42) parameter -> . parameter COMMA calculate
    (43) parameter -> . calculate
    (44) parameter -> . empty
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    RSB             reduce using rule 78 (empty -> .)
    COMMA           reduce using rule 78 (empty -> .)
    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    empty                          shift and go to state 122
    parameter                      shift and go to state 123
    calculate                      shift and go to state 80

state 95

    (35) repeat_head -> REPEAT LSB calculate . RSB
    (66) calculate -> calculate . PLUS calculate
    (67) calculate -> calculate . MINUS calculate
    (69) calculate -> calculate . MUL calculate
    (70) calculate -> calculate . DIV calculate

    RSB             shift and go to state 124
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    MUL             shift and go to state 104
    DIV             shift and go to state 105


state 96

    (29) for_head -> FOR LSB IDENTIFIER . IN IDENTIFIER RSB

    IN              shift and go to state 125


state 97

    (32) while_head -> WHILE LSB condition . RSB
    (53) condition -> condition . LB calculate
    (54) condition -> condition . RB calculate
    (55) condition -> condition . LB EQUAL calculate
    (56) condition -> condition . RB EQUAL calculate
    (57) condition -> condition . EQUAL calculate

    RSB             shift and go to state 126
    LB              shift and go to state 119
    RB              shift and go to state 120
    EQUAL           shift and go to state 121


state 98

    (26) try -> TRY LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

    RMB             shift and go to state 127
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

    variable_declaration           shift and go to state 30
    variable_value_change          shift and go to state 31
    if_statement                   shift and go to state 32
    function                       shift and go to state 33
    function_call                  shift and go to state 34
    repeat                         shift and go to state 35
    for                            shift and go to state 36
    while                          shift and go to state 37
    use                            shift and go to state 38
    error_handling                 shift and go to state 39
    variable_alone                 shift and go to state 40
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 99

    (63) variable_declaration -> VAR IDENTIFIER LIST EQUAL . calculate
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    calculate                      shift and go to state 128

state 100

    (64) variable_declaration -> VAR IDENTIFIER EQUAL calculate .
    (66) calculate -> calculate . PLUS calculate
    (67) calculate -> calculate . MINUS calculate
    (69) calculate -> calculate . MUL calculate
    (70) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 64 (variable_declaration -> VAR IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    MUL             shift and go to state 104
    DIV             shift and go to state 105


state 101

    (75) calculate -> IDENTIFIER LIST .

    PLUS            reduce using rule 75 (calculate -> IDENTIFIER LIST .)
    MINUS           reduce using rule 75 (calculate -> IDENTIFIER LIST .)
    MUL             reduce using rule 75 (calculate -> IDENTIFIER LIST .)
    DIV             reduce using rule 75 (calculate -> IDENTIFIER LIST .)
    SEMI            reduce using rule 75 (calculate -> IDENTIFIER LIST .)
    RSB             reduce using rule 75 (calculate -> IDENTIFIER LIST .)
    COMMA           reduce using rule 75 (calculate -> IDENTIFIER LIST .)
    LB              reduce using rule 75 (calculate -> IDENTIFIER LIST .)
    RB              reduce using rule 75 (calculate -> IDENTIFIER LIST .)
    EQUAL           reduce using rule 75 (calculate -> IDENTIFIER LIST .)


state 102

    (66) calculate -> calculate PLUS . calculate
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    calculate                      shift and go to state 129

state 103

    (67) calculate -> calculate MINUS . calculate
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    calculate                      shift and go to state 130

state 104

    (69) calculate -> calculate MUL . calculate
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    calculate                      shift and go to state 131

state 105

    (70) calculate -> calculate DIV . calculate
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    calculate                      shift and go to state 132

state 106

    (68) calculate -> MINUS calculate .
    (66) calculate -> calculate . PLUS calculate
    (67) calculate -> calculate . MINUS calculate
    (69) calculate -> calculate . MUL calculate
    (70) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 68 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 68 (calculate -> MINUS calculate .)
    MUL             reduce using rule 68 (calculate -> MINUS calculate .)
    DIV             reduce using rule 68 (calculate -> MINUS calculate .)
    SEMI            reduce using rule 68 (calculate -> MINUS calculate .)
    RSB             reduce using rule 68 (calculate -> MINUS calculate .)
    COMMA           reduce using rule 68 (calculate -> MINUS calculate .)
    LB              reduce using rule 68 (calculate -> MINUS calculate .)
    RB              reduce using rule 68 (calculate -> MINUS calculate .)
    EQUAL           reduce using rule 68 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 102 ]
  ! MINUS           [ shift and go to state 103 ]
  ! MUL             [ shift and go to state 104 ]
  ! DIV             [ shift and go to state 105 ]


state 107

    (77) calculate -> LSB calculate . RSB
    (66) calculate -> calculate . PLUS calculate
    (67) calculate -> calculate . MINUS calculate
    (69) calculate -> calculate . MUL calculate
    (70) calculate -> calculate . DIV calculate

    RSB             shift and go to state 133
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    MUL             shift and go to state 104
    DIV             shift and go to state 105


state 108

    (41) function_call -> IDENTIFIER LSB parameter RSB .

    VAR             reduce using rule 41 (function_call -> IDENTIFIER LSB parameter RSB .)
    IDENTIFIER      reduce using rule 41 (function_call -> IDENTIFIER LSB parameter RSB .)
    USE             reduce using rule 41 (function_call -> IDENTIFIER LSB parameter RSB .)
    IF              reduce using rule 41 (function_call -> IDENTIFIER LSB parameter RSB .)
    FUNCTION        reduce using rule 41 (function_call -> IDENTIFIER LSB parameter RSB .)
    REPEAT          reduce using rule 41 (function_call -> IDENTIFIER LSB parameter RSB .)
    FOR             reduce using rule 41 (function_call -> IDENTIFIER LSB parameter RSB .)
    WHILE           reduce using rule 41 (function_call -> IDENTIFIER LSB parameter RSB .)
    TRY             reduce using rule 41 (function_call -> IDENTIFIER LSB parameter RSB .)
    $end            reduce using rule 41 (function_call -> IDENTIFIER LSB parameter RSB .)
    SEMI            reduce using rule 41 (function_call -> IDENTIFIER LSB parameter RSB .)
    RMB             reduce using rule 41 (function_call -> IDENTIFIER LSB parameter RSB .)


state 109

    (42) parameter -> parameter COMMA . calculate
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    calculate                      shift and go to state 134

state 110

    (51) if_statement_2 -> if_statement_2 ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 135


state 111

    (50) if_statement_2 -> ELSE IF LSB . condition RSB LMB expression RMB
    (53) condition -> . condition LB calculate
    (54) condition -> . condition RB calculate
    (55) condition -> . condition LB EQUAL calculate
    (56) condition -> . condition RB EQUAL calculate
    (57) condition -> . condition EQUAL calculate
    (58) condition -> . calculate
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    condition                      shift and go to state 136
    calculate                      shift and go to state 93

state 112

    (52) if_statement_3 -> ELSE LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

    RMB             shift and go to state 137
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

    variable_declaration           shift and go to state 30
    variable_value_change          shift and go to state 31
    if_statement                   shift and go to state 32
    function                       shift and go to state 33
    function_call                  shift and go to state 34
    repeat                         shift and go to state 35
    for                            shift and go to state 36
    while                          shift and go to state 37
    use                            shift and go to state 38
    error_handling                 shift and go to state 39
    variable_alone                 shift and go to state 40
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 113

    (40) function_body -> LMB expression RMB .

    VAR             reduce using rule 40 (function_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 40 (function_body -> LMB expression RMB .)
    USE             reduce using rule 40 (function_body -> LMB expression RMB .)
    IF              reduce using rule 40 (function_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 40 (function_body -> LMB expression RMB .)
    REPEAT          reduce using rule 40 (function_body -> LMB expression RMB .)
    FOR             reduce using rule 40 (function_body -> LMB expression RMB .)
    WHILE           reduce using rule 40 (function_body -> LMB expression RMB .)
    TRY             reduce using rule 40 (function_body -> LMB expression RMB .)
    $end            reduce using rule 40 (function_body -> LMB expression RMB .)
    RMB             reduce using rule 40 (function_body -> LMB expression RMB .)


state 114

    (36) repeat_body -> LMB expression RMB .

    VAR             reduce using rule 36 (repeat_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 36 (repeat_body -> LMB expression RMB .)
    USE             reduce using rule 36 (repeat_body -> LMB expression RMB .)
    IF              reduce using rule 36 (repeat_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 36 (repeat_body -> LMB expression RMB .)
    REPEAT          reduce using rule 36 (repeat_body -> LMB expression RMB .)
    FOR             reduce using rule 36 (repeat_body -> LMB expression RMB .)
    WHILE           reduce using rule 36 (repeat_body -> LMB expression RMB .)
    TRY             reduce using rule 36 (repeat_body -> LMB expression RMB .)
    $end            reduce using rule 36 (repeat_body -> LMB expression RMB .)
    RMB             reduce using rule 36 (repeat_body -> LMB expression RMB .)


state 115

    (30) for_body -> LMB expression RMB .

    VAR             reduce using rule 30 (for_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 30 (for_body -> LMB expression RMB .)
    USE             reduce using rule 30 (for_body -> LMB expression RMB .)
    IF              reduce using rule 30 (for_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 30 (for_body -> LMB expression RMB .)
    REPEAT          reduce using rule 30 (for_body -> LMB expression RMB .)
    FOR             reduce using rule 30 (for_body -> LMB expression RMB .)
    WHILE           reduce using rule 30 (for_body -> LMB expression RMB .)
    TRY             reduce using rule 30 (for_body -> LMB expression RMB .)
    $end            reduce using rule 30 (for_body -> LMB expression RMB .)
    RMB             reduce using rule 30 (for_body -> LMB expression RMB .)


state 116

    (33) while_body -> LMB expression RMB .

    VAR             reduce using rule 33 (while_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 33 (while_body -> LMB expression RMB .)
    USE             reduce using rule 33 (while_body -> LMB expression RMB .)
    IF              reduce using rule 33 (while_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 33 (while_body -> LMB expression RMB .)
    REPEAT          reduce using rule 33 (while_body -> LMB expression RMB .)
    FOR             reduce using rule 33 (while_body -> LMB expression RMB .)
    WHILE           reduce using rule 33 (while_body -> LMB expression RMB .)
    TRY             reduce using rule 33 (while_body -> LMB expression RMB .)
    $end            reduce using rule 33 (while_body -> LMB expression RMB .)
    RMB             reduce using rule 33 (while_body -> LMB expression RMB .)


state 117

    (27) catch -> CATCH LSB IDENTIFIER . RSB LMB expression RMB

    RSB             shift and go to state 138


state 118

    (49) if_statement_1 -> IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 139


state 119

    (53) condition -> condition LB . calculate
    (55) condition -> condition LB . EQUAL calculate
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 141
    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    calculate                      shift and go to state 140

state 120

    (54) condition -> condition RB . calculate
    (56) condition -> condition RB . EQUAL calculate
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 143
    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    calculate                      shift and go to state 142

state 121

    (57) condition -> condition EQUAL . calculate
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    calculate                      shift and go to state 144

state 122

    (38) function_head -> FUNCTION IDENTIFIER LSB empty . RSB
    (44) parameter -> empty .

  ! shift/reduce conflict for RSB resolved as shift
    RSB             shift and go to state 145
    COMMA           reduce using rule 44 (parameter -> empty .)

  ! RSB             [ reduce using rule 44 (parameter -> empty .) ]


state 123

    (39) function_head -> FUNCTION IDENTIFIER LSB parameter . RSB
    (42) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 146
    COMMA           shift and go to state 109


state 124

    (35) repeat_head -> REPEAT LSB calculate RSB .

    LMB             reduce using rule 35 (repeat_head -> REPEAT LSB calculate RSB .)


state 125

    (29) for_head -> FOR LSB IDENTIFIER IN . IDENTIFIER RSB

    IDENTIFIER      shift and go to state 147


state 126

    (32) while_head -> WHILE LSB condition RSB .

    LMB             reduce using rule 32 (while_head -> WHILE LSB condition RSB .)


state 127

    (26) try -> TRY LMB expression RMB .

    CATCH           reduce using rule 26 (try -> TRY LMB expression RMB .)


state 128

    (63) variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .
    (66) calculate -> calculate . PLUS calculate
    (67) calculate -> calculate . MINUS calculate
    (69) calculate -> calculate . MUL calculate
    (70) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 63 (variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    MUL             shift and go to state 104
    DIV             shift and go to state 105


state 129

    (66) calculate -> calculate PLUS calculate .
    (66) calculate -> calculate . PLUS calculate
    (67) calculate -> calculate . MINUS calculate
    (69) calculate -> calculate . MUL calculate
    (70) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 66 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 66 (calculate -> calculate PLUS calculate .)
    SEMI            reduce using rule 66 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 66 (calculate -> calculate PLUS calculate .)
    COMMA           reduce using rule 66 (calculate -> calculate PLUS calculate .)
    LB              reduce using rule 66 (calculate -> calculate PLUS calculate .)
    RB              reduce using rule 66 (calculate -> calculate PLUS calculate .)
    EQUAL           reduce using rule 66 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 104
    DIV             shift and go to state 105

  ! MUL             [ reduce using rule 66 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 66 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 102 ]
  ! MINUS           [ shift and go to state 103 ]


state 130

    (67) calculate -> calculate MINUS calculate .
    (66) calculate -> calculate . PLUS calculate
    (67) calculate -> calculate . MINUS calculate
    (69) calculate -> calculate . MUL calculate
    (70) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 67 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 67 (calculate -> calculate MINUS calculate .)
    SEMI            reduce using rule 67 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 67 (calculate -> calculate MINUS calculate .)
    COMMA           reduce using rule 67 (calculate -> calculate MINUS calculate .)
    LB              reduce using rule 67 (calculate -> calculate MINUS calculate .)
    RB              reduce using rule 67 (calculate -> calculate MINUS calculate .)
    EQUAL           reduce using rule 67 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 104
    DIV             shift and go to state 105

  ! MUL             [ reduce using rule 67 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 67 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 102 ]
  ! MINUS           [ shift and go to state 103 ]


state 131

    (69) calculate -> calculate MUL calculate .
    (66) calculate -> calculate . PLUS calculate
    (67) calculate -> calculate . MINUS calculate
    (69) calculate -> calculate . MUL calculate
    (70) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 69 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 69 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 69 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 69 (calculate -> calculate MUL calculate .)
    SEMI            reduce using rule 69 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 69 (calculate -> calculate MUL calculate .)
    COMMA           reduce using rule 69 (calculate -> calculate MUL calculate .)
    LB              reduce using rule 69 (calculate -> calculate MUL calculate .)
    RB              reduce using rule 69 (calculate -> calculate MUL calculate .)
    EQUAL           reduce using rule 69 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 102 ]
  ! MINUS           [ shift and go to state 103 ]
  ! MUL             [ shift and go to state 104 ]
  ! DIV             [ shift and go to state 105 ]


state 132

    (70) calculate -> calculate DIV calculate .
    (66) calculate -> calculate . PLUS calculate
    (67) calculate -> calculate . MINUS calculate
    (69) calculate -> calculate . MUL calculate
    (70) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 70 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 70 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 70 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 70 (calculate -> calculate DIV calculate .)
    SEMI            reduce using rule 70 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 70 (calculate -> calculate DIV calculate .)
    COMMA           reduce using rule 70 (calculate -> calculate DIV calculate .)
    LB              reduce using rule 70 (calculate -> calculate DIV calculate .)
    RB              reduce using rule 70 (calculate -> calculate DIV calculate .)
    EQUAL           reduce using rule 70 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 102 ]
  ! MINUS           [ shift and go to state 103 ]
  ! MUL             [ shift and go to state 104 ]
  ! DIV             [ shift and go to state 105 ]


state 133

    (77) calculate -> LSB calculate RSB .

    PLUS            reduce using rule 77 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 77 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 77 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 77 (calculate -> LSB calculate RSB .)
    SEMI            reduce using rule 77 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 77 (calculate -> LSB calculate RSB .)
    COMMA           reduce using rule 77 (calculate -> LSB calculate RSB .)
    LB              reduce using rule 77 (calculate -> LSB calculate RSB .)
    RB              reduce using rule 77 (calculate -> LSB calculate RSB .)
    EQUAL           reduce using rule 77 (calculate -> LSB calculate RSB .)


state 134

    (42) parameter -> parameter COMMA calculate .
    (66) calculate -> calculate . PLUS calculate
    (67) calculate -> calculate . MINUS calculate
    (69) calculate -> calculate . MUL calculate
    (70) calculate -> calculate . DIV calculate

    RSB             reduce using rule 42 (parameter -> parameter COMMA calculate .)
    COMMA           reduce using rule 42 (parameter -> parameter COMMA calculate .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    MUL             shift and go to state 104
    DIV             shift and go to state 105


state 135

    (51) if_statement_2 -> if_statement_2 ELSE IF LSB . condition RSB LMB expression RMB
    (53) condition -> . condition LB calculate
    (54) condition -> . condition RB calculate
    (55) condition -> . condition LB EQUAL calculate
    (56) condition -> . condition RB EQUAL calculate
    (57) condition -> . condition EQUAL calculate
    (58) condition -> . calculate
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    condition                      shift and go to state 148
    calculate                      shift and go to state 93

state 136

    (50) if_statement_2 -> ELSE IF LSB condition . RSB LMB expression RMB
    (53) condition -> condition . LB calculate
    (54) condition -> condition . RB calculate
    (55) condition -> condition . LB EQUAL calculate
    (56) condition -> condition . RB EQUAL calculate
    (57) condition -> condition . EQUAL calculate

    RSB             shift and go to state 149
    LB              shift and go to state 119
    RB              shift and go to state 120
    EQUAL           shift and go to state 121


state 137

    (52) if_statement_3 -> ELSE LMB expression RMB .

    VAR             reduce using rule 52 (if_statement_3 -> ELSE LMB expression RMB .)
    IDENTIFIER      reduce using rule 52 (if_statement_3 -> ELSE LMB expression RMB .)
    USE             reduce using rule 52 (if_statement_3 -> ELSE LMB expression RMB .)
    IF              reduce using rule 52 (if_statement_3 -> ELSE LMB expression RMB .)
    FUNCTION        reduce using rule 52 (if_statement_3 -> ELSE LMB expression RMB .)
    REPEAT          reduce using rule 52 (if_statement_3 -> ELSE LMB expression RMB .)
    FOR             reduce using rule 52 (if_statement_3 -> ELSE LMB expression RMB .)
    WHILE           reduce using rule 52 (if_statement_3 -> ELSE LMB expression RMB .)
    TRY             reduce using rule 52 (if_statement_3 -> ELSE LMB expression RMB .)
    $end            reduce using rule 52 (if_statement_3 -> ELSE LMB expression RMB .)
    RMB             reduce using rule 52 (if_statement_3 -> ELSE LMB expression RMB .)


state 138

    (27) catch -> CATCH LSB IDENTIFIER RSB . LMB expression RMB

    LMB             shift and go to state 150


state 139

    (49) if_statement_1 -> IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone
    (13) expression -> . variable_declaration SEMI
    (14) expression -> . variable_value_change SEMI
    (15) expression -> . if_statement
    (16) expression -> . function
    (17) expression -> . function_call
    (18) expression -> . repeat
    (19) expression -> . for
    (20) expression -> . while
    (21) expression -> . use
    (22) expression -> . error_handling
    (23) expression -> . variable_alone
    (24) expression -> . empty
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (78) empty -> .
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    RMB             reduce using rule 78 (empty -> .)
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

  ! VAR             [ reduce using rule 78 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 78 (empty -> .) ]
  ! USE             [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 78 (empty -> .) ]
  ! REPEAT          [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! TRY             [ reduce using rule 78 (empty -> .) ]

    expression                     shift and go to state 151
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    empty                          shift and go to state 14
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 140

    (53) condition -> condition LB calculate .
    (66) calculate -> calculate . PLUS calculate
    (67) calculate -> calculate . MINUS calculate
    (69) calculate -> calculate . MUL calculate
    (70) calculate -> calculate . DIV calculate

    RSB             reduce using rule 53 (condition -> condition LB calculate .)
    LB              reduce using rule 53 (condition -> condition LB calculate .)
    RB              reduce using rule 53 (condition -> condition LB calculate .)
    EQUAL           reduce using rule 53 (condition -> condition LB calculate .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    MUL             shift and go to state 104
    DIV             shift and go to state 105


state 141

    (55) condition -> condition LB EQUAL . calculate
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    calculate                      shift and go to state 152

state 142

    (54) condition -> condition RB calculate .
    (66) calculate -> calculate . PLUS calculate
    (67) calculate -> calculate . MINUS calculate
    (69) calculate -> calculate . MUL calculate
    (70) calculate -> calculate . DIV calculate

    RSB             reduce using rule 54 (condition -> condition RB calculate .)
    LB              reduce using rule 54 (condition -> condition RB calculate .)
    RB              reduce using rule 54 (condition -> condition RB calculate .)
    EQUAL           reduce using rule 54 (condition -> condition RB calculate .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    MUL             shift and go to state 104
    DIV             shift and go to state 105


state 143

    (56) condition -> condition RB EQUAL . calculate
    (66) calculate -> . calculate PLUS calculate
    (67) calculate -> . calculate MINUS calculate
    (68) calculate -> . MINUS calculate
    (69) calculate -> . calculate MUL calculate
    (70) calculate -> . calculate DIV calculate
    (71) calculate -> . INT
    (72) calculate -> . FLOAT
    (73) calculate -> . STRING
    (74) calculate -> . IDENTIFIER
    (75) calculate -> . IDENTIFIER LIST
    (76) calculate -> . LIST
    (77) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 74
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    STRING          shift and go to state 77
    IDENTIFIER      shift and go to state 71
    LIST            shift and go to state 82
    LSB             shift and go to state 78

    calculate                      shift and go to state 153

state 144

    (57) condition -> condition EQUAL calculate .
    (66) calculate -> calculate . PLUS calculate
    (67) calculate -> calculate . MINUS calculate
    (69) calculate -> calculate . MUL calculate
    (70) calculate -> calculate . DIV calculate

    RSB             reduce using rule 57 (condition -> condition EQUAL calculate .)
    LB              reduce using rule 57 (condition -> condition EQUAL calculate .)
    RB              reduce using rule 57 (condition -> condition EQUAL calculate .)
    EQUAL           reduce using rule 57 (condition -> condition EQUAL calculate .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    MUL             shift and go to state 104
    DIV             shift and go to state 105


state 145

    (38) function_head -> FUNCTION IDENTIFIER LSB empty RSB .

    LMB             reduce using rule 38 (function_head -> FUNCTION IDENTIFIER LSB empty RSB .)


state 146

    (39) function_head -> FUNCTION IDENTIFIER LSB parameter RSB .

    LMB             reduce using rule 39 (function_head -> FUNCTION IDENTIFIER LSB parameter RSB .)


state 147

    (29) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER . RSB

    RSB             shift and go to state 154


state 148

    (51) if_statement_2 -> if_statement_2 ELSE IF LSB condition . RSB LMB expression RMB
    (53) condition -> condition . LB calculate
    (54) condition -> condition . RB calculate
    (55) condition -> condition . LB EQUAL calculate
    (56) condition -> condition . RB EQUAL calculate
    (57) condition -> condition . EQUAL calculate

    RSB             shift and go to state 155
    LB              shift and go to state 119
    RB              shift and go to state 120
    EQUAL           shift and go to state 121


state 149

    (50) if_statement_2 -> ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 156


state 150

    (27) catch -> CATCH LSB IDENTIFIER RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone
    (13) expression -> . variable_declaration SEMI
    (14) expression -> . variable_value_change SEMI
    (15) expression -> . if_statement
    (16) expression -> . function
    (17) expression -> . function_call
    (18) expression -> . repeat
    (19) expression -> . for
    (20) expression -> . while
    (21) expression -> . use
    (22) expression -> . error_handling
    (23) expression -> . variable_alone
    (24) expression -> . empty
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (78) empty -> .
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    RMB             reduce using rule 78 (empty -> .)
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

  ! VAR             [ reduce using rule 78 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 78 (empty -> .) ]
  ! USE             [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 78 (empty -> .) ]
  ! REPEAT          [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! TRY             [ reduce using rule 78 (empty -> .) ]

    expression                     shift and go to state 157
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    empty                          shift and go to state 14
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 151

    (49) if_statement_1 -> IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

    RMB             shift and go to state 158
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

    variable_declaration           shift and go to state 30
    variable_value_change          shift and go to state 31
    if_statement                   shift and go to state 32
    function                       shift and go to state 33
    function_call                  shift and go to state 34
    repeat                         shift and go to state 35
    for                            shift and go to state 36
    while                          shift and go to state 37
    use                            shift and go to state 38
    error_handling                 shift and go to state 39
    variable_alone                 shift and go to state 40
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 152

    (55) condition -> condition LB EQUAL calculate .
    (66) calculate -> calculate . PLUS calculate
    (67) calculate -> calculate . MINUS calculate
    (69) calculate -> calculate . MUL calculate
    (70) calculate -> calculate . DIV calculate

    RSB             reduce using rule 55 (condition -> condition LB EQUAL calculate .)
    LB              reduce using rule 55 (condition -> condition LB EQUAL calculate .)
    RB              reduce using rule 55 (condition -> condition LB EQUAL calculate .)
    EQUAL           reduce using rule 55 (condition -> condition LB EQUAL calculate .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    MUL             shift and go to state 104
    DIV             shift and go to state 105


state 153

    (56) condition -> condition RB EQUAL calculate .
    (66) calculate -> calculate . PLUS calculate
    (67) calculate -> calculate . MINUS calculate
    (69) calculate -> calculate . MUL calculate
    (70) calculate -> calculate . DIV calculate

    RSB             reduce using rule 56 (condition -> condition RB EQUAL calculate .)
    LB              reduce using rule 56 (condition -> condition RB EQUAL calculate .)
    RB              reduce using rule 56 (condition -> condition RB EQUAL calculate .)
    EQUAL           reduce using rule 56 (condition -> condition RB EQUAL calculate .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    MUL             shift and go to state 104
    DIV             shift and go to state 105


state 154

    (29) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .

    LMB             reduce using rule 29 (for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .)


state 155

    (51) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 159


state 156

    (50) if_statement_2 -> ELSE IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone
    (13) expression -> . variable_declaration SEMI
    (14) expression -> . variable_value_change SEMI
    (15) expression -> . if_statement
    (16) expression -> . function
    (17) expression -> . function_call
    (18) expression -> . repeat
    (19) expression -> . for
    (20) expression -> . while
    (21) expression -> . use
    (22) expression -> . error_handling
    (23) expression -> . variable_alone
    (24) expression -> . empty
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (78) empty -> .
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    RMB             reduce using rule 78 (empty -> .)
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

  ! VAR             [ reduce using rule 78 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 78 (empty -> .) ]
  ! USE             [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 78 (empty -> .) ]
  ! REPEAT          [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! TRY             [ reduce using rule 78 (empty -> .) ]

    expression                     shift and go to state 160
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    empty                          shift and go to state 14
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 157

    (27) catch -> CATCH LSB IDENTIFIER RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

    RMB             shift and go to state 161
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

    variable_declaration           shift and go to state 30
    variable_value_change          shift and go to state 31
    if_statement                   shift and go to state 32
    function                       shift and go to state 33
    function_call                  shift and go to state 34
    repeat                         shift and go to state 35
    for                            shift and go to state 36
    while                          shift and go to state 37
    use                            shift and go to state 38
    error_handling                 shift and go to state 39
    variable_alone                 shift and go to state 40
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 158

    (49) if_statement_1 -> IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 49 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 49 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 49 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 49 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 49 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 49 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 49 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 49 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 49 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 49 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 49 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 49 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)


state 159

    (51) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone
    (13) expression -> . variable_declaration SEMI
    (14) expression -> . variable_value_change SEMI
    (15) expression -> . if_statement
    (16) expression -> . function
    (17) expression -> . function_call
    (18) expression -> . repeat
    (19) expression -> . for
    (20) expression -> . while
    (21) expression -> . use
    (22) expression -> . error_handling
    (23) expression -> . variable_alone
    (24) expression -> . empty
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (78) empty -> .
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    RMB             reduce using rule 78 (empty -> .)
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

  ! VAR             [ reduce using rule 78 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 78 (empty -> .) ]
  ! USE             [ reduce using rule 78 (empty -> .) ]
  ! IF              [ reduce using rule 78 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 78 (empty -> .) ]
  ! REPEAT          [ reduce using rule 78 (empty -> .) ]
  ! FOR             [ reduce using rule 78 (empty -> .) ]
  ! WHILE           [ reduce using rule 78 (empty -> .) ]
  ! TRY             [ reduce using rule 78 (empty -> .) ]

    expression                     shift and go to state 162
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    empty                          shift and go to state 14
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 160

    (50) if_statement_2 -> ELSE IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

    RMB             shift and go to state 163
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

    variable_declaration           shift and go to state 30
    variable_value_change          shift and go to state 31
    if_statement                   shift and go to state 32
    function                       shift and go to state 33
    function_call                  shift and go to state 34
    repeat                         shift and go to state 35
    for                            shift and go to state 36
    while                          shift and go to state 37
    use                            shift and go to state 38
    error_handling                 shift and go to state 39
    variable_alone                 shift and go to state 40
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 161

    (27) catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .

    VAR             reduce using rule 27 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 27 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    USE             reduce using rule 27 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IF              reduce using rule 27 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FUNCTION        reduce using rule 27 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    REPEAT          reduce using rule 27 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FOR             reduce using rule 27 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    WHILE           reduce using rule 27 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    TRY             reduce using rule 27 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    $end            reduce using rule 27 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    RMB             reduce using rule 27 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)


state 162

    (51) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone
    (63) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (64) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (65) variable_declaration -> . VAR IDENTIFIER
    (61) variable_value_change -> . IDENTIFIER EQUAL LIST
    (62) variable_value_change -> . IDENTIFIER EQUAL calculate
    (45) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (46) if_statement -> . if_statement_1 if_statement_2
    (47) if_statement -> . if_statement_1 if_statement_3
    (48) if_statement -> . if_statement_1
    (37) function -> . function_head function_body
    (41) function_call -> . IDENTIFIER LSB parameter RSB
    (34) repeat -> . repeat_head repeat_body
    (28) for -> . for_head for_body
    (31) while -> . while_head while_body
    (59) use -> . USE IDENTIFIER
    (25) error_handling -> . try catch
    (60) variable_alone -> . IDENTIFIER
    (49) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (38) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (39) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (35) repeat_head -> . REPEAT LSB calculate RSB
    (29) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (32) while_head -> . WHILE LSB condition RSB
    (26) try -> . TRY LMB expression RMB

    RMB             shift and go to state 164
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    USE             shift and go to state 22
    IF              shift and go to state 24
    FUNCTION        shift and go to state 25
    REPEAT          shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    TRY             shift and go to state 29

    variable_declaration           shift and go to state 30
    variable_value_change          shift and go to state 31
    if_statement                   shift and go to state 32
    function                       shift and go to state 33
    function_call                  shift and go to state 34
    repeat                         shift and go to state 35
    for                            shift and go to state 36
    while                          shift and go to state 37
    use                            shift and go to state 38
    error_handling                 shift and go to state 39
    variable_alone                 shift and go to state 40
    if_statement_1                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    try                            shift and go to state 23

state 163

    (50) if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 50 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 50 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 50 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 50 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 50 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 50 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 50 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 50 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 50 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 50 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 50 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 50 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)


state 164

    (51) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 51 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 51 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 51 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 51 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 51 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 51 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 51 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 51 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 51 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 51 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 51 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 51 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for USE in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 50 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 50 resolved as shift
WARNING: shift/reduce conflict for USE in state 50 resolved as shift
WARNING: shift/reduce conflict for IF in state 50 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 50 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 50 resolved as shift
WARNING: shift/reduce conflict for FOR in state 50 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 50 resolved as shift
WARNING: shift/reduce conflict for TRY in state 50 resolved as shift
WARNING: shift/reduce conflict for VAR in state 52 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 52 resolved as shift
WARNING: shift/reduce conflict for USE in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 52 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 52 resolved as shift
WARNING: shift/reduce conflict for FOR in state 52 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 52 resolved as shift
WARNING: shift/reduce conflict for TRY in state 52 resolved as shift
WARNING: shift/reduce conflict for VAR in state 54 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 54 resolved as shift
WARNING: shift/reduce conflict for USE in state 54 resolved as shift
WARNING: shift/reduce conflict for IF in state 54 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 54 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 54 resolved as shift
WARNING: shift/reduce conflict for FOR in state 54 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 54 resolved as shift
WARNING: shift/reduce conflict for TRY in state 54 resolved as shift
WARNING: shift/reduce conflict for VAR in state 56 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 56 resolved as shift
WARNING: shift/reduce conflict for USE in state 56 resolved as shift
WARNING: shift/reduce conflict for IF in state 56 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 56 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 56 resolved as shift
WARNING: shift/reduce conflict for FOR in state 56 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 56 resolved as shift
WARNING: shift/reduce conflict for TRY in state 56 resolved as shift
WARNING: shift/reduce conflict for VAR in state 65 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 65 resolved as shift
WARNING: shift/reduce conflict for USE in state 65 resolved as shift
WARNING: shift/reduce conflict for IF in state 65 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 65 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 65 resolved as shift
WARNING: shift/reduce conflict for FOR in state 65 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 65 resolved as shift
WARNING: shift/reduce conflict for TRY in state 65 resolved as shift
WARNING: shift/reduce conflict for VAR in state 86 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 86 resolved as shift
WARNING: shift/reduce conflict for USE in state 86 resolved as shift
WARNING: shift/reduce conflict for IF in state 86 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 86 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 86 resolved as shift
WARNING: shift/reduce conflict for FOR in state 86 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 86 resolved as shift
WARNING: shift/reduce conflict for TRY in state 86 resolved as shift
WARNING: shift/reduce conflict for RSB in state 122 resolved as shift
WARNING: shift/reduce conflict for VAR in state 139 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 139 resolved as shift
WARNING: shift/reduce conflict for USE in state 139 resolved as shift
WARNING: shift/reduce conflict for IF in state 139 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 139 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 139 resolved as shift
WARNING: shift/reduce conflict for FOR in state 139 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 139 resolved as shift
WARNING: shift/reduce conflict for TRY in state 139 resolved as shift
WARNING: shift/reduce conflict for VAR in state 150 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 150 resolved as shift
WARNING: shift/reduce conflict for USE in state 150 resolved as shift
WARNING: shift/reduce conflict for IF in state 150 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 150 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 150 resolved as shift
WARNING: shift/reduce conflict for FOR in state 150 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 150 resolved as shift
WARNING: shift/reduce conflict for TRY in state 150 resolved as shift
WARNING: shift/reduce conflict for VAR in state 156 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 156 resolved as shift
WARNING: shift/reduce conflict for USE in state 156 resolved as shift
WARNING: shift/reduce conflict for IF in state 156 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 156 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 156 resolved as shift
WARNING: shift/reduce conflict for FOR in state 156 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 156 resolved as shift
WARNING: shift/reduce conflict for TRY in state 156 resolved as shift
WARNING: shift/reduce conflict for VAR in state 159 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 159 resolved as shift
WARNING: shift/reduce conflict for USE in state 159 resolved as shift
WARNING: shift/reduce conflict for IF in state 159 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 159 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 159 resolved as shift
WARNING: shift/reduce conflict for FOR in state 159 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 159 resolved as shift
WARNING: shift/reduce conflict for TRY in state 159 resolved as shift
WARNING: reduce/reduce conflict in state 72 resolved using rule (variable_value_change -> IDENTIFIER EQUAL LIST)
WARNING: rejected rule (calculate -> LIST) in state 72
