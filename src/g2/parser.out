Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> root
Rule 1     root -> NEWLINE root NEWLINE
Rule 2     root -> head NEWLINE body NEWLINE
Rule 3     root -> head elements NEWLINE
Rule 4     root -> head NEWLINE
Rule 5     root -> NEWLINE root
Rule 6     root -> head NEWLINE body
Rule 7     root -> head elements
Rule 8     root -> head
Rule 9     body -> TAB root
Rule 10    body -> TAB elements
Rule 11    elements -> elements IDENTIFIER
Rule 12    elements -> elements EQUAL
Rule 13    elements -> elements OTHER
Rule 14    elements -> IDENTIFIER
Rule 15    elements -> EQUAL
Rule 16    elements -> OTHER
Rule 17    head -> IDENTIFIER attr COLON
Rule 18    head -> IDENTIFIER empty COLON
Rule 19    attr -> attr_equal
Rule 20    attr -> empty
Rule 21    attr_equal -> IDENTIFIER EQUAL SQ other SQ
Rule 22    attr_equal -> IDENTIFIER EQUAL DQ other DQ
Rule 23    other -> other EQUAL
Rule 24    other -> other COMMA
Rule 25    other -> other COLON
Rule 26    other -> other IDENTIFIER
Rule 27    other -> other OTHER
Rule 28    other -> EQUAL
Rule 29    other -> COMMA
Rule 30    other -> COLON
Rule 31    other -> IDENTIFIER
Rule 32    other -> OTHER
Rule 33    empty -> <empty>

Terminals, with rules where they appear

COLON                : 17 18 25 30
COMMA                : 24 29
DQ                   : 22 22
EQUAL                : 12 15 21 22 23 28
IDENTIFIER           : 11 14 17 18 21 22 26 31
NEWLINE              : 1 1 2 2 3 4 5 6
OTHER                : 13 16 27 32
SQ                   : 21 21
TAB                  : 9 10
error                : 

Nonterminals, with rules where they appear

attr                 : 17
attr_equal           : 19
body                 : 2 6
elements             : 3 7 10 11 12 13
empty                : 18 20
head                 : 2 3 4 6 7 8
other                : 21 22 23 24 25 26 27
root                 : 1 5 9 0

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . NEWLINE root NEWLINE
    (2) root -> . head NEWLINE body NEWLINE
    (3) root -> . head elements NEWLINE
    (4) root -> . head NEWLINE
    (5) root -> . NEWLINE root
    (6) root -> . head NEWLINE body
    (7) root -> . head elements
    (8) root -> . head
    (17) head -> . IDENTIFIER attr COLON
    (18) head -> . IDENTIFIER empty COLON

    NEWLINE         shift and go to state 2
    IDENTIFIER      shift and go to state 4

    root                           shift and go to state 1
    head                           shift and go to state 3

state 1

    (0) S' -> root .



state 2

    (1) root -> NEWLINE . root NEWLINE
    (5) root -> NEWLINE . root
    (1) root -> . NEWLINE root NEWLINE
    (2) root -> . head NEWLINE body NEWLINE
    (3) root -> . head elements NEWLINE
    (4) root -> . head NEWLINE
    (5) root -> . NEWLINE root
    (6) root -> . head NEWLINE body
    (7) root -> . head elements
    (8) root -> . head
    (17) head -> . IDENTIFIER attr COLON
    (18) head -> . IDENTIFIER empty COLON

    NEWLINE         shift and go to state 2
    IDENTIFIER      shift and go to state 4

    root                           shift and go to state 5
    head                           shift and go to state 3

state 3

    (2) root -> head . NEWLINE body NEWLINE
    (3) root -> head . elements NEWLINE
    (4) root -> head . NEWLINE
    (6) root -> head . NEWLINE body
    (7) root -> head . elements
    (8) root -> head .
    (11) elements -> . elements IDENTIFIER
    (12) elements -> . elements EQUAL
    (13) elements -> . elements OTHER
    (14) elements -> . IDENTIFIER
    (15) elements -> . EQUAL
    (16) elements -> . OTHER

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 6
    $end            reduce using rule 8 (root -> head .)
    IDENTIFIER      shift and go to state 8
    EQUAL           shift and go to state 9
    OTHER           shift and go to state 10

  ! NEWLINE         [ reduce using rule 8 (root -> head .) ]

    elements                       shift and go to state 7

state 4

    (17) head -> IDENTIFIER . attr COLON
    (18) head -> IDENTIFIER . empty COLON
    (19) attr -> . attr_equal
    (20) attr -> . empty
    (33) empty -> .
    (21) attr_equal -> . IDENTIFIER EQUAL SQ other SQ
    (22) attr_equal -> . IDENTIFIER EQUAL DQ other DQ

    COLON           reduce using rule 33 (empty -> .)
    IDENTIFIER      shift and go to state 11

    attr                           shift and go to state 12
    empty                          shift and go to state 13
    attr_equal                     shift and go to state 14

state 5

    (1) root -> NEWLINE root . NEWLINE
    (5) root -> NEWLINE root .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 15
    $end            reduce using rule 5 (root -> NEWLINE root .)

  ! NEWLINE         [ reduce using rule 5 (root -> NEWLINE root .) ]


state 6

    (2) root -> head NEWLINE . body NEWLINE
    (4) root -> head NEWLINE .
    (6) root -> head NEWLINE . body
    (9) body -> . TAB root
    (10) body -> . TAB elements

    $end            reduce using rule 4 (root -> head NEWLINE .)
    NEWLINE         reduce using rule 4 (root -> head NEWLINE .)
    TAB             shift and go to state 17

    body                           shift and go to state 16

state 7

    (3) root -> head elements . NEWLINE
    (7) root -> head elements .
    (11) elements -> elements . IDENTIFIER
    (12) elements -> elements . EQUAL
    (13) elements -> elements . OTHER

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    $end            reduce using rule 7 (root -> head elements .)
    IDENTIFIER      shift and go to state 19
    EQUAL           shift and go to state 20
    OTHER           shift and go to state 21

  ! NEWLINE         [ reduce using rule 7 (root -> head elements .) ]


state 8

    (14) elements -> IDENTIFIER .

    NEWLINE         reduce using rule 14 (elements -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 14 (elements -> IDENTIFIER .)
    EQUAL           reduce using rule 14 (elements -> IDENTIFIER .)
    OTHER           reduce using rule 14 (elements -> IDENTIFIER .)
    $end            reduce using rule 14 (elements -> IDENTIFIER .)


state 9

    (15) elements -> EQUAL .

    NEWLINE         reduce using rule 15 (elements -> EQUAL .)
    IDENTIFIER      reduce using rule 15 (elements -> EQUAL .)
    EQUAL           reduce using rule 15 (elements -> EQUAL .)
    OTHER           reduce using rule 15 (elements -> EQUAL .)
    $end            reduce using rule 15 (elements -> EQUAL .)


state 10

    (16) elements -> OTHER .

    NEWLINE         reduce using rule 16 (elements -> OTHER .)
    IDENTIFIER      reduce using rule 16 (elements -> OTHER .)
    EQUAL           reduce using rule 16 (elements -> OTHER .)
    OTHER           reduce using rule 16 (elements -> OTHER .)
    $end            reduce using rule 16 (elements -> OTHER .)


state 11

    (21) attr_equal -> IDENTIFIER . EQUAL SQ other SQ
    (22) attr_equal -> IDENTIFIER . EQUAL DQ other DQ

    EQUAL           shift and go to state 22


state 12

    (17) head -> IDENTIFIER attr . COLON

    COLON           shift and go to state 23


state 13

    (18) head -> IDENTIFIER empty . COLON
    (20) attr -> empty .

  ! shift/reduce conflict for COLON resolved as shift
    COLON           shift and go to state 24

  ! COLON           [ reduce using rule 20 (attr -> empty .) ]


state 14

    (19) attr -> attr_equal .

    COLON           reduce using rule 19 (attr -> attr_equal .)


state 15

    (1) root -> NEWLINE root NEWLINE .

    $end            reduce using rule 1 (root -> NEWLINE root NEWLINE .)
    NEWLINE         reduce using rule 1 (root -> NEWLINE root NEWLINE .)


state 16

    (2) root -> head NEWLINE body . NEWLINE
    (6) root -> head NEWLINE body .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 25
    $end            reduce using rule 6 (root -> head NEWLINE body .)

  ! NEWLINE         [ reduce using rule 6 (root -> head NEWLINE body .) ]


state 17

    (9) body -> TAB . root
    (10) body -> TAB . elements
    (1) root -> . NEWLINE root NEWLINE
    (2) root -> . head NEWLINE body NEWLINE
    (3) root -> . head elements NEWLINE
    (4) root -> . head NEWLINE
    (5) root -> . NEWLINE root
    (6) root -> . head NEWLINE body
    (7) root -> . head elements
    (8) root -> . head
    (11) elements -> . elements IDENTIFIER
    (12) elements -> . elements EQUAL
    (13) elements -> . elements OTHER
    (14) elements -> . IDENTIFIER
    (15) elements -> . EQUAL
    (16) elements -> . OTHER
    (17) head -> . IDENTIFIER attr COLON
    (18) head -> . IDENTIFIER empty COLON

    NEWLINE         shift and go to state 2
    IDENTIFIER      shift and go to state 28
    EQUAL           shift and go to state 9
    OTHER           shift and go to state 10

    root                           shift and go to state 26
    elements                       shift and go to state 27
    head                           shift and go to state 3

state 18

    (3) root -> head elements NEWLINE .

    $end            reduce using rule 3 (root -> head elements NEWLINE .)
    NEWLINE         reduce using rule 3 (root -> head elements NEWLINE .)


state 19

    (11) elements -> elements IDENTIFIER .

    NEWLINE         reduce using rule 11 (elements -> elements IDENTIFIER .)
    IDENTIFIER      reduce using rule 11 (elements -> elements IDENTIFIER .)
    EQUAL           reduce using rule 11 (elements -> elements IDENTIFIER .)
    OTHER           reduce using rule 11 (elements -> elements IDENTIFIER .)
    $end            reduce using rule 11 (elements -> elements IDENTIFIER .)


state 20

    (12) elements -> elements EQUAL .

    NEWLINE         reduce using rule 12 (elements -> elements EQUAL .)
    IDENTIFIER      reduce using rule 12 (elements -> elements EQUAL .)
    EQUAL           reduce using rule 12 (elements -> elements EQUAL .)
    OTHER           reduce using rule 12 (elements -> elements EQUAL .)
    $end            reduce using rule 12 (elements -> elements EQUAL .)


state 21

    (13) elements -> elements OTHER .

    NEWLINE         reduce using rule 13 (elements -> elements OTHER .)
    IDENTIFIER      reduce using rule 13 (elements -> elements OTHER .)
    EQUAL           reduce using rule 13 (elements -> elements OTHER .)
    OTHER           reduce using rule 13 (elements -> elements OTHER .)
    $end            reduce using rule 13 (elements -> elements OTHER .)


state 22

    (21) attr_equal -> IDENTIFIER EQUAL . SQ other SQ
    (22) attr_equal -> IDENTIFIER EQUAL . DQ other DQ

    SQ              shift and go to state 29
    DQ              shift and go to state 30


state 23

    (17) head -> IDENTIFIER attr COLON .

    NEWLINE         reduce using rule 17 (head -> IDENTIFIER attr COLON .)
    IDENTIFIER      reduce using rule 17 (head -> IDENTIFIER attr COLON .)
    EQUAL           reduce using rule 17 (head -> IDENTIFIER attr COLON .)
    OTHER           reduce using rule 17 (head -> IDENTIFIER attr COLON .)
    $end            reduce using rule 17 (head -> IDENTIFIER attr COLON .)


state 24

    (18) head -> IDENTIFIER empty COLON .

    NEWLINE         reduce using rule 18 (head -> IDENTIFIER empty COLON .)
    IDENTIFIER      reduce using rule 18 (head -> IDENTIFIER empty COLON .)
    EQUAL           reduce using rule 18 (head -> IDENTIFIER empty COLON .)
    OTHER           reduce using rule 18 (head -> IDENTIFIER empty COLON .)
    $end            reduce using rule 18 (head -> IDENTIFIER empty COLON .)


state 25

    (2) root -> head NEWLINE body NEWLINE .

    $end            reduce using rule 2 (root -> head NEWLINE body NEWLINE .)
    NEWLINE         reduce using rule 2 (root -> head NEWLINE body NEWLINE .)


state 26

    (9) body -> TAB root .

    NEWLINE         reduce using rule 9 (body -> TAB root .)
    $end            reduce using rule 9 (body -> TAB root .)


state 27

    (10) body -> TAB elements .
    (11) elements -> elements . IDENTIFIER
    (12) elements -> elements . EQUAL
    (13) elements -> elements . OTHER

    NEWLINE         reduce using rule 10 (body -> TAB elements .)
    $end            reduce using rule 10 (body -> TAB elements .)
    IDENTIFIER      shift and go to state 19
    EQUAL           shift and go to state 20
    OTHER           shift and go to state 21


state 28

    (14) elements -> IDENTIFIER .
    (17) head -> IDENTIFIER . attr COLON
    (18) head -> IDENTIFIER . empty COLON
    (19) attr -> . attr_equal
    (20) attr -> . empty
    (33) empty -> .
    (21) attr_equal -> . IDENTIFIER EQUAL SQ other SQ
    (22) attr_equal -> . IDENTIFIER EQUAL DQ other DQ

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    EQUAL           reduce using rule 14 (elements -> IDENTIFIER .)
    OTHER           reduce using rule 14 (elements -> IDENTIFIER .)
    NEWLINE         reduce using rule 14 (elements -> IDENTIFIER .)
    $end            reduce using rule 14 (elements -> IDENTIFIER .)
    COLON           reduce using rule 33 (empty -> .)
    IDENTIFIER      shift and go to state 11

  ! IDENTIFIER      [ reduce using rule 14 (elements -> IDENTIFIER .) ]

    attr                           shift and go to state 12
    empty                          shift and go to state 13
    attr_equal                     shift and go to state 14

state 29

    (21) attr_equal -> IDENTIFIER EQUAL SQ . other SQ
    (23) other -> . other EQUAL
    (24) other -> . other COMMA
    (25) other -> . other COLON
    (26) other -> . other IDENTIFIER
    (27) other -> . other OTHER
    (28) other -> . EQUAL
    (29) other -> . COMMA
    (30) other -> . COLON
    (31) other -> . IDENTIFIER
    (32) other -> . OTHER

    EQUAL           shift and go to state 32
    COMMA           shift and go to state 34
    COLON           shift and go to state 35
    IDENTIFIER      shift and go to state 31
    OTHER           shift and go to state 36

    other                          shift and go to state 33

state 30

    (22) attr_equal -> IDENTIFIER EQUAL DQ . other DQ
    (23) other -> . other EQUAL
    (24) other -> . other COMMA
    (25) other -> . other COLON
    (26) other -> . other IDENTIFIER
    (27) other -> . other OTHER
    (28) other -> . EQUAL
    (29) other -> . COMMA
    (30) other -> . COLON
    (31) other -> . IDENTIFIER
    (32) other -> . OTHER

    EQUAL           shift and go to state 32
    COMMA           shift and go to state 34
    COLON           shift and go to state 35
    IDENTIFIER      shift and go to state 31
    OTHER           shift and go to state 36

    other                          shift and go to state 37

state 31

    (31) other -> IDENTIFIER .

    SQ              reduce using rule 31 (other -> IDENTIFIER .)
    EQUAL           reduce using rule 31 (other -> IDENTIFIER .)
    COMMA           reduce using rule 31 (other -> IDENTIFIER .)
    COLON           reduce using rule 31 (other -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 31 (other -> IDENTIFIER .)
    OTHER           reduce using rule 31 (other -> IDENTIFIER .)
    DQ              reduce using rule 31 (other -> IDENTIFIER .)


state 32

    (28) other -> EQUAL .

    SQ              reduce using rule 28 (other -> EQUAL .)
    EQUAL           reduce using rule 28 (other -> EQUAL .)
    COMMA           reduce using rule 28 (other -> EQUAL .)
    COLON           reduce using rule 28 (other -> EQUAL .)
    IDENTIFIER      reduce using rule 28 (other -> EQUAL .)
    OTHER           reduce using rule 28 (other -> EQUAL .)
    DQ              reduce using rule 28 (other -> EQUAL .)


state 33

    (21) attr_equal -> IDENTIFIER EQUAL SQ other . SQ
    (23) other -> other . EQUAL
    (24) other -> other . COMMA
    (25) other -> other . COLON
    (26) other -> other . IDENTIFIER
    (27) other -> other . OTHER

    SQ              shift and go to state 40
    EQUAL           shift and go to state 39
    COMMA           shift and go to state 41
    COLON           shift and go to state 42
    IDENTIFIER      shift and go to state 38
    OTHER           shift and go to state 43


state 34

    (29) other -> COMMA .

    SQ              reduce using rule 29 (other -> COMMA .)
    EQUAL           reduce using rule 29 (other -> COMMA .)
    COMMA           reduce using rule 29 (other -> COMMA .)
    COLON           reduce using rule 29 (other -> COMMA .)
    IDENTIFIER      reduce using rule 29 (other -> COMMA .)
    OTHER           reduce using rule 29 (other -> COMMA .)
    DQ              reduce using rule 29 (other -> COMMA .)


state 35

    (30) other -> COLON .

    SQ              reduce using rule 30 (other -> COLON .)
    EQUAL           reduce using rule 30 (other -> COLON .)
    COMMA           reduce using rule 30 (other -> COLON .)
    COLON           reduce using rule 30 (other -> COLON .)
    IDENTIFIER      reduce using rule 30 (other -> COLON .)
    OTHER           reduce using rule 30 (other -> COLON .)
    DQ              reduce using rule 30 (other -> COLON .)


state 36

    (32) other -> OTHER .

    SQ              reduce using rule 32 (other -> OTHER .)
    EQUAL           reduce using rule 32 (other -> OTHER .)
    COMMA           reduce using rule 32 (other -> OTHER .)
    COLON           reduce using rule 32 (other -> OTHER .)
    IDENTIFIER      reduce using rule 32 (other -> OTHER .)
    OTHER           reduce using rule 32 (other -> OTHER .)
    DQ              reduce using rule 32 (other -> OTHER .)


state 37

    (22) attr_equal -> IDENTIFIER EQUAL DQ other . DQ
    (23) other -> other . EQUAL
    (24) other -> other . COMMA
    (25) other -> other . COLON
    (26) other -> other . IDENTIFIER
    (27) other -> other . OTHER

    DQ              shift and go to state 44
    EQUAL           shift and go to state 39
    COMMA           shift and go to state 41
    COLON           shift and go to state 42
    IDENTIFIER      shift and go to state 38
    OTHER           shift and go to state 43


state 38

    (26) other -> other IDENTIFIER .

    SQ              reduce using rule 26 (other -> other IDENTIFIER .)
    EQUAL           reduce using rule 26 (other -> other IDENTIFIER .)
    COMMA           reduce using rule 26 (other -> other IDENTIFIER .)
    COLON           reduce using rule 26 (other -> other IDENTIFIER .)
    IDENTIFIER      reduce using rule 26 (other -> other IDENTIFIER .)
    OTHER           reduce using rule 26 (other -> other IDENTIFIER .)
    DQ              reduce using rule 26 (other -> other IDENTIFIER .)


state 39

    (23) other -> other EQUAL .

    SQ              reduce using rule 23 (other -> other EQUAL .)
    EQUAL           reduce using rule 23 (other -> other EQUAL .)
    COMMA           reduce using rule 23 (other -> other EQUAL .)
    COLON           reduce using rule 23 (other -> other EQUAL .)
    IDENTIFIER      reduce using rule 23 (other -> other EQUAL .)
    OTHER           reduce using rule 23 (other -> other EQUAL .)
    DQ              reduce using rule 23 (other -> other EQUAL .)


state 40

    (21) attr_equal -> IDENTIFIER EQUAL SQ other SQ .

    COLON           reduce using rule 21 (attr_equal -> IDENTIFIER EQUAL SQ other SQ .)


state 41

    (24) other -> other COMMA .

    SQ              reduce using rule 24 (other -> other COMMA .)
    EQUAL           reduce using rule 24 (other -> other COMMA .)
    COMMA           reduce using rule 24 (other -> other COMMA .)
    COLON           reduce using rule 24 (other -> other COMMA .)
    IDENTIFIER      reduce using rule 24 (other -> other COMMA .)
    OTHER           reduce using rule 24 (other -> other COMMA .)
    DQ              reduce using rule 24 (other -> other COMMA .)


state 42

    (25) other -> other COLON .

    SQ              reduce using rule 25 (other -> other COLON .)
    EQUAL           reduce using rule 25 (other -> other COLON .)
    COMMA           reduce using rule 25 (other -> other COLON .)
    COLON           reduce using rule 25 (other -> other COLON .)
    IDENTIFIER      reduce using rule 25 (other -> other COLON .)
    OTHER           reduce using rule 25 (other -> other COLON .)
    DQ              reduce using rule 25 (other -> other COLON .)


state 43

    (27) other -> other OTHER .

    SQ              reduce using rule 27 (other -> other OTHER .)
    EQUAL           reduce using rule 27 (other -> other OTHER .)
    COMMA           reduce using rule 27 (other -> other OTHER .)
    COLON           reduce using rule 27 (other -> other OTHER .)
    IDENTIFIER      reduce using rule 27 (other -> other OTHER .)
    OTHER           reduce using rule 27 (other -> other OTHER .)
    DQ              reduce using rule 27 (other -> other OTHER .)


state 44

    (22) attr_equal -> IDENTIFIER EQUAL DQ other DQ .

    COLON           reduce using rule 22 (attr_equal -> IDENTIFIER EQUAL DQ other DQ .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 3 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 5 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 7 resolved as shift
WARNING: shift/reduce conflict for COLON in state 13 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 16 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 28 resolved as shift
