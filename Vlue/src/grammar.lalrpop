use std::str::FromStr;
use crate::ast::{CompOpCode, OpCode, Expr};

grammar;

pub Program: Box<Expr> = {
    Comparison,
};

Expr: Box<Expr> = {
    <l:Expr> <o:ExprOp> <r:Factor> => Box::new(Expr::Op(l, o, r)),
    Factor,
};

Factor: Box<Expr> = {
    <l:Factor> <o:FactorOp> <r:Term> => Box::new(Expr::Op(l, o, r)),
    Term,
};


Comparison: Box<Expr> = {
    <l:Comparison> <o:CompOp> <r:Expr> => {
        Box::new(Expr::CompOp(l, o, r))
    },
    Expr,
};

Term: Box<Expr> = {
    <n:Num> => Box::new(Expr::Number(n)),
    "(" <e:Expr> ")" => e,
};

ExprOp: OpCode = {
    "+" => OpCode::Add,
    "-" => OpCode::Sub,
};

FactorOp: OpCode = {
    "*" => OpCode::Mul,
    "/" => OpCode::Div,
};


CompOp: CompOpCode = {
    "==" => CompOpCode::Eq,
    "!=" => CompOpCode::NotEq,
    ">" => CompOpCode::Gt,
    "<" => CompOpCode::Lt,
    ">=" => CompOpCode::GtE,
    "<=" => CompOpCode::LtE,
};

Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();

WhiteSpace: () = {
    <w:r"\s*"> => {}
};

Comment: () = {
    <c:r"//[^\n\r]*[\n\r]*"> => {},
    <c:r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/"> => {},
};