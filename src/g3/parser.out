Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE
    TAB

Grammar

Rule 0     S' -> expression
Rule 1     expression -> variable_declaration
Rule 2     variable_declaration -> VAR IDENTIFIER EQUAL INT
Rule 3     variable_declaration -> VAR IDENTIFIER

Terminals, with rules where they appear

EQUAL                : 2
IDENTIFIER           : 2 3
INT                  : 2
NEWLINE              : 
TAB                  : 
VAR                  : 2 3
error                : 

Nonterminals, with rules where they appear

expression           : 0
variable_declaration : 1

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . variable_declaration
    (2) variable_declaration -> . VAR IDENTIFIER EQUAL INT
    (3) variable_declaration -> . VAR IDENTIFIER

    VAR             shift and go to state 3

    expression                     shift and go to state 1
    variable_declaration           shift and go to state 2

state 1

    (0) S' -> expression .



state 2

    (1) expression -> variable_declaration .

    $end            reduce using rule 1 (expression -> variable_declaration .)


state 3

    (2) variable_declaration -> VAR . IDENTIFIER EQUAL INT
    (3) variable_declaration -> VAR . IDENTIFIER

    IDENTIFIER      shift and go to state 4


state 4

    (2) variable_declaration -> VAR IDENTIFIER . EQUAL INT
    (3) variable_declaration -> VAR IDENTIFIER .

    EQUAL           shift and go to state 5
    $end            reduce using rule 3 (variable_declaration -> VAR IDENTIFIER .)


state 5

    (2) variable_declaration -> VAR IDENTIFIER EQUAL . INT

    INT             shift and go to state 6


state 6

    (2) variable_declaration -> VAR IDENTIFIER EQUAL INT .

    $end            reduce using rule 2 (variable_declaration -> VAR IDENTIFIER EQUAL INT .)

