Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> root
Rule 1     root -> head NEWLINE body
Rule 2     root -> head elements
Rule 3     root -> head
Rule 4     body -> TAB root
Rule 5     body -> TAB elements
Rule 6     elements -> elements IDENTIFIER
Rule 7     elements -> elements EQUAL
Rule 8     elements -> elements OTHER
Rule 9     elements -> IDENTIFIER
Rule 10    elements -> EQUAL
Rule 11    elements -> OTHER
Rule 12    head -> IDENTIFIER attr COLON
Rule 13    head -> IDENTIFIER empty COLON
Rule 14    attr -> attr_equal
Rule 15    attr -> empty
Rule 16    attr_equal -> IDENTIFIER EQUAL SQ other SQ
Rule 17    attr_equal -> IDENTIFIER EQUAL DQ other DQ
Rule 18    other -> other EQUAL
Rule 19    other -> other COMMA
Rule 20    other -> other COLON
Rule 21    other -> other IDENTIFIER
Rule 22    other -> other OTHER
Rule 23    other -> EQUAL
Rule 24    other -> COMMA
Rule 25    other -> COLON
Rule 26    other -> IDENTIFIER
Rule 27    other -> OTHER
Rule 28    empty -> <empty>

Terminals, with rules where they appear

COLON                : 12 13 20 25
COMMA                : 19 24
DQ                   : 17 17
EQUAL                : 7 10 16 17 18 23
IDENTIFIER           : 6 9 12 13 16 17 21 26
NEWLINE              : 1
OTHER                : 8 11 22 27
SQ                   : 16 16
TAB                  : 4 5
error                : 

Nonterminals, with rules where they appear

attr                 : 12
attr_equal           : 14
body                 : 1
elements             : 2 5 6 7 8
empty                : 13 15
head                 : 1 2 3
other                : 16 17 18 19 20 21 22
root                 : 4 0

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . head NEWLINE body
    (2) root -> . head elements
    (3) root -> . head
    (12) head -> . IDENTIFIER attr COLON
    (13) head -> . IDENTIFIER empty COLON

    IDENTIFIER      shift and go to state 3

    root                           shift and go to state 1
    head                           shift and go to state 2

state 1

    (0) S' -> root .



state 2

    (1) root -> head . NEWLINE body
    (2) root -> head . elements
    (3) root -> head .
    (6) elements -> . elements IDENTIFIER
    (7) elements -> . elements EQUAL
    (8) elements -> . elements OTHER
    (9) elements -> . IDENTIFIER
    (10) elements -> . EQUAL
    (11) elements -> . OTHER

    NEWLINE         shift and go to state 4
    $end            reduce using rule 3 (root -> head .)
    IDENTIFIER      shift and go to state 6
    EQUAL           shift and go to state 7
    OTHER           shift and go to state 8

    elements                       shift and go to state 5

state 3

    (12) head -> IDENTIFIER . attr COLON
    (13) head -> IDENTIFIER . empty COLON
    (14) attr -> . attr_equal
    (15) attr -> . empty
    (28) empty -> .
    (16) attr_equal -> . IDENTIFIER EQUAL SQ other SQ
    (17) attr_equal -> . IDENTIFIER EQUAL DQ other DQ

    COLON           reduce using rule 28 (empty -> .)
    IDENTIFIER      shift and go to state 9

    attr                           shift and go to state 10
    empty                          shift and go to state 11
    attr_equal                     shift and go to state 12

state 4

    (1) root -> head NEWLINE . body
    (4) body -> . TAB root
    (5) body -> . TAB elements

    TAB             shift and go to state 14

    body                           shift and go to state 13

state 5

    (2) root -> head elements .
    (6) elements -> elements . IDENTIFIER
    (7) elements -> elements . EQUAL
    (8) elements -> elements . OTHER

    $end            reduce using rule 2 (root -> head elements .)
    IDENTIFIER      shift and go to state 15
    EQUAL           shift and go to state 16
    OTHER           shift and go to state 17


state 6

    (9) elements -> IDENTIFIER .

    IDENTIFIER      reduce using rule 9 (elements -> IDENTIFIER .)
    EQUAL           reduce using rule 9 (elements -> IDENTIFIER .)
    OTHER           reduce using rule 9 (elements -> IDENTIFIER .)
    $end            reduce using rule 9 (elements -> IDENTIFIER .)


state 7

    (10) elements -> EQUAL .

    IDENTIFIER      reduce using rule 10 (elements -> EQUAL .)
    EQUAL           reduce using rule 10 (elements -> EQUAL .)
    OTHER           reduce using rule 10 (elements -> EQUAL .)
    $end            reduce using rule 10 (elements -> EQUAL .)


state 8

    (11) elements -> OTHER .

    IDENTIFIER      reduce using rule 11 (elements -> OTHER .)
    EQUAL           reduce using rule 11 (elements -> OTHER .)
    OTHER           reduce using rule 11 (elements -> OTHER .)
    $end            reduce using rule 11 (elements -> OTHER .)


state 9

    (16) attr_equal -> IDENTIFIER . EQUAL SQ other SQ
    (17) attr_equal -> IDENTIFIER . EQUAL DQ other DQ

    EQUAL           shift and go to state 18


state 10

    (12) head -> IDENTIFIER attr . COLON

    COLON           shift and go to state 19


state 11

    (13) head -> IDENTIFIER empty . COLON
    (15) attr -> empty .

  ! shift/reduce conflict for COLON resolved as shift
    COLON           shift and go to state 20

  ! COLON           [ reduce using rule 15 (attr -> empty .) ]


state 12

    (14) attr -> attr_equal .

    COLON           reduce using rule 14 (attr -> attr_equal .)


state 13

    (1) root -> head NEWLINE body .

    $end            reduce using rule 1 (root -> head NEWLINE body .)


state 14

    (4) body -> TAB . root
    (5) body -> TAB . elements
    (1) root -> . head NEWLINE body
    (2) root -> . head elements
    (3) root -> . head
    (6) elements -> . elements IDENTIFIER
    (7) elements -> . elements EQUAL
    (8) elements -> . elements OTHER
    (9) elements -> . IDENTIFIER
    (10) elements -> . EQUAL
    (11) elements -> . OTHER
    (12) head -> . IDENTIFIER attr COLON
    (13) head -> . IDENTIFIER empty COLON

    IDENTIFIER      shift and go to state 23
    EQUAL           shift and go to state 7
    OTHER           shift and go to state 8

    root                           shift and go to state 21
    elements                       shift and go to state 22
    head                           shift and go to state 2

state 15

    (6) elements -> elements IDENTIFIER .

    IDENTIFIER      reduce using rule 6 (elements -> elements IDENTIFIER .)
    EQUAL           reduce using rule 6 (elements -> elements IDENTIFIER .)
    OTHER           reduce using rule 6 (elements -> elements IDENTIFIER .)
    $end            reduce using rule 6 (elements -> elements IDENTIFIER .)


state 16

    (7) elements -> elements EQUAL .

    IDENTIFIER      reduce using rule 7 (elements -> elements EQUAL .)
    EQUAL           reduce using rule 7 (elements -> elements EQUAL .)
    OTHER           reduce using rule 7 (elements -> elements EQUAL .)
    $end            reduce using rule 7 (elements -> elements EQUAL .)


state 17

    (8) elements -> elements OTHER .

    IDENTIFIER      reduce using rule 8 (elements -> elements OTHER .)
    EQUAL           reduce using rule 8 (elements -> elements OTHER .)
    OTHER           reduce using rule 8 (elements -> elements OTHER .)
    $end            reduce using rule 8 (elements -> elements OTHER .)


state 18

    (16) attr_equal -> IDENTIFIER EQUAL . SQ other SQ
    (17) attr_equal -> IDENTIFIER EQUAL . DQ other DQ

    SQ              shift and go to state 24
    DQ              shift and go to state 25


state 19

    (12) head -> IDENTIFIER attr COLON .

    NEWLINE         reduce using rule 12 (head -> IDENTIFIER attr COLON .)
    IDENTIFIER      reduce using rule 12 (head -> IDENTIFIER attr COLON .)
    EQUAL           reduce using rule 12 (head -> IDENTIFIER attr COLON .)
    OTHER           reduce using rule 12 (head -> IDENTIFIER attr COLON .)
    $end            reduce using rule 12 (head -> IDENTIFIER attr COLON .)


state 20

    (13) head -> IDENTIFIER empty COLON .

    NEWLINE         reduce using rule 13 (head -> IDENTIFIER empty COLON .)
    IDENTIFIER      reduce using rule 13 (head -> IDENTIFIER empty COLON .)
    EQUAL           reduce using rule 13 (head -> IDENTIFIER empty COLON .)
    OTHER           reduce using rule 13 (head -> IDENTIFIER empty COLON .)
    $end            reduce using rule 13 (head -> IDENTIFIER empty COLON .)


state 21

    (4) body -> TAB root .

    $end            reduce using rule 4 (body -> TAB root .)


state 22

    (5) body -> TAB elements .
    (6) elements -> elements . IDENTIFIER
    (7) elements -> elements . EQUAL
    (8) elements -> elements . OTHER

    $end            reduce using rule 5 (body -> TAB elements .)
    IDENTIFIER      shift and go to state 15
    EQUAL           shift and go to state 16
    OTHER           shift and go to state 17


state 23

    (9) elements -> IDENTIFIER .
    (12) head -> IDENTIFIER . attr COLON
    (13) head -> IDENTIFIER . empty COLON
    (14) attr -> . attr_equal
    (15) attr -> . empty
    (28) empty -> .
    (16) attr_equal -> . IDENTIFIER EQUAL SQ other SQ
    (17) attr_equal -> . IDENTIFIER EQUAL DQ other DQ

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    EQUAL           reduce using rule 9 (elements -> IDENTIFIER .)
    OTHER           reduce using rule 9 (elements -> IDENTIFIER .)
    $end            reduce using rule 9 (elements -> IDENTIFIER .)
    COLON           reduce using rule 28 (empty -> .)
    IDENTIFIER      shift and go to state 9

  ! IDENTIFIER      [ reduce using rule 9 (elements -> IDENTIFIER .) ]

    attr                           shift and go to state 10
    empty                          shift and go to state 11
    attr_equal                     shift and go to state 12

state 24

    (16) attr_equal -> IDENTIFIER EQUAL SQ . other SQ
    (18) other -> . other EQUAL
    (19) other -> . other COMMA
    (20) other -> . other COLON
    (21) other -> . other IDENTIFIER
    (22) other -> . other OTHER
    (23) other -> . EQUAL
    (24) other -> . COMMA
    (25) other -> . COLON
    (26) other -> . IDENTIFIER
    (27) other -> . OTHER

    EQUAL           shift and go to state 27
    COMMA           shift and go to state 29
    COLON           shift and go to state 30
    IDENTIFIER      shift and go to state 26
    OTHER           shift and go to state 31

    other                          shift and go to state 28

state 25

    (17) attr_equal -> IDENTIFIER EQUAL DQ . other DQ
    (18) other -> . other EQUAL
    (19) other -> . other COMMA
    (20) other -> . other COLON
    (21) other -> . other IDENTIFIER
    (22) other -> . other OTHER
    (23) other -> . EQUAL
    (24) other -> . COMMA
    (25) other -> . COLON
    (26) other -> . IDENTIFIER
    (27) other -> . OTHER

    EQUAL           shift and go to state 27
    COMMA           shift and go to state 29
    COLON           shift and go to state 30
    IDENTIFIER      shift and go to state 26
    OTHER           shift and go to state 31

    other                          shift and go to state 32

state 26

    (26) other -> IDENTIFIER .

    SQ              reduce using rule 26 (other -> IDENTIFIER .)
    EQUAL           reduce using rule 26 (other -> IDENTIFIER .)
    COMMA           reduce using rule 26 (other -> IDENTIFIER .)
    COLON           reduce using rule 26 (other -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 26 (other -> IDENTIFIER .)
    OTHER           reduce using rule 26 (other -> IDENTIFIER .)
    DQ              reduce using rule 26 (other -> IDENTIFIER .)


state 27

    (23) other -> EQUAL .

    SQ              reduce using rule 23 (other -> EQUAL .)
    EQUAL           reduce using rule 23 (other -> EQUAL .)
    COMMA           reduce using rule 23 (other -> EQUAL .)
    COLON           reduce using rule 23 (other -> EQUAL .)
    IDENTIFIER      reduce using rule 23 (other -> EQUAL .)
    OTHER           reduce using rule 23 (other -> EQUAL .)
    DQ              reduce using rule 23 (other -> EQUAL .)


state 28

    (16) attr_equal -> IDENTIFIER EQUAL SQ other . SQ
    (18) other -> other . EQUAL
    (19) other -> other . COMMA
    (20) other -> other . COLON
    (21) other -> other . IDENTIFIER
    (22) other -> other . OTHER

    SQ              shift and go to state 35
    EQUAL           shift and go to state 34
    COMMA           shift and go to state 36
    COLON           shift and go to state 37
    IDENTIFIER      shift and go to state 33
    OTHER           shift and go to state 38


state 29

    (24) other -> COMMA .

    SQ              reduce using rule 24 (other -> COMMA .)
    EQUAL           reduce using rule 24 (other -> COMMA .)
    COMMA           reduce using rule 24 (other -> COMMA .)
    COLON           reduce using rule 24 (other -> COMMA .)
    IDENTIFIER      reduce using rule 24 (other -> COMMA .)
    OTHER           reduce using rule 24 (other -> COMMA .)
    DQ              reduce using rule 24 (other -> COMMA .)


state 30

    (25) other -> COLON .

    SQ              reduce using rule 25 (other -> COLON .)
    EQUAL           reduce using rule 25 (other -> COLON .)
    COMMA           reduce using rule 25 (other -> COLON .)
    COLON           reduce using rule 25 (other -> COLON .)
    IDENTIFIER      reduce using rule 25 (other -> COLON .)
    OTHER           reduce using rule 25 (other -> COLON .)
    DQ              reduce using rule 25 (other -> COLON .)


state 31

    (27) other -> OTHER .

    SQ              reduce using rule 27 (other -> OTHER .)
    EQUAL           reduce using rule 27 (other -> OTHER .)
    COMMA           reduce using rule 27 (other -> OTHER .)
    COLON           reduce using rule 27 (other -> OTHER .)
    IDENTIFIER      reduce using rule 27 (other -> OTHER .)
    OTHER           reduce using rule 27 (other -> OTHER .)
    DQ              reduce using rule 27 (other -> OTHER .)


state 32

    (17) attr_equal -> IDENTIFIER EQUAL DQ other . DQ
    (18) other -> other . EQUAL
    (19) other -> other . COMMA
    (20) other -> other . COLON
    (21) other -> other . IDENTIFIER
    (22) other -> other . OTHER

    DQ              shift and go to state 39
    EQUAL           shift and go to state 34
    COMMA           shift and go to state 36
    COLON           shift and go to state 37
    IDENTIFIER      shift and go to state 33
    OTHER           shift and go to state 38


state 33

    (21) other -> other IDENTIFIER .

    SQ              reduce using rule 21 (other -> other IDENTIFIER .)
    EQUAL           reduce using rule 21 (other -> other IDENTIFIER .)
    COMMA           reduce using rule 21 (other -> other IDENTIFIER .)
    COLON           reduce using rule 21 (other -> other IDENTIFIER .)
    IDENTIFIER      reduce using rule 21 (other -> other IDENTIFIER .)
    OTHER           reduce using rule 21 (other -> other IDENTIFIER .)
    DQ              reduce using rule 21 (other -> other IDENTIFIER .)


state 34

    (18) other -> other EQUAL .

    SQ              reduce using rule 18 (other -> other EQUAL .)
    EQUAL           reduce using rule 18 (other -> other EQUAL .)
    COMMA           reduce using rule 18 (other -> other EQUAL .)
    COLON           reduce using rule 18 (other -> other EQUAL .)
    IDENTIFIER      reduce using rule 18 (other -> other EQUAL .)
    OTHER           reduce using rule 18 (other -> other EQUAL .)
    DQ              reduce using rule 18 (other -> other EQUAL .)


state 35

    (16) attr_equal -> IDENTIFIER EQUAL SQ other SQ .

    COLON           reduce using rule 16 (attr_equal -> IDENTIFIER EQUAL SQ other SQ .)


state 36

    (19) other -> other COMMA .

    SQ              reduce using rule 19 (other -> other COMMA .)
    EQUAL           reduce using rule 19 (other -> other COMMA .)
    COMMA           reduce using rule 19 (other -> other COMMA .)
    COLON           reduce using rule 19 (other -> other COMMA .)
    IDENTIFIER      reduce using rule 19 (other -> other COMMA .)
    OTHER           reduce using rule 19 (other -> other COMMA .)
    DQ              reduce using rule 19 (other -> other COMMA .)


state 37

    (20) other -> other COLON .

    SQ              reduce using rule 20 (other -> other COLON .)
    EQUAL           reduce using rule 20 (other -> other COLON .)
    COMMA           reduce using rule 20 (other -> other COLON .)
    COLON           reduce using rule 20 (other -> other COLON .)
    IDENTIFIER      reduce using rule 20 (other -> other COLON .)
    OTHER           reduce using rule 20 (other -> other COLON .)
    DQ              reduce using rule 20 (other -> other COLON .)


state 38

    (22) other -> other OTHER .

    SQ              reduce using rule 22 (other -> other OTHER .)
    EQUAL           reduce using rule 22 (other -> other OTHER .)
    COMMA           reduce using rule 22 (other -> other OTHER .)
    COLON           reduce using rule 22 (other -> other OTHER .)
    IDENTIFIER      reduce using rule 22 (other -> other OTHER .)
    OTHER           reduce using rule 22 (other -> other OTHER .)
    DQ              reduce using rule 22 (other -> other OTHER .)


state 39

    (17) attr_equal -> IDENTIFIER EQUAL DQ other DQ .

    COLON           reduce using rule 17 (attr_equal -> IDENTIFIER EQUAL DQ other DQ .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COLON in state 11 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 23 resolved as shift
