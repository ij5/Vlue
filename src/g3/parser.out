Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> root
Rule 1     root -> expression
Rule 2     expression -> identifier PYTHON
Rule 3     expression -> expression identifier PYTHON
Rule 4     identifier -> identifier IDENTIFIER
Rule 5     identifier -> IDENTIFIER

Terminals, with rules where they appear

IDENTIFIER           : 4 5
PYTHON               : 2 3
error                : 

Nonterminals, with rules where they appear

expression           : 1 3
identifier           : 2 3 4
root                 : 0

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . expression
    (2) expression -> . identifier PYTHON
    (3) expression -> . expression identifier PYTHON
    (4) identifier -> . identifier IDENTIFIER
    (5) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 4

    root                           shift and go to state 1
    expression                     shift and go to state 2
    identifier                     shift and go to state 3

state 1

    (0) S' -> root .



state 2

    (1) root -> expression .
    (3) expression -> expression . identifier PYTHON
    (4) identifier -> . identifier IDENTIFIER
    (5) identifier -> . IDENTIFIER

    $end            reduce using rule 1 (root -> expression .)
    IDENTIFIER      shift and go to state 4

    identifier                     shift and go to state 5

state 3

    (2) expression -> identifier . PYTHON
    (4) identifier -> identifier . IDENTIFIER

    PYTHON          shift and go to state 6
    IDENTIFIER      shift and go to state 7


state 4

    (5) identifier -> IDENTIFIER .

    PYTHON          reduce using rule 5 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (identifier -> IDENTIFIER .)


state 5

    (3) expression -> expression identifier . PYTHON
    (4) identifier -> identifier . IDENTIFIER

    PYTHON          shift and go to state 8
    IDENTIFIER      shift and go to state 7


state 6

    (2) expression -> identifier PYTHON .

    IDENTIFIER      reduce using rule 2 (expression -> identifier PYTHON .)
    $end            reduce using rule 2 (expression -> identifier PYTHON .)


state 7

    (4) identifier -> identifier IDENTIFIER .

    PYTHON          reduce using rule 4 (identifier -> identifier IDENTIFIER .)
    IDENTIFIER      reduce using rule 4 (identifier -> identifier IDENTIFIER .)


state 8

    (3) expression -> expression identifier PYTHON .

    IDENTIFIER      reduce using rule 3 (expression -> expression identifier PYTHON .)
    $end            reduce using rule 3 (expression -> expression identifier PYTHON .)

