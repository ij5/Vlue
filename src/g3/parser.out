Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> root
Rule 1     root -> expression
Rule 2     expression -> expression variable_declaration SEMI
Rule 3     expression -> expression variable_value_change SEMI
Rule 4     expression -> expression if_statement
Rule 5     expression -> expression function
Rule 6     expression -> expression function_call SEMI
Rule 7     expression -> expression repeat
Rule 8     expression -> expression for
Rule 9     expression -> expression while
Rule 10    expression -> expression use SEMI
Rule 11    expression -> expression error_handling
Rule 12    expression -> expression variable_alone SEMI
Rule 13    expression -> expression global_variable SEMI
Rule 14    expression -> expression class_def
Rule 15    expression -> expression debug SEMI
Rule 16    expression -> variable_declaration SEMI
Rule 17    expression -> variable_value_change SEMI
Rule 18    expression -> if_statement
Rule 19    expression -> function
Rule 20    expression -> function_call
Rule 21    expression -> repeat
Rule 22    expression -> for
Rule 23    expression -> while
Rule 24    expression -> use SEMI
Rule 25    expression -> error_handling
Rule 26    expression -> variable_alone SEMI
Rule 27    expression -> global_variable SEMI
Rule 28    expression -> class_def
Rule 29    expression -> debug SEMI
Rule 30    expression -> empty
Rule 31    error_handling -> try catch
Rule 32    try -> TRY LMB expression RMB
Rule 33    catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB
Rule 34    for -> for_head for_body
Rule 35    for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB
Rule 36    for_body -> LMB expression RMB
Rule 37    while -> while_head while_body
Rule 38    while_head -> WHILE LSB condition RSB
Rule 39    while_body -> LMB expression RMB
Rule 40    repeat -> repeat_head repeat_body
Rule 41    repeat_head -> REPEAT LSB calculate RSB
Rule 42    repeat_body -> LMB expression RMB
Rule 43    function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
Rule 44    class_def -> CLASS IDENTIFIER LMB expression RMB
Rule 45    function -> function_head function_body
Rule 46    function_head -> FUNCTION IDENTIFIER LSB parameter RSB
Rule 47    function_head -> FUNCTION IDENTIFIER LSB empty RSB
Rule 48    function_body -> LMB expression RMB
Rule 49    function_call -> IDENTIFIER LSB parameter RSB
Rule 50    function_call -> IDENTIFIER LSB empty RSB
Rule 51    parameter -> parameter COMMA calculate
Rule 52    parameter -> calculate
Rule 53    debug -> USE DEBUG
Rule 54    if_statement -> if_statement_1 if_statement_2 if_statement_3
Rule 55    if_statement -> if_statement_1 if_statement_2
Rule 56    if_statement -> if_statement_1 if_statement_3
Rule 57    if_statement -> if_statement_1
Rule 58    if_statement_1 -> IF LSB condition RSB LMB expression RMB
Rule 59    if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB
Rule 60    if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
Rule 61    if_statement_3 -> ELSE LMB expression RMB
Rule 62    condition -> condition LB calculate
Rule 63    condition -> condition RB calculate
Rule 64    condition -> condition LB EQUAL calculate
Rule 65    condition -> condition RB EQUAL calculate
Rule 66    condition -> condition EQUAL calculate
Rule 67    condition -> calculate
Rule 68    library -> identifier PYTHON
Rule 69    library -> library identifier PYTHON
Rule 70    identifier -> identifier IDENTIFIER
Rule 71    identifier -> IDENTIFIER
Rule 72    use -> USE use_params
Rule 73    use_params -> IDENTIFIER
Rule 74    global_variable -> GLOBAL IDENTIFIER
Rule 75    variable_alone -> IDENTIFIER
Rule 76    variable_value_change -> IDENTIFIER EQUAL LIST
Rule 77    variable_value_change -> IDENTIFIER EQUAL calculate
Rule 78    variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate
Rule 79    variable_declaration -> VAR IDENTIFIER EQUAL calculate
Rule 80    variable_declaration -> VAR IDENTIFIER
Rule 81    calculate -> calculate PLUS calculate
Rule 82    calculate -> calculate MINUS calculate
Rule 83    calculate -> MINUS calculate
Rule 84    calculate -> calculate MUL calculate
Rule 85    calculate -> calculate DIV calculate
Rule 86    calculate -> INT
Rule 87    calculate -> FLOAT
Rule 88    calculate -> STRING
Rule 89    calculate -> IDENTIFIER
Rule 90    calculate -> IDENTIFIER LIST
Rule 91    calculate -> LIST
Rule 92    calculate -> LSB calculate RSB
Rule 93    empty -> <empty>

Terminals, with rules where they appear

CATCH                : 33
CLASS                : 44
COLON                : 
COMMA                : 51
DEBUG                : 53
DIV                  : 85
ELSE                 : 59 60 61
EQUAL                : 43 64 65 66 76 77 78 79
FLOAT                : 87
FOR                  : 35
FUNCTION             : 46 47
GLOBAL               : 74
IDENTIFIER           : 33 35 35 43 43 44 46 47 49 50 70 71 73 74 75 76 77 78 79 80 89 90
IF                   : 58 59 60
IN                   : 35
INT                  : 86
LB                   : 62 64
LIST                 : 76 78 90 91
LMB                  : 32 33 36 39 42 44 48 58 59 60 61
LSB                  : 33 35 38 41 43 46 47 49 50 58 59 60 92
MINUS                : 82 83
MUL                  : 84
PLUS                 : 81
PYTHON               : 68 69
RB                   : 63 65
REPEAT               : 41
RMB                  : 32 33 36 39 42 44 48 58 59 60 61
RSB                  : 33 35 38 41 43 46 47 49 50 58 59 60 92
SEMI                 : 2 3 6 10 12 13 15 16 17 24 26 27 29
STRING               : 88
TRY                  : 32
USE                  : 53 72
VAR                  : 78 79 80
WHILE                : 38
error                : 

Nonterminals, with rules where they appear

calculate            : 41 51 52 62 63 64 65 66 67 77 78 79 81 81 82 82 83 84 84 85 85 92
catch                : 31
class_def            : 14 28
condition            : 38 58 59 60 62 63 64 65 66
debug                : 15 29
empty                : 30 47 50
error_handling       : 11 25
expression           : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 32 33 36 39 42 44 48 58 59 60 61
for                  : 8 22
for_body             : 34
for_head             : 34
function             : 5 19
function_body        : 45
function_call        : 6 20
function_class       : 
function_head        : 45
global_variable      : 13 27
identifier           : 68 69 70
if_statement         : 4 18
if_statement_1       : 54 55 56 57
if_statement_2       : 54 55 60
if_statement_3       : 54 56
library              : 69
parameter            : 43 46 49 51
repeat               : 7 21
repeat_body          : 40
repeat_head          : 40
root                 : 0
try                  : 31
use                  : 10 24
use_params           : 72
variable_alone       : 12 26
variable_declaration : 2 16
variable_value_change : 3 17
while                : 9 23
while_body           : 37
while_head           : 37

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . expression
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . variable_declaration SEMI
    (17) expression -> . variable_value_change SEMI
    (18) expression -> . if_statement
    (19) expression -> . function
    (20) expression -> . function_call
    (21) expression -> . repeat
    (22) expression -> . for
    (23) expression -> . while
    (24) expression -> . use SEMI
    (25) expression -> . error_handling
    (26) expression -> . variable_alone SEMI
    (27) expression -> . global_variable SEMI
    (28) expression -> . class_def
    (29) expression -> . debug SEMI
    (30) expression -> . empty
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (93) empty -> .
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    $end            reduce using rule 93 (empty -> .)
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

  ! VAR             [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! USE             [ reduce using rule 93 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 93 (empty -> .) ]
  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 93 (empty -> .) ]
  ! REPEAT          [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! TRY             [ reduce using rule 93 (empty -> .) ]

    root                           shift and go to state 1
    expression                     shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    empty                          shift and go to state 17
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 1

    (0) S' -> root .



state 2

    (1) root -> expression .
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

    $end            reduce using rule 1 (root -> expression .)
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

    variable_declaration           shift and go to state 35
    variable_value_change          shift and go to state 36
    if_statement                   shift and go to state 37
    function                       shift and go to state 38
    function_call                  shift and go to state 39
    repeat                         shift and go to state 40
    for                            shift and go to state 41
    while                          shift and go to state 42
    use                            shift and go to state 43
    error_handling                 shift and go to state 44
    variable_alone                 shift and go to state 45
    global_variable                shift and go to state 46
    class_def                      shift and go to state 47
    debug                          shift and go to state 48
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 3

    (16) expression -> variable_declaration . SEMI

    SEMI            shift and go to state 49


state 4

    (17) expression -> variable_value_change . SEMI

    SEMI            shift and go to state 50


state 5

    (18) expression -> if_statement .

    VAR             reduce using rule 18 (expression -> if_statement .)
    IDENTIFIER      reduce using rule 18 (expression -> if_statement .)
    USE             reduce using rule 18 (expression -> if_statement .)
    GLOBAL          reduce using rule 18 (expression -> if_statement .)
    CLASS           reduce using rule 18 (expression -> if_statement .)
    IF              reduce using rule 18 (expression -> if_statement .)
    FUNCTION        reduce using rule 18 (expression -> if_statement .)
    REPEAT          reduce using rule 18 (expression -> if_statement .)
    FOR             reduce using rule 18 (expression -> if_statement .)
    WHILE           reduce using rule 18 (expression -> if_statement .)
    TRY             reduce using rule 18 (expression -> if_statement .)
    $end            reduce using rule 18 (expression -> if_statement .)
    RMB             reduce using rule 18 (expression -> if_statement .)


state 6

    (19) expression -> function .

    VAR             reduce using rule 19 (expression -> function .)
    IDENTIFIER      reduce using rule 19 (expression -> function .)
    USE             reduce using rule 19 (expression -> function .)
    GLOBAL          reduce using rule 19 (expression -> function .)
    CLASS           reduce using rule 19 (expression -> function .)
    IF              reduce using rule 19 (expression -> function .)
    FUNCTION        reduce using rule 19 (expression -> function .)
    REPEAT          reduce using rule 19 (expression -> function .)
    FOR             reduce using rule 19 (expression -> function .)
    WHILE           reduce using rule 19 (expression -> function .)
    TRY             reduce using rule 19 (expression -> function .)
    $end            reduce using rule 19 (expression -> function .)
    RMB             reduce using rule 19 (expression -> function .)


state 7

    (20) expression -> function_call .

    VAR             reduce using rule 20 (expression -> function_call .)
    IDENTIFIER      reduce using rule 20 (expression -> function_call .)
    USE             reduce using rule 20 (expression -> function_call .)
    GLOBAL          reduce using rule 20 (expression -> function_call .)
    CLASS           reduce using rule 20 (expression -> function_call .)
    IF              reduce using rule 20 (expression -> function_call .)
    FUNCTION        reduce using rule 20 (expression -> function_call .)
    REPEAT          reduce using rule 20 (expression -> function_call .)
    FOR             reduce using rule 20 (expression -> function_call .)
    WHILE           reduce using rule 20 (expression -> function_call .)
    TRY             reduce using rule 20 (expression -> function_call .)
    $end            reduce using rule 20 (expression -> function_call .)
    RMB             reduce using rule 20 (expression -> function_call .)


state 8

    (21) expression -> repeat .

    VAR             reduce using rule 21 (expression -> repeat .)
    IDENTIFIER      reduce using rule 21 (expression -> repeat .)
    USE             reduce using rule 21 (expression -> repeat .)
    GLOBAL          reduce using rule 21 (expression -> repeat .)
    CLASS           reduce using rule 21 (expression -> repeat .)
    IF              reduce using rule 21 (expression -> repeat .)
    FUNCTION        reduce using rule 21 (expression -> repeat .)
    REPEAT          reduce using rule 21 (expression -> repeat .)
    FOR             reduce using rule 21 (expression -> repeat .)
    WHILE           reduce using rule 21 (expression -> repeat .)
    TRY             reduce using rule 21 (expression -> repeat .)
    $end            reduce using rule 21 (expression -> repeat .)
    RMB             reduce using rule 21 (expression -> repeat .)


state 9

    (22) expression -> for .

    VAR             reduce using rule 22 (expression -> for .)
    IDENTIFIER      reduce using rule 22 (expression -> for .)
    USE             reduce using rule 22 (expression -> for .)
    GLOBAL          reduce using rule 22 (expression -> for .)
    CLASS           reduce using rule 22 (expression -> for .)
    IF              reduce using rule 22 (expression -> for .)
    FUNCTION        reduce using rule 22 (expression -> for .)
    REPEAT          reduce using rule 22 (expression -> for .)
    FOR             reduce using rule 22 (expression -> for .)
    WHILE           reduce using rule 22 (expression -> for .)
    TRY             reduce using rule 22 (expression -> for .)
    $end            reduce using rule 22 (expression -> for .)
    RMB             reduce using rule 22 (expression -> for .)


state 10

    (23) expression -> while .

    VAR             reduce using rule 23 (expression -> while .)
    IDENTIFIER      reduce using rule 23 (expression -> while .)
    USE             reduce using rule 23 (expression -> while .)
    GLOBAL          reduce using rule 23 (expression -> while .)
    CLASS           reduce using rule 23 (expression -> while .)
    IF              reduce using rule 23 (expression -> while .)
    FUNCTION        reduce using rule 23 (expression -> while .)
    REPEAT          reduce using rule 23 (expression -> while .)
    FOR             reduce using rule 23 (expression -> while .)
    WHILE           reduce using rule 23 (expression -> while .)
    TRY             reduce using rule 23 (expression -> while .)
    $end            reduce using rule 23 (expression -> while .)
    RMB             reduce using rule 23 (expression -> while .)


state 11

    (24) expression -> use . SEMI

    SEMI            shift and go to state 51


state 12

    (25) expression -> error_handling .

    VAR             reduce using rule 25 (expression -> error_handling .)
    IDENTIFIER      reduce using rule 25 (expression -> error_handling .)
    USE             reduce using rule 25 (expression -> error_handling .)
    GLOBAL          reduce using rule 25 (expression -> error_handling .)
    CLASS           reduce using rule 25 (expression -> error_handling .)
    IF              reduce using rule 25 (expression -> error_handling .)
    FUNCTION        reduce using rule 25 (expression -> error_handling .)
    REPEAT          reduce using rule 25 (expression -> error_handling .)
    FOR             reduce using rule 25 (expression -> error_handling .)
    WHILE           reduce using rule 25 (expression -> error_handling .)
    TRY             reduce using rule 25 (expression -> error_handling .)
    $end            reduce using rule 25 (expression -> error_handling .)
    RMB             reduce using rule 25 (expression -> error_handling .)


state 13

    (26) expression -> variable_alone . SEMI

    SEMI            shift and go to state 52


state 14

    (27) expression -> global_variable . SEMI

    SEMI            shift and go to state 53


state 15

    (28) expression -> class_def .

    VAR             reduce using rule 28 (expression -> class_def .)
    IDENTIFIER      reduce using rule 28 (expression -> class_def .)
    USE             reduce using rule 28 (expression -> class_def .)
    GLOBAL          reduce using rule 28 (expression -> class_def .)
    CLASS           reduce using rule 28 (expression -> class_def .)
    IF              reduce using rule 28 (expression -> class_def .)
    FUNCTION        reduce using rule 28 (expression -> class_def .)
    REPEAT          reduce using rule 28 (expression -> class_def .)
    FOR             reduce using rule 28 (expression -> class_def .)
    WHILE           reduce using rule 28 (expression -> class_def .)
    TRY             reduce using rule 28 (expression -> class_def .)
    $end            reduce using rule 28 (expression -> class_def .)
    RMB             reduce using rule 28 (expression -> class_def .)


state 16

    (29) expression -> debug . SEMI

    SEMI            shift and go to state 54


state 17

    (30) expression -> empty .

    VAR             reduce using rule 30 (expression -> empty .)
    IDENTIFIER      reduce using rule 30 (expression -> empty .)
    USE             reduce using rule 30 (expression -> empty .)
    GLOBAL          reduce using rule 30 (expression -> empty .)
    CLASS           reduce using rule 30 (expression -> empty .)
    IF              reduce using rule 30 (expression -> empty .)
    FUNCTION        reduce using rule 30 (expression -> empty .)
    REPEAT          reduce using rule 30 (expression -> empty .)
    FOR             reduce using rule 30 (expression -> empty .)
    WHILE           reduce using rule 30 (expression -> empty .)
    TRY             reduce using rule 30 (expression -> empty .)
    $end            reduce using rule 30 (expression -> empty .)
    RMB             reduce using rule 30 (expression -> empty .)


state 18

    (78) variable_declaration -> VAR . IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> VAR . IDENTIFIER EQUAL calculate
    (80) variable_declaration -> VAR . IDENTIFIER

    IDENTIFIER      shift and go to state 55


state 19

    (76) variable_value_change -> IDENTIFIER . EQUAL LIST
    (77) variable_value_change -> IDENTIFIER . EQUAL calculate
    (49) function_call -> IDENTIFIER . LSB parameter RSB
    (50) function_call -> IDENTIFIER . LSB empty RSB
    (75) variable_alone -> IDENTIFIER .

    EQUAL           shift and go to state 56
    LSB             shift and go to state 57
    SEMI            reduce using rule 75 (variable_alone -> IDENTIFIER .)


state 20

    (54) if_statement -> if_statement_1 . if_statement_2 if_statement_3
    (55) if_statement -> if_statement_1 . if_statement_2
    (56) if_statement -> if_statement_1 . if_statement_3
    (57) if_statement -> if_statement_1 .
    (59) if_statement_2 -> . ELSE IF LSB condition RSB LMB expression RMB
    (60) if_statement_2 -> . if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
    (61) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 57 (if_statement -> if_statement_1 .)
    IDENTIFIER      reduce using rule 57 (if_statement -> if_statement_1 .)
    USE             reduce using rule 57 (if_statement -> if_statement_1 .)
    GLOBAL          reduce using rule 57 (if_statement -> if_statement_1 .)
    CLASS           reduce using rule 57 (if_statement -> if_statement_1 .)
    IF              reduce using rule 57 (if_statement -> if_statement_1 .)
    FUNCTION        reduce using rule 57 (if_statement -> if_statement_1 .)
    REPEAT          reduce using rule 57 (if_statement -> if_statement_1 .)
    FOR             reduce using rule 57 (if_statement -> if_statement_1 .)
    WHILE           reduce using rule 57 (if_statement -> if_statement_1 .)
    TRY             reduce using rule 57 (if_statement -> if_statement_1 .)
    $end            reduce using rule 57 (if_statement -> if_statement_1 .)
    RMB             reduce using rule 57 (if_statement -> if_statement_1 .)
    ELSE            shift and go to state 60

    if_statement_2                 shift and go to state 58
    if_statement_3                 shift and go to state 59

state 21

    (45) function -> function_head . function_body
    (48) function_body -> . LMB expression RMB

    LMB             shift and go to state 62

    function_body                  shift and go to state 61

state 22

    (40) repeat -> repeat_head . repeat_body
    (42) repeat_body -> . LMB expression RMB

    LMB             shift and go to state 64

    repeat_body                    shift and go to state 63

state 23

    (34) for -> for_head . for_body
    (36) for_body -> . LMB expression RMB

    LMB             shift and go to state 66

    for_body                       shift and go to state 65

state 24

    (37) while -> while_head . while_body
    (39) while_body -> . LMB expression RMB

    LMB             shift and go to state 68

    while_body                     shift and go to state 67

state 25

    (72) use -> USE . use_params
    (53) debug -> USE . DEBUG
    (73) use_params -> . IDENTIFIER

    DEBUG           shift and go to state 70
    IDENTIFIER      shift and go to state 71

    use_params                     shift and go to state 69

state 26

    (31) error_handling -> try . catch
    (33) catch -> . CATCH LSB IDENTIFIER RSB LMB expression RMB

    CATCH           shift and go to state 73

    catch                          shift and go to state 72

state 27

    (74) global_variable -> GLOBAL . IDENTIFIER

    IDENTIFIER      shift and go to state 74


state 28

    (44) class_def -> CLASS . IDENTIFIER LMB expression RMB

    IDENTIFIER      shift and go to state 75


state 29

    (58) if_statement_1 -> IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 76


state 30

    (46) function_head -> FUNCTION . IDENTIFIER LSB parameter RSB
    (47) function_head -> FUNCTION . IDENTIFIER LSB empty RSB

    IDENTIFIER      shift and go to state 77


state 31

    (41) repeat_head -> REPEAT . LSB calculate RSB

    LSB             shift and go to state 78


state 32

    (35) for_head -> FOR . LSB IDENTIFIER IN IDENTIFIER RSB

    LSB             shift and go to state 79


state 33

    (38) while_head -> WHILE . LSB condition RSB

    LSB             shift and go to state 80


state 34

    (32) try -> TRY . LMB expression RMB

    LMB             shift and go to state 81


state 35

    (2) expression -> expression variable_declaration . SEMI

    SEMI            shift and go to state 82


state 36

    (3) expression -> expression variable_value_change . SEMI

    SEMI            shift and go to state 83


state 37

    (4) expression -> expression if_statement .

    VAR             reduce using rule 4 (expression -> expression if_statement .)
    IDENTIFIER      reduce using rule 4 (expression -> expression if_statement .)
    USE             reduce using rule 4 (expression -> expression if_statement .)
    GLOBAL          reduce using rule 4 (expression -> expression if_statement .)
    CLASS           reduce using rule 4 (expression -> expression if_statement .)
    IF              reduce using rule 4 (expression -> expression if_statement .)
    FUNCTION        reduce using rule 4 (expression -> expression if_statement .)
    REPEAT          reduce using rule 4 (expression -> expression if_statement .)
    FOR             reduce using rule 4 (expression -> expression if_statement .)
    WHILE           reduce using rule 4 (expression -> expression if_statement .)
    TRY             reduce using rule 4 (expression -> expression if_statement .)
    $end            reduce using rule 4 (expression -> expression if_statement .)
    RMB             reduce using rule 4 (expression -> expression if_statement .)


state 38

    (5) expression -> expression function .

    VAR             reduce using rule 5 (expression -> expression function .)
    IDENTIFIER      reduce using rule 5 (expression -> expression function .)
    USE             reduce using rule 5 (expression -> expression function .)
    GLOBAL          reduce using rule 5 (expression -> expression function .)
    CLASS           reduce using rule 5 (expression -> expression function .)
    IF              reduce using rule 5 (expression -> expression function .)
    FUNCTION        reduce using rule 5 (expression -> expression function .)
    REPEAT          reduce using rule 5 (expression -> expression function .)
    FOR             reduce using rule 5 (expression -> expression function .)
    WHILE           reduce using rule 5 (expression -> expression function .)
    TRY             reduce using rule 5 (expression -> expression function .)
    $end            reduce using rule 5 (expression -> expression function .)
    RMB             reduce using rule 5 (expression -> expression function .)


state 39

    (6) expression -> expression function_call . SEMI

    SEMI            shift and go to state 84


state 40

    (7) expression -> expression repeat .

    VAR             reduce using rule 7 (expression -> expression repeat .)
    IDENTIFIER      reduce using rule 7 (expression -> expression repeat .)
    USE             reduce using rule 7 (expression -> expression repeat .)
    GLOBAL          reduce using rule 7 (expression -> expression repeat .)
    CLASS           reduce using rule 7 (expression -> expression repeat .)
    IF              reduce using rule 7 (expression -> expression repeat .)
    FUNCTION        reduce using rule 7 (expression -> expression repeat .)
    REPEAT          reduce using rule 7 (expression -> expression repeat .)
    FOR             reduce using rule 7 (expression -> expression repeat .)
    WHILE           reduce using rule 7 (expression -> expression repeat .)
    TRY             reduce using rule 7 (expression -> expression repeat .)
    $end            reduce using rule 7 (expression -> expression repeat .)
    RMB             reduce using rule 7 (expression -> expression repeat .)


state 41

    (8) expression -> expression for .

    VAR             reduce using rule 8 (expression -> expression for .)
    IDENTIFIER      reduce using rule 8 (expression -> expression for .)
    USE             reduce using rule 8 (expression -> expression for .)
    GLOBAL          reduce using rule 8 (expression -> expression for .)
    CLASS           reduce using rule 8 (expression -> expression for .)
    IF              reduce using rule 8 (expression -> expression for .)
    FUNCTION        reduce using rule 8 (expression -> expression for .)
    REPEAT          reduce using rule 8 (expression -> expression for .)
    FOR             reduce using rule 8 (expression -> expression for .)
    WHILE           reduce using rule 8 (expression -> expression for .)
    TRY             reduce using rule 8 (expression -> expression for .)
    $end            reduce using rule 8 (expression -> expression for .)
    RMB             reduce using rule 8 (expression -> expression for .)


state 42

    (9) expression -> expression while .

    VAR             reduce using rule 9 (expression -> expression while .)
    IDENTIFIER      reduce using rule 9 (expression -> expression while .)
    USE             reduce using rule 9 (expression -> expression while .)
    GLOBAL          reduce using rule 9 (expression -> expression while .)
    CLASS           reduce using rule 9 (expression -> expression while .)
    IF              reduce using rule 9 (expression -> expression while .)
    FUNCTION        reduce using rule 9 (expression -> expression while .)
    REPEAT          reduce using rule 9 (expression -> expression while .)
    FOR             reduce using rule 9 (expression -> expression while .)
    WHILE           reduce using rule 9 (expression -> expression while .)
    TRY             reduce using rule 9 (expression -> expression while .)
    $end            reduce using rule 9 (expression -> expression while .)
    RMB             reduce using rule 9 (expression -> expression while .)


state 43

    (10) expression -> expression use . SEMI

    SEMI            shift and go to state 85


state 44

    (11) expression -> expression error_handling .

    VAR             reduce using rule 11 (expression -> expression error_handling .)
    IDENTIFIER      reduce using rule 11 (expression -> expression error_handling .)
    USE             reduce using rule 11 (expression -> expression error_handling .)
    GLOBAL          reduce using rule 11 (expression -> expression error_handling .)
    CLASS           reduce using rule 11 (expression -> expression error_handling .)
    IF              reduce using rule 11 (expression -> expression error_handling .)
    FUNCTION        reduce using rule 11 (expression -> expression error_handling .)
    REPEAT          reduce using rule 11 (expression -> expression error_handling .)
    FOR             reduce using rule 11 (expression -> expression error_handling .)
    WHILE           reduce using rule 11 (expression -> expression error_handling .)
    TRY             reduce using rule 11 (expression -> expression error_handling .)
    $end            reduce using rule 11 (expression -> expression error_handling .)
    RMB             reduce using rule 11 (expression -> expression error_handling .)


state 45

    (12) expression -> expression variable_alone . SEMI

    SEMI            shift and go to state 86


state 46

    (13) expression -> expression global_variable . SEMI

    SEMI            shift and go to state 87


state 47

    (14) expression -> expression class_def .

    VAR             reduce using rule 14 (expression -> expression class_def .)
    IDENTIFIER      reduce using rule 14 (expression -> expression class_def .)
    USE             reduce using rule 14 (expression -> expression class_def .)
    GLOBAL          reduce using rule 14 (expression -> expression class_def .)
    CLASS           reduce using rule 14 (expression -> expression class_def .)
    IF              reduce using rule 14 (expression -> expression class_def .)
    FUNCTION        reduce using rule 14 (expression -> expression class_def .)
    REPEAT          reduce using rule 14 (expression -> expression class_def .)
    FOR             reduce using rule 14 (expression -> expression class_def .)
    WHILE           reduce using rule 14 (expression -> expression class_def .)
    TRY             reduce using rule 14 (expression -> expression class_def .)
    $end            reduce using rule 14 (expression -> expression class_def .)
    RMB             reduce using rule 14 (expression -> expression class_def .)


state 48

    (15) expression -> expression debug . SEMI

    SEMI            shift and go to state 88


state 49

    (16) expression -> variable_declaration SEMI .

    VAR             reduce using rule 16 (expression -> variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 16 (expression -> variable_declaration SEMI .)
    USE             reduce using rule 16 (expression -> variable_declaration SEMI .)
    GLOBAL          reduce using rule 16 (expression -> variable_declaration SEMI .)
    CLASS           reduce using rule 16 (expression -> variable_declaration SEMI .)
    IF              reduce using rule 16 (expression -> variable_declaration SEMI .)
    FUNCTION        reduce using rule 16 (expression -> variable_declaration SEMI .)
    REPEAT          reduce using rule 16 (expression -> variable_declaration SEMI .)
    FOR             reduce using rule 16 (expression -> variable_declaration SEMI .)
    WHILE           reduce using rule 16 (expression -> variable_declaration SEMI .)
    TRY             reduce using rule 16 (expression -> variable_declaration SEMI .)
    $end            reduce using rule 16 (expression -> variable_declaration SEMI .)
    RMB             reduce using rule 16 (expression -> variable_declaration SEMI .)


state 50

    (17) expression -> variable_value_change SEMI .

    VAR             reduce using rule 17 (expression -> variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 17 (expression -> variable_value_change SEMI .)
    USE             reduce using rule 17 (expression -> variable_value_change SEMI .)
    GLOBAL          reduce using rule 17 (expression -> variable_value_change SEMI .)
    CLASS           reduce using rule 17 (expression -> variable_value_change SEMI .)
    IF              reduce using rule 17 (expression -> variable_value_change SEMI .)
    FUNCTION        reduce using rule 17 (expression -> variable_value_change SEMI .)
    REPEAT          reduce using rule 17 (expression -> variable_value_change SEMI .)
    FOR             reduce using rule 17 (expression -> variable_value_change SEMI .)
    WHILE           reduce using rule 17 (expression -> variable_value_change SEMI .)
    TRY             reduce using rule 17 (expression -> variable_value_change SEMI .)
    $end            reduce using rule 17 (expression -> variable_value_change SEMI .)
    RMB             reduce using rule 17 (expression -> variable_value_change SEMI .)


state 51

    (24) expression -> use SEMI .

    VAR             reduce using rule 24 (expression -> use SEMI .)
    IDENTIFIER      reduce using rule 24 (expression -> use SEMI .)
    USE             reduce using rule 24 (expression -> use SEMI .)
    GLOBAL          reduce using rule 24 (expression -> use SEMI .)
    CLASS           reduce using rule 24 (expression -> use SEMI .)
    IF              reduce using rule 24 (expression -> use SEMI .)
    FUNCTION        reduce using rule 24 (expression -> use SEMI .)
    REPEAT          reduce using rule 24 (expression -> use SEMI .)
    FOR             reduce using rule 24 (expression -> use SEMI .)
    WHILE           reduce using rule 24 (expression -> use SEMI .)
    TRY             reduce using rule 24 (expression -> use SEMI .)
    $end            reduce using rule 24 (expression -> use SEMI .)
    RMB             reduce using rule 24 (expression -> use SEMI .)


state 52

    (26) expression -> variable_alone SEMI .

    VAR             reduce using rule 26 (expression -> variable_alone SEMI .)
    IDENTIFIER      reduce using rule 26 (expression -> variable_alone SEMI .)
    USE             reduce using rule 26 (expression -> variable_alone SEMI .)
    GLOBAL          reduce using rule 26 (expression -> variable_alone SEMI .)
    CLASS           reduce using rule 26 (expression -> variable_alone SEMI .)
    IF              reduce using rule 26 (expression -> variable_alone SEMI .)
    FUNCTION        reduce using rule 26 (expression -> variable_alone SEMI .)
    REPEAT          reduce using rule 26 (expression -> variable_alone SEMI .)
    FOR             reduce using rule 26 (expression -> variable_alone SEMI .)
    WHILE           reduce using rule 26 (expression -> variable_alone SEMI .)
    TRY             reduce using rule 26 (expression -> variable_alone SEMI .)
    $end            reduce using rule 26 (expression -> variable_alone SEMI .)
    RMB             reduce using rule 26 (expression -> variable_alone SEMI .)


state 53

    (27) expression -> global_variable SEMI .

    VAR             reduce using rule 27 (expression -> global_variable SEMI .)
    IDENTIFIER      reduce using rule 27 (expression -> global_variable SEMI .)
    USE             reduce using rule 27 (expression -> global_variable SEMI .)
    GLOBAL          reduce using rule 27 (expression -> global_variable SEMI .)
    CLASS           reduce using rule 27 (expression -> global_variable SEMI .)
    IF              reduce using rule 27 (expression -> global_variable SEMI .)
    FUNCTION        reduce using rule 27 (expression -> global_variable SEMI .)
    REPEAT          reduce using rule 27 (expression -> global_variable SEMI .)
    FOR             reduce using rule 27 (expression -> global_variable SEMI .)
    WHILE           reduce using rule 27 (expression -> global_variable SEMI .)
    TRY             reduce using rule 27 (expression -> global_variable SEMI .)
    $end            reduce using rule 27 (expression -> global_variable SEMI .)
    RMB             reduce using rule 27 (expression -> global_variable SEMI .)


state 54

    (29) expression -> debug SEMI .

    VAR             reduce using rule 29 (expression -> debug SEMI .)
    IDENTIFIER      reduce using rule 29 (expression -> debug SEMI .)
    USE             reduce using rule 29 (expression -> debug SEMI .)
    GLOBAL          reduce using rule 29 (expression -> debug SEMI .)
    CLASS           reduce using rule 29 (expression -> debug SEMI .)
    IF              reduce using rule 29 (expression -> debug SEMI .)
    FUNCTION        reduce using rule 29 (expression -> debug SEMI .)
    REPEAT          reduce using rule 29 (expression -> debug SEMI .)
    FOR             reduce using rule 29 (expression -> debug SEMI .)
    WHILE           reduce using rule 29 (expression -> debug SEMI .)
    TRY             reduce using rule 29 (expression -> debug SEMI .)
    $end            reduce using rule 29 (expression -> debug SEMI .)
    RMB             reduce using rule 29 (expression -> debug SEMI .)


state 55

    (78) variable_declaration -> VAR IDENTIFIER . LIST EQUAL calculate
    (79) variable_declaration -> VAR IDENTIFIER . EQUAL calculate
    (80) variable_declaration -> VAR IDENTIFIER .

    LIST            shift and go to state 89
    EQUAL           shift and go to state 90
    SEMI            reduce using rule 80 (variable_declaration -> VAR IDENTIFIER .)


state 56

    (76) variable_value_change -> IDENTIFIER EQUAL . LIST
    (77) variable_value_change -> IDENTIFIER EQUAL . calculate
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    LIST            shift and go to state 92
    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LSB             shift and go to state 98

    calculate                      shift and go to state 93

state 57

    (49) function_call -> IDENTIFIER LSB . parameter RSB
    (50) function_call -> IDENTIFIER LSB . empty RSB
    (51) parameter -> . parameter COMMA calculate
    (52) parameter -> . calculate
    (93) empty -> .
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    RSB             reduce using rule 93 (empty -> .)
    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    parameter                      shift and go to state 99
    empty                          shift and go to state 100
    calculate                      shift and go to state 101

state 58

    (54) if_statement -> if_statement_1 if_statement_2 . if_statement_3
    (55) if_statement -> if_statement_1 if_statement_2 .
    (60) if_statement_2 -> if_statement_2 . ELSE IF LSB condition RSB LMB expression RMB
    (61) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 55 (if_statement -> if_statement_1 if_statement_2 .)
    IDENTIFIER      reduce using rule 55 (if_statement -> if_statement_1 if_statement_2 .)
    USE             reduce using rule 55 (if_statement -> if_statement_1 if_statement_2 .)
    GLOBAL          reduce using rule 55 (if_statement -> if_statement_1 if_statement_2 .)
    CLASS           reduce using rule 55 (if_statement -> if_statement_1 if_statement_2 .)
    IF              reduce using rule 55 (if_statement -> if_statement_1 if_statement_2 .)
    FUNCTION        reduce using rule 55 (if_statement -> if_statement_1 if_statement_2 .)
    REPEAT          reduce using rule 55 (if_statement -> if_statement_1 if_statement_2 .)
    FOR             reduce using rule 55 (if_statement -> if_statement_1 if_statement_2 .)
    WHILE           reduce using rule 55 (if_statement -> if_statement_1 if_statement_2 .)
    TRY             reduce using rule 55 (if_statement -> if_statement_1 if_statement_2 .)
    $end            reduce using rule 55 (if_statement -> if_statement_1 if_statement_2 .)
    RMB             reduce using rule 55 (if_statement -> if_statement_1 if_statement_2 .)
    ELSE            shift and go to state 104

    if_statement_3                 shift and go to state 103

state 59

    (56) if_statement -> if_statement_1 if_statement_3 .

    VAR             reduce using rule 56 (if_statement -> if_statement_1 if_statement_3 .)
    IDENTIFIER      reduce using rule 56 (if_statement -> if_statement_1 if_statement_3 .)
    USE             reduce using rule 56 (if_statement -> if_statement_1 if_statement_3 .)
    GLOBAL          reduce using rule 56 (if_statement -> if_statement_1 if_statement_3 .)
    CLASS           reduce using rule 56 (if_statement -> if_statement_1 if_statement_3 .)
    IF              reduce using rule 56 (if_statement -> if_statement_1 if_statement_3 .)
    FUNCTION        reduce using rule 56 (if_statement -> if_statement_1 if_statement_3 .)
    REPEAT          reduce using rule 56 (if_statement -> if_statement_1 if_statement_3 .)
    FOR             reduce using rule 56 (if_statement -> if_statement_1 if_statement_3 .)
    WHILE           reduce using rule 56 (if_statement -> if_statement_1 if_statement_3 .)
    TRY             reduce using rule 56 (if_statement -> if_statement_1 if_statement_3 .)
    $end            reduce using rule 56 (if_statement -> if_statement_1 if_statement_3 .)
    RMB             reduce using rule 56 (if_statement -> if_statement_1 if_statement_3 .)


state 60

    (59) if_statement_2 -> ELSE . IF LSB condition RSB LMB expression RMB
    (61) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 105
    LMB             shift and go to state 106


state 61

    (45) function -> function_head function_body .

    VAR             reduce using rule 45 (function -> function_head function_body .)
    IDENTIFIER      reduce using rule 45 (function -> function_head function_body .)
    USE             reduce using rule 45 (function -> function_head function_body .)
    GLOBAL          reduce using rule 45 (function -> function_head function_body .)
    CLASS           reduce using rule 45 (function -> function_head function_body .)
    IF              reduce using rule 45 (function -> function_head function_body .)
    FUNCTION        reduce using rule 45 (function -> function_head function_body .)
    REPEAT          reduce using rule 45 (function -> function_head function_body .)
    FOR             reduce using rule 45 (function -> function_head function_body .)
    WHILE           reduce using rule 45 (function -> function_head function_body .)
    TRY             reduce using rule 45 (function -> function_head function_body .)
    $end            reduce using rule 45 (function -> function_head function_body .)
    RMB             reduce using rule 45 (function -> function_head function_body .)


state 62

    (48) function_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . variable_declaration SEMI
    (17) expression -> . variable_value_change SEMI
    (18) expression -> . if_statement
    (19) expression -> . function
    (20) expression -> . function_call
    (21) expression -> . repeat
    (22) expression -> . for
    (23) expression -> . while
    (24) expression -> . use SEMI
    (25) expression -> . error_handling
    (26) expression -> . variable_alone SEMI
    (27) expression -> . global_variable SEMI
    (28) expression -> . class_def
    (29) expression -> . debug SEMI
    (30) expression -> . empty
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (93) empty -> .
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    RMB             reduce using rule 93 (empty -> .)
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

  ! VAR             [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! USE             [ reduce using rule 93 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 93 (empty -> .) ]
  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 93 (empty -> .) ]
  ! REPEAT          [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! TRY             [ reduce using rule 93 (empty -> .) ]

    expression                     shift and go to state 107
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    empty                          shift and go to state 17
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 63

    (40) repeat -> repeat_head repeat_body .

    VAR             reduce using rule 40 (repeat -> repeat_head repeat_body .)
    IDENTIFIER      reduce using rule 40 (repeat -> repeat_head repeat_body .)
    USE             reduce using rule 40 (repeat -> repeat_head repeat_body .)
    GLOBAL          reduce using rule 40 (repeat -> repeat_head repeat_body .)
    CLASS           reduce using rule 40 (repeat -> repeat_head repeat_body .)
    IF              reduce using rule 40 (repeat -> repeat_head repeat_body .)
    FUNCTION        reduce using rule 40 (repeat -> repeat_head repeat_body .)
    REPEAT          reduce using rule 40 (repeat -> repeat_head repeat_body .)
    FOR             reduce using rule 40 (repeat -> repeat_head repeat_body .)
    WHILE           reduce using rule 40 (repeat -> repeat_head repeat_body .)
    TRY             reduce using rule 40 (repeat -> repeat_head repeat_body .)
    $end            reduce using rule 40 (repeat -> repeat_head repeat_body .)
    RMB             reduce using rule 40 (repeat -> repeat_head repeat_body .)


state 64

    (42) repeat_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . variable_declaration SEMI
    (17) expression -> . variable_value_change SEMI
    (18) expression -> . if_statement
    (19) expression -> . function
    (20) expression -> . function_call
    (21) expression -> . repeat
    (22) expression -> . for
    (23) expression -> . while
    (24) expression -> . use SEMI
    (25) expression -> . error_handling
    (26) expression -> . variable_alone SEMI
    (27) expression -> . global_variable SEMI
    (28) expression -> . class_def
    (29) expression -> . debug SEMI
    (30) expression -> . empty
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (93) empty -> .
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    RMB             reduce using rule 93 (empty -> .)
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

  ! VAR             [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! USE             [ reduce using rule 93 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 93 (empty -> .) ]
  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 93 (empty -> .) ]
  ! REPEAT          [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! TRY             [ reduce using rule 93 (empty -> .) ]

    expression                     shift and go to state 108
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    empty                          shift and go to state 17
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 65

    (34) for -> for_head for_body .

    VAR             reduce using rule 34 (for -> for_head for_body .)
    IDENTIFIER      reduce using rule 34 (for -> for_head for_body .)
    USE             reduce using rule 34 (for -> for_head for_body .)
    GLOBAL          reduce using rule 34 (for -> for_head for_body .)
    CLASS           reduce using rule 34 (for -> for_head for_body .)
    IF              reduce using rule 34 (for -> for_head for_body .)
    FUNCTION        reduce using rule 34 (for -> for_head for_body .)
    REPEAT          reduce using rule 34 (for -> for_head for_body .)
    FOR             reduce using rule 34 (for -> for_head for_body .)
    WHILE           reduce using rule 34 (for -> for_head for_body .)
    TRY             reduce using rule 34 (for -> for_head for_body .)
    $end            reduce using rule 34 (for -> for_head for_body .)
    RMB             reduce using rule 34 (for -> for_head for_body .)


state 66

    (36) for_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . variable_declaration SEMI
    (17) expression -> . variable_value_change SEMI
    (18) expression -> . if_statement
    (19) expression -> . function
    (20) expression -> . function_call
    (21) expression -> . repeat
    (22) expression -> . for
    (23) expression -> . while
    (24) expression -> . use SEMI
    (25) expression -> . error_handling
    (26) expression -> . variable_alone SEMI
    (27) expression -> . global_variable SEMI
    (28) expression -> . class_def
    (29) expression -> . debug SEMI
    (30) expression -> . empty
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (93) empty -> .
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    RMB             reduce using rule 93 (empty -> .)
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

  ! VAR             [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! USE             [ reduce using rule 93 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 93 (empty -> .) ]
  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 93 (empty -> .) ]
  ! REPEAT          [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! TRY             [ reduce using rule 93 (empty -> .) ]

    expression                     shift and go to state 109
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    empty                          shift and go to state 17
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 67

    (37) while -> while_head while_body .

    VAR             reduce using rule 37 (while -> while_head while_body .)
    IDENTIFIER      reduce using rule 37 (while -> while_head while_body .)
    USE             reduce using rule 37 (while -> while_head while_body .)
    GLOBAL          reduce using rule 37 (while -> while_head while_body .)
    CLASS           reduce using rule 37 (while -> while_head while_body .)
    IF              reduce using rule 37 (while -> while_head while_body .)
    FUNCTION        reduce using rule 37 (while -> while_head while_body .)
    REPEAT          reduce using rule 37 (while -> while_head while_body .)
    FOR             reduce using rule 37 (while -> while_head while_body .)
    WHILE           reduce using rule 37 (while -> while_head while_body .)
    TRY             reduce using rule 37 (while -> while_head while_body .)
    $end            reduce using rule 37 (while -> while_head while_body .)
    RMB             reduce using rule 37 (while -> while_head while_body .)


state 68

    (39) while_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . variable_declaration SEMI
    (17) expression -> . variable_value_change SEMI
    (18) expression -> . if_statement
    (19) expression -> . function
    (20) expression -> . function_call
    (21) expression -> . repeat
    (22) expression -> . for
    (23) expression -> . while
    (24) expression -> . use SEMI
    (25) expression -> . error_handling
    (26) expression -> . variable_alone SEMI
    (27) expression -> . global_variable SEMI
    (28) expression -> . class_def
    (29) expression -> . debug SEMI
    (30) expression -> . empty
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (93) empty -> .
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    RMB             reduce using rule 93 (empty -> .)
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

  ! VAR             [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! USE             [ reduce using rule 93 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 93 (empty -> .) ]
  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 93 (empty -> .) ]
  ! REPEAT          [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! TRY             [ reduce using rule 93 (empty -> .) ]

    expression                     shift and go to state 110
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    empty                          shift and go to state 17
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 69

    (72) use -> USE use_params .

    SEMI            reduce using rule 72 (use -> USE use_params .)


state 70

    (53) debug -> USE DEBUG .

    SEMI            reduce using rule 53 (debug -> USE DEBUG .)


state 71

    (73) use_params -> IDENTIFIER .

    SEMI            reduce using rule 73 (use_params -> IDENTIFIER .)


state 72

    (31) error_handling -> try catch .

    VAR             reduce using rule 31 (error_handling -> try catch .)
    IDENTIFIER      reduce using rule 31 (error_handling -> try catch .)
    USE             reduce using rule 31 (error_handling -> try catch .)
    GLOBAL          reduce using rule 31 (error_handling -> try catch .)
    CLASS           reduce using rule 31 (error_handling -> try catch .)
    IF              reduce using rule 31 (error_handling -> try catch .)
    FUNCTION        reduce using rule 31 (error_handling -> try catch .)
    REPEAT          reduce using rule 31 (error_handling -> try catch .)
    FOR             reduce using rule 31 (error_handling -> try catch .)
    WHILE           reduce using rule 31 (error_handling -> try catch .)
    TRY             reduce using rule 31 (error_handling -> try catch .)
    $end            reduce using rule 31 (error_handling -> try catch .)
    RMB             reduce using rule 31 (error_handling -> try catch .)


state 73

    (33) catch -> CATCH . LSB IDENTIFIER RSB LMB expression RMB

    LSB             shift and go to state 111


state 74

    (74) global_variable -> GLOBAL IDENTIFIER .

    SEMI            reduce using rule 74 (global_variable -> GLOBAL IDENTIFIER .)


state 75

    (44) class_def -> CLASS IDENTIFIER . LMB expression RMB

    LMB             shift and go to state 112


state 76

    (58) if_statement_1 -> IF LSB . condition RSB LMB expression RMB
    (62) condition -> . condition LB calculate
    (63) condition -> . condition RB calculate
    (64) condition -> . condition LB EQUAL calculate
    (65) condition -> . condition RB EQUAL calculate
    (66) condition -> . condition EQUAL calculate
    (67) condition -> . calculate
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    condition                      shift and go to state 113
    calculate                      shift and go to state 114

state 77

    (46) function_head -> FUNCTION IDENTIFIER . LSB parameter RSB
    (47) function_head -> FUNCTION IDENTIFIER . LSB empty RSB

    LSB             shift and go to state 115


state 78

    (41) repeat_head -> REPEAT LSB . calculate RSB
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    calculate                      shift and go to state 116

state 79

    (35) for_head -> FOR LSB . IDENTIFIER IN IDENTIFIER RSB

    IDENTIFIER      shift and go to state 117


state 80

    (38) while_head -> WHILE LSB . condition RSB
    (62) condition -> . condition LB calculate
    (63) condition -> . condition RB calculate
    (64) condition -> . condition LB EQUAL calculate
    (65) condition -> . condition RB EQUAL calculate
    (66) condition -> . condition EQUAL calculate
    (67) condition -> . calculate
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    condition                      shift and go to state 118
    calculate                      shift and go to state 114

state 81

    (32) try -> TRY LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . variable_declaration SEMI
    (17) expression -> . variable_value_change SEMI
    (18) expression -> . if_statement
    (19) expression -> . function
    (20) expression -> . function_call
    (21) expression -> . repeat
    (22) expression -> . for
    (23) expression -> . while
    (24) expression -> . use SEMI
    (25) expression -> . error_handling
    (26) expression -> . variable_alone SEMI
    (27) expression -> . global_variable SEMI
    (28) expression -> . class_def
    (29) expression -> . debug SEMI
    (30) expression -> . empty
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (93) empty -> .
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    RMB             reduce using rule 93 (empty -> .)
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

  ! VAR             [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! USE             [ reduce using rule 93 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 93 (empty -> .) ]
  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 93 (empty -> .) ]
  ! REPEAT          [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! TRY             [ reduce using rule 93 (empty -> .) ]

    expression                     shift and go to state 119
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    empty                          shift and go to state 17
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 82

    (2) expression -> expression variable_declaration SEMI .

    VAR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    USE             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    GLOBAL          reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    CLASS           reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IF              reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FUNCTION        reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    REPEAT          reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FOR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    WHILE           reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    TRY             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    $end            reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    RMB             reduce using rule 2 (expression -> expression variable_declaration SEMI .)


state 83

    (3) expression -> expression variable_value_change SEMI .

    VAR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    USE             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    GLOBAL          reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    CLASS           reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IF              reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FUNCTION        reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    REPEAT          reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FOR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    WHILE           reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    TRY             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    $end            reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    RMB             reduce using rule 3 (expression -> expression variable_value_change SEMI .)


state 84

    (6) expression -> expression function_call SEMI .

    VAR             reduce using rule 6 (expression -> expression function_call SEMI .)
    IDENTIFIER      reduce using rule 6 (expression -> expression function_call SEMI .)
    USE             reduce using rule 6 (expression -> expression function_call SEMI .)
    GLOBAL          reduce using rule 6 (expression -> expression function_call SEMI .)
    CLASS           reduce using rule 6 (expression -> expression function_call SEMI .)
    IF              reduce using rule 6 (expression -> expression function_call SEMI .)
    FUNCTION        reduce using rule 6 (expression -> expression function_call SEMI .)
    REPEAT          reduce using rule 6 (expression -> expression function_call SEMI .)
    FOR             reduce using rule 6 (expression -> expression function_call SEMI .)
    WHILE           reduce using rule 6 (expression -> expression function_call SEMI .)
    TRY             reduce using rule 6 (expression -> expression function_call SEMI .)
    $end            reduce using rule 6 (expression -> expression function_call SEMI .)
    RMB             reduce using rule 6 (expression -> expression function_call SEMI .)


state 85

    (10) expression -> expression use SEMI .

    VAR             reduce using rule 10 (expression -> expression use SEMI .)
    IDENTIFIER      reduce using rule 10 (expression -> expression use SEMI .)
    USE             reduce using rule 10 (expression -> expression use SEMI .)
    GLOBAL          reduce using rule 10 (expression -> expression use SEMI .)
    CLASS           reduce using rule 10 (expression -> expression use SEMI .)
    IF              reduce using rule 10 (expression -> expression use SEMI .)
    FUNCTION        reduce using rule 10 (expression -> expression use SEMI .)
    REPEAT          reduce using rule 10 (expression -> expression use SEMI .)
    FOR             reduce using rule 10 (expression -> expression use SEMI .)
    WHILE           reduce using rule 10 (expression -> expression use SEMI .)
    TRY             reduce using rule 10 (expression -> expression use SEMI .)
    $end            reduce using rule 10 (expression -> expression use SEMI .)
    RMB             reduce using rule 10 (expression -> expression use SEMI .)


state 86

    (12) expression -> expression variable_alone SEMI .

    VAR             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    IDENTIFIER      reduce using rule 12 (expression -> expression variable_alone SEMI .)
    USE             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    GLOBAL          reduce using rule 12 (expression -> expression variable_alone SEMI .)
    CLASS           reduce using rule 12 (expression -> expression variable_alone SEMI .)
    IF              reduce using rule 12 (expression -> expression variable_alone SEMI .)
    FUNCTION        reduce using rule 12 (expression -> expression variable_alone SEMI .)
    REPEAT          reduce using rule 12 (expression -> expression variable_alone SEMI .)
    FOR             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    WHILE           reduce using rule 12 (expression -> expression variable_alone SEMI .)
    TRY             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    $end            reduce using rule 12 (expression -> expression variable_alone SEMI .)
    RMB             reduce using rule 12 (expression -> expression variable_alone SEMI .)


state 87

    (13) expression -> expression global_variable SEMI .

    VAR             reduce using rule 13 (expression -> expression global_variable SEMI .)
    IDENTIFIER      reduce using rule 13 (expression -> expression global_variable SEMI .)
    USE             reduce using rule 13 (expression -> expression global_variable SEMI .)
    GLOBAL          reduce using rule 13 (expression -> expression global_variable SEMI .)
    CLASS           reduce using rule 13 (expression -> expression global_variable SEMI .)
    IF              reduce using rule 13 (expression -> expression global_variable SEMI .)
    FUNCTION        reduce using rule 13 (expression -> expression global_variable SEMI .)
    REPEAT          reduce using rule 13 (expression -> expression global_variable SEMI .)
    FOR             reduce using rule 13 (expression -> expression global_variable SEMI .)
    WHILE           reduce using rule 13 (expression -> expression global_variable SEMI .)
    TRY             reduce using rule 13 (expression -> expression global_variable SEMI .)
    $end            reduce using rule 13 (expression -> expression global_variable SEMI .)
    RMB             reduce using rule 13 (expression -> expression global_variable SEMI .)


state 88

    (15) expression -> expression debug SEMI .

    VAR             reduce using rule 15 (expression -> expression debug SEMI .)
    IDENTIFIER      reduce using rule 15 (expression -> expression debug SEMI .)
    USE             reduce using rule 15 (expression -> expression debug SEMI .)
    GLOBAL          reduce using rule 15 (expression -> expression debug SEMI .)
    CLASS           reduce using rule 15 (expression -> expression debug SEMI .)
    IF              reduce using rule 15 (expression -> expression debug SEMI .)
    FUNCTION        reduce using rule 15 (expression -> expression debug SEMI .)
    REPEAT          reduce using rule 15 (expression -> expression debug SEMI .)
    FOR             reduce using rule 15 (expression -> expression debug SEMI .)
    WHILE           reduce using rule 15 (expression -> expression debug SEMI .)
    TRY             reduce using rule 15 (expression -> expression debug SEMI .)
    $end            reduce using rule 15 (expression -> expression debug SEMI .)
    RMB             reduce using rule 15 (expression -> expression debug SEMI .)


state 89

    (78) variable_declaration -> VAR IDENTIFIER LIST . EQUAL calculate

    EQUAL           shift and go to state 120


state 90

    (79) variable_declaration -> VAR IDENTIFIER EQUAL . calculate
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    calculate                      shift and go to state 121

state 91

    (89) calculate -> IDENTIFIER .
    (90) calculate -> IDENTIFIER . LIST

    PLUS            reduce using rule 89 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 89 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 89 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 89 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 89 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 89 (calculate -> IDENTIFIER .)
    COMMA           reduce using rule 89 (calculate -> IDENTIFIER .)
    LB              reduce using rule 89 (calculate -> IDENTIFIER .)
    RB              reduce using rule 89 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 89 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 122


state 92

    (76) variable_value_change -> IDENTIFIER EQUAL LIST .
    (91) calculate -> LIST .

  ! reduce/reduce conflict for SEMI resolved using rule 76 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    SEMI            reduce using rule 76 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    PLUS            reduce using rule 91 (calculate -> LIST .)
    MINUS           reduce using rule 91 (calculate -> LIST .)
    MUL             reduce using rule 91 (calculate -> LIST .)
    DIV             reduce using rule 91 (calculate -> LIST .)

  ! SEMI            [ reduce using rule 91 (calculate -> LIST .) ]


state 93

    (77) variable_value_change -> IDENTIFIER EQUAL calculate .
    (81) calculate -> calculate . PLUS calculate
    (82) calculate -> calculate . MINUS calculate
    (84) calculate -> calculate . MUL calculate
    (85) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 77 (variable_value_change -> IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    MUL             shift and go to state 125
    DIV             shift and go to state 126


state 94

    (83) calculate -> MINUS . calculate
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    calculate                      shift and go to state 127

state 95

    (86) calculate -> INT .

    PLUS            reduce using rule 86 (calculate -> INT .)
    MINUS           reduce using rule 86 (calculate -> INT .)
    MUL             reduce using rule 86 (calculate -> INT .)
    DIV             reduce using rule 86 (calculate -> INT .)
    SEMI            reduce using rule 86 (calculate -> INT .)
    RSB             reduce using rule 86 (calculate -> INT .)
    COMMA           reduce using rule 86 (calculate -> INT .)
    LB              reduce using rule 86 (calculate -> INT .)
    RB              reduce using rule 86 (calculate -> INT .)
    EQUAL           reduce using rule 86 (calculate -> INT .)


state 96

    (87) calculate -> FLOAT .

    PLUS            reduce using rule 87 (calculate -> FLOAT .)
    MINUS           reduce using rule 87 (calculate -> FLOAT .)
    MUL             reduce using rule 87 (calculate -> FLOAT .)
    DIV             reduce using rule 87 (calculate -> FLOAT .)
    SEMI            reduce using rule 87 (calculate -> FLOAT .)
    RSB             reduce using rule 87 (calculate -> FLOAT .)
    COMMA           reduce using rule 87 (calculate -> FLOAT .)
    LB              reduce using rule 87 (calculate -> FLOAT .)
    RB              reduce using rule 87 (calculate -> FLOAT .)
    EQUAL           reduce using rule 87 (calculate -> FLOAT .)


state 97

    (88) calculate -> STRING .

    PLUS            reduce using rule 88 (calculate -> STRING .)
    MINUS           reduce using rule 88 (calculate -> STRING .)
    MUL             reduce using rule 88 (calculate -> STRING .)
    DIV             reduce using rule 88 (calculate -> STRING .)
    SEMI            reduce using rule 88 (calculate -> STRING .)
    RSB             reduce using rule 88 (calculate -> STRING .)
    COMMA           reduce using rule 88 (calculate -> STRING .)
    LB              reduce using rule 88 (calculate -> STRING .)
    RB              reduce using rule 88 (calculate -> STRING .)
    EQUAL           reduce using rule 88 (calculate -> STRING .)


state 98

    (92) calculate -> LSB . calculate RSB
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    calculate                      shift and go to state 128

state 99

    (49) function_call -> IDENTIFIER LSB parameter . RSB
    (51) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 129
    COMMA           shift and go to state 130


state 100

    (50) function_call -> IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 131


state 101

    (52) parameter -> calculate .
    (81) calculate -> calculate . PLUS calculate
    (82) calculate -> calculate . MINUS calculate
    (84) calculate -> calculate . MUL calculate
    (85) calculate -> calculate . DIV calculate

    RSB             reduce using rule 52 (parameter -> calculate .)
    COMMA           reduce using rule 52 (parameter -> calculate .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    MUL             shift and go to state 125
    DIV             shift and go to state 126


state 102

    (91) calculate -> LIST .

    PLUS            reduce using rule 91 (calculate -> LIST .)
    MINUS           reduce using rule 91 (calculate -> LIST .)
    MUL             reduce using rule 91 (calculate -> LIST .)
    DIV             reduce using rule 91 (calculate -> LIST .)
    RSB             reduce using rule 91 (calculate -> LIST .)
    COMMA           reduce using rule 91 (calculate -> LIST .)
    LB              reduce using rule 91 (calculate -> LIST .)
    RB              reduce using rule 91 (calculate -> LIST .)
    EQUAL           reduce using rule 91 (calculate -> LIST .)
    SEMI            reduce using rule 91 (calculate -> LIST .)


state 103

    (54) if_statement -> if_statement_1 if_statement_2 if_statement_3 .

    VAR             reduce using rule 54 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IDENTIFIER      reduce using rule 54 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    USE             reduce using rule 54 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    GLOBAL          reduce using rule 54 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    CLASS           reduce using rule 54 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IF              reduce using rule 54 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FUNCTION        reduce using rule 54 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    REPEAT          reduce using rule 54 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FOR             reduce using rule 54 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    WHILE           reduce using rule 54 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    TRY             reduce using rule 54 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    $end            reduce using rule 54 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    RMB             reduce using rule 54 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)


state 104

    (60) if_statement_2 -> if_statement_2 ELSE . IF LSB condition RSB LMB expression RMB
    (61) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 132
    LMB             shift and go to state 106


state 105

    (59) if_statement_2 -> ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 133


state 106

    (61) if_statement_3 -> ELSE LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . variable_declaration SEMI
    (17) expression -> . variable_value_change SEMI
    (18) expression -> . if_statement
    (19) expression -> . function
    (20) expression -> . function_call
    (21) expression -> . repeat
    (22) expression -> . for
    (23) expression -> . while
    (24) expression -> . use SEMI
    (25) expression -> . error_handling
    (26) expression -> . variable_alone SEMI
    (27) expression -> . global_variable SEMI
    (28) expression -> . class_def
    (29) expression -> . debug SEMI
    (30) expression -> . empty
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (93) empty -> .
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    RMB             reduce using rule 93 (empty -> .)
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

  ! VAR             [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! USE             [ reduce using rule 93 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 93 (empty -> .) ]
  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 93 (empty -> .) ]
  ! REPEAT          [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! TRY             [ reduce using rule 93 (empty -> .) ]

    expression                     shift and go to state 134
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    empty                          shift and go to state 17
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 107

    (48) function_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

    RMB             shift and go to state 135
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

    variable_declaration           shift and go to state 35
    variable_value_change          shift and go to state 36
    if_statement                   shift and go to state 37
    function                       shift and go to state 38
    function_call                  shift and go to state 39
    repeat                         shift and go to state 40
    for                            shift and go to state 41
    while                          shift and go to state 42
    use                            shift and go to state 43
    error_handling                 shift and go to state 44
    variable_alone                 shift and go to state 45
    global_variable                shift and go to state 46
    class_def                      shift and go to state 47
    debug                          shift and go to state 48
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 108

    (42) repeat_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

    RMB             shift and go to state 136
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

    variable_declaration           shift and go to state 35
    variable_value_change          shift and go to state 36
    if_statement                   shift and go to state 37
    function                       shift and go to state 38
    function_call                  shift and go to state 39
    repeat                         shift and go to state 40
    for                            shift and go to state 41
    while                          shift and go to state 42
    use                            shift and go to state 43
    error_handling                 shift and go to state 44
    variable_alone                 shift and go to state 45
    global_variable                shift and go to state 46
    class_def                      shift and go to state 47
    debug                          shift and go to state 48
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 109

    (36) for_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

    RMB             shift and go to state 137
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

    variable_declaration           shift and go to state 35
    variable_value_change          shift and go to state 36
    if_statement                   shift and go to state 37
    function                       shift and go to state 38
    function_call                  shift and go to state 39
    repeat                         shift and go to state 40
    for                            shift and go to state 41
    while                          shift and go to state 42
    use                            shift and go to state 43
    error_handling                 shift and go to state 44
    variable_alone                 shift and go to state 45
    global_variable                shift and go to state 46
    class_def                      shift and go to state 47
    debug                          shift and go to state 48
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 110

    (39) while_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

    RMB             shift and go to state 138
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

    variable_declaration           shift and go to state 35
    variable_value_change          shift and go to state 36
    if_statement                   shift and go to state 37
    function                       shift and go to state 38
    function_call                  shift and go to state 39
    repeat                         shift and go to state 40
    for                            shift and go to state 41
    while                          shift and go to state 42
    use                            shift and go to state 43
    error_handling                 shift and go to state 44
    variable_alone                 shift and go to state 45
    global_variable                shift and go to state 46
    class_def                      shift and go to state 47
    debug                          shift and go to state 48
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 111

    (33) catch -> CATCH LSB . IDENTIFIER RSB LMB expression RMB

    IDENTIFIER      shift and go to state 139


state 112

    (44) class_def -> CLASS IDENTIFIER LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . variable_declaration SEMI
    (17) expression -> . variable_value_change SEMI
    (18) expression -> . if_statement
    (19) expression -> . function
    (20) expression -> . function_call
    (21) expression -> . repeat
    (22) expression -> . for
    (23) expression -> . while
    (24) expression -> . use SEMI
    (25) expression -> . error_handling
    (26) expression -> . variable_alone SEMI
    (27) expression -> . global_variable SEMI
    (28) expression -> . class_def
    (29) expression -> . debug SEMI
    (30) expression -> . empty
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (93) empty -> .
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    RMB             reduce using rule 93 (empty -> .)
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

  ! VAR             [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! USE             [ reduce using rule 93 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 93 (empty -> .) ]
  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 93 (empty -> .) ]
  ! REPEAT          [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! TRY             [ reduce using rule 93 (empty -> .) ]

    expression                     shift and go to state 140
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    empty                          shift and go to state 17
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 113

    (58) if_statement_1 -> IF LSB condition . RSB LMB expression RMB
    (62) condition -> condition . LB calculate
    (63) condition -> condition . RB calculate
    (64) condition -> condition . LB EQUAL calculate
    (65) condition -> condition . RB EQUAL calculate
    (66) condition -> condition . EQUAL calculate

    RSB             shift and go to state 141
    LB              shift and go to state 142
    RB              shift and go to state 143
    EQUAL           shift and go to state 144


state 114

    (67) condition -> calculate .
    (81) calculate -> calculate . PLUS calculate
    (82) calculate -> calculate . MINUS calculate
    (84) calculate -> calculate . MUL calculate
    (85) calculate -> calculate . DIV calculate

    RSB             reduce using rule 67 (condition -> calculate .)
    LB              reduce using rule 67 (condition -> calculate .)
    RB              reduce using rule 67 (condition -> calculate .)
    EQUAL           reduce using rule 67 (condition -> calculate .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    MUL             shift and go to state 125
    DIV             shift and go to state 126


state 115

    (46) function_head -> FUNCTION IDENTIFIER LSB . parameter RSB
    (47) function_head -> FUNCTION IDENTIFIER LSB . empty RSB
    (51) parameter -> . parameter COMMA calculate
    (52) parameter -> . calculate
    (93) empty -> .
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    RSB             reduce using rule 93 (empty -> .)
    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    parameter                      shift and go to state 145
    empty                          shift and go to state 146
    calculate                      shift and go to state 101

state 116

    (41) repeat_head -> REPEAT LSB calculate . RSB
    (81) calculate -> calculate . PLUS calculate
    (82) calculate -> calculate . MINUS calculate
    (84) calculate -> calculate . MUL calculate
    (85) calculate -> calculate . DIV calculate

    RSB             shift and go to state 147
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    MUL             shift and go to state 125
    DIV             shift and go to state 126


state 117

    (35) for_head -> FOR LSB IDENTIFIER . IN IDENTIFIER RSB

    IN              shift and go to state 148


state 118

    (38) while_head -> WHILE LSB condition . RSB
    (62) condition -> condition . LB calculate
    (63) condition -> condition . RB calculate
    (64) condition -> condition . LB EQUAL calculate
    (65) condition -> condition . RB EQUAL calculate
    (66) condition -> condition . EQUAL calculate

    RSB             shift and go to state 149
    LB              shift and go to state 142
    RB              shift and go to state 143
    EQUAL           shift and go to state 144


state 119

    (32) try -> TRY LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

    RMB             shift and go to state 150
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

    variable_declaration           shift and go to state 35
    variable_value_change          shift and go to state 36
    if_statement                   shift and go to state 37
    function                       shift and go to state 38
    function_call                  shift and go to state 39
    repeat                         shift and go to state 40
    for                            shift and go to state 41
    while                          shift and go to state 42
    use                            shift and go to state 43
    error_handling                 shift and go to state 44
    variable_alone                 shift and go to state 45
    global_variable                shift and go to state 46
    class_def                      shift and go to state 47
    debug                          shift and go to state 48
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 120

    (78) variable_declaration -> VAR IDENTIFIER LIST EQUAL . calculate
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    calculate                      shift and go to state 151

state 121

    (79) variable_declaration -> VAR IDENTIFIER EQUAL calculate .
    (81) calculate -> calculate . PLUS calculate
    (82) calculate -> calculate . MINUS calculate
    (84) calculate -> calculate . MUL calculate
    (85) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 79 (variable_declaration -> VAR IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    MUL             shift and go to state 125
    DIV             shift and go to state 126


state 122

    (90) calculate -> IDENTIFIER LIST .

    PLUS            reduce using rule 90 (calculate -> IDENTIFIER LIST .)
    MINUS           reduce using rule 90 (calculate -> IDENTIFIER LIST .)
    MUL             reduce using rule 90 (calculate -> IDENTIFIER LIST .)
    DIV             reduce using rule 90 (calculate -> IDENTIFIER LIST .)
    SEMI            reduce using rule 90 (calculate -> IDENTIFIER LIST .)
    RSB             reduce using rule 90 (calculate -> IDENTIFIER LIST .)
    COMMA           reduce using rule 90 (calculate -> IDENTIFIER LIST .)
    LB              reduce using rule 90 (calculate -> IDENTIFIER LIST .)
    RB              reduce using rule 90 (calculate -> IDENTIFIER LIST .)
    EQUAL           reduce using rule 90 (calculate -> IDENTIFIER LIST .)


state 123

    (81) calculate -> calculate PLUS . calculate
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    calculate                      shift and go to state 152

state 124

    (82) calculate -> calculate MINUS . calculate
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    calculate                      shift and go to state 153

state 125

    (84) calculate -> calculate MUL . calculate
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    calculate                      shift and go to state 154

state 126

    (85) calculate -> calculate DIV . calculate
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    calculate                      shift and go to state 155

state 127

    (83) calculate -> MINUS calculate .
    (81) calculate -> calculate . PLUS calculate
    (82) calculate -> calculate . MINUS calculate
    (84) calculate -> calculate . MUL calculate
    (85) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 83 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 83 (calculate -> MINUS calculate .)
    MUL             reduce using rule 83 (calculate -> MINUS calculate .)
    DIV             reduce using rule 83 (calculate -> MINUS calculate .)
    SEMI            reduce using rule 83 (calculate -> MINUS calculate .)
    RSB             reduce using rule 83 (calculate -> MINUS calculate .)
    COMMA           reduce using rule 83 (calculate -> MINUS calculate .)
    LB              reduce using rule 83 (calculate -> MINUS calculate .)
    RB              reduce using rule 83 (calculate -> MINUS calculate .)
    EQUAL           reduce using rule 83 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]
  ! MUL             [ shift and go to state 125 ]
  ! DIV             [ shift and go to state 126 ]


state 128

    (92) calculate -> LSB calculate . RSB
    (81) calculate -> calculate . PLUS calculate
    (82) calculate -> calculate . MINUS calculate
    (84) calculate -> calculate . MUL calculate
    (85) calculate -> calculate . DIV calculate

    RSB             shift and go to state 156
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    MUL             shift and go to state 125
    DIV             shift and go to state 126


state 129

    (49) function_call -> IDENTIFIER LSB parameter RSB .

    VAR             reduce using rule 49 (function_call -> IDENTIFIER LSB parameter RSB .)
    IDENTIFIER      reduce using rule 49 (function_call -> IDENTIFIER LSB parameter RSB .)
    USE             reduce using rule 49 (function_call -> IDENTIFIER LSB parameter RSB .)
    GLOBAL          reduce using rule 49 (function_call -> IDENTIFIER LSB parameter RSB .)
    CLASS           reduce using rule 49 (function_call -> IDENTIFIER LSB parameter RSB .)
    IF              reduce using rule 49 (function_call -> IDENTIFIER LSB parameter RSB .)
    FUNCTION        reduce using rule 49 (function_call -> IDENTIFIER LSB parameter RSB .)
    REPEAT          reduce using rule 49 (function_call -> IDENTIFIER LSB parameter RSB .)
    FOR             reduce using rule 49 (function_call -> IDENTIFIER LSB parameter RSB .)
    WHILE           reduce using rule 49 (function_call -> IDENTIFIER LSB parameter RSB .)
    TRY             reduce using rule 49 (function_call -> IDENTIFIER LSB parameter RSB .)
    $end            reduce using rule 49 (function_call -> IDENTIFIER LSB parameter RSB .)
    SEMI            reduce using rule 49 (function_call -> IDENTIFIER LSB parameter RSB .)
    RMB             reduce using rule 49 (function_call -> IDENTIFIER LSB parameter RSB .)


state 130

    (51) parameter -> parameter COMMA . calculate
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    calculate                      shift and go to state 157

state 131

    (50) function_call -> IDENTIFIER LSB empty RSB .

    VAR             reduce using rule 50 (function_call -> IDENTIFIER LSB empty RSB .)
    IDENTIFIER      reduce using rule 50 (function_call -> IDENTIFIER LSB empty RSB .)
    USE             reduce using rule 50 (function_call -> IDENTIFIER LSB empty RSB .)
    GLOBAL          reduce using rule 50 (function_call -> IDENTIFIER LSB empty RSB .)
    CLASS           reduce using rule 50 (function_call -> IDENTIFIER LSB empty RSB .)
    IF              reduce using rule 50 (function_call -> IDENTIFIER LSB empty RSB .)
    FUNCTION        reduce using rule 50 (function_call -> IDENTIFIER LSB empty RSB .)
    REPEAT          reduce using rule 50 (function_call -> IDENTIFIER LSB empty RSB .)
    FOR             reduce using rule 50 (function_call -> IDENTIFIER LSB empty RSB .)
    WHILE           reduce using rule 50 (function_call -> IDENTIFIER LSB empty RSB .)
    TRY             reduce using rule 50 (function_call -> IDENTIFIER LSB empty RSB .)
    $end            reduce using rule 50 (function_call -> IDENTIFIER LSB empty RSB .)
    SEMI            reduce using rule 50 (function_call -> IDENTIFIER LSB empty RSB .)
    RMB             reduce using rule 50 (function_call -> IDENTIFIER LSB empty RSB .)


state 132

    (60) if_statement_2 -> if_statement_2 ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 158


state 133

    (59) if_statement_2 -> ELSE IF LSB . condition RSB LMB expression RMB
    (62) condition -> . condition LB calculate
    (63) condition -> . condition RB calculate
    (64) condition -> . condition LB EQUAL calculate
    (65) condition -> . condition RB EQUAL calculate
    (66) condition -> . condition EQUAL calculate
    (67) condition -> . calculate
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    condition                      shift and go to state 159
    calculate                      shift and go to state 114

state 134

    (61) if_statement_3 -> ELSE LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

    RMB             shift and go to state 160
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

    variable_declaration           shift and go to state 35
    variable_value_change          shift and go to state 36
    if_statement                   shift and go to state 37
    function                       shift and go to state 38
    function_call                  shift and go to state 39
    repeat                         shift and go to state 40
    for                            shift and go to state 41
    while                          shift and go to state 42
    use                            shift and go to state 43
    error_handling                 shift and go to state 44
    variable_alone                 shift and go to state 45
    global_variable                shift and go to state 46
    class_def                      shift and go to state 47
    debug                          shift and go to state 48
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 135

    (48) function_body -> LMB expression RMB .

    VAR             reduce using rule 48 (function_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 48 (function_body -> LMB expression RMB .)
    USE             reduce using rule 48 (function_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 48 (function_body -> LMB expression RMB .)
    CLASS           reduce using rule 48 (function_body -> LMB expression RMB .)
    IF              reduce using rule 48 (function_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 48 (function_body -> LMB expression RMB .)
    REPEAT          reduce using rule 48 (function_body -> LMB expression RMB .)
    FOR             reduce using rule 48 (function_body -> LMB expression RMB .)
    WHILE           reduce using rule 48 (function_body -> LMB expression RMB .)
    TRY             reduce using rule 48 (function_body -> LMB expression RMB .)
    $end            reduce using rule 48 (function_body -> LMB expression RMB .)
    RMB             reduce using rule 48 (function_body -> LMB expression RMB .)


state 136

    (42) repeat_body -> LMB expression RMB .

    VAR             reduce using rule 42 (repeat_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 42 (repeat_body -> LMB expression RMB .)
    USE             reduce using rule 42 (repeat_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 42 (repeat_body -> LMB expression RMB .)
    CLASS           reduce using rule 42 (repeat_body -> LMB expression RMB .)
    IF              reduce using rule 42 (repeat_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 42 (repeat_body -> LMB expression RMB .)
    REPEAT          reduce using rule 42 (repeat_body -> LMB expression RMB .)
    FOR             reduce using rule 42 (repeat_body -> LMB expression RMB .)
    WHILE           reduce using rule 42 (repeat_body -> LMB expression RMB .)
    TRY             reduce using rule 42 (repeat_body -> LMB expression RMB .)
    $end            reduce using rule 42 (repeat_body -> LMB expression RMB .)
    RMB             reduce using rule 42 (repeat_body -> LMB expression RMB .)


state 137

    (36) for_body -> LMB expression RMB .

    VAR             reduce using rule 36 (for_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 36 (for_body -> LMB expression RMB .)
    USE             reduce using rule 36 (for_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 36 (for_body -> LMB expression RMB .)
    CLASS           reduce using rule 36 (for_body -> LMB expression RMB .)
    IF              reduce using rule 36 (for_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 36 (for_body -> LMB expression RMB .)
    REPEAT          reduce using rule 36 (for_body -> LMB expression RMB .)
    FOR             reduce using rule 36 (for_body -> LMB expression RMB .)
    WHILE           reduce using rule 36 (for_body -> LMB expression RMB .)
    TRY             reduce using rule 36 (for_body -> LMB expression RMB .)
    $end            reduce using rule 36 (for_body -> LMB expression RMB .)
    RMB             reduce using rule 36 (for_body -> LMB expression RMB .)


state 138

    (39) while_body -> LMB expression RMB .

    VAR             reduce using rule 39 (while_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 39 (while_body -> LMB expression RMB .)
    USE             reduce using rule 39 (while_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 39 (while_body -> LMB expression RMB .)
    CLASS           reduce using rule 39 (while_body -> LMB expression RMB .)
    IF              reduce using rule 39 (while_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 39 (while_body -> LMB expression RMB .)
    REPEAT          reduce using rule 39 (while_body -> LMB expression RMB .)
    FOR             reduce using rule 39 (while_body -> LMB expression RMB .)
    WHILE           reduce using rule 39 (while_body -> LMB expression RMB .)
    TRY             reduce using rule 39 (while_body -> LMB expression RMB .)
    $end            reduce using rule 39 (while_body -> LMB expression RMB .)
    RMB             reduce using rule 39 (while_body -> LMB expression RMB .)


state 139

    (33) catch -> CATCH LSB IDENTIFIER . RSB LMB expression RMB

    RSB             shift and go to state 161


state 140

    (44) class_def -> CLASS IDENTIFIER LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

    RMB             shift and go to state 162
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

    variable_declaration           shift and go to state 35
    variable_value_change          shift and go to state 36
    if_statement                   shift and go to state 37
    function                       shift and go to state 38
    function_call                  shift and go to state 39
    repeat                         shift and go to state 40
    for                            shift and go to state 41
    while                          shift and go to state 42
    use                            shift and go to state 43
    error_handling                 shift and go to state 44
    variable_alone                 shift and go to state 45
    global_variable                shift and go to state 46
    class_def                      shift and go to state 47
    debug                          shift and go to state 48
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 141

    (58) if_statement_1 -> IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 163


state 142

    (62) condition -> condition LB . calculate
    (64) condition -> condition LB . EQUAL calculate
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 165
    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    calculate                      shift and go to state 164

state 143

    (63) condition -> condition RB . calculate
    (65) condition -> condition RB . EQUAL calculate
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 167
    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    calculate                      shift and go to state 166

state 144

    (66) condition -> condition EQUAL . calculate
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    calculate                      shift and go to state 168

state 145

    (46) function_head -> FUNCTION IDENTIFIER LSB parameter . RSB
    (51) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 169
    COMMA           shift and go to state 130


state 146

    (47) function_head -> FUNCTION IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 170


state 147

    (41) repeat_head -> REPEAT LSB calculate RSB .

    LMB             reduce using rule 41 (repeat_head -> REPEAT LSB calculate RSB .)


state 148

    (35) for_head -> FOR LSB IDENTIFIER IN . IDENTIFIER RSB

    IDENTIFIER      shift and go to state 171


state 149

    (38) while_head -> WHILE LSB condition RSB .

    LMB             reduce using rule 38 (while_head -> WHILE LSB condition RSB .)


state 150

    (32) try -> TRY LMB expression RMB .

    CATCH           reduce using rule 32 (try -> TRY LMB expression RMB .)


state 151

    (78) variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .
    (81) calculate -> calculate . PLUS calculate
    (82) calculate -> calculate . MINUS calculate
    (84) calculate -> calculate . MUL calculate
    (85) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 78 (variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    MUL             shift and go to state 125
    DIV             shift and go to state 126


state 152

    (81) calculate -> calculate PLUS calculate .
    (81) calculate -> calculate . PLUS calculate
    (82) calculate -> calculate . MINUS calculate
    (84) calculate -> calculate . MUL calculate
    (85) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 81 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 81 (calculate -> calculate PLUS calculate .)
    SEMI            reduce using rule 81 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 81 (calculate -> calculate PLUS calculate .)
    COMMA           reduce using rule 81 (calculate -> calculate PLUS calculate .)
    LB              reduce using rule 81 (calculate -> calculate PLUS calculate .)
    RB              reduce using rule 81 (calculate -> calculate PLUS calculate .)
    EQUAL           reduce using rule 81 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 125
    DIV             shift and go to state 126

  ! MUL             [ reduce using rule 81 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 81 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]


state 153

    (82) calculate -> calculate MINUS calculate .
    (81) calculate -> calculate . PLUS calculate
    (82) calculate -> calculate . MINUS calculate
    (84) calculate -> calculate . MUL calculate
    (85) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 82 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 82 (calculate -> calculate MINUS calculate .)
    SEMI            reduce using rule 82 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 82 (calculate -> calculate MINUS calculate .)
    COMMA           reduce using rule 82 (calculate -> calculate MINUS calculate .)
    LB              reduce using rule 82 (calculate -> calculate MINUS calculate .)
    RB              reduce using rule 82 (calculate -> calculate MINUS calculate .)
    EQUAL           reduce using rule 82 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 125
    DIV             shift and go to state 126

  ! MUL             [ reduce using rule 82 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 82 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]


state 154

    (84) calculate -> calculate MUL calculate .
    (81) calculate -> calculate . PLUS calculate
    (82) calculate -> calculate . MINUS calculate
    (84) calculate -> calculate . MUL calculate
    (85) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 84 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 84 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 84 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 84 (calculate -> calculate MUL calculate .)
    SEMI            reduce using rule 84 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 84 (calculate -> calculate MUL calculate .)
    COMMA           reduce using rule 84 (calculate -> calculate MUL calculate .)
    LB              reduce using rule 84 (calculate -> calculate MUL calculate .)
    RB              reduce using rule 84 (calculate -> calculate MUL calculate .)
    EQUAL           reduce using rule 84 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]
  ! MUL             [ shift and go to state 125 ]
  ! DIV             [ shift and go to state 126 ]


state 155

    (85) calculate -> calculate DIV calculate .
    (81) calculate -> calculate . PLUS calculate
    (82) calculate -> calculate . MINUS calculate
    (84) calculate -> calculate . MUL calculate
    (85) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 85 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 85 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 85 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 85 (calculate -> calculate DIV calculate .)
    SEMI            reduce using rule 85 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 85 (calculate -> calculate DIV calculate .)
    COMMA           reduce using rule 85 (calculate -> calculate DIV calculate .)
    LB              reduce using rule 85 (calculate -> calculate DIV calculate .)
    RB              reduce using rule 85 (calculate -> calculate DIV calculate .)
    EQUAL           reduce using rule 85 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]
  ! MUL             [ shift and go to state 125 ]
  ! DIV             [ shift and go to state 126 ]


state 156

    (92) calculate -> LSB calculate RSB .

    PLUS            reduce using rule 92 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 92 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 92 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 92 (calculate -> LSB calculate RSB .)
    SEMI            reduce using rule 92 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 92 (calculate -> LSB calculate RSB .)
    COMMA           reduce using rule 92 (calculate -> LSB calculate RSB .)
    LB              reduce using rule 92 (calculate -> LSB calculate RSB .)
    RB              reduce using rule 92 (calculate -> LSB calculate RSB .)
    EQUAL           reduce using rule 92 (calculate -> LSB calculate RSB .)


state 157

    (51) parameter -> parameter COMMA calculate .
    (81) calculate -> calculate . PLUS calculate
    (82) calculate -> calculate . MINUS calculate
    (84) calculate -> calculate . MUL calculate
    (85) calculate -> calculate . DIV calculate

    RSB             reduce using rule 51 (parameter -> parameter COMMA calculate .)
    COMMA           reduce using rule 51 (parameter -> parameter COMMA calculate .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    MUL             shift and go to state 125
    DIV             shift and go to state 126


state 158

    (60) if_statement_2 -> if_statement_2 ELSE IF LSB . condition RSB LMB expression RMB
    (62) condition -> . condition LB calculate
    (63) condition -> . condition RB calculate
    (64) condition -> . condition LB EQUAL calculate
    (65) condition -> . condition RB EQUAL calculate
    (66) condition -> . condition EQUAL calculate
    (67) condition -> . calculate
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    condition                      shift and go to state 172
    calculate                      shift and go to state 114

state 159

    (59) if_statement_2 -> ELSE IF LSB condition . RSB LMB expression RMB
    (62) condition -> condition . LB calculate
    (63) condition -> condition . RB calculate
    (64) condition -> condition . LB EQUAL calculate
    (65) condition -> condition . RB EQUAL calculate
    (66) condition -> condition . EQUAL calculate

    RSB             shift and go to state 173
    LB              shift and go to state 142
    RB              shift and go to state 143
    EQUAL           shift and go to state 144


state 160

    (61) if_statement_3 -> ELSE LMB expression RMB .

    VAR             reduce using rule 61 (if_statement_3 -> ELSE LMB expression RMB .)
    IDENTIFIER      reduce using rule 61 (if_statement_3 -> ELSE LMB expression RMB .)
    USE             reduce using rule 61 (if_statement_3 -> ELSE LMB expression RMB .)
    GLOBAL          reduce using rule 61 (if_statement_3 -> ELSE LMB expression RMB .)
    CLASS           reduce using rule 61 (if_statement_3 -> ELSE LMB expression RMB .)
    IF              reduce using rule 61 (if_statement_3 -> ELSE LMB expression RMB .)
    FUNCTION        reduce using rule 61 (if_statement_3 -> ELSE LMB expression RMB .)
    REPEAT          reduce using rule 61 (if_statement_3 -> ELSE LMB expression RMB .)
    FOR             reduce using rule 61 (if_statement_3 -> ELSE LMB expression RMB .)
    WHILE           reduce using rule 61 (if_statement_3 -> ELSE LMB expression RMB .)
    TRY             reduce using rule 61 (if_statement_3 -> ELSE LMB expression RMB .)
    $end            reduce using rule 61 (if_statement_3 -> ELSE LMB expression RMB .)
    RMB             reduce using rule 61 (if_statement_3 -> ELSE LMB expression RMB .)


state 161

    (33) catch -> CATCH LSB IDENTIFIER RSB . LMB expression RMB

    LMB             shift and go to state 174


state 162

    (44) class_def -> CLASS IDENTIFIER LMB expression RMB .

    VAR             reduce using rule 44 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    IDENTIFIER      reduce using rule 44 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    USE             reduce using rule 44 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    GLOBAL          reduce using rule 44 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    CLASS           reduce using rule 44 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    IF              reduce using rule 44 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    FUNCTION        reduce using rule 44 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    REPEAT          reduce using rule 44 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    FOR             reduce using rule 44 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    WHILE           reduce using rule 44 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    TRY             reduce using rule 44 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    $end            reduce using rule 44 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    RMB             reduce using rule 44 (class_def -> CLASS IDENTIFIER LMB expression RMB .)


state 163

    (58) if_statement_1 -> IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . variable_declaration SEMI
    (17) expression -> . variable_value_change SEMI
    (18) expression -> . if_statement
    (19) expression -> . function
    (20) expression -> . function_call
    (21) expression -> . repeat
    (22) expression -> . for
    (23) expression -> . while
    (24) expression -> . use SEMI
    (25) expression -> . error_handling
    (26) expression -> . variable_alone SEMI
    (27) expression -> . global_variable SEMI
    (28) expression -> . class_def
    (29) expression -> . debug SEMI
    (30) expression -> . empty
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (93) empty -> .
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    RMB             reduce using rule 93 (empty -> .)
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

  ! VAR             [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! USE             [ reduce using rule 93 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 93 (empty -> .) ]
  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 93 (empty -> .) ]
  ! REPEAT          [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! TRY             [ reduce using rule 93 (empty -> .) ]

    expression                     shift and go to state 175
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    empty                          shift and go to state 17
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 164

    (62) condition -> condition LB calculate .
    (81) calculate -> calculate . PLUS calculate
    (82) calculate -> calculate . MINUS calculate
    (84) calculate -> calculate . MUL calculate
    (85) calculate -> calculate . DIV calculate

    RSB             reduce using rule 62 (condition -> condition LB calculate .)
    LB              reduce using rule 62 (condition -> condition LB calculate .)
    RB              reduce using rule 62 (condition -> condition LB calculate .)
    EQUAL           reduce using rule 62 (condition -> condition LB calculate .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    MUL             shift and go to state 125
    DIV             shift and go to state 126


state 165

    (64) condition -> condition LB EQUAL . calculate
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    calculate                      shift and go to state 176

state 166

    (63) condition -> condition RB calculate .
    (81) calculate -> calculate . PLUS calculate
    (82) calculate -> calculate . MINUS calculate
    (84) calculate -> calculate . MUL calculate
    (85) calculate -> calculate . DIV calculate

    RSB             reduce using rule 63 (condition -> condition RB calculate .)
    LB              reduce using rule 63 (condition -> condition RB calculate .)
    RB              reduce using rule 63 (condition -> condition RB calculate .)
    EQUAL           reduce using rule 63 (condition -> condition RB calculate .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    MUL             shift and go to state 125
    DIV             shift and go to state 126


state 167

    (65) condition -> condition RB EQUAL . calculate
    (81) calculate -> . calculate PLUS calculate
    (82) calculate -> . calculate MINUS calculate
    (83) calculate -> . MINUS calculate
    (84) calculate -> . calculate MUL calculate
    (85) calculate -> . calculate DIV calculate
    (86) calculate -> . INT
    (87) calculate -> . FLOAT
    (88) calculate -> . STRING
    (89) calculate -> . IDENTIFIER
    (90) calculate -> . IDENTIFIER LIST
    (91) calculate -> . LIST
    (92) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 94
    INT             shift and go to state 95
    FLOAT           shift and go to state 96
    STRING          shift and go to state 97
    IDENTIFIER      shift and go to state 91
    LIST            shift and go to state 102
    LSB             shift and go to state 98

    calculate                      shift and go to state 177

state 168

    (66) condition -> condition EQUAL calculate .
    (81) calculate -> calculate . PLUS calculate
    (82) calculate -> calculate . MINUS calculate
    (84) calculate -> calculate . MUL calculate
    (85) calculate -> calculate . DIV calculate

    RSB             reduce using rule 66 (condition -> condition EQUAL calculate .)
    LB              reduce using rule 66 (condition -> condition EQUAL calculate .)
    RB              reduce using rule 66 (condition -> condition EQUAL calculate .)
    EQUAL           reduce using rule 66 (condition -> condition EQUAL calculate .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    MUL             shift and go to state 125
    DIV             shift and go to state 126


state 169

    (46) function_head -> FUNCTION IDENTIFIER LSB parameter RSB .

    LMB             reduce using rule 46 (function_head -> FUNCTION IDENTIFIER LSB parameter RSB .)


state 170

    (47) function_head -> FUNCTION IDENTIFIER LSB empty RSB .

    LMB             reduce using rule 47 (function_head -> FUNCTION IDENTIFIER LSB empty RSB .)


state 171

    (35) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER . RSB

    RSB             shift and go to state 178


state 172

    (60) if_statement_2 -> if_statement_2 ELSE IF LSB condition . RSB LMB expression RMB
    (62) condition -> condition . LB calculate
    (63) condition -> condition . RB calculate
    (64) condition -> condition . LB EQUAL calculate
    (65) condition -> condition . RB EQUAL calculate
    (66) condition -> condition . EQUAL calculate

    RSB             shift and go to state 179
    LB              shift and go to state 142
    RB              shift and go to state 143
    EQUAL           shift and go to state 144


state 173

    (59) if_statement_2 -> ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 180


state 174

    (33) catch -> CATCH LSB IDENTIFIER RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . variable_declaration SEMI
    (17) expression -> . variable_value_change SEMI
    (18) expression -> . if_statement
    (19) expression -> . function
    (20) expression -> . function_call
    (21) expression -> . repeat
    (22) expression -> . for
    (23) expression -> . while
    (24) expression -> . use SEMI
    (25) expression -> . error_handling
    (26) expression -> . variable_alone SEMI
    (27) expression -> . global_variable SEMI
    (28) expression -> . class_def
    (29) expression -> . debug SEMI
    (30) expression -> . empty
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (93) empty -> .
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    RMB             reduce using rule 93 (empty -> .)
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

  ! VAR             [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! USE             [ reduce using rule 93 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 93 (empty -> .) ]
  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 93 (empty -> .) ]
  ! REPEAT          [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! TRY             [ reduce using rule 93 (empty -> .) ]

    expression                     shift and go to state 181
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    empty                          shift and go to state 17
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 175

    (58) if_statement_1 -> IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

    RMB             shift and go to state 182
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

    variable_declaration           shift and go to state 35
    variable_value_change          shift and go to state 36
    if_statement                   shift and go to state 37
    function                       shift and go to state 38
    function_call                  shift and go to state 39
    repeat                         shift and go to state 40
    for                            shift and go to state 41
    while                          shift and go to state 42
    use                            shift and go to state 43
    error_handling                 shift and go to state 44
    variable_alone                 shift and go to state 45
    global_variable                shift and go to state 46
    class_def                      shift and go to state 47
    debug                          shift and go to state 48
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 176

    (64) condition -> condition LB EQUAL calculate .
    (81) calculate -> calculate . PLUS calculate
    (82) calculate -> calculate . MINUS calculate
    (84) calculate -> calculate . MUL calculate
    (85) calculate -> calculate . DIV calculate

    RSB             reduce using rule 64 (condition -> condition LB EQUAL calculate .)
    LB              reduce using rule 64 (condition -> condition LB EQUAL calculate .)
    RB              reduce using rule 64 (condition -> condition LB EQUAL calculate .)
    EQUAL           reduce using rule 64 (condition -> condition LB EQUAL calculate .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    MUL             shift and go to state 125
    DIV             shift and go to state 126


state 177

    (65) condition -> condition RB EQUAL calculate .
    (81) calculate -> calculate . PLUS calculate
    (82) calculate -> calculate . MINUS calculate
    (84) calculate -> calculate . MUL calculate
    (85) calculate -> calculate . DIV calculate

    RSB             reduce using rule 65 (condition -> condition RB EQUAL calculate .)
    LB              reduce using rule 65 (condition -> condition RB EQUAL calculate .)
    RB              reduce using rule 65 (condition -> condition RB EQUAL calculate .)
    EQUAL           reduce using rule 65 (condition -> condition RB EQUAL calculate .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    MUL             shift and go to state 125
    DIV             shift and go to state 126


state 178

    (35) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .

    LMB             reduce using rule 35 (for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .)


state 179

    (60) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 183


state 180

    (59) if_statement_2 -> ELSE IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . variable_declaration SEMI
    (17) expression -> . variable_value_change SEMI
    (18) expression -> . if_statement
    (19) expression -> . function
    (20) expression -> . function_call
    (21) expression -> . repeat
    (22) expression -> . for
    (23) expression -> . while
    (24) expression -> . use SEMI
    (25) expression -> . error_handling
    (26) expression -> . variable_alone SEMI
    (27) expression -> . global_variable SEMI
    (28) expression -> . class_def
    (29) expression -> . debug SEMI
    (30) expression -> . empty
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (93) empty -> .
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    RMB             reduce using rule 93 (empty -> .)
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

  ! VAR             [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! USE             [ reduce using rule 93 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 93 (empty -> .) ]
  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 93 (empty -> .) ]
  ! REPEAT          [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! TRY             [ reduce using rule 93 (empty -> .) ]

    expression                     shift and go to state 184
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    empty                          shift and go to state 17
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 181

    (33) catch -> CATCH LSB IDENTIFIER RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

    RMB             shift and go to state 185
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

    variable_declaration           shift and go to state 35
    variable_value_change          shift and go to state 36
    if_statement                   shift and go to state 37
    function                       shift and go to state 38
    function_call                  shift and go to state 39
    repeat                         shift and go to state 40
    for                            shift and go to state 41
    while                          shift and go to state 42
    use                            shift and go to state 43
    error_handling                 shift and go to state 44
    variable_alone                 shift and go to state 45
    global_variable                shift and go to state 46
    class_def                      shift and go to state 47
    debug                          shift and go to state 48
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 182

    (58) if_statement_1 -> IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 58 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 58 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 58 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 58 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 58 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 58 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 58 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 58 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 58 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 58 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 58 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 58 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 58 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 58 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)


state 183

    (60) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . variable_declaration SEMI
    (17) expression -> . variable_value_change SEMI
    (18) expression -> . if_statement
    (19) expression -> . function
    (20) expression -> . function_call
    (21) expression -> . repeat
    (22) expression -> . for
    (23) expression -> . while
    (24) expression -> . use SEMI
    (25) expression -> . error_handling
    (26) expression -> . variable_alone SEMI
    (27) expression -> . global_variable SEMI
    (28) expression -> . class_def
    (29) expression -> . debug SEMI
    (30) expression -> . empty
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (93) empty -> .
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    RMB             reduce using rule 93 (empty -> .)
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

  ! VAR             [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! USE             [ reduce using rule 93 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 93 (empty -> .) ]
  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 93 (empty -> .) ]
  ! REPEAT          [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! TRY             [ reduce using rule 93 (empty -> .) ]

    expression                     shift and go to state 186
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    empty                          shift and go to state 17
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 184

    (59) if_statement_2 -> ELSE IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

    RMB             shift and go to state 187
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

    variable_declaration           shift and go to state 35
    variable_value_change          shift and go to state 36
    if_statement                   shift and go to state 37
    function                       shift and go to state 38
    function_call                  shift and go to state 39
    repeat                         shift and go to state 40
    for                            shift and go to state 41
    while                          shift and go to state 42
    use                            shift and go to state 43
    error_handling                 shift and go to state 44
    variable_alone                 shift and go to state 45
    global_variable                shift and go to state 46
    class_def                      shift and go to state 47
    debug                          shift and go to state 48
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 185

    (33) catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .

    VAR             reduce using rule 33 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 33 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    USE             reduce using rule 33 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    GLOBAL          reduce using rule 33 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    CLASS           reduce using rule 33 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IF              reduce using rule 33 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FUNCTION        reduce using rule 33 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    REPEAT          reduce using rule 33 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FOR             reduce using rule 33 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    WHILE           reduce using rule 33 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    TRY             reduce using rule 33 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    $end            reduce using rule 33 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    RMB             reduce using rule 33 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)


state 186

    (60) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (78) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (79) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (80) variable_declaration -> . VAR IDENTIFIER
    (76) variable_value_change -> . IDENTIFIER EQUAL LIST
    (77) variable_value_change -> . IDENTIFIER EQUAL calculate
    (54) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (55) if_statement -> . if_statement_1 if_statement_2
    (56) if_statement -> . if_statement_1 if_statement_3
    (57) if_statement -> . if_statement_1
    (45) function -> . function_head function_body
    (49) function_call -> . IDENTIFIER LSB parameter RSB
    (50) function_call -> . IDENTIFIER LSB empty RSB
    (40) repeat -> . repeat_head repeat_body
    (34) for -> . for_head for_body
    (37) while -> . while_head while_body
    (72) use -> . USE use_params
    (31) error_handling -> . try catch
    (75) variable_alone -> . IDENTIFIER
    (74) global_variable -> . GLOBAL IDENTIFIER
    (44) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (53) debug -> . USE DEBUG
    (58) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (46) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (47) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) repeat_head -> . REPEAT LSB calculate RSB
    (35) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (38) while_head -> . WHILE LSB condition RSB
    (32) try -> . TRY LMB expression RMB

    RMB             shift and go to state 188
    VAR             shift and go to state 18
    IDENTIFIER      shift and go to state 19
    USE             shift and go to state 25
    GLOBAL          shift and go to state 27
    CLASS           shift and go to state 28
    IF              shift and go to state 29
    FUNCTION        shift and go to state 30
    REPEAT          shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    TRY             shift and go to state 34

    variable_declaration           shift and go to state 35
    variable_value_change          shift and go to state 36
    if_statement                   shift and go to state 37
    function                       shift and go to state 38
    function_call                  shift and go to state 39
    repeat                         shift and go to state 40
    for                            shift and go to state 41
    while                          shift and go to state 42
    use                            shift and go to state 43
    error_handling                 shift and go to state 44
    variable_alone                 shift and go to state 45
    global_variable                shift and go to state 46
    class_def                      shift and go to state 47
    debug                          shift and go to state 48
    if_statement_1                 shift and go to state 20
    function_head                  shift and go to state 21
    repeat_head                    shift and go to state 22
    for_head                       shift and go to state 23
    while_head                     shift and go to state 24
    try                            shift and go to state 26

state 187

    (59) if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 59 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 59 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 59 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 59 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 59 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 59 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 59 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 59 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 59 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 59 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 59 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 59 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 59 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 59 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)


state 188

    (60) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 60 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 60 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 60 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 60 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 60 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 60 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 60 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 60 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 60 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 60 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 60 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 60 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 60 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 60 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for USE in state 0 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 62 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 62 resolved as shift
WARNING: shift/reduce conflict for USE in state 62 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 62 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 62 resolved as shift
WARNING: shift/reduce conflict for IF in state 62 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 62 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 62 resolved as shift
WARNING: shift/reduce conflict for FOR in state 62 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 62 resolved as shift
WARNING: shift/reduce conflict for TRY in state 62 resolved as shift
WARNING: shift/reduce conflict for VAR in state 64 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 64 resolved as shift
WARNING: shift/reduce conflict for USE in state 64 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 64 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 64 resolved as shift
WARNING: shift/reduce conflict for IF in state 64 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 64 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 64 resolved as shift
WARNING: shift/reduce conflict for FOR in state 64 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 64 resolved as shift
WARNING: shift/reduce conflict for TRY in state 64 resolved as shift
WARNING: shift/reduce conflict for VAR in state 66 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 66 resolved as shift
WARNING: shift/reduce conflict for USE in state 66 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 66 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 66 resolved as shift
WARNING: shift/reduce conflict for IF in state 66 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 66 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 66 resolved as shift
WARNING: shift/reduce conflict for FOR in state 66 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 66 resolved as shift
WARNING: shift/reduce conflict for TRY in state 66 resolved as shift
WARNING: shift/reduce conflict for VAR in state 68 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 68 resolved as shift
WARNING: shift/reduce conflict for USE in state 68 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 68 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 68 resolved as shift
WARNING: shift/reduce conflict for IF in state 68 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 68 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 68 resolved as shift
WARNING: shift/reduce conflict for FOR in state 68 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 68 resolved as shift
WARNING: shift/reduce conflict for TRY in state 68 resolved as shift
WARNING: shift/reduce conflict for VAR in state 81 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 81 resolved as shift
WARNING: shift/reduce conflict for USE in state 81 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 81 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 81 resolved as shift
WARNING: shift/reduce conflict for IF in state 81 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 81 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 81 resolved as shift
WARNING: shift/reduce conflict for FOR in state 81 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 81 resolved as shift
WARNING: shift/reduce conflict for TRY in state 81 resolved as shift
WARNING: shift/reduce conflict for VAR in state 106 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 106 resolved as shift
WARNING: shift/reduce conflict for USE in state 106 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 106 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 106 resolved as shift
WARNING: shift/reduce conflict for IF in state 106 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 106 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 106 resolved as shift
WARNING: shift/reduce conflict for FOR in state 106 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 106 resolved as shift
WARNING: shift/reduce conflict for TRY in state 106 resolved as shift
WARNING: shift/reduce conflict for VAR in state 112 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 112 resolved as shift
WARNING: shift/reduce conflict for USE in state 112 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 112 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 112 resolved as shift
WARNING: shift/reduce conflict for IF in state 112 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 112 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 112 resolved as shift
WARNING: shift/reduce conflict for FOR in state 112 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 112 resolved as shift
WARNING: shift/reduce conflict for TRY in state 112 resolved as shift
WARNING: shift/reduce conflict for VAR in state 163 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 163 resolved as shift
WARNING: shift/reduce conflict for USE in state 163 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 163 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 163 resolved as shift
WARNING: shift/reduce conflict for IF in state 163 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 163 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 163 resolved as shift
WARNING: shift/reduce conflict for FOR in state 163 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 163 resolved as shift
WARNING: shift/reduce conflict for TRY in state 163 resolved as shift
WARNING: shift/reduce conflict for VAR in state 174 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 174 resolved as shift
WARNING: shift/reduce conflict for USE in state 174 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 174 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 174 resolved as shift
WARNING: shift/reduce conflict for IF in state 174 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 174 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 174 resolved as shift
WARNING: shift/reduce conflict for FOR in state 174 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 174 resolved as shift
WARNING: shift/reduce conflict for TRY in state 174 resolved as shift
WARNING: shift/reduce conflict for VAR in state 180 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 180 resolved as shift
WARNING: shift/reduce conflict for USE in state 180 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 180 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 180 resolved as shift
WARNING: shift/reduce conflict for IF in state 180 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 180 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 180 resolved as shift
WARNING: shift/reduce conflict for FOR in state 180 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 180 resolved as shift
WARNING: shift/reduce conflict for TRY in state 180 resolved as shift
WARNING: shift/reduce conflict for VAR in state 183 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 183 resolved as shift
WARNING: shift/reduce conflict for USE in state 183 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 183 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 183 resolved as shift
WARNING: shift/reduce conflict for IF in state 183 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 183 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 183 resolved as shift
WARNING: shift/reduce conflict for FOR in state 183 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 183 resolved as shift
WARNING: shift/reduce conflict for TRY in state 183 resolved as shift
WARNING: reduce/reduce conflict in state 92 resolved using rule (variable_value_change -> IDENTIFIER EQUAL LIST)
WARNING: rejected rule (calculate -> LIST) in state 92
