Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CATCH
    CLASS
    COLON
    DEBUG
    DO
    DOT
    END
    FLOAT
    FOR
    GLOBAL
    IN
    LBB
    LIST
    PYTHON
    RBB
    REPEAT
    TRY
    USE

Grammar

Rule 0     S' -> program
Rule 1     program -> root
Rule 2     root -> root statement
Rule 3     root -> statement
Rule 4     statement -> if_statement
Rule 5     statement -> while_statement
Rule 6     statement -> variable_declaration SEMI
Rule 7     statement -> variable_value_change SEMI
Rule 8     statement -> function_declaration
Rule 9     statement -> PASS SEMI
Rule 10    statement -> empty
Rule 11    statement -> expression SEMI
Rule 12    expression -> calculate
Rule 13    expression -> string_calculate
Rule 14    expression -> compare_expression
Rule 15    expression -> function_call
Rule 16    variable_declaration -> VAR IDENTIFIER EQUAL expression
Rule 17    variable_value_change -> IDENTIFIER EQUAL expression
Rule 18    function_call -> IDENTIFIER LSB function_call_parameter RSB
Rule 19    function_call_parameter -> function_call_parameter COMMA calculate
Rule 20    function_call_parameter -> calculate
Rule 21    function_call_parameter -> empty
Rule 22    function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
Rule 23    function_parameter -> function_parameter COMMA IDENTIFIER
Rule 24    function_parameter -> IDENTIFIER
Rule 25    function_parameter -> empty
Rule 26    while_statement -> WHILE LSB expression RSB LMB root RMB
Rule 27    if_statement -> IF LSB expression RSB LMB root RMB
Rule 28    if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB
Rule 29    if_statement -> if_statement ELSE LMB root RMB
Rule 30    compare_expression -> compare_expression compare_operator calculate
Rule 31    compare_expression -> calculate
Rule 32    compare_operator -> LB
Rule 33    compare_operator -> RB
Rule 34    compare_operator -> LB EQUAL
Rule 35    compare_operator -> RB EQUAL
Rule 36    compare_operator -> EQUAL EQUAL
Rule 37    compare_operator -> NOTEQUAL EQUAL
Rule 38    string_calculate -> string_calculate stringoperator STRING
Rule 39    string_calculate -> STRING
Rule 40    stringoperator -> PLUS
Rule 41    calculate -> calculate PLUS calculate
Rule 42    calculate -> calculate MINUS calculate
Rule 43    calculate -> calculate MUL calculate
Rule 44    calculate -> calculate DIV calculate
Rule 45    calculate -> MINUS calculate
Rule 46    calculate -> LSB calculate RSB
Rule 47    calculate -> INT
Rule 48    calculate -> IDENTIFIER
Rule 49    empty -> <empty>

Terminals, with rules where they appear

CATCH                : 
CLASS                : 
COLON                : 
COMMA                : 19 23
DEBUG                : 
DIV                  : 44
DO                   : 
DOT                  : 
ELSE                 : 28 29
END                  : 
EQUAL                : 16 17 34 35 36 36 37
FLOAT                : 
FOR                  : 
FUNCTION             : 22
GLOBAL               : 
IDENTIFIER           : 16 17 18 22 23 24 48
IF                   : 27 28
IN                   : 
INT                  : 47
LB                   : 32 34
LBB                  : 
LIST                 : 
LMB                  : 22 26 27 28 29
LSB                  : 18 22 26 27 28 46
MINUS                : 42 45
MUL                  : 43
NOTEQUAL             : 37
PASS                 : 9
PLUS                 : 40 41
PYTHON               : 
RB                   : 33 35
RBB                  : 
REPEAT               : 
RMB                  : 22 26 27 28 29
RSB                  : 18 22 26 27 28 46
SEMI                 : 6 7 9 11
STRING               : 38 39
TRY                  : 
USE                  : 
VAR                  : 16
WHILE                : 26
error                : 

Nonterminals, with rules where they appear

calculate            : 12 19 20 30 31 41 41 42 42 43 43 44 44 45 46
compare_expression   : 14 30
compare_operator     : 30
empty                : 10 21 25
expression           : 11 16 17 26 27 28
function_call        : 15
function_call_parameter : 18 19
function_declaration : 8
function_parameter   : 22 23
if_statement         : 4 28 29
program              : 0
root                 : 1 2 22 26 27 28 29
statement            : 2 3
string_calculate     : 13 38
stringoperator       : 38
variable_declaration : 6
variable_value_change : 7
while_statement      : 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . root
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . empty
    (11) statement -> . expression SEMI
    (27) if_statement -> . IF LSB expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (29) if_statement -> . if_statement ELSE LMB root RMB
    (26) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (16) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (17) variable_value_change -> . IDENTIFIER EQUAL expression
    (22) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (49) empty -> .
    (12) expression -> . calculate
    (13) expression -> . string_calculate
    (14) expression -> . compare_expression
    (15) expression -> . function_call
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER
    (38) string_calculate -> . string_calculate stringoperator STRING
    (39) string_calculate -> . STRING
    (30) compare_expression -> . compare_expression compare_operator calculate
    (31) compare_expression -> . calculate
    (18) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PASS            shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    $end            reduce using rule 49 (empty -> .)
    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    STRING          shift and go to state 24

  ! PASS            [ reduce using rule 49 (empty -> .) ]
  ! IF              [ reduce using rule 49 (empty -> .) ]
  ! WHILE           [ reduce using rule 49 (empty -> .) ]
  ! VAR             [ reduce using rule 49 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 49 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 49 (empty -> .) ]
  ! MINUS           [ reduce using rule 49 (empty -> .) ]
  ! LSB             [ reduce using rule 49 (empty -> .) ]
  ! INT             [ reduce using rule 49 (empty -> .) ]
  ! STRING          [ reduce using rule 49 (empty -> .) ]

    program                        shift and go to state 1
    root                           shift and go to state 2
    statement                      shift and go to state 3
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 10
    expression                     shift and go to state 11
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 20
    function_call                  shift and go to state 21

state 1

    (0) S' -> program .



state 2

    (1) program -> root .
    (2) root -> root . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . empty
    (11) statement -> . expression SEMI
    (27) if_statement -> . IF LSB expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (29) if_statement -> . if_statement ELSE LMB root RMB
    (26) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (16) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (17) variable_value_change -> . IDENTIFIER EQUAL expression
    (22) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (49) empty -> .
    (12) expression -> . calculate
    (13) expression -> . string_calculate
    (14) expression -> . compare_expression
    (15) expression -> . function_call
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER
    (38) string_calculate -> . string_calculate stringoperator STRING
    (39) string_calculate -> . STRING
    (30) compare_expression -> . compare_expression compare_operator calculate
    (31) compare_expression -> . calculate
    (18) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (program -> root .)
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    $end            reduce using rule 1 (program -> root .)
    PASS            shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    STRING          shift and go to state 24

  ! PASS            [ reduce using rule 49 (empty -> .) ]
  ! IF              [ reduce using rule 49 (empty -> .) ]
  ! WHILE           [ reduce using rule 49 (empty -> .) ]
  ! VAR             [ reduce using rule 49 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 49 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 49 (empty -> .) ]
  ! MINUS           [ reduce using rule 49 (empty -> .) ]
  ! LSB             [ reduce using rule 49 (empty -> .) ]
  ! INT             [ reduce using rule 49 (empty -> .) ]
  ! STRING          [ reduce using rule 49 (empty -> .) ]
  ! $end            [ reduce using rule 49 (empty -> .) ]

    statement                      shift and go to state 25
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 10
    expression                     shift and go to state 11
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 20
    function_call                  shift and go to state 21

state 3

    (3) root -> statement .

    PASS            reduce using rule 3 (root -> statement .)
    IF              reduce using rule 3 (root -> statement .)
    WHILE           reduce using rule 3 (root -> statement .)
    VAR             reduce using rule 3 (root -> statement .)
    IDENTIFIER      reduce using rule 3 (root -> statement .)
    FUNCTION        reduce using rule 3 (root -> statement .)
    MINUS           reduce using rule 3 (root -> statement .)
    LSB             reduce using rule 3 (root -> statement .)
    INT             reduce using rule 3 (root -> statement .)
    STRING          reduce using rule 3 (root -> statement .)
    $end            reduce using rule 3 (root -> statement .)
    RMB             reduce using rule 3 (root -> statement .)


state 4

    (4) statement -> if_statement .
    (28) if_statement -> if_statement . ELSE IF LSB expression RSB LMB root RMB
    (29) if_statement -> if_statement . ELSE LMB root RMB

    PASS            reduce using rule 4 (statement -> if_statement .)
    IF              reduce using rule 4 (statement -> if_statement .)
    WHILE           reduce using rule 4 (statement -> if_statement .)
    VAR             reduce using rule 4 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 4 (statement -> if_statement .)
    FUNCTION        reduce using rule 4 (statement -> if_statement .)
    MINUS           reduce using rule 4 (statement -> if_statement .)
    LSB             reduce using rule 4 (statement -> if_statement .)
    INT             reduce using rule 4 (statement -> if_statement .)
    STRING          reduce using rule 4 (statement -> if_statement .)
    $end            reduce using rule 4 (statement -> if_statement .)
    RMB             reduce using rule 4 (statement -> if_statement .)
    ELSE            shift and go to state 26


state 5

    (5) statement -> while_statement .

    PASS            reduce using rule 5 (statement -> while_statement .)
    IF              reduce using rule 5 (statement -> while_statement .)
    WHILE           reduce using rule 5 (statement -> while_statement .)
    VAR             reduce using rule 5 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 5 (statement -> while_statement .)
    FUNCTION        reduce using rule 5 (statement -> while_statement .)
    MINUS           reduce using rule 5 (statement -> while_statement .)
    LSB             reduce using rule 5 (statement -> while_statement .)
    INT             reduce using rule 5 (statement -> while_statement .)
    STRING          reduce using rule 5 (statement -> while_statement .)
    $end            reduce using rule 5 (statement -> while_statement .)
    RMB             reduce using rule 5 (statement -> while_statement .)


state 6

    (6) statement -> variable_declaration . SEMI

    SEMI            shift and go to state 27


state 7

    (7) statement -> variable_value_change . SEMI

    SEMI            shift and go to state 28


state 8

    (8) statement -> function_declaration .

    PASS            reduce using rule 8 (statement -> function_declaration .)
    IF              reduce using rule 8 (statement -> function_declaration .)
    WHILE           reduce using rule 8 (statement -> function_declaration .)
    VAR             reduce using rule 8 (statement -> function_declaration .)
    IDENTIFIER      reduce using rule 8 (statement -> function_declaration .)
    FUNCTION        reduce using rule 8 (statement -> function_declaration .)
    MINUS           reduce using rule 8 (statement -> function_declaration .)
    LSB             reduce using rule 8 (statement -> function_declaration .)
    INT             reduce using rule 8 (statement -> function_declaration .)
    STRING          reduce using rule 8 (statement -> function_declaration .)
    $end            reduce using rule 8 (statement -> function_declaration .)
    RMB             reduce using rule 8 (statement -> function_declaration .)


state 9

    (9) statement -> PASS . SEMI

    SEMI            shift and go to state 29


state 10

    (10) statement -> empty .

    PASS            reduce using rule 10 (statement -> empty .)
    IF              reduce using rule 10 (statement -> empty .)
    WHILE           reduce using rule 10 (statement -> empty .)
    VAR             reduce using rule 10 (statement -> empty .)
    IDENTIFIER      reduce using rule 10 (statement -> empty .)
    FUNCTION        reduce using rule 10 (statement -> empty .)
    MINUS           reduce using rule 10 (statement -> empty .)
    LSB             reduce using rule 10 (statement -> empty .)
    INT             reduce using rule 10 (statement -> empty .)
    STRING          reduce using rule 10 (statement -> empty .)
    $end            reduce using rule 10 (statement -> empty .)
    RMB             reduce using rule 10 (statement -> empty .)


state 11

    (11) statement -> expression . SEMI

    SEMI            shift and go to state 30


state 12

    (27) if_statement -> IF . LSB expression RSB LMB root RMB

    LSB             shift and go to state 31


state 13

    (46) calculate -> LSB . calculate RSB
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER

    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    IDENTIFIER      shift and go to state 33

    calculate                      shift and go to state 32

state 14

    (26) while_statement -> WHILE . LSB expression RSB LMB root RMB

    LSB             shift and go to state 34


state 15

    (16) variable_declaration -> VAR . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 35


state 16

    (17) variable_value_change -> IDENTIFIER . EQUAL expression
    (48) calculate -> IDENTIFIER .
    (18) function_call -> IDENTIFIER . LSB function_call_parameter RSB

  ! shift/reduce conflict for EQUAL resolved as shift
    EQUAL           shift and go to state 36
    PLUS            reduce using rule 48 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 48 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 48 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 48 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 48 (calculate -> IDENTIFIER .)
    LB              reduce using rule 48 (calculate -> IDENTIFIER .)
    RB              reduce using rule 48 (calculate -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 48 (calculate -> IDENTIFIER .)
    LSB             shift and go to state 37

  ! EQUAL           [ reduce using rule 48 (calculate -> IDENTIFIER .) ]


state 17

    (22) function_declaration -> FUNCTION . IDENTIFIER LSB function_parameter RSB LMB root RMB

    IDENTIFIER      shift and go to state 38


state 18

    (12) expression -> calculate .
    (41) calculate -> calculate . PLUS calculate
    (42) calculate -> calculate . MINUS calculate
    (43) calculate -> calculate . MUL calculate
    (44) calculate -> calculate . DIV calculate
    (31) compare_expression -> calculate .

  ! reduce/reduce conflict for SEMI resolved using rule 12 (expression -> calculate .)
  ! reduce/reduce conflict for RSB resolved using rule 12 (expression -> calculate .)
    SEMI            reduce using rule 12 (expression -> calculate .)
    RSB             reduce using rule 12 (expression -> calculate .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42
    LB              reduce using rule 31 (compare_expression -> calculate .)
    RB              reduce using rule 31 (compare_expression -> calculate .)
    EQUAL           reduce using rule 31 (compare_expression -> calculate .)
    NOTEQUAL        reduce using rule 31 (compare_expression -> calculate .)

  ! SEMI            [ reduce using rule 31 (compare_expression -> calculate .) ]
  ! RSB             [ reduce using rule 31 (compare_expression -> calculate .) ]


state 19

    (13) expression -> string_calculate .
    (38) string_calculate -> string_calculate . stringoperator STRING
    (40) stringoperator -> . PLUS

    SEMI            reduce using rule 13 (expression -> string_calculate .)
    RSB             reduce using rule 13 (expression -> string_calculate .)
    PLUS            shift and go to state 44

    stringoperator                 shift and go to state 43

state 20

    (14) expression -> compare_expression .
    (30) compare_expression -> compare_expression . compare_operator calculate
    (32) compare_operator -> . LB
    (33) compare_operator -> . RB
    (34) compare_operator -> . LB EQUAL
    (35) compare_operator -> . RB EQUAL
    (36) compare_operator -> . EQUAL EQUAL
    (37) compare_operator -> . NOTEQUAL EQUAL

    SEMI            reduce using rule 14 (expression -> compare_expression .)
    RSB             reduce using rule 14 (expression -> compare_expression .)
    LB              shift and go to state 46
    RB              shift and go to state 47
    EQUAL           shift and go to state 48
    NOTEQUAL        shift and go to state 49

    compare_operator               shift and go to state 45

state 21

    (15) expression -> function_call .

    SEMI            reduce using rule 15 (expression -> function_call .)
    RSB             reduce using rule 15 (expression -> function_call .)


state 22

    (45) calculate -> MINUS . calculate
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER

    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    IDENTIFIER      shift and go to state 33

    calculate                      shift and go to state 50

state 23

    (47) calculate -> INT .

    PLUS            reduce using rule 47 (calculate -> INT .)
    MINUS           reduce using rule 47 (calculate -> INT .)
    MUL             reduce using rule 47 (calculate -> INT .)
    DIV             reduce using rule 47 (calculate -> INT .)
    SEMI            reduce using rule 47 (calculate -> INT .)
    LB              reduce using rule 47 (calculate -> INT .)
    RB              reduce using rule 47 (calculate -> INT .)
    EQUAL           reduce using rule 47 (calculate -> INT .)
    NOTEQUAL        reduce using rule 47 (calculate -> INT .)
    RSB             reduce using rule 47 (calculate -> INT .)
    COMMA           reduce using rule 47 (calculate -> INT .)


state 24

    (39) string_calculate -> STRING .

    PLUS            reduce using rule 39 (string_calculate -> STRING .)
    SEMI            reduce using rule 39 (string_calculate -> STRING .)
    RSB             reduce using rule 39 (string_calculate -> STRING .)


state 25

    (2) root -> root statement .

    PASS            reduce using rule 2 (root -> root statement .)
    IF              reduce using rule 2 (root -> root statement .)
    WHILE           reduce using rule 2 (root -> root statement .)
    VAR             reduce using rule 2 (root -> root statement .)
    IDENTIFIER      reduce using rule 2 (root -> root statement .)
    FUNCTION        reduce using rule 2 (root -> root statement .)
    MINUS           reduce using rule 2 (root -> root statement .)
    LSB             reduce using rule 2 (root -> root statement .)
    INT             reduce using rule 2 (root -> root statement .)
    STRING          reduce using rule 2 (root -> root statement .)
    $end            reduce using rule 2 (root -> root statement .)
    RMB             reduce using rule 2 (root -> root statement .)


state 26

    (28) if_statement -> if_statement ELSE . IF LSB expression RSB LMB root RMB
    (29) if_statement -> if_statement ELSE . LMB root RMB

    IF              shift and go to state 51
    LMB             shift and go to state 52


state 27

    (6) statement -> variable_declaration SEMI .

    PASS            reduce using rule 6 (statement -> variable_declaration SEMI .)
    IF              reduce using rule 6 (statement -> variable_declaration SEMI .)
    WHILE           reduce using rule 6 (statement -> variable_declaration SEMI .)
    VAR             reduce using rule 6 (statement -> variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 6 (statement -> variable_declaration SEMI .)
    FUNCTION        reduce using rule 6 (statement -> variable_declaration SEMI .)
    MINUS           reduce using rule 6 (statement -> variable_declaration SEMI .)
    LSB             reduce using rule 6 (statement -> variable_declaration SEMI .)
    INT             reduce using rule 6 (statement -> variable_declaration SEMI .)
    STRING          reduce using rule 6 (statement -> variable_declaration SEMI .)
    $end            reduce using rule 6 (statement -> variable_declaration SEMI .)
    RMB             reduce using rule 6 (statement -> variable_declaration SEMI .)


state 28

    (7) statement -> variable_value_change SEMI .

    PASS            reduce using rule 7 (statement -> variable_value_change SEMI .)
    IF              reduce using rule 7 (statement -> variable_value_change SEMI .)
    WHILE           reduce using rule 7 (statement -> variable_value_change SEMI .)
    VAR             reduce using rule 7 (statement -> variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 7 (statement -> variable_value_change SEMI .)
    FUNCTION        reduce using rule 7 (statement -> variable_value_change SEMI .)
    MINUS           reduce using rule 7 (statement -> variable_value_change SEMI .)
    LSB             reduce using rule 7 (statement -> variable_value_change SEMI .)
    INT             reduce using rule 7 (statement -> variable_value_change SEMI .)
    STRING          reduce using rule 7 (statement -> variable_value_change SEMI .)
    $end            reduce using rule 7 (statement -> variable_value_change SEMI .)
    RMB             reduce using rule 7 (statement -> variable_value_change SEMI .)


state 29

    (9) statement -> PASS SEMI .

    PASS            reduce using rule 9 (statement -> PASS SEMI .)
    IF              reduce using rule 9 (statement -> PASS SEMI .)
    WHILE           reduce using rule 9 (statement -> PASS SEMI .)
    VAR             reduce using rule 9 (statement -> PASS SEMI .)
    IDENTIFIER      reduce using rule 9 (statement -> PASS SEMI .)
    FUNCTION        reduce using rule 9 (statement -> PASS SEMI .)
    MINUS           reduce using rule 9 (statement -> PASS SEMI .)
    LSB             reduce using rule 9 (statement -> PASS SEMI .)
    INT             reduce using rule 9 (statement -> PASS SEMI .)
    STRING          reduce using rule 9 (statement -> PASS SEMI .)
    $end            reduce using rule 9 (statement -> PASS SEMI .)
    RMB             reduce using rule 9 (statement -> PASS SEMI .)


state 30

    (11) statement -> expression SEMI .

    PASS            reduce using rule 11 (statement -> expression SEMI .)
    IF              reduce using rule 11 (statement -> expression SEMI .)
    WHILE           reduce using rule 11 (statement -> expression SEMI .)
    VAR             reduce using rule 11 (statement -> expression SEMI .)
    IDENTIFIER      reduce using rule 11 (statement -> expression SEMI .)
    FUNCTION        reduce using rule 11 (statement -> expression SEMI .)
    MINUS           reduce using rule 11 (statement -> expression SEMI .)
    LSB             reduce using rule 11 (statement -> expression SEMI .)
    INT             reduce using rule 11 (statement -> expression SEMI .)
    STRING          reduce using rule 11 (statement -> expression SEMI .)
    $end            reduce using rule 11 (statement -> expression SEMI .)
    RMB             reduce using rule 11 (statement -> expression SEMI .)


state 31

    (27) if_statement -> IF LSB . expression RSB LMB root RMB
    (12) expression -> . calculate
    (13) expression -> . string_calculate
    (14) expression -> . compare_expression
    (15) expression -> . function_call
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER
    (38) string_calculate -> . string_calculate stringoperator STRING
    (39) string_calculate -> . STRING
    (30) compare_expression -> . compare_expression compare_operator calculate
    (31) compare_expression -> . calculate
    (18) function_call -> . IDENTIFIER LSB function_call_parameter RSB

    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    IDENTIFIER      shift and go to state 54
    STRING          shift and go to state 24

    expression                     shift and go to state 53
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 20
    function_call                  shift and go to state 21

state 32

    (46) calculate -> LSB calculate . RSB
    (41) calculate -> calculate . PLUS calculate
    (42) calculate -> calculate . MINUS calculate
    (43) calculate -> calculate . MUL calculate
    (44) calculate -> calculate . DIV calculate

    RSB             shift and go to state 55
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42


state 33

    (48) calculate -> IDENTIFIER .

    RSB             reduce using rule 48 (calculate -> IDENTIFIER .)
    PLUS            reduce using rule 48 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 48 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 48 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 48 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 48 (calculate -> IDENTIFIER .)
    LB              reduce using rule 48 (calculate -> IDENTIFIER .)
    RB              reduce using rule 48 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 48 (calculate -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 48 (calculate -> IDENTIFIER .)
    COMMA           reduce using rule 48 (calculate -> IDENTIFIER .)


state 34

    (26) while_statement -> WHILE LSB . expression RSB LMB root RMB
    (12) expression -> . calculate
    (13) expression -> . string_calculate
    (14) expression -> . compare_expression
    (15) expression -> . function_call
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER
    (38) string_calculate -> . string_calculate stringoperator STRING
    (39) string_calculate -> . STRING
    (30) compare_expression -> . compare_expression compare_operator calculate
    (31) compare_expression -> . calculate
    (18) function_call -> . IDENTIFIER LSB function_call_parameter RSB

    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    IDENTIFIER      shift and go to state 54
    STRING          shift and go to state 24

    expression                     shift and go to state 56
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 20
    function_call                  shift and go to state 21

state 35

    (16) variable_declaration -> VAR IDENTIFIER . EQUAL expression

    EQUAL           shift and go to state 57


state 36

    (17) variable_value_change -> IDENTIFIER EQUAL . expression
    (12) expression -> . calculate
    (13) expression -> . string_calculate
    (14) expression -> . compare_expression
    (15) expression -> . function_call
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER
    (38) string_calculate -> . string_calculate stringoperator STRING
    (39) string_calculate -> . STRING
    (30) compare_expression -> . compare_expression compare_operator calculate
    (31) compare_expression -> . calculate
    (18) function_call -> . IDENTIFIER LSB function_call_parameter RSB

    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    IDENTIFIER      shift and go to state 54
    STRING          shift and go to state 24

    expression                     shift and go to state 58
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 20
    function_call                  shift and go to state 21

state 37

    (18) function_call -> IDENTIFIER LSB . function_call_parameter RSB
    (19) function_call_parameter -> . function_call_parameter COMMA calculate
    (20) function_call_parameter -> . calculate
    (21) function_call_parameter -> . empty
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER
    (49) empty -> .

    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    IDENTIFIER      shift and go to state 33
    RSB             reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    function_call_parameter        shift and go to state 59
    calculate                      shift and go to state 60
    empty                          shift and go to state 61

state 38

    (22) function_declaration -> FUNCTION IDENTIFIER . LSB function_parameter RSB LMB root RMB

    LSB             shift and go to state 62


state 39

    (41) calculate -> calculate PLUS . calculate
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER

    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    IDENTIFIER      shift and go to state 33

    calculate                      shift and go to state 63

state 40

    (42) calculate -> calculate MINUS . calculate
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER

    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    IDENTIFIER      shift and go to state 33

    calculate                      shift and go to state 64

state 41

    (43) calculate -> calculate MUL . calculate
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER

    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    IDENTIFIER      shift and go to state 33

    calculate                      shift and go to state 65

state 42

    (44) calculate -> calculate DIV . calculate
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER

    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    IDENTIFIER      shift and go to state 33

    calculate                      shift and go to state 66

state 43

    (38) string_calculate -> string_calculate stringoperator . STRING

    STRING          shift and go to state 67


state 44

    (40) stringoperator -> PLUS .

    STRING          reduce using rule 40 (stringoperator -> PLUS .)


state 45

    (30) compare_expression -> compare_expression compare_operator . calculate
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER

    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    IDENTIFIER      shift and go to state 33

    calculate                      shift and go to state 68

state 46

    (32) compare_operator -> LB .
    (34) compare_operator -> LB . EQUAL

    MINUS           reduce using rule 32 (compare_operator -> LB .)
    LSB             reduce using rule 32 (compare_operator -> LB .)
    INT             reduce using rule 32 (compare_operator -> LB .)
    IDENTIFIER      reduce using rule 32 (compare_operator -> LB .)
    EQUAL           shift and go to state 69


state 47

    (33) compare_operator -> RB .
    (35) compare_operator -> RB . EQUAL

    MINUS           reduce using rule 33 (compare_operator -> RB .)
    LSB             reduce using rule 33 (compare_operator -> RB .)
    INT             reduce using rule 33 (compare_operator -> RB .)
    IDENTIFIER      reduce using rule 33 (compare_operator -> RB .)
    EQUAL           shift and go to state 70


state 48

    (36) compare_operator -> EQUAL . EQUAL

    EQUAL           shift and go to state 71


state 49

    (37) compare_operator -> NOTEQUAL . EQUAL

    EQUAL           shift and go to state 72


state 50

    (45) calculate -> MINUS calculate .
    (41) calculate -> calculate . PLUS calculate
    (42) calculate -> calculate . MINUS calculate
    (43) calculate -> calculate . MUL calculate
    (44) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 45 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 45 (calculate -> MINUS calculate .)
    MUL             reduce using rule 45 (calculate -> MINUS calculate .)
    DIV             reduce using rule 45 (calculate -> MINUS calculate .)
    SEMI            reduce using rule 45 (calculate -> MINUS calculate .)
    LB              reduce using rule 45 (calculate -> MINUS calculate .)
    RB              reduce using rule 45 (calculate -> MINUS calculate .)
    EQUAL           reduce using rule 45 (calculate -> MINUS calculate .)
    NOTEQUAL        reduce using rule 45 (calculate -> MINUS calculate .)
    RSB             reduce using rule 45 (calculate -> MINUS calculate .)
    COMMA           reduce using rule 45 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]
  ! MUL             [ shift and go to state 41 ]
  ! DIV             [ shift and go to state 42 ]


state 51

    (28) if_statement -> if_statement ELSE IF . LSB expression RSB LMB root RMB

    LSB             shift and go to state 73


state 52

    (29) if_statement -> if_statement ELSE LMB . root RMB
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . empty
    (11) statement -> . expression SEMI
    (27) if_statement -> . IF LSB expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (29) if_statement -> . if_statement ELSE LMB root RMB
    (26) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (16) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (17) variable_value_change -> . IDENTIFIER EQUAL expression
    (22) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (49) empty -> .
    (12) expression -> . calculate
    (13) expression -> . string_calculate
    (14) expression -> . compare_expression
    (15) expression -> . function_call
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER
    (38) string_calculate -> . string_calculate stringoperator STRING
    (39) string_calculate -> . STRING
    (30) compare_expression -> . compare_expression compare_operator calculate
    (31) compare_expression -> . calculate
    (18) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PASS            shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    RMB             reduce using rule 49 (empty -> .)
    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    STRING          shift and go to state 24

  ! PASS            [ reduce using rule 49 (empty -> .) ]
  ! IF              [ reduce using rule 49 (empty -> .) ]
  ! WHILE           [ reduce using rule 49 (empty -> .) ]
  ! VAR             [ reduce using rule 49 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 49 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 49 (empty -> .) ]
  ! MINUS           [ reduce using rule 49 (empty -> .) ]
  ! LSB             [ reduce using rule 49 (empty -> .) ]
  ! INT             [ reduce using rule 49 (empty -> .) ]
  ! STRING          [ reduce using rule 49 (empty -> .) ]

    if_statement                   shift and go to state 4
    root                           shift and go to state 74
    statement                      shift and go to state 3
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 10
    expression                     shift and go to state 11
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 20
    function_call                  shift and go to state 21

state 53

    (27) if_statement -> IF LSB expression . RSB LMB root RMB

    RSB             shift and go to state 75


state 54

    (48) calculate -> IDENTIFIER .
    (18) function_call -> IDENTIFIER . LSB function_call_parameter RSB

    PLUS            reduce using rule 48 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 48 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 48 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 48 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 48 (calculate -> IDENTIFIER .)
    LB              reduce using rule 48 (calculate -> IDENTIFIER .)
    RB              reduce using rule 48 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 48 (calculate -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 48 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 48 (calculate -> IDENTIFIER .)
    LSB             shift and go to state 37


state 55

    (46) calculate -> LSB calculate RSB .

    PLUS            reduce using rule 46 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 46 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 46 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 46 (calculate -> LSB calculate RSB .)
    SEMI            reduce using rule 46 (calculate -> LSB calculate RSB .)
    LB              reduce using rule 46 (calculate -> LSB calculate RSB .)
    RB              reduce using rule 46 (calculate -> LSB calculate RSB .)
    EQUAL           reduce using rule 46 (calculate -> LSB calculate RSB .)
    NOTEQUAL        reduce using rule 46 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 46 (calculate -> LSB calculate RSB .)
    COMMA           reduce using rule 46 (calculate -> LSB calculate RSB .)


state 56

    (26) while_statement -> WHILE LSB expression . RSB LMB root RMB

    RSB             shift and go to state 76


state 57

    (16) variable_declaration -> VAR IDENTIFIER EQUAL . expression
    (12) expression -> . calculate
    (13) expression -> . string_calculate
    (14) expression -> . compare_expression
    (15) expression -> . function_call
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER
    (38) string_calculate -> . string_calculate stringoperator STRING
    (39) string_calculate -> . STRING
    (30) compare_expression -> . compare_expression compare_operator calculate
    (31) compare_expression -> . calculate
    (18) function_call -> . IDENTIFIER LSB function_call_parameter RSB

    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    IDENTIFIER      shift and go to state 54
    STRING          shift and go to state 24

    expression                     shift and go to state 77
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 20
    function_call                  shift and go to state 21

state 58

    (17) variable_value_change -> IDENTIFIER EQUAL expression .

    SEMI            reduce using rule 17 (variable_value_change -> IDENTIFIER EQUAL expression .)


state 59

    (18) function_call -> IDENTIFIER LSB function_call_parameter . RSB
    (19) function_call_parameter -> function_call_parameter . COMMA calculate

    RSB             shift and go to state 78
    COMMA           shift and go to state 79


state 60

    (20) function_call_parameter -> calculate .
    (41) calculate -> calculate . PLUS calculate
    (42) calculate -> calculate . MINUS calculate
    (43) calculate -> calculate . MUL calculate
    (44) calculate -> calculate . DIV calculate

    RSB             reduce using rule 20 (function_call_parameter -> calculate .)
    COMMA           reduce using rule 20 (function_call_parameter -> calculate .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42


state 61

    (21) function_call_parameter -> empty .

    RSB             reduce using rule 21 (function_call_parameter -> empty .)
    COMMA           reduce using rule 21 (function_call_parameter -> empty .)


state 62

    (22) function_declaration -> FUNCTION IDENTIFIER LSB . function_parameter RSB LMB root RMB
    (23) function_parameter -> . function_parameter COMMA IDENTIFIER
    (24) function_parameter -> . IDENTIFIER
    (25) function_parameter -> . empty
    (49) empty -> .

    IDENTIFIER      shift and go to state 80
    RSB             reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    function_parameter             shift and go to state 81
    empty                          shift and go to state 82

state 63

    (41) calculate -> calculate PLUS calculate .
    (41) calculate -> calculate . PLUS calculate
    (42) calculate -> calculate . MINUS calculate
    (43) calculate -> calculate . MUL calculate
    (44) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 41 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 41 (calculate -> calculate PLUS calculate .)
    SEMI            reduce using rule 41 (calculate -> calculate PLUS calculate .)
    LB              reduce using rule 41 (calculate -> calculate PLUS calculate .)
    RB              reduce using rule 41 (calculate -> calculate PLUS calculate .)
    EQUAL           reduce using rule 41 (calculate -> calculate PLUS calculate .)
    NOTEQUAL        reduce using rule 41 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 41 (calculate -> calculate PLUS calculate .)
    COMMA           reduce using rule 41 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 41
    DIV             shift and go to state 42

  ! MUL             [ reduce using rule 41 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 41 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]


state 64

    (42) calculate -> calculate MINUS calculate .
    (41) calculate -> calculate . PLUS calculate
    (42) calculate -> calculate . MINUS calculate
    (43) calculate -> calculate . MUL calculate
    (44) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 42 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 42 (calculate -> calculate MINUS calculate .)
    SEMI            reduce using rule 42 (calculate -> calculate MINUS calculate .)
    LB              reduce using rule 42 (calculate -> calculate MINUS calculate .)
    RB              reduce using rule 42 (calculate -> calculate MINUS calculate .)
    EQUAL           reduce using rule 42 (calculate -> calculate MINUS calculate .)
    NOTEQUAL        reduce using rule 42 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 42 (calculate -> calculate MINUS calculate .)
    COMMA           reduce using rule 42 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 41
    DIV             shift and go to state 42

  ! MUL             [ reduce using rule 42 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 42 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]


state 65

    (43) calculate -> calculate MUL calculate .
    (41) calculate -> calculate . PLUS calculate
    (42) calculate -> calculate . MINUS calculate
    (43) calculate -> calculate . MUL calculate
    (44) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 43 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 43 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 43 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 43 (calculate -> calculate MUL calculate .)
    SEMI            reduce using rule 43 (calculate -> calculate MUL calculate .)
    LB              reduce using rule 43 (calculate -> calculate MUL calculate .)
    RB              reduce using rule 43 (calculate -> calculate MUL calculate .)
    EQUAL           reduce using rule 43 (calculate -> calculate MUL calculate .)
    NOTEQUAL        reduce using rule 43 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 43 (calculate -> calculate MUL calculate .)
    COMMA           reduce using rule 43 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]
  ! MUL             [ shift and go to state 41 ]
  ! DIV             [ shift and go to state 42 ]


state 66

    (44) calculate -> calculate DIV calculate .
    (41) calculate -> calculate . PLUS calculate
    (42) calculate -> calculate . MINUS calculate
    (43) calculate -> calculate . MUL calculate
    (44) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 44 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 44 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 44 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 44 (calculate -> calculate DIV calculate .)
    SEMI            reduce using rule 44 (calculate -> calculate DIV calculate .)
    LB              reduce using rule 44 (calculate -> calculate DIV calculate .)
    RB              reduce using rule 44 (calculate -> calculate DIV calculate .)
    EQUAL           reduce using rule 44 (calculate -> calculate DIV calculate .)
    NOTEQUAL        reduce using rule 44 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 44 (calculate -> calculate DIV calculate .)
    COMMA           reduce using rule 44 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]
  ! MUL             [ shift and go to state 41 ]
  ! DIV             [ shift and go to state 42 ]


state 67

    (38) string_calculate -> string_calculate stringoperator STRING .

    PLUS            reduce using rule 38 (string_calculate -> string_calculate stringoperator STRING .)
    SEMI            reduce using rule 38 (string_calculate -> string_calculate stringoperator STRING .)
    RSB             reduce using rule 38 (string_calculate -> string_calculate stringoperator STRING .)


state 68

    (30) compare_expression -> compare_expression compare_operator calculate .
    (41) calculate -> calculate . PLUS calculate
    (42) calculate -> calculate . MINUS calculate
    (43) calculate -> calculate . MUL calculate
    (44) calculate -> calculate . DIV calculate

    LB              reduce using rule 30 (compare_expression -> compare_expression compare_operator calculate .)
    RB              reduce using rule 30 (compare_expression -> compare_expression compare_operator calculate .)
    EQUAL           reduce using rule 30 (compare_expression -> compare_expression compare_operator calculate .)
    NOTEQUAL        reduce using rule 30 (compare_expression -> compare_expression compare_operator calculate .)
    SEMI            reduce using rule 30 (compare_expression -> compare_expression compare_operator calculate .)
    RSB             reduce using rule 30 (compare_expression -> compare_expression compare_operator calculate .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42


state 69

    (34) compare_operator -> LB EQUAL .

    MINUS           reduce using rule 34 (compare_operator -> LB EQUAL .)
    LSB             reduce using rule 34 (compare_operator -> LB EQUAL .)
    INT             reduce using rule 34 (compare_operator -> LB EQUAL .)
    IDENTIFIER      reduce using rule 34 (compare_operator -> LB EQUAL .)


state 70

    (35) compare_operator -> RB EQUAL .

    MINUS           reduce using rule 35 (compare_operator -> RB EQUAL .)
    LSB             reduce using rule 35 (compare_operator -> RB EQUAL .)
    INT             reduce using rule 35 (compare_operator -> RB EQUAL .)
    IDENTIFIER      reduce using rule 35 (compare_operator -> RB EQUAL .)


state 71

    (36) compare_operator -> EQUAL EQUAL .

    MINUS           reduce using rule 36 (compare_operator -> EQUAL EQUAL .)
    LSB             reduce using rule 36 (compare_operator -> EQUAL EQUAL .)
    INT             reduce using rule 36 (compare_operator -> EQUAL EQUAL .)
    IDENTIFIER      reduce using rule 36 (compare_operator -> EQUAL EQUAL .)


state 72

    (37) compare_operator -> NOTEQUAL EQUAL .

    MINUS           reduce using rule 37 (compare_operator -> NOTEQUAL EQUAL .)
    LSB             reduce using rule 37 (compare_operator -> NOTEQUAL EQUAL .)
    INT             reduce using rule 37 (compare_operator -> NOTEQUAL EQUAL .)
    IDENTIFIER      reduce using rule 37 (compare_operator -> NOTEQUAL EQUAL .)


state 73

    (28) if_statement -> if_statement ELSE IF LSB . expression RSB LMB root RMB
    (12) expression -> . calculate
    (13) expression -> . string_calculate
    (14) expression -> . compare_expression
    (15) expression -> . function_call
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER
    (38) string_calculate -> . string_calculate stringoperator STRING
    (39) string_calculate -> . STRING
    (30) compare_expression -> . compare_expression compare_operator calculate
    (31) compare_expression -> . calculate
    (18) function_call -> . IDENTIFIER LSB function_call_parameter RSB

    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    IDENTIFIER      shift and go to state 54
    STRING          shift and go to state 24

    expression                     shift and go to state 83
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 20
    function_call                  shift and go to state 21

state 74

    (29) if_statement -> if_statement ELSE LMB root . RMB
    (2) root -> root . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . empty
    (11) statement -> . expression SEMI
    (27) if_statement -> . IF LSB expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (29) if_statement -> . if_statement ELSE LMB root RMB
    (26) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (16) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (17) variable_value_change -> . IDENTIFIER EQUAL expression
    (22) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (49) empty -> .
    (12) expression -> . calculate
    (13) expression -> . string_calculate
    (14) expression -> . compare_expression
    (15) expression -> . function_call
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER
    (38) string_calculate -> . string_calculate stringoperator STRING
    (39) string_calculate -> . STRING
    (30) compare_expression -> . compare_expression compare_operator calculate
    (31) compare_expression -> . calculate
    (18) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for RMB resolved as shift
  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    RMB             shift and go to state 84
    PASS            shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    STRING          shift and go to state 24

  ! RMB             [ reduce using rule 49 (empty -> .) ]
  ! PASS            [ reduce using rule 49 (empty -> .) ]
  ! IF              [ reduce using rule 49 (empty -> .) ]
  ! WHILE           [ reduce using rule 49 (empty -> .) ]
  ! VAR             [ reduce using rule 49 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 49 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 49 (empty -> .) ]
  ! MINUS           [ reduce using rule 49 (empty -> .) ]
  ! LSB             [ reduce using rule 49 (empty -> .) ]
  ! INT             [ reduce using rule 49 (empty -> .) ]
  ! STRING          [ reduce using rule 49 (empty -> .) ]

    if_statement                   shift and go to state 4
    statement                      shift and go to state 25
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 10
    expression                     shift and go to state 11
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 20
    function_call                  shift and go to state 21

state 75

    (27) if_statement -> IF LSB expression RSB . LMB root RMB

    LMB             shift and go to state 85


state 76

    (26) while_statement -> WHILE LSB expression RSB . LMB root RMB

    LMB             shift and go to state 86


state 77

    (16) variable_declaration -> VAR IDENTIFIER EQUAL expression .

    SEMI            reduce using rule 16 (variable_declaration -> VAR IDENTIFIER EQUAL expression .)


state 78

    (18) function_call -> IDENTIFIER LSB function_call_parameter RSB .

    SEMI            reduce using rule 18 (function_call -> IDENTIFIER LSB function_call_parameter RSB .)
    RSB             reduce using rule 18 (function_call -> IDENTIFIER LSB function_call_parameter RSB .)


state 79

    (19) function_call_parameter -> function_call_parameter COMMA . calculate
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER

    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    IDENTIFIER      shift and go to state 33

    calculate                      shift and go to state 87

state 80

    (24) function_parameter -> IDENTIFIER .

    RSB             reduce using rule 24 (function_parameter -> IDENTIFIER .)
    COMMA           reduce using rule 24 (function_parameter -> IDENTIFIER .)


state 81

    (22) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter . RSB LMB root RMB
    (23) function_parameter -> function_parameter . COMMA IDENTIFIER

    RSB             shift and go to state 88
    COMMA           shift and go to state 89


state 82

    (25) function_parameter -> empty .

    RSB             reduce using rule 25 (function_parameter -> empty .)
    COMMA           reduce using rule 25 (function_parameter -> empty .)


state 83

    (28) if_statement -> if_statement ELSE IF LSB expression . RSB LMB root RMB

    RSB             shift and go to state 90


state 84

    (29) if_statement -> if_statement ELSE LMB root RMB .

    ELSE            reduce using rule 29 (if_statement -> if_statement ELSE LMB root RMB .)
    PASS            reduce using rule 29 (if_statement -> if_statement ELSE LMB root RMB .)
    IF              reduce using rule 29 (if_statement -> if_statement ELSE LMB root RMB .)
    WHILE           reduce using rule 29 (if_statement -> if_statement ELSE LMB root RMB .)
    VAR             reduce using rule 29 (if_statement -> if_statement ELSE LMB root RMB .)
    IDENTIFIER      reduce using rule 29 (if_statement -> if_statement ELSE LMB root RMB .)
    FUNCTION        reduce using rule 29 (if_statement -> if_statement ELSE LMB root RMB .)
    MINUS           reduce using rule 29 (if_statement -> if_statement ELSE LMB root RMB .)
    LSB             reduce using rule 29 (if_statement -> if_statement ELSE LMB root RMB .)
    INT             reduce using rule 29 (if_statement -> if_statement ELSE LMB root RMB .)
    STRING          reduce using rule 29 (if_statement -> if_statement ELSE LMB root RMB .)
    $end            reduce using rule 29 (if_statement -> if_statement ELSE LMB root RMB .)
    RMB             reduce using rule 29 (if_statement -> if_statement ELSE LMB root RMB .)


state 85

    (27) if_statement -> IF LSB expression RSB LMB . root RMB
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . empty
    (11) statement -> . expression SEMI
    (27) if_statement -> . IF LSB expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (29) if_statement -> . if_statement ELSE LMB root RMB
    (26) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (16) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (17) variable_value_change -> . IDENTIFIER EQUAL expression
    (22) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (49) empty -> .
    (12) expression -> . calculate
    (13) expression -> . string_calculate
    (14) expression -> . compare_expression
    (15) expression -> . function_call
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER
    (38) string_calculate -> . string_calculate stringoperator STRING
    (39) string_calculate -> . STRING
    (30) compare_expression -> . compare_expression compare_operator calculate
    (31) compare_expression -> . calculate
    (18) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PASS            shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    RMB             reduce using rule 49 (empty -> .)
    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    STRING          shift and go to state 24

  ! PASS            [ reduce using rule 49 (empty -> .) ]
  ! IF              [ reduce using rule 49 (empty -> .) ]
  ! WHILE           [ reduce using rule 49 (empty -> .) ]
  ! VAR             [ reduce using rule 49 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 49 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 49 (empty -> .) ]
  ! MINUS           [ reduce using rule 49 (empty -> .) ]
  ! LSB             [ reduce using rule 49 (empty -> .) ]
  ! INT             [ reduce using rule 49 (empty -> .) ]
  ! STRING          [ reduce using rule 49 (empty -> .) ]

    expression                     shift and go to state 11
    root                           shift and go to state 91
    statement                      shift and go to state 3
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 10
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 20
    function_call                  shift and go to state 21

state 86

    (26) while_statement -> WHILE LSB expression RSB LMB . root RMB
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . empty
    (11) statement -> . expression SEMI
    (27) if_statement -> . IF LSB expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (29) if_statement -> . if_statement ELSE LMB root RMB
    (26) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (16) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (17) variable_value_change -> . IDENTIFIER EQUAL expression
    (22) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (49) empty -> .
    (12) expression -> . calculate
    (13) expression -> . string_calculate
    (14) expression -> . compare_expression
    (15) expression -> . function_call
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER
    (38) string_calculate -> . string_calculate stringoperator STRING
    (39) string_calculate -> . STRING
    (30) compare_expression -> . compare_expression compare_operator calculate
    (31) compare_expression -> . calculate
    (18) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PASS            shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    RMB             reduce using rule 49 (empty -> .)
    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    STRING          shift and go to state 24

  ! PASS            [ reduce using rule 49 (empty -> .) ]
  ! IF              [ reduce using rule 49 (empty -> .) ]
  ! WHILE           [ reduce using rule 49 (empty -> .) ]
  ! VAR             [ reduce using rule 49 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 49 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 49 (empty -> .) ]
  ! MINUS           [ reduce using rule 49 (empty -> .) ]
  ! LSB             [ reduce using rule 49 (empty -> .) ]
  ! INT             [ reduce using rule 49 (empty -> .) ]
  ! STRING          [ reduce using rule 49 (empty -> .) ]

    expression                     shift and go to state 11
    root                           shift and go to state 92
    statement                      shift and go to state 3
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 10
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 20
    function_call                  shift and go to state 21

state 87

    (19) function_call_parameter -> function_call_parameter COMMA calculate .
    (41) calculate -> calculate . PLUS calculate
    (42) calculate -> calculate . MINUS calculate
    (43) calculate -> calculate . MUL calculate
    (44) calculate -> calculate . DIV calculate

    RSB             reduce using rule 19 (function_call_parameter -> function_call_parameter COMMA calculate .)
    COMMA           reduce using rule 19 (function_call_parameter -> function_call_parameter COMMA calculate .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MUL             shift and go to state 41
    DIV             shift and go to state 42


state 88

    (22) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB . LMB root RMB

    LMB             shift and go to state 93


state 89

    (23) function_parameter -> function_parameter COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 94


state 90

    (28) if_statement -> if_statement ELSE IF LSB expression RSB . LMB root RMB

    LMB             shift and go to state 95


state 91

    (27) if_statement -> IF LSB expression RSB LMB root . RMB
    (2) root -> root . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . empty
    (11) statement -> . expression SEMI
    (27) if_statement -> . IF LSB expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (29) if_statement -> . if_statement ELSE LMB root RMB
    (26) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (16) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (17) variable_value_change -> . IDENTIFIER EQUAL expression
    (22) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (49) empty -> .
    (12) expression -> . calculate
    (13) expression -> . string_calculate
    (14) expression -> . compare_expression
    (15) expression -> . function_call
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER
    (38) string_calculate -> . string_calculate stringoperator STRING
    (39) string_calculate -> . STRING
    (30) compare_expression -> . compare_expression compare_operator calculate
    (31) compare_expression -> . calculate
    (18) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for RMB resolved as shift
  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    RMB             shift and go to state 96
    PASS            shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    STRING          shift and go to state 24

  ! RMB             [ reduce using rule 49 (empty -> .) ]
  ! PASS            [ reduce using rule 49 (empty -> .) ]
  ! IF              [ reduce using rule 49 (empty -> .) ]
  ! WHILE           [ reduce using rule 49 (empty -> .) ]
  ! VAR             [ reduce using rule 49 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 49 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 49 (empty -> .) ]
  ! MINUS           [ reduce using rule 49 (empty -> .) ]
  ! LSB             [ reduce using rule 49 (empty -> .) ]
  ! INT             [ reduce using rule 49 (empty -> .) ]
  ! STRING          [ reduce using rule 49 (empty -> .) ]

    expression                     shift and go to state 11
    statement                      shift and go to state 25
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 10
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 20
    function_call                  shift and go to state 21

state 92

    (26) while_statement -> WHILE LSB expression RSB LMB root . RMB
    (2) root -> root . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . empty
    (11) statement -> . expression SEMI
    (27) if_statement -> . IF LSB expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (29) if_statement -> . if_statement ELSE LMB root RMB
    (26) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (16) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (17) variable_value_change -> . IDENTIFIER EQUAL expression
    (22) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (49) empty -> .
    (12) expression -> . calculate
    (13) expression -> . string_calculate
    (14) expression -> . compare_expression
    (15) expression -> . function_call
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER
    (38) string_calculate -> . string_calculate stringoperator STRING
    (39) string_calculate -> . STRING
    (30) compare_expression -> . compare_expression compare_operator calculate
    (31) compare_expression -> . calculate
    (18) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for RMB resolved as shift
  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    RMB             shift and go to state 97
    PASS            shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    STRING          shift and go to state 24

  ! RMB             [ reduce using rule 49 (empty -> .) ]
  ! PASS            [ reduce using rule 49 (empty -> .) ]
  ! IF              [ reduce using rule 49 (empty -> .) ]
  ! WHILE           [ reduce using rule 49 (empty -> .) ]
  ! VAR             [ reduce using rule 49 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 49 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 49 (empty -> .) ]
  ! MINUS           [ reduce using rule 49 (empty -> .) ]
  ! LSB             [ reduce using rule 49 (empty -> .) ]
  ! INT             [ reduce using rule 49 (empty -> .) ]
  ! STRING          [ reduce using rule 49 (empty -> .) ]

    expression                     shift and go to state 11
    statement                      shift and go to state 25
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 10
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 20
    function_call                  shift and go to state 21

state 93

    (22) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB . root RMB
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . empty
    (11) statement -> . expression SEMI
    (27) if_statement -> . IF LSB expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (29) if_statement -> . if_statement ELSE LMB root RMB
    (26) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (16) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (17) variable_value_change -> . IDENTIFIER EQUAL expression
    (22) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (49) empty -> .
    (12) expression -> . calculate
    (13) expression -> . string_calculate
    (14) expression -> . compare_expression
    (15) expression -> . function_call
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER
    (38) string_calculate -> . string_calculate stringoperator STRING
    (39) string_calculate -> . STRING
    (30) compare_expression -> . compare_expression compare_operator calculate
    (31) compare_expression -> . calculate
    (18) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PASS            shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    RMB             reduce using rule 49 (empty -> .)
    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    STRING          shift and go to state 24

  ! PASS            [ reduce using rule 49 (empty -> .) ]
  ! IF              [ reduce using rule 49 (empty -> .) ]
  ! WHILE           [ reduce using rule 49 (empty -> .) ]
  ! VAR             [ reduce using rule 49 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 49 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 49 (empty -> .) ]
  ! MINUS           [ reduce using rule 49 (empty -> .) ]
  ! LSB             [ reduce using rule 49 (empty -> .) ]
  ! INT             [ reduce using rule 49 (empty -> .) ]
  ! STRING          [ reduce using rule 49 (empty -> .) ]

    root                           shift and go to state 98
    statement                      shift and go to state 3
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 10
    expression                     shift and go to state 11
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 20
    function_call                  shift and go to state 21

state 94

    (23) function_parameter -> function_parameter COMMA IDENTIFIER .

    RSB             reduce using rule 23 (function_parameter -> function_parameter COMMA IDENTIFIER .)
    COMMA           reduce using rule 23 (function_parameter -> function_parameter COMMA IDENTIFIER .)


state 95

    (28) if_statement -> if_statement ELSE IF LSB expression RSB LMB . root RMB
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . empty
    (11) statement -> . expression SEMI
    (27) if_statement -> . IF LSB expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (29) if_statement -> . if_statement ELSE LMB root RMB
    (26) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (16) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (17) variable_value_change -> . IDENTIFIER EQUAL expression
    (22) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (49) empty -> .
    (12) expression -> . calculate
    (13) expression -> . string_calculate
    (14) expression -> . compare_expression
    (15) expression -> . function_call
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER
    (38) string_calculate -> . string_calculate stringoperator STRING
    (39) string_calculate -> . STRING
    (30) compare_expression -> . compare_expression compare_operator calculate
    (31) compare_expression -> . calculate
    (18) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PASS            shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    RMB             reduce using rule 49 (empty -> .)
    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    STRING          shift and go to state 24

  ! PASS            [ reduce using rule 49 (empty -> .) ]
  ! IF              [ reduce using rule 49 (empty -> .) ]
  ! WHILE           [ reduce using rule 49 (empty -> .) ]
  ! VAR             [ reduce using rule 49 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 49 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 49 (empty -> .) ]
  ! MINUS           [ reduce using rule 49 (empty -> .) ]
  ! LSB             [ reduce using rule 49 (empty -> .) ]
  ! INT             [ reduce using rule 49 (empty -> .) ]
  ! STRING          [ reduce using rule 49 (empty -> .) ]

    if_statement                   shift and go to state 4
    expression                     shift and go to state 11
    root                           shift and go to state 99
    statement                      shift and go to state 3
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 10
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 20
    function_call                  shift and go to state 21

state 96

    (27) if_statement -> IF LSB expression RSB LMB root RMB .

    ELSE            reduce using rule 27 (if_statement -> IF LSB expression RSB LMB root RMB .)
    PASS            reduce using rule 27 (if_statement -> IF LSB expression RSB LMB root RMB .)
    IF              reduce using rule 27 (if_statement -> IF LSB expression RSB LMB root RMB .)
    WHILE           reduce using rule 27 (if_statement -> IF LSB expression RSB LMB root RMB .)
    VAR             reduce using rule 27 (if_statement -> IF LSB expression RSB LMB root RMB .)
    IDENTIFIER      reduce using rule 27 (if_statement -> IF LSB expression RSB LMB root RMB .)
    FUNCTION        reduce using rule 27 (if_statement -> IF LSB expression RSB LMB root RMB .)
    MINUS           reduce using rule 27 (if_statement -> IF LSB expression RSB LMB root RMB .)
    LSB             reduce using rule 27 (if_statement -> IF LSB expression RSB LMB root RMB .)
    INT             reduce using rule 27 (if_statement -> IF LSB expression RSB LMB root RMB .)
    STRING          reduce using rule 27 (if_statement -> IF LSB expression RSB LMB root RMB .)
    $end            reduce using rule 27 (if_statement -> IF LSB expression RSB LMB root RMB .)
    RMB             reduce using rule 27 (if_statement -> IF LSB expression RSB LMB root RMB .)


state 97

    (26) while_statement -> WHILE LSB expression RSB LMB root RMB .

    PASS            reduce using rule 26 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    IF              reduce using rule 26 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    WHILE           reduce using rule 26 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    VAR             reduce using rule 26 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    IDENTIFIER      reduce using rule 26 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    FUNCTION        reduce using rule 26 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    MINUS           reduce using rule 26 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    LSB             reduce using rule 26 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    INT             reduce using rule 26 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    STRING          reduce using rule 26 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    $end            reduce using rule 26 (while_statement -> WHILE LSB expression RSB LMB root RMB .)
    RMB             reduce using rule 26 (while_statement -> WHILE LSB expression RSB LMB root RMB .)


state 98

    (22) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root . RMB
    (2) root -> root . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . empty
    (11) statement -> . expression SEMI
    (27) if_statement -> . IF LSB expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (29) if_statement -> . if_statement ELSE LMB root RMB
    (26) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (16) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (17) variable_value_change -> . IDENTIFIER EQUAL expression
    (22) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (49) empty -> .
    (12) expression -> . calculate
    (13) expression -> . string_calculate
    (14) expression -> . compare_expression
    (15) expression -> . function_call
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER
    (38) string_calculate -> . string_calculate stringoperator STRING
    (39) string_calculate -> . STRING
    (30) compare_expression -> . compare_expression compare_operator calculate
    (31) compare_expression -> . calculate
    (18) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for RMB resolved as shift
  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    RMB             shift and go to state 100
    PASS            shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    STRING          shift and go to state 24

  ! RMB             [ reduce using rule 49 (empty -> .) ]
  ! PASS            [ reduce using rule 49 (empty -> .) ]
  ! IF              [ reduce using rule 49 (empty -> .) ]
  ! WHILE           [ reduce using rule 49 (empty -> .) ]
  ! VAR             [ reduce using rule 49 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 49 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 49 (empty -> .) ]
  ! MINUS           [ reduce using rule 49 (empty -> .) ]
  ! LSB             [ reduce using rule 49 (empty -> .) ]
  ! INT             [ reduce using rule 49 (empty -> .) ]
  ! STRING          [ reduce using rule 49 (empty -> .) ]

    statement                      shift and go to state 25
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 10
    expression                     shift and go to state 11
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 20
    function_call                  shift and go to state 21

state 99

    (28) if_statement -> if_statement ELSE IF LSB expression RSB LMB root . RMB
    (2) root -> root . statement
    (4) statement -> . if_statement
    (5) statement -> . while_statement
    (6) statement -> . variable_declaration SEMI
    (7) statement -> . variable_value_change SEMI
    (8) statement -> . function_declaration
    (9) statement -> . PASS SEMI
    (10) statement -> . empty
    (11) statement -> . expression SEMI
    (27) if_statement -> . IF LSB expression RSB LMB root RMB
    (28) if_statement -> . if_statement ELSE IF LSB expression RSB LMB root RMB
    (29) if_statement -> . if_statement ELSE LMB root RMB
    (26) while_statement -> . WHILE LSB expression RSB LMB root RMB
    (16) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (17) variable_value_change -> . IDENTIFIER EQUAL expression
    (22) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB
    (49) empty -> .
    (12) expression -> . calculate
    (13) expression -> . string_calculate
    (14) expression -> . compare_expression
    (15) expression -> . function_call
    (41) calculate -> . calculate PLUS calculate
    (42) calculate -> . calculate MINUS calculate
    (43) calculate -> . calculate MUL calculate
    (44) calculate -> . calculate DIV calculate
    (45) calculate -> . MINUS calculate
    (46) calculate -> . LSB calculate RSB
    (47) calculate -> . INT
    (48) calculate -> . IDENTIFIER
    (38) string_calculate -> . string_calculate stringoperator STRING
    (39) string_calculate -> . STRING
    (30) compare_expression -> . compare_expression compare_operator calculate
    (31) compare_expression -> . calculate
    (18) function_call -> . IDENTIFIER LSB function_call_parameter RSB

  ! shift/reduce conflict for RMB resolved as shift
  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSB resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    RMB             shift and go to state 101
    PASS            shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 14
    VAR             shift and go to state 15
    IDENTIFIER      shift and go to state 16
    FUNCTION        shift and go to state 17
    MINUS           shift and go to state 22
    LSB             shift and go to state 13
    INT             shift and go to state 23
    STRING          shift and go to state 24

  ! RMB             [ reduce using rule 49 (empty -> .) ]
  ! PASS            [ reduce using rule 49 (empty -> .) ]
  ! IF              [ reduce using rule 49 (empty -> .) ]
  ! WHILE           [ reduce using rule 49 (empty -> .) ]
  ! VAR             [ reduce using rule 49 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 49 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 49 (empty -> .) ]
  ! MINUS           [ reduce using rule 49 (empty -> .) ]
  ! LSB             [ reduce using rule 49 (empty -> .) ]
  ! INT             [ reduce using rule 49 (empty -> .) ]
  ! STRING          [ reduce using rule 49 (empty -> .) ]

    if_statement                   shift and go to state 4
    expression                     shift and go to state 11
    statement                      shift and go to state 25
    while_statement                shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_value_change          shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 10
    calculate                      shift and go to state 18
    string_calculate               shift and go to state 19
    compare_expression             shift and go to state 20
    function_call                  shift and go to state 21

state 100

    (22) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .

    PASS            reduce using rule 22 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    IF              reduce using rule 22 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    WHILE           reduce using rule 22 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    VAR             reduce using rule 22 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    IDENTIFIER      reduce using rule 22 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    FUNCTION        reduce using rule 22 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    MINUS           reduce using rule 22 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    LSB             reduce using rule 22 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    INT             reduce using rule 22 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    STRING          reduce using rule 22 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    $end            reduce using rule 22 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)
    RMB             reduce using rule 22 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB root RMB .)


state 101

    (28) if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .

    ELSE            reduce using rule 28 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    PASS            reduce using rule 28 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    IF              reduce using rule 28 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    WHILE           reduce using rule 28 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    VAR             reduce using rule 28 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    IDENTIFIER      reduce using rule 28 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    FUNCTION        reduce using rule 28 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    MINUS           reduce using rule 28 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    LSB             reduce using rule 28 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    INT             reduce using rule 28 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    STRING          reduce using rule 28 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    $end            reduce using rule 28 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)
    RMB             reduce using rule 28 (if_statement -> if_statement ELSE IF LSB expression RSB LMB root RMB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PASS in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 0 resolved as shift
WARNING: shift/reduce conflict for LSB in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for PASS in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 2 resolved as shift
WARNING: shift/reduce conflict for LSB in state 2 resolved as shift
WARNING: shift/reduce conflict for INT in state 2 resolved as shift
WARNING: shift/reduce conflict for STRING in state 2 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 16 resolved as shift
WARNING: shift/reduce conflict for PASS in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 52 resolved as shift
WARNING: shift/reduce conflict for VAR in state 52 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 52 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for LSB in state 52 resolved as shift
WARNING: shift/reduce conflict for INT in state 52 resolved as shift
WARNING: shift/reduce conflict for STRING in state 52 resolved as shift
WARNING: shift/reduce conflict for RMB in state 74 resolved as shift
WARNING: shift/reduce conflict for PASS in state 74 resolved as shift
WARNING: shift/reduce conflict for IF in state 74 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 74 resolved as shift
WARNING: shift/reduce conflict for VAR in state 74 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 74 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for LSB in state 74 resolved as shift
WARNING: shift/reduce conflict for INT in state 74 resolved as shift
WARNING: shift/reduce conflict for STRING in state 74 resolved as shift
WARNING: shift/reduce conflict for PASS in state 85 resolved as shift
WARNING: shift/reduce conflict for IF in state 85 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 85 resolved as shift
WARNING: shift/reduce conflict for VAR in state 85 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 85 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for LSB in state 85 resolved as shift
WARNING: shift/reduce conflict for INT in state 85 resolved as shift
WARNING: shift/reduce conflict for STRING in state 85 resolved as shift
WARNING: shift/reduce conflict for PASS in state 86 resolved as shift
WARNING: shift/reduce conflict for IF in state 86 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 86 resolved as shift
WARNING: shift/reduce conflict for VAR in state 86 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 86 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for LSB in state 86 resolved as shift
WARNING: shift/reduce conflict for INT in state 86 resolved as shift
WARNING: shift/reduce conflict for STRING in state 86 resolved as shift
WARNING: shift/reduce conflict for RMB in state 91 resolved as shift
WARNING: shift/reduce conflict for PASS in state 91 resolved as shift
WARNING: shift/reduce conflict for IF in state 91 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 91 resolved as shift
WARNING: shift/reduce conflict for VAR in state 91 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 91 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 91 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 91 resolved as shift
WARNING: shift/reduce conflict for LSB in state 91 resolved as shift
WARNING: shift/reduce conflict for INT in state 91 resolved as shift
WARNING: shift/reduce conflict for STRING in state 91 resolved as shift
WARNING: shift/reduce conflict for RMB in state 92 resolved as shift
WARNING: shift/reduce conflict for PASS in state 92 resolved as shift
WARNING: shift/reduce conflict for IF in state 92 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 92 resolved as shift
WARNING: shift/reduce conflict for VAR in state 92 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 92 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for LSB in state 92 resolved as shift
WARNING: shift/reduce conflict for INT in state 92 resolved as shift
WARNING: shift/reduce conflict for STRING in state 92 resolved as shift
WARNING: shift/reduce conflict for PASS in state 93 resolved as shift
WARNING: shift/reduce conflict for IF in state 93 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 93 resolved as shift
WARNING: shift/reduce conflict for VAR in state 93 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 93 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for LSB in state 93 resolved as shift
WARNING: shift/reduce conflict for INT in state 93 resolved as shift
WARNING: shift/reduce conflict for STRING in state 93 resolved as shift
WARNING: shift/reduce conflict for PASS in state 95 resolved as shift
WARNING: shift/reduce conflict for IF in state 95 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 95 resolved as shift
WARNING: shift/reduce conflict for VAR in state 95 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 95 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for LSB in state 95 resolved as shift
WARNING: shift/reduce conflict for INT in state 95 resolved as shift
WARNING: shift/reduce conflict for STRING in state 95 resolved as shift
WARNING: shift/reduce conflict for RMB in state 98 resolved as shift
WARNING: shift/reduce conflict for PASS in state 98 resolved as shift
WARNING: shift/reduce conflict for IF in state 98 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 98 resolved as shift
WARNING: shift/reduce conflict for VAR in state 98 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 98 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for LSB in state 98 resolved as shift
WARNING: shift/reduce conflict for INT in state 98 resolved as shift
WARNING: shift/reduce conflict for STRING in state 98 resolved as shift
WARNING: shift/reduce conflict for RMB in state 99 resolved as shift
WARNING: shift/reduce conflict for PASS in state 99 resolved as shift
WARNING: shift/reduce conflict for IF in state 99 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 99 resolved as shift
WARNING: shift/reduce conflict for VAR in state 99 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 99 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for LSB in state 99 resolved as shift
WARNING: shift/reduce conflict for INT in state 99 resolved as shift
WARNING: shift/reduce conflict for STRING in state 99 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (program -> root)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 18 resolved using rule (expression -> calculate)
WARNING: rejected rule (compare_expression -> calculate) in state 18
