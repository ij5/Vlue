Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> root
Rule 1     root -> expression
Rule 2     expression -> expression variable_declaration SEMI
Rule 3     expression -> expression variable_value_change SEMI
Rule 4     expression -> expression if_statement
Rule 5     expression -> expression function
Rule 6     expression -> expression function_call SEMI
Rule 7     expression -> expression repeat
Rule 8     expression -> expression for
Rule 9     expression -> expression while
Rule 10    expression -> expression use SEMI
Rule 11    expression -> expression error_handling
Rule 12    expression -> expression variable_alone SEMI
Rule 13    expression -> expression global_variable SEMI
Rule 14    expression -> expression class_def
Rule 15    expression -> expression debug SEMI
Rule 16    expression -> expression function_class SEMI
Rule 17    expression -> variable_declaration SEMI
Rule 18    expression -> variable_value_change SEMI
Rule 19    expression -> if_statement
Rule 20    expression -> function
Rule 21    expression -> function_call
Rule 22    expression -> repeat
Rule 23    expression -> for
Rule 24    expression -> while
Rule 25    expression -> use SEMI
Rule 26    expression -> error_handling
Rule 27    expression -> variable_alone SEMI
Rule 28    expression -> global_variable SEMI
Rule 29    expression -> class_def
Rule 30    expression -> debug SEMI
Rule 31    expression -> function_class SEMI
Rule 32    expression -> empty
Rule 33    error_handling -> try catch
Rule 34    try -> TRY LMB expression RMB
Rule 35    catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB
Rule 36    for -> for_head for_body
Rule 37    for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB
Rule 38    for_body -> LMB expression RMB
Rule 39    while -> while_head while_body
Rule 40    while_head -> WHILE LSB condition RSB
Rule 41    while_body -> LMB expression RMB
Rule 42    repeat -> repeat_head repeat_body
Rule 43    repeat_head -> REPEAT LSB calculate RSB
Rule 44    repeat_body -> LMB expression RMB
Rule 45    function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
Rule 46    function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
Rule 47    class_def -> CLASS IDENTIFIER LMB expression RMB
Rule 48    function -> function_head function_body
Rule 49    function_head -> FUNCTION IDENTIFIER LSB parameter RSB
Rule 50    function_head -> FUNCTION IDENTIFIER LSB empty RSB
Rule 51    function_body -> LMB expression RMB
Rule 52    function_call -> IDENTIFIER LSB parameter RSB
Rule 53    function_call -> IDENTIFIER LSB empty RSB
Rule 54    parameter -> parameter COMMA calculate
Rule 55    parameter -> calculate
Rule 56    debug -> USE DEBUG
Rule 57    if_statement -> if_statement_1 if_statement_2 if_statement_3
Rule 58    if_statement -> if_statement_1 if_statement_2
Rule 59    if_statement -> if_statement_1 if_statement_3
Rule 60    if_statement -> if_statement_1
Rule 61    if_statement_1 -> IF LSB condition RSB LMB expression RMB
Rule 62    if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB
Rule 63    if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
Rule 64    if_statement_3 -> ELSE LMB expression RMB
Rule 65    condition -> condition LB calculate
Rule 66    condition -> condition RB calculate
Rule 67    condition -> condition LB EQUAL calculate
Rule 68    condition -> condition RB EQUAL calculate
Rule 69    condition -> condition EQUAL calculate
Rule 70    condition -> calculate
Rule 71    library -> identifier PYTHON
Rule 72    library -> library identifier PYTHON
Rule 73    identifier -> identifier IDENTIFIER
Rule 74    identifier -> IDENTIFIER
Rule 75    use -> USE use_params
Rule 76    use_params -> IDENTIFIER
Rule 77    global_variable -> GLOBAL IDENTIFIER
Rule 78    variable_alone -> IDENTIFIER
Rule 79    variable_value_change -> IDENTIFIER EQUAL LIST
Rule 80    variable_value_change -> IDENTIFIER EQUAL calculate
Rule 81    variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate
Rule 82    variable_declaration -> VAR IDENTIFIER EQUAL calculate
Rule 83    variable_declaration -> VAR IDENTIFIER
Rule 84    calculate -> calculate PLUS calculate
Rule 85    calculate -> calculate MINUS calculate
Rule 86    calculate -> MINUS calculate
Rule 87    calculate -> calculate MUL calculate
Rule 88    calculate -> calculate DIV calculate
Rule 89    calculate -> INT
Rule 90    calculate -> FLOAT
Rule 91    calculate -> STRING
Rule 92    calculate -> IDENTIFIER
Rule 93    calculate -> IDENTIFIER LIST
Rule 94    calculate -> LIST
Rule 95    calculate -> LSB calculate RSB
Rule 96    empty -> <empty>

Terminals, with rules where they appear

CATCH                : 35
CLASS                : 47
COLON                : 
COMMA                : 54
DEBUG                : 56
DIV                  : 88
ELSE                 : 62 63 64
EQUAL                : 45 46 67 68 69 79 80 81 82
FLOAT                : 90
FOR                  : 37
FUNCTION             : 49 50
GLOBAL               : 77
IDENTIFIER           : 35 37 37 45 45 46 46 47 49 50 52 53 73 74 76 77 78 79 80 81 82 83 92 93
IF                   : 61 62 63
IN                   : 37
INT                  : 89
LB                   : 65 67
LIST                 : 79 81 93 94
LMB                  : 34 35 38 41 44 47 51 61 62 63 64
LSB                  : 35 37 40 43 45 46 49 50 52 53 61 62 63 95
MINUS                : 85 86
MUL                  : 87
PLUS                 : 84
PYTHON               : 71 72
RB                   : 66 68
REPEAT               : 43
RMB                  : 34 35 38 41 44 47 51 61 62 63 64
RSB                  : 35 37 40 43 45 46 49 50 52 53 61 62 63 95
SEMI                 : 2 3 6 10 12 13 15 16 17 18 25 27 28 30 31
STRING               : 91
TRY                  : 34
USE                  : 56 75
VAR                  : 81 82 83
WHILE                : 40
error                : 

Nonterminals, with rules where they appear

calculate            : 43 54 55 65 66 67 68 69 70 80 81 82 84 84 85 85 86 87 87 88 88 95
catch                : 33
class_def            : 14 29
condition            : 40 61 62 63 65 66 67 68 69
debug                : 15 30
empty                : 32 46 50 53
error_handling       : 11 26
expression           : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 34 35 38 41 44 47 51 61 62 63 64
for                  : 8 23
for_body             : 36
for_head             : 36
function             : 5 20
function_body        : 48
function_call        : 6 21
function_class       : 16 31
function_head        : 48
global_variable      : 13 28
identifier           : 71 72 73
if_statement         : 4 19
if_statement_1       : 57 58 59 60
if_statement_2       : 57 58 63
if_statement_3       : 57 59
library              : 72
parameter            : 45 49 52 54
repeat               : 7 22
repeat_body          : 42
repeat_head          : 42
root                 : 0
try                  : 33
use                  : 10 25
use_params           : 75
variable_alone       : 12 27
variable_declaration : 2 17
variable_value_change : 3 18
while                : 9 24
while_body           : 39
while_head           : 39

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . expression
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . variable_declaration SEMI
    (18) expression -> . variable_value_change SEMI
    (19) expression -> . if_statement
    (20) expression -> . function
    (21) expression -> . function_call
    (22) expression -> . repeat
    (23) expression -> . for
    (24) expression -> . while
    (25) expression -> . use SEMI
    (26) expression -> . error_handling
    (27) expression -> . variable_alone SEMI
    (28) expression -> . global_variable SEMI
    (29) expression -> . class_def
    (30) expression -> . debug SEMI
    (31) expression -> . function_class SEMI
    (32) expression -> . empty
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (96) empty -> .
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    $end            reduce using rule 96 (empty -> .)
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

  ! VAR             [ reduce using rule 96 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 96 (empty -> .) ]
  ! USE             [ reduce using rule 96 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 96 (empty -> .) ]
  ! CLASS           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! REPEAT          [ reduce using rule 96 (empty -> .) ]
  ! FOR             [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! TRY             [ reduce using rule 96 (empty -> .) ]

    root                           shift and go to state 1
    expression                     shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 1

    (0) S' -> root .



state 2

    (1) root -> expression .
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

    $end            reduce using rule 1 (root -> expression .)
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

    variable_declaration           shift and go to state 36
    variable_value_change          shift and go to state 37
    if_statement                   shift and go to state 38
    function                       shift and go to state 39
    function_call                  shift and go to state 40
    repeat                         shift and go to state 41
    for                            shift and go to state 42
    while                          shift and go to state 43
    use                            shift and go to state 44
    error_handling                 shift and go to state 45
    variable_alone                 shift and go to state 46
    global_variable                shift and go to state 47
    class_def                      shift and go to state 48
    debug                          shift and go to state 49
    function_class                 shift and go to state 50
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 3

    (17) expression -> variable_declaration . SEMI

    SEMI            shift and go to state 51


state 4

    (18) expression -> variable_value_change . SEMI

    SEMI            shift and go to state 52


state 5

    (19) expression -> if_statement .

    VAR             reduce using rule 19 (expression -> if_statement .)
    IDENTIFIER      reduce using rule 19 (expression -> if_statement .)
    USE             reduce using rule 19 (expression -> if_statement .)
    GLOBAL          reduce using rule 19 (expression -> if_statement .)
    CLASS           reduce using rule 19 (expression -> if_statement .)
    IF              reduce using rule 19 (expression -> if_statement .)
    FUNCTION        reduce using rule 19 (expression -> if_statement .)
    REPEAT          reduce using rule 19 (expression -> if_statement .)
    FOR             reduce using rule 19 (expression -> if_statement .)
    WHILE           reduce using rule 19 (expression -> if_statement .)
    TRY             reduce using rule 19 (expression -> if_statement .)
    $end            reduce using rule 19 (expression -> if_statement .)
    RMB             reduce using rule 19 (expression -> if_statement .)


state 6

    (20) expression -> function .

    VAR             reduce using rule 20 (expression -> function .)
    IDENTIFIER      reduce using rule 20 (expression -> function .)
    USE             reduce using rule 20 (expression -> function .)
    GLOBAL          reduce using rule 20 (expression -> function .)
    CLASS           reduce using rule 20 (expression -> function .)
    IF              reduce using rule 20 (expression -> function .)
    FUNCTION        reduce using rule 20 (expression -> function .)
    REPEAT          reduce using rule 20 (expression -> function .)
    FOR             reduce using rule 20 (expression -> function .)
    WHILE           reduce using rule 20 (expression -> function .)
    TRY             reduce using rule 20 (expression -> function .)
    $end            reduce using rule 20 (expression -> function .)
    RMB             reduce using rule 20 (expression -> function .)


state 7

    (21) expression -> function_call .

    VAR             reduce using rule 21 (expression -> function_call .)
    IDENTIFIER      reduce using rule 21 (expression -> function_call .)
    USE             reduce using rule 21 (expression -> function_call .)
    GLOBAL          reduce using rule 21 (expression -> function_call .)
    CLASS           reduce using rule 21 (expression -> function_call .)
    IF              reduce using rule 21 (expression -> function_call .)
    FUNCTION        reduce using rule 21 (expression -> function_call .)
    REPEAT          reduce using rule 21 (expression -> function_call .)
    FOR             reduce using rule 21 (expression -> function_call .)
    WHILE           reduce using rule 21 (expression -> function_call .)
    TRY             reduce using rule 21 (expression -> function_call .)
    $end            reduce using rule 21 (expression -> function_call .)
    RMB             reduce using rule 21 (expression -> function_call .)


state 8

    (22) expression -> repeat .

    VAR             reduce using rule 22 (expression -> repeat .)
    IDENTIFIER      reduce using rule 22 (expression -> repeat .)
    USE             reduce using rule 22 (expression -> repeat .)
    GLOBAL          reduce using rule 22 (expression -> repeat .)
    CLASS           reduce using rule 22 (expression -> repeat .)
    IF              reduce using rule 22 (expression -> repeat .)
    FUNCTION        reduce using rule 22 (expression -> repeat .)
    REPEAT          reduce using rule 22 (expression -> repeat .)
    FOR             reduce using rule 22 (expression -> repeat .)
    WHILE           reduce using rule 22 (expression -> repeat .)
    TRY             reduce using rule 22 (expression -> repeat .)
    $end            reduce using rule 22 (expression -> repeat .)
    RMB             reduce using rule 22 (expression -> repeat .)


state 9

    (23) expression -> for .

    VAR             reduce using rule 23 (expression -> for .)
    IDENTIFIER      reduce using rule 23 (expression -> for .)
    USE             reduce using rule 23 (expression -> for .)
    GLOBAL          reduce using rule 23 (expression -> for .)
    CLASS           reduce using rule 23 (expression -> for .)
    IF              reduce using rule 23 (expression -> for .)
    FUNCTION        reduce using rule 23 (expression -> for .)
    REPEAT          reduce using rule 23 (expression -> for .)
    FOR             reduce using rule 23 (expression -> for .)
    WHILE           reduce using rule 23 (expression -> for .)
    TRY             reduce using rule 23 (expression -> for .)
    $end            reduce using rule 23 (expression -> for .)
    RMB             reduce using rule 23 (expression -> for .)


state 10

    (24) expression -> while .

    VAR             reduce using rule 24 (expression -> while .)
    IDENTIFIER      reduce using rule 24 (expression -> while .)
    USE             reduce using rule 24 (expression -> while .)
    GLOBAL          reduce using rule 24 (expression -> while .)
    CLASS           reduce using rule 24 (expression -> while .)
    IF              reduce using rule 24 (expression -> while .)
    FUNCTION        reduce using rule 24 (expression -> while .)
    REPEAT          reduce using rule 24 (expression -> while .)
    FOR             reduce using rule 24 (expression -> while .)
    WHILE           reduce using rule 24 (expression -> while .)
    TRY             reduce using rule 24 (expression -> while .)
    $end            reduce using rule 24 (expression -> while .)
    RMB             reduce using rule 24 (expression -> while .)


state 11

    (25) expression -> use . SEMI

    SEMI            shift and go to state 53


state 12

    (26) expression -> error_handling .

    VAR             reduce using rule 26 (expression -> error_handling .)
    IDENTIFIER      reduce using rule 26 (expression -> error_handling .)
    USE             reduce using rule 26 (expression -> error_handling .)
    GLOBAL          reduce using rule 26 (expression -> error_handling .)
    CLASS           reduce using rule 26 (expression -> error_handling .)
    IF              reduce using rule 26 (expression -> error_handling .)
    FUNCTION        reduce using rule 26 (expression -> error_handling .)
    REPEAT          reduce using rule 26 (expression -> error_handling .)
    FOR             reduce using rule 26 (expression -> error_handling .)
    WHILE           reduce using rule 26 (expression -> error_handling .)
    TRY             reduce using rule 26 (expression -> error_handling .)
    $end            reduce using rule 26 (expression -> error_handling .)
    RMB             reduce using rule 26 (expression -> error_handling .)


state 13

    (27) expression -> variable_alone . SEMI

    SEMI            shift and go to state 54


state 14

    (28) expression -> global_variable . SEMI

    SEMI            shift and go to state 55


state 15

    (29) expression -> class_def .

    VAR             reduce using rule 29 (expression -> class_def .)
    IDENTIFIER      reduce using rule 29 (expression -> class_def .)
    USE             reduce using rule 29 (expression -> class_def .)
    GLOBAL          reduce using rule 29 (expression -> class_def .)
    CLASS           reduce using rule 29 (expression -> class_def .)
    IF              reduce using rule 29 (expression -> class_def .)
    FUNCTION        reduce using rule 29 (expression -> class_def .)
    REPEAT          reduce using rule 29 (expression -> class_def .)
    FOR             reduce using rule 29 (expression -> class_def .)
    WHILE           reduce using rule 29 (expression -> class_def .)
    TRY             reduce using rule 29 (expression -> class_def .)
    $end            reduce using rule 29 (expression -> class_def .)
    RMB             reduce using rule 29 (expression -> class_def .)


state 16

    (30) expression -> debug . SEMI

    SEMI            shift and go to state 56


state 17

    (31) expression -> function_class . SEMI

    SEMI            shift and go to state 57


state 18

    (32) expression -> empty .

    VAR             reduce using rule 32 (expression -> empty .)
    IDENTIFIER      reduce using rule 32 (expression -> empty .)
    USE             reduce using rule 32 (expression -> empty .)
    GLOBAL          reduce using rule 32 (expression -> empty .)
    CLASS           reduce using rule 32 (expression -> empty .)
    IF              reduce using rule 32 (expression -> empty .)
    FUNCTION        reduce using rule 32 (expression -> empty .)
    REPEAT          reduce using rule 32 (expression -> empty .)
    FOR             reduce using rule 32 (expression -> empty .)
    WHILE           reduce using rule 32 (expression -> empty .)
    TRY             reduce using rule 32 (expression -> empty .)
    $end            reduce using rule 32 (expression -> empty .)
    RMB             reduce using rule 32 (expression -> empty .)


state 19

    (81) variable_declaration -> VAR . IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> VAR . IDENTIFIER EQUAL calculate
    (83) variable_declaration -> VAR . IDENTIFIER

    IDENTIFIER      shift and go to state 58


state 20

    (79) variable_value_change -> IDENTIFIER . EQUAL LIST
    (80) variable_value_change -> IDENTIFIER . EQUAL calculate
    (52) function_call -> IDENTIFIER . LSB parameter RSB
    (53) function_call -> IDENTIFIER . LSB empty RSB
    (78) variable_alone -> IDENTIFIER .
    (45) function_class -> IDENTIFIER . EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> IDENTIFIER . EQUAL IDENTIFIER LSB empty RSB

    EQUAL           shift and go to state 59
    LSB             shift and go to state 60
    SEMI            reduce using rule 78 (variable_alone -> IDENTIFIER .)


state 21

    (57) if_statement -> if_statement_1 . if_statement_2 if_statement_3
    (58) if_statement -> if_statement_1 . if_statement_2
    (59) if_statement -> if_statement_1 . if_statement_3
    (60) if_statement -> if_statement_1 .
    (62) if_statement_2 -> . ELSE IF LSB condition RSB LMB expression RMB
    (63) if_statement_2 -> . if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
    (64) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 60 (if_statement -> if_statement_1 .)
    IDENTIFIER      reduce using rule 60 (if_statement -> if_statement_1 .)
    USE             reduce using rule 60 (if_statement -> if_statement_1 .)
    GLOBAL          reduce using rule 60 (if_statement -> if_statement_1 .)
    CLASS           reduce using rule 60 (if_statement -> if_statement_1 .)
    IF              reduce using rule 60 (if_statement -> if_statement_1 .)
    FUNCTION        reduce using rule 60 (if_statement -> if_statement_1 .)
    REPEAT          reduce using rule 60 (if_statement -> if_statement_1 .)
    FOR             reduce using rule 60 (if_statement -> if_statement_1 .)
    WHILE           reduce using rule 60 (if_statement -> if_statement_1 .)
    TRY             reduce using rule 60 (if_statement -> if_statement_1 .)
    $end            reduce using rule 60 (if_statement -> if_statement_1 .)
    RMB             reduce using rule 60 (if_statement -> if_statement_1 .)
    ELSE            shift and go to state 63

    if_statement_2                 shift and go to state 61
    if_statement_3                 shift and go to state 62

state 22

    (48) function -> function_head . function_body
    (51) function_body -> . LMB expression RMB

    LMB             shift and go to state 65

    function_body                  shift and go to state 64

state 23

    (42) repeat -> repeat_head . repeat_body
    (44) repeat_body -> . LMB expression RMB

    LMB             shift and go to state 67

    repeat_body                    shift and go to state 66

state 24

    (36) for -> for_head . for_body
    (38) for_body -> . LMB expression RMB

    LMB             shift and go to state 69

    for_body                       shift and go to state 68

state 25

    (39) while -> while_head . while_body
    (41) while_body -> . LMB expression RMB

    LMB             shift and go to state 71

    while_body                     shift and go to state 70

state 26

    (75) use -> USE . use_params
    (56) debug -> USE . DEBUG
    (76) use_params -> . IDENTIFIER

    DEBUG           shift and go to state 73
    IDENTIFIER      shift and go to state 74

    use_params                     shift and go to state 72

state 27

    (33) error_handling -> try . catch
    (35) catch -> . CATCH LSB IDENTIFIER RSB LMB expression RMB

    CATCH           shift and go to state 76

    catch                          shift and go to state 75

state 28

    (77) global_variable -> GLOBAL . IDENTIFIER

    IDENTIFIER      shift and go to state 77


state 29

    (47) class_def -> CLASS . IDENTIFIER LMB expression RMB

    IDENTIFIER      shift and go to state 78


state 30

    (61) if_statement_1 -> IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 79


state 31

    (49) function_head -> FUNCTION . IDENTIFIER LSB parameter RSB
    (50) function_head -> FUNCTION . IDENTIFIER LSB empty RSB

    IDENTIFIER      shift and go to state 80


state 32

    (43) repeat_head -> REPEAT . LSB calculate RSB

    LSB             shift and go to state 81


state 33

    (37) for_head -> FOR . LSB IDENTIFIER IN IDENTIFIER RSB

    LSB             shift and go to state 82


state 34

    (40) while_head -> WHILE . LSB condition RSB

    LSB             shift and go to state 83


state 35

    (34) try -> TRY . LMB expression RMB

    LMB             shift and go to state 84


state 36

    (2) expression -> expression variable_declaration . SEMI

    SEMI            shift and go to state 85


state 37

    (3) expression -> expression variable_value_change . SEMI

    SEMI            shift and go to state 86


state 38

    (4) expression -> expression if_statement .

    VAR             reduce using rule 4 (expression -> expression if_statement .)
    IDENTIFIER      reduce using rule 4 (expression -> expression if_statement .)
    USE             reduce using rule 4 (expression -> expression if_statement .)
    GLOBAL          reduce using rule 4 (expression -> expression if_statement .)
    CLASS           reduce using rule 4 (expression -> expression if_statement .)
    IF              reduce using rule 4 (expression -> expression if_statement .)
    FUNCTION        reduce using rule 4 (expression -> expression if_statement .)
    REPEAT          reduce using rule 4 (expression -> expression if_statement .)
    FOR             reduce using rule 4 (expression -> expression if_statement .)
    WHILE           reduce using rule 4 (expression -> expression if_statement .)
    TRY             reduce using rule 4 (expression -> expression if_statement .)
    $end            reduce using rule 4 (expression -> expression if_statement .)
    RMB             reduce using rule 4 (expression -> expression if_statement .)


state 39

    (5) expression -> expression function .

    VAR             reduce using rule 5 (expression -> expression function .)
    IDENTIFIER      reduce using rule 5 (expression -> expression function .)
    USE             reduce using rule 5 (expression -> expression function .)
    GLOBAL          reduce using rule 5 (expression -> expression function .)
    CLASS           reduce using rule 5 (expression -> expression function .)
    IF              reduce using rule 5 (expression -> expression function .)
    FUNCTION        reduce using rule 5 (expression -> expression function .)
    REPEAT          reduce using rule 5 (expression -> expression function .)
    FOR             reduce using rule 5 (expression -> expression function .)
    WHILE           reduce using rule 5 (expression -> expression function .)
    TRY             reduce using rule 5 (expression -> expression function .)
    $end            reduce using rule 5 (expression -> expression function .)
    RMB             reduce using rule 5 (expression -> expression function .)


state 40

    (6) expression -> expression function_call . SEMI

    SEMI            shift and go to state 87


state 41

    (7) expression -> expression repeat .

    VAR             reduce using rule 7 (expression -> expression repeat .)
    IDENTIFIER      reduce using rule 7 (expression -> expression repeat .)
    USE             reduce using rule 7 (expression -> expression repeat .)
    GLOBAL          reduce using rule 7 (expression -> expression repeat .)
    CLASS           reduce using rule 7 (expression -> expression repeat .)
    IF              reduce using rule 7 (expression -> expression repeat .)
    FUNCTION        reduce using rule 7 (expression -> expression repeat .)
    REPEAT          reduce using rule 7 (expression -> expression repeat .)
    FOR             reduce using rule 7 (expression -> expression repeat .)
    WHILE           reduce using rule 7 (expression -> expression repeat .)
    TRY             reduce using rule 7 (expression -> expression repeat .)
    $end            reduce using rule 7 (expression -> expression repeat .)
    RMB             reduce using rule 7 (expression -> expression repeat .)


state 42

    (8) expression -> expression for .

    VAR             reduce using rule 8 (expression -> expression for .)
    IDENTIFIER      reduce using rule 8 (expression -> expression for .)
    USE             reduce using rule 8 (expression -> expression for .)
    GLOBAL          reduce using rule 8 (expression -> expression for .)
    CLASS           reduce using rule 8 (expression -> expression for .)
    IF              reduce using rule 8 (expression -> expression for .)
    FUNCTION        reduce using rule 8 (expression -> expression for .)
    REPEAT          reduce using rule 8 (expression -> expression for .)
    FOR             reduce using rule 8 (expression -> expression for .)
    WHILE           reduce using rule 8 (expression -> expression for .)
    TRY             reduce using rule 8 (expression -> expression for .)
    $end            reduce using rule 8 (expression -> expression for .)
    RMB             reduce using rule 8 (expression -> expression for .)


state 43

    (9) expression -> expression while .

    VAR             reduce using rule 9 (expression -> expression while .)
    IDENTIFIER      reduce using rule 9 (expression -> expression while .)
    USE             reduce using rule 9 (expression -> expression while .)
    GLOBAL          reduce using rule 9 (expression -> expression while .)
    CLASS           reduce using rule 9 (expression -> expression while .)
    IF              reduce using rule 9 (expression -> expression while .)
    FUNCTION        reduce using rule 9 (expression -> expression while .)
    REPEAT          reduce using rule 9 (expression -> expression while .)
    FOR             reduce using rule 9 (expression -> expression while .)
    WHILE           reduce using rule 9 (expression -> expression while .)
    TRY             reduce using rule 9 (expression -> expression while .)
    $end            reduce using rule 9 (expression -> expression while .)
    RMB             reduce using rule 9 (expression -> expression while .)


state 44

    (10) expression -> expression use . SEMI

    SEMI            shift and go to state 88


state 45

    (11) expression -> expression error_handling .

    VAR             reduce using rule 11 (expression -> expression error_handling .)
    IDENTIFIER      reduce using rule 11 (expression -> expression error_handling .)
    USE             reduce using rule 11 (expression -> expression error_handling .)
    GLOBAL          reduce using rule 11 (expression -> expression error_handling .)
    CLASS           reduce using rule 11 (expression -> expression error_handling .)
    IF              reduce using rule 11 (expression -> expression error_handling .)
    FUNCTION        reduce using rule 11 (expression -> expression error_handling .)
    REPEAT          reduce using rule 11 (expression -> expression error_handling .)
    FOR             reduce using rule 11 (expression -> expression error_handling .)
    WHILE           reduce using rule 11 (expression -> expression error_handling .)
    TRY             reduce using rule 11 (expression -> expression error_handling .)
    $end            reduce using rule 11 (expression -> expression error_handling .)
    RMB             reduce using rule 11 (expression -> expression error_handling .)


state 46

    (12) expression -> expression variable_alone . SEMI

    SEMI            shift and go to state 89


state 47

    (13) expression -> expression global_variable . SEMI

    SEMI            shift and go to state 90


state 48

    (14) expression -> expression class_def .

    VAR             reduce using rule 14 (expression -> expression class_def .)
    IDENTIFIER      reduce using rule 14 (expression -> expression class_def .)
    USE             reduce using rule 14 (expression -> expression class_def .)
    GLOBAL          reduce using rule 14 (expression -> expression class_def .)
    CLASS           reduce using rule 14 (expression -> expression class_def .)
    IF              reduce using rule 14 (expression -> expression class_def .)
    FUNCTION        reduce using rule 14 (expression -> expression class_def .)
    REPEAT          reduce using rule 14 (expression -> expression class_def .)
    FOR             reduce using rule 14 (expression -> expression class_def .)
    WHILE           reduce using rule 14 (expression -> expression class_def .)
    TRY             reduce using rule 14 (expression -> expression class_def .)
    $end            reduce using rule 14 (expression -> expression class_def .)
    RMB             reduce using rule 14 (expression -> expression class_def .)


state 49

    (15) expression -> expression debug . SEMI

    SEMI            shift and go to state 91


state 50

    (16) expression -> expression function_class . SEMI

    SEMI            shift and go to state 92


state 51

    (17) expression -> variable_declaration SEMI .

    VAR             reduce using rule 17 (expression -> variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 17 (expression -> variable_declaration SEMI .)
    USE             reduce using rule 17 (expression -> variable_declaration SEMI .)
    GLOBAL          reduce using rule 17 (expression -> variable_declaration SEMI .)
    CLASS           reduce using rule 17 (expression -> variable_declaration SEMI .)
    IF              reduce using rule 17 (expression -> variable_declaration SEMI .)
    FUNCTION        reduce using rule 17 (expression -> variable_declaration SEMI .)
    REPEAT          reduce using rule 17 (expression -> variable_declaration SEMI .)
    FOR             reduce using rule 17 (expression -> variable_declaration SEMI .)
    WHILE           reduce using rule 17 (expression -> variable_declaration SEMI .)
    TRY             reduce using rule 17 (expression -> variable_declaration SEMI .)
    $end            reduce using rule 17 (expression -> variable_declaration SEMI .)
    RMB             reduce using rule 17 (expression -> variable_declaration SEMI .)


state 52

    (18) expression -> variable_value_change SEMI .

    VAR             reduce using rule 18 (expression -> variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 18 (expression -> variable_value_change SEMI .)
    USE             reduce using rule 18 (expression -> variable_value_change SEMI .)
    GLOBAL          reduce using rule 18 (expression -> variable_value_change SEMI .)
    CLASS           reduce using rule 18 (expression -> variable_value_change SEMI .)
    IF              reduce using rule 18 (expression -> variable_value_change SEMI .)
    FUNCTION        reduce using rule 18 (expression -> variable_value_change SEMI .)
    REPEAT          reduce using rule 18 (expression -> variable_value_change SEMI .)
    FOR             reduce using rule 18 (expression -> variable_value_change SEMI .)
    WHILE           reduce using rule 18 (expression -> variable_value_change SEMI .)
    TRY             reduce using rule 18 (expression -> variable_value_change SEMI .)
    $end            reduce using rule 18 (expression -> variable_value_change SEMI .)
    RMB             reduce using rule 18 (expression -> variable_value_change SEMI .)


state 53

    (25) expression -> use SEMI .

    VAR             reduce using rule 25 (expression -> use SEMI .)
    IDENTIFIER      reduce using rule 25 (expression -> use SEMI .)
    USE             reduce using rule 25 (expression -> use SEMI .)
    GLOBAL          reduce using rule 25 (expression -> use SEMI .)
    CLASS           reduce using rule 25 (expression -> use SEMI .)
    IF              reduce using rule 25 (expression -> use SEMI .)
    FUNCTION        reduce using rule 25 (expression -> use SEMI .)
    REPEAT          reduce using rule 25 (expression -> use SEMI .)
    FOR             reduce using rule 25 (expression -> use SEMI .)
    WHILE           reduce using rule 25 (expression -> use SEMI .)
    TRY             reduce using rule 25 (expression -> use SEMI .)
    $end            reduce using rule 25 (expression -> use SEMI .)
    RMB             reduce using rule 25 (expression -> use SEMI .)


state 54

    (27) expression -> variable_alone SEMI .

    VAR             reduce using rule 27 (expression -> variable_alone SEMI .)
    IDENTIFIER      reduce using rule 27 (expression -> variable_alone SEMI .)
    USE             reduce using rule 27 (expression -> variable_alone SEMI .)
    GLOBAL          reduce using rule 27 (expression -> variable_alone SEMI .)
    CLASS           reduce using rule 27 (expression -> variable_alone SEMI .)
    IF              reduce using rule 27 (expression -> variable_alone SEMI .)
    FUNCTION        reduce using rule 27 (expression -> variable_alone SEMI .)
    REPEAT          reduce using rule 27 (expression -> variable_alone SEMI .)
    FOR             reduce using rule 27 (expression -> variable_alone SEMI .)
    WHILE           reduce using rule 27 (expression -> variable_alone SEMI .)
    TRY             reduce using rule 27 (expression -> variable_alone SEMI .)
    $end            reduce using rule 27 (expression -> variable_alone SEMI .)
    RMB             reduce using rule 27 (expression -> variable_alone SEMI .)


state 55

    (28) expression -> global_variable SEMI .

    VAR             reduce using rule 28 (expression -> global_variable SEMI .)
    IDENTIFIER      reduce using rule 28 (expression -> global_variable SEMI .)
    USE             reduce using rule 28 (expression -> global_variable SEMI .)
    GLOBAL          reduce using rule 28 (expression -> global_variable SEMI .)
    CLASS           reduce using rule 28 (expression -> global_variable SEMI .)
    IF              reduce using rule 28 (expression -> global_variable SEMI .)
    FUNCTION        reduce using rule 28 (expression -> global_variable SEMI .)
    REPEAT          reduce using rule 28 (expression -> global_variable SEMI .)
    FOR             reduce using rule 28 (expression -> global_variable SEMI .)
    WHILE           reduce using rule 28 (expression -> global_variable SEMI .)
    TRY             reduce using rule 28 (expression -> global_variable SEMI .)
    $end            reduce using rule 28 (expression -> global_variable SEMI .)
    RMB             reduce using rule 28 (expression -> global_variable SEMI .)


state 56

    (30) expression -> debug SEMI .

    VAR             reduce using rule 30 (expression -> debug SEMI .)
    IDENTIFIER      reduce using rule 30 (expression -> debug SEMI .)
    USE             reduce using rule 30 (expression -> debug SEMI .)
    GLOBAL          reduce using rule 30 (expression -> debug SEMI .)
    CLASS           reduce using rule 30 (expression -> debug SEMI .)
    IF              reduce using rule 30 (expression -> debug SEMI .)
    FUNCTION        reduce using rule 30 (expression -> debug SEMI .)
    REPEAT          reduce using rule 30 (expression -> debug SEMI .)
    FOR             reduce using rule 30 (expression -> debug SEMI .)
    WHILE           reduce using rule 30 (expression -> debug SEMI .)
    TRY             reduce using rule 30 (expression -> debug SEMI .)
    $end            reduce using rule 30 (expression -> debug SEMI .)
    RMB             reduce using rule 30 (expression -> debug SEMI .)


state 57

    (31) expression -> function_class SEMI .

    VAR             reduce using rule 31 (expression -> function_class SEMI .)
    IDENTIFIER      reduce using rule 31 (expression -> function_class SEMI .)
    USE             reduce using rule 31 (expression -> function_class SEMI .)
    GLOBAL          reduce using rule 31 (expression -> function_class SEMI .)
    CLASS           reduce using rule 31 (expression -> function_class SEMI .)
    IF              reduce using rule 31 (expression -> function_class SEMI .)
    FUNCTION        reduce using rule 31 (expression -> function_class SEMI .)
    REPEAT          reduce using rule 31 (expression -> function_class SEMI .)
    FOR             reduce using rule 31 (expression -> function_class SEMI .)
    WHILE           reduce using rule 31 (expression -> function_class SEMI .)
    TRY             reduce using rule 31 (expression -> function_class SEMI .)
    $end            reduce using rule 31 (expression -> function_class SEMI .)
    RMB             reduce using rule 31 (expression -> function_class SEMI .)


state 58

    (81) variable_declaration -> VAR IDENTIFIER . LIST EQUAL calculate
    (82) variable_declaration -> VAR IDENTIFIER . EQUAL calculate
    (83) variable_declaration -> VAR IDENTIFIER .

    LIST            shift and go to state 93
    EQUAL           shift and go to state 94
    SEMI            reduce using rule 83 (variable_declaration -> VAR IDENTIFIER .)


state 59

    (79) variable_value_change -> IDENTIFIER EQUAL . LIST
    (80) variable_value_change -> IDENTIFIER EQUAL . calculate
    (45) function_class -> IDENTIFIER EQUAL . IDENTIFIER LSB parameter RSB
    (46) function_class -> IDENTIFIER EQUAL . IDENTIFIER LSB empty RSB
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    LIST            shift and go to state 96
    IDENTIFIER      shift and go to state 95
    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    LSB             shift and go to state 98

    calculate                      shift and go to state 97

state 60

    (52) function_call -> IDENTIFIER LSB . parameter RSB
    (53) function_call -> IDENTIFIER LSB . empty RSB
    (54) parameter -> . parameter COMMA calculate
    (55) parameter -> . calculate
    (96) empty -> .
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    RSB             reduce using rule 96 (empty -> .)
    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    parameter                      shift and go to state 104
    empty                          shift and go to state 105
    calculate                      shift and go to state 106

state 61

    (57) if_statement -> if_statement_1 if_statement_2 . if_statement_3
    (58) if_statement -> if_statement_1 if_statement_2 .
    (63) if_statement_2 -> if_statement_2 . ELSE IF LSB condition RSB LMB expression RMB
    (64) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 58 (if_statement -> if_statement_1 if_statement_2 .)
    IDENTIFIER      reduce using rule 58 (if_statement -> if_statement_1 if_statement_2 .)
    USE             reduce using rule 58 (if_statement -> if_statement_1 if_statement_2 .)
    GLOBAL          reduce using rule 58 (if_statement -> if_statement_1 if_statement_2 .)
    CLASS           reduce using rule 58 (if_statement -> if_statement_1 if_statement_2 .)
    IF              reduce using rule 58 (if_statement -> if_statement_1 if_statement_2 .)
    FUNCTION        reduce using rule 58 (if_statement -> if_statement_1 if_statement_2 .)
    REPEAT          reduce using rule 58 (if_statement -> if_statement_1 if_statement_2 .)
    FOR             reduce using rule 58 (if_statement -> if_statement_1 if_statement_2 .)
    WHILE           reduce using rule 58 (if_statement -> if_statement_1 if_statement_2 .)
    TRY             reduce using rule 58 (if_statement -> if_statement_1 if_statement_2 .)
    $end            reduce using rule 58 (if_statement -> if_statement_1 if_statement_2 .)
    RMB             reduce using rule 58 (if_statement -> if_statement_1 if_statement_2 .)
    ELSE            shift and go to state 109

    if_statement_3                 shift and go to state 108

state 62

    (59) if_statement -> if_statement_1 if_statement_3 .

    VAR             reduce using rule 59 (if_statement -> if_statement_1 if_statement_3 .)
    IDENTIFIER      reduce using rule 59 (if_statement -> if_statement_1 if_statement_3 .)
    USE             reduce using rule 59 (if_statement -> if_statement_1 if_statement_3 .)
    GLOBAL          reduce using rule 59 (if_statement -> if_statement_1 if_statement_3 .)
    CLASS           reduce using rule 59 (if_statement -> if_statement_1 if_statement_3 .)
    IF              reduce using rule 59 (if_statement -> if_statement_1 if_statement_3 .)
    FUNCTION        reduce using rule 59 (if_statement -> if_statement_1 if_statement_3 .)
    REPEAT          reduce using rule 59 (if_statement -> if_statement_1 if_statement_3 .)
    FOR             reduce using rule 59 (if_statement -> if_statement_1 if_statement_3 .)
    WHILE           reduce using rule 59 (if_statement -> if_statement_1 if_statement_3 .)
    TRY             reduce using rule 59 (if_statement -> if_statement_1 if_statement_3 .)
    $end            reduce using rule 59 (if_statement -> if_statement_1 if_statement_3 .)
    RMB             reduce using rule 59 (if_statement -> if_statement_1 if_statement_3 .)


state 63

    (62) if_statement_2 -> ELSE . IF LSB condition RSB LMB expression RMB
    (64) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 110
    LMB             shift and go to state 111


state 64

    (48) function -> function_head function_body .

    VAR             reduce using rule 48 (function -> function_head function_body .)
    IDENTIFIER      reduce using rule 48 (function -> function_head function_body .)
    USE             reduce using rule 48 (function -> function_head function_body .)
    GLOBAL          reduce using rule 48 (function -> function_head function_body .)
    CLASS           reduce using rule 48 (function -> function_head function_body .)
    IF              reduce using rule 48 (function -> function_head function_body .)
    FUNCTION        reduce using rule 48 (function -> function_head function_body .)
    REPEAT          reduce using rule 48 (function -> function_head function_body .)
    FOR             reduce using rule 48 (function -> function_head function_body .)
    WHILE           reduce using rule 48 (function -> function_head function_body .)
    TRY             reduce using rule 48 (function -> function_head function_body .)
    $end            reduce using rule 48 (function -> function_head function_body .)
    RMB             reduce using rule 48 (function -> function_head function_body .)


state 65

    (51) function_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . variable_declaration SEMI
    (18) expression -> . variable_value_change SEMI
    (19) expression -> . if_statement
    (20) expression -> . function
    (21) expression -> . function_call
    (22) expression -> . repeat
    (23) expression -> . for
    (24) expression -> . while
    (25) expression -> . use SEMI
    (26) expression -> . error_handling
    (27) expression -> . variable_alone SEMI
    (28) expression -> . global_variable SEMI
    (29) expression -> . class_def
    (30) expression -> . debug SEMI
    (31) expression -> . function_class SEMI
    (32) expression -> . empty
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (96) empty -> .
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    RMB             reduce using rule 96 (empty -> .)
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

  ! VAR             [ reduce using rule 96 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 96 (empty -> .) ]
  ! USE             [ reduce using rule 96 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 96 (empty -> .) ]
  ! CLASS           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! REPEAT          [ reduce using rule 96 (empty -> .) ]
  ! FOR             [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! TRY             [ reduce using rule 96 (empty -> .) ]

    expression                     shift and go to state 112
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 66

    (42) repeat -> repeat_head repeat_body .

    VAR             reduce using rule 42 (repeat -> repeat_head repeat_body .)
    IDENTIFIER      reduce using rule 42 (repeat -> repeat_head repeat_body .)
    USE             reduce using rule 42 (repeat -> repeat_head repeat_body .)
    GLOBAL          reduce using rule 42 (repeat -> repeat_head repeat_body .)
    CLASS           reduce using rule 42 (repeat -> repeat_head repeat_body .)
    IF              reduce using rule 42 (repeat -> repeat_head repeat_body .)
    FUNCTION        reduce using rule 42 (repeat -> repeat_head repeat_body .)
    REPEAT          reduce using rule 42 (repeat -> repeat_head repeat_body .)
    FOR             reduce using rule 42 (repeat -> repeat_head repeat_body .)
    WHILE           reduce using rule 42 (repeat -> repeat_head repeat_body .)
    TRY             reduce using rule 42 (repeat -> repeat_head repeat_body .)
    $end            reduce using rule 42 (repeat -> repeat_head repeat_body .)
    RMB             reduce using rule 42 (repeat -> repeat_head repeat_body .)


state 67

    (44) repeat_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . variable_declaration SEMI
    (18) expression -> . variable_value_change SEMI
    (19) expression -> . if_statement
    (20) expression -> . function
    (21) expression -> . function_call
    (22) expression -> . repeat
    (23) expression -> . for
    (24) expression -> . while
    (25) expression -> . use SEMI
    (26) expression -> . error_handling
    (27) expression -> . variable_alone SEMI
    (28) expression -> . global_variable SEMI
    (29) expression -> . class_def
    (30) expression -> . debug SEMI
    (31) expression -> . function_class SEMI
    (32) expression -> . empty
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (96) empty -> .
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    RMB             reduce using rule 96 (empty -> .)
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

  ! VAR             [ reduce using rule 96 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 96 (empty -> .) ]
  ! USE             [ reduce using rule 96 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 96 (empty -> .) ]
  ! CLASS           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! REPEAT          [ reduce using rule 96 (empty -> .) ]
  ! FOR             [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! TRY             [ reduce using rule 96 (empty -> .) ]

    expression                     shift and go to state 113
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 68

    (36) for -> for_head for_body .

    VAR             reduce using rule 36 (for -> for_head for_body .)
    IDENTIFIER      reduce using rule 36 (for -> for_head for_body .)
    USE             reduce using rule 36 (for -> for_head for_body .)
    GLOBAL          reduce using rule 36 (for -> for_head for_body .)
    CLASS           reduce using rule 36 (for -> for_head for_body .)
    IF              reduce using rule 36 (for -> for_head for_body .)
    FUNCTION        reduce using rule 36 (for -> for_head for_body .)
    REPEAT          reduce using rule 36 (for -> for_head for_body .)
    FOR             reduce using rule 36 (for -> for_head for_body .)
    WHILE           reduce using rule 36 (for -> for_head for_body .)
    TRY             reduce using rule 36 (for -> for_head for_body .)
    $end            reduce using rule 36 (for -> for_head for_body .)
    RMB             reduce using rule 36 (for -> for_head for_body .)


state 69

    (38) for_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . variable_declaration SEMI
    (18) expression -> . variable_value_change SEMI
    (19) expression -> . if_statement
    (20) expression -> . function
    (21) expression -> . function_call
    (22) expression -> . repeat
    (23) expression -> . for
    (24) expression -> . while
    (25) expression -> . use SEMI
    (26) expression -> . error_handling
    (27) expression -> . variable_alone SEMI
    (28) expression -> . global_variable SEMI
    (29) expression -> . class_def
    (30) expression -> . debug SEMI
    (31) expression -> . function_class SEMI
    (32) expression -> . empty
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (96) empty -> .
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    RMB             reduce using rule 96 (empty -> .)
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

  ! VAR             [ reduce using rule 96 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 96 (empty -> .) ]
  ! USE             [ reduce using rule 96 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 96 (empty -> .) ]
  ! CLASS           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! REPEAT          [ reduce using rule 96 (empty -> .) ]
  ! FOR             [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! TRY             [ reduce using rule 96 (empty -> .) ]

    expression                     shift and go to state 114
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 70

    (39) while -> while_head while_body .

    VAR             reduce using rule 39 (while -> while_head while_body .)
    IDENTIFIER      reduce using rule 39 (while -> while_head while_body .)
    USE             reduce using rule 39 (while -> while_head while_body .)
    GLOBAL          reduce using rule 39 (while -> while_head while_body .)
    CLASS           reduce using rule 39 (while -> while_head while_body .)
    IF              reduce using rule 39 (while -> while_head while_body .)
    FUNCTION        reduce using rule 39 (while -> while_head while_body .)
    REPEAT          reduce using rule 39 (while -> while_head while_body .)
    FOR             reduce using rule 39 (while -> while_head while_body .)
    WHILE           reduce using rule 39 (while -> while_head while_body .)
    TRY             reduce using rule 39 (while -> while_head while_body .)
    $end            reduce using rule 39 (while -> while_head while_body .)
    RMB             reduce using rule 39 (while -> while_head while_body .)


state 71

    (41) while_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . variable_declaration SEMI
    (18) expression -> . variable_value_change SEMI
    (19) expression -> . if_statement
    (20) expression -> . function
    (21) expression -> . function_call
    (22) expression -> . repeat
    (23) expression -> . for
    (24) expression -> . while
    (25) expression -> . use SEMI
    (26) expression -> . error_handling
    (27) expression -> . variable_alone SEMI
    (28) expression -> . global_variable SEMI
    (29) expression -> . class_def
    (30) expression -> . debug SEMI
    (31) expression -> . function_class SEMI
    (32) expression -> . empty
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (96) empty -> .
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    RMB             reduce using rule 96 (empty -> .)
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

  ! VAR             [ reduce using rule 96 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 96 (empty -> .) ]
  ! USE             [ reduce using rule 96 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 96 (empty -> .) ]
  ! CLASS           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! REPEAT          [ reduce using rule 96 (empty -> .) ]
  ! FOR             [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! TRY             [ reduce using rule 96 (empty -> .) ]

    expression                     shift and go to state 115
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 72

    (75) use -> USE use_params .

    SEMI            reduce using rule 75 (use -> USE use_params .)


state 73

    (56) debug -> USE DEBUG .

    SEMI            reduce using rule 56 (debug -> USE DEBUG .)


state 74

    (76) use_params -> IDENTIFIER .

    SEMI            reduce using rule 76 (use_params -> IDENTIFIER .)


state 75

    (33) error_handling -> try catch .

    VAR             reduce using rule 33 (error_handling -> try catch .)
    IDENTIFIER      reduce using rule 33 (error_handling -> try catch .)
    USE             reduce using rule 33 (error_handling -> try catch .)
    GLOBAL          reduce using rule 33 (error_handling -> try catch .)
    CLASS           reduce using rule 33 (error_handling -> try catch .)
    IF              reduce using rule 33 (error_handling -> try catch .)
    FUNCTION        reduce using rule 33 (error_handling -> try catch .)
    REPEAT          reduce using rule 33 (error_handling -> try catch .)
    FOR             reduce using rule 33 (error_handling -> try catch .)
    WHILE           reduce using rule 33 (error_handling -> try catch .)
    TRY             reduce using rule 33 (error_handling -> try catch .)
    $end            reduce using rule 33 (error_handling -> try catch .)
    RMB             reduce using rule 33 (error_handling -> try catch .)


state 76

    (35) catch -> CATCH . LSB IDENTIFIER RSB LMB expression RMB

    LSB             shift and go to state 116


state 77

    (77) global_variable -> GLOBAL IDENTIFIER .

    SEMI            reduce using rule 77 (global_variable -> GLOBAL IDENTIFIER .)


state 78

    (47) class_def -> CLASS IDENTIFIER . LMB expression RMB

    LMB             shift and go to state 117


state 79

    (61) if_statement_1 -> IF LSB . condition RSB LMB expression RMB
    (65) condition -> . condition LB calculate
    (66) condition -> . condition RB calculate
    (67) condition -> . condition LB EQUAL calculate
    (68) condition -> . condition RB EQUAL calculate
    (69) condition -> . condition EQUAL calculate
    (70) condition -> . calculate
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    condition                      shift and go to state 118
    calculate                      shift and go to state 119

state 80

    (49) function_head -> FUNCTION IDENTIFIER . LSB parameter RSB
    (50) function_head -> FUNCTION IDENTIFIER . LSB empty RSB

    LSB             shift and go to state 120


state 81

    (43) repeat_head -> REPEAT LSB . calculate RSB
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    calculate                      shift and go to state 121

state 82

    (37) for_head -> FOR LSB . IDENTIFIER IN IDENTIFIER RSB

    IDENTIFIER      shift and go to state 122


state 83

    (40) while_head -> WHILE LSB . condition RSB
    (65) condition -> . condition LB calculate
    (66) condition -> . condition RB calculate
    (67) condition -> . condition LB EQUAL calculate
    (68) condition -> . condition RB EQUAL calculate
    (69) condition -> . condition EQUAL calculate
    (70) condition -> . calculate
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    condition                      shift and go to state 123
    calculate                      shift and go to state 119

state 84

    (34) try -> TRY LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . variable_declaration SEMI
    (18) expression -> . variable_value_change SEMI
    (19) expression -> . if_statement
    (20) expression -> . function
    (21) expression -> . function_call
    (22) expression -> . repeat
    (23) expression -> . for
    (24) expression -> . while
    (25) expression -> . use SEMI
    (26) expression -> . error_handling
    (27) expression -> . variable_alone SEMI
    (28) expression -> . global_variable SEMI
    (29) expression -> . class_def
    (30) expression -> . debug SEMI
    (31) expression -> . function_class SEMI
    (32) expression -> . empty
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (96) empty -> .
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    RMB             reduce using rule 96 (empty -> .)
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

  ! VAR             [ reduce using rule 96 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 96 (empty -> .) ]
  ! USE             [ reduce using rule 96 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 96 (empty -> .) ]
  ! CLASS           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! REPEAT          [ reduce using rule 96 (empty -> .) ]
  ! FOR             [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! TRY             [ reduce using rule 96 (empty -> .) ]

    expression                     shift and go to state 124
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 85

    (2) expression -> expression variable_declaration SEMI .

    VAR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    USE             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    GLOBAL          reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    CLASS           reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IF              reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FUNCTION        reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    REPEAT          reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FOR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    WHILE           reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    TRY             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    $end            reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    RMB             reduce using rule 2 (expression -> expression variable_declaration SEMI .)


state 86

    (3) expression -> expression variable_value_change SEMI .

    VAR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    USE             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    GLOBAL          reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    CLASS           reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IF              reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FUNCTION        reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    REPEAT          reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FOR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    WHILE           reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    TRY             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    $end            reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    RMB             reduce using rule 3 (expression -> expression variable_value_change SEMI .)


state 87

    (6) expression -> expression function_call SEMI .

    VAR             reduce using rule 6 (expression -> expression function_call SEMI .)
    IDENTIFIER      reduce using rule 6 (expression -> expression function_call SEMI .)
    USE             reduce using rule 6 (expression -> expression function_call SEMI .)
    GLOBAL          reduce using rule 6 (expression -> expression function_call SEMI .)
    CLASS           reduce using rule 6 (expression -> expression function_call SEMI .)
    IF              reduce using rule 6 (expression -> expression function_call SEMI .)
    FUNCTION        reduce using rule 6 (expression -> expression function_call SEMI .)
    REPEAT          reduce using rule 6 (expression -> expression function_call SEMI .)
    FOR             reduce using rule 6 (expression -> expression function_call SEMI .)
    WHILE           reduce using rule 6 (expression -> expression function_call SEMI .)
    TRY             reduce using rule 6 (expression -> expression function_call SEMI .)
    $end            reduce using rule 6 (expression -> expression function_call SEMI .)
    RMB             reduce using rule 6 (expression -> expression function_call SEMI .)


state 88

    (10) expression -> expression use SEMI .

    VAR             reduce using rule 10 (expression -> expression use SEMI .)
    IDENTIFIER      reduce using rule 10 (expression -> expression use SEMI .)
    USE             reduce using rule 10 (expression -> expression use SEMI .)
    GLOBAL          reduce using rule 10 (expression -> expression use SEMI .)
    CLASS           reduce using rule 10 (expression -> expression use SEMI .)
    IF              reduce using rule 10 (expression -> expression use SEMI .)
    FUNCTION        reduce using rule 10 (expression -> expression use SEMI .)
    REPEAT          reduce using rule 10 (expression -> expression use SEMI .)
    FOR             reduce using rule 10 (expression -> expression use SEMI .)
    WHILE           reduce using rule 10 (expression -> expression use SEMI .)
    TRY             reduce using rule 10 (expression -> expression use SEMI .)
    $end            reduce using rule 10 (expression -> expression use SEMI .)
    RMB             reduce using rule 10 (expression -> expression use SEMI .)


state 89

    (12) expression -> expression variable_alone SEMI .

    VAR             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    IDENTIFIER      reduce using rule 12 (expression -> expression variable_alone SEMI .)
    USE             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    GLOBAL          reduce using rule 12 (expression -> expression variable_alone SEMI .)
    CLASS           reduce using rule 12 (expression -> expression variable_alone SEMI .)
    IF              reduce using rule 12 (expression -> expression variable_alone SEMI .)
    FUNCTION        reduce using rule 12 (expression -> expression variable_alone SEMI .)
    REPEAT          reduce using rule 12 (expression -> expression variable_alone SEMI .)
    FOR             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    WHILE           reduce using rule 12 (expression -> expression variable_alone SEMI .)
    TRY             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    $end            reduce using rule 12 (expression -> expression variable_alone SEMI .)
    RMB             reduce using rule 12 (expression -> expression variable_alone SEMI .)


state 90

    (13) expression -> expression global_variable SEMI .

    VAR             reduce using rule 13 (expression -> expression global_variable SEMI .)
    IDENTIFIER      reduce using rule 13 (expression -> expression global_variable SEMI .)
    USE             reduce using rule 13 (expression -> expression global_variable SEMI .)
    GLOBAL          reduce using rule 13 (expression -> expression global_variable SEMI .)
    CLASS           reduce using rule 13 (expression -> expression global_variable SEMI .)
    IF              reduce using rule 13 (expression -> expression global_variable SEMI .)
    FUNCTION        reduce using rule 13 (expression -> expression global_variable SEMI .)
    REPEAT          reduce using rule 13 (expression -> expression global_variable SEMI .)
    FOR             reduce using rule 13 (expression -> expression global_variable SEMI .)
    WHILE           reduce using rule 13 (expression -> expression global_variable SEMI .)
    TRY             reduce using rule 13 (expression -> expression global_variable SEMI .)
    $end            reduce using rule 13 (expression -> expression global_variable SEMI .)
    RMB             reduce using rule 13 (expression -> expression global_variable SEMI .)


state 91

    (15) expression -> expression debug SEMI .

    VAR             reduce using rule 15 (expression -> expression debug SEMI .)
    IDENTIFIER      reduce using rule 15 (expression -> expression debug SEMI .)
    USE             reduce using rule 15 (expression -> expression debug SEMI .)
    GLOBAL          reduce using rule 15 (expression -> expression debug SEMI .)
    CLASS           reduce using rule 15 (expression -> expression debug SEMI .)
    IF              reduce using rule 15 (expression -> expression debug SEMI .)
    FUNCTION        reduce using rule 15 (expression -> expression debug SEMI .)
    REPEAT          reduce using rule 15 (expression -> expression debug SEMI .)
    FOR             reduce using rule 15 (expression -> expression debug SEMI .)
    WHILE           reduce using rule 15 (expression -> expression debug SEMI .)
    TRY             reduce using rule 15 (expression -> expression debug SEMI .)
    $end            reduce using rule 15 (expression -> expression debug SEMI .)
    RMB             reduce using rule 15 (expression -> expression debug SEMI .)


state 92

    (16) expression -> expression function_class SEMI .

    VAR             reduce using rule 16 (expression -> expression function_class SEMI .)
    IDENTIFIER      reduce using rule 16 (expression -> expression function_class SEMI .)
    USE             reduce using rule 16 (expression -> expression function_class SEMI .)
    GLOBAL          reduce using rule 16 (expression -> expression function_class SEMI .)
    CLASS           reduce using rule 16 (expression -> expression function_class SEMI .)
    IF              reduce using rule 16 (expression -> expression function_class SEMI .)
    FUNCTION        reduce using rule 16 (expression -> expression function_class SEMI .)
    REPEAT          reduce using rule 16 (expression -> expression function_class SEMI .)
    FOR             reduce using rule 16 (expression -> expression function_class SEMI .)
    WHILE           reduce using rule 16 (expression -> expression function_class SEMI .)
    TRY             reduce using rule 16 (expression -> expression function_class SEMI .)
    $end            reduce using rule 16 (expression -> expression function_class SEMI .)
    RMB             reduce using rule 16 (expression -> expression function_class SEMI .)


state 93

    (81) variable_declaration -> VAR IDENTIFIER LIST . EQUAL calculate

    EQUAL           shift and go to state 125


state 94

    (82) variable_declaration -> VAR IDENTIFIER EQUAL . calculate
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    calculate                      shift and go to state 126

state 95

    (45) function_class -> IDENTIFIER EQUAL IDENTIFIER . LSB parameter RSB
    (46) function_class -> IDENTIFIER EQUAL IDENTIFIER . LSB empty RSB
    (92) calculate -> IDENTIFIER .
    (93) calculate -> IDENTIFIER . LIST

    LSB             shift and go to state 127
    PLUS            reduce using rule 92 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 92 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 92 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 92 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 92 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 128


state 96

    (79) variable_value_change -> IDENTIFIER EQUAL LIST .
    (94) calculate -> LIST .

  ! reduce/reduce conflict for SEMI resolved using rule 79 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    SEMI            reduce using rule 79 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    PLUS            reduce using rule 94 (calculate -> LIST .)
    MINUS           reduce using rule 94 (calculate -> LIST .)
    MUL             reduce using rule 94 (calculate -> LIST .)
    DIV             reduce using rule 94 (calculate -> LIST .)

  ! SEMI            [ reduce using rule 94 (calculate -> LIST .) ]


state 97

    (80) variable_value_change -> IDENTIFIER EQUAL calculate .
    (84) calculate -> calculate . PLUS calculate
    (85) calculate -> calculate . MINUS calculate
    (87) calculate -> calculate . MUL calculate
    (88) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 80 (variable_value_change -> IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    MUL             shift and go to state 131
    DIV             shift and go to state 132


state 98

    (95) calculate -> LSB . calculate RSB
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    calculate                      shift and go to state 133

state 99

    (86) calculate -> MINUS . calculate
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    calculate                      shift and go to state 134

state 100

    (89) calculate -> INT .

    PLUS            reduce using rule 89 (calculate -> INT .)
    MINUS           reduce using rule 89 (calculate -> INT .)
    MUL             reduce using rule 89 (calculate -> INT .)
    DIV             reduce using rule 89 (calculate -> INT .)
    SEMI            reduce using rule 89 (calculate -> INT .)
    RSB             reduce using rule 89 (calculate -> INT .)
    COMMA           reduce using rule 89 (calculate -> INT .)
    LB              reduce using rule 89 (calculate -> INT .)
    RB              reduce using rule 89 (calculate -> INT .)
    EQUAL           reduce using rule 89 (calculate -> INT .)


state 101

    (90) calculate -> FLOAT .

    PLUS            reduce using rule 90 (calculate -> FLOAT .)
    MINUS           reduce using rule 90 (calculate -> FLOAT .)
    MUL             reduce using rule 90 (calculate -> FLOAT .)
    DIV             reduce using rule 90 (calculate -> FLOAT .)
    SEMI            reduce using rule 90 (calculate -> FLOAT .)
    RSB             reduce using rule 90 (calculate -> FLOAT .)
    COMMA           reduce using rule 90 (calculate -> FLOAT .)
    LB              reduce using rule 90 (calculate -> FLOAT .)
    RB              reduce using rule 90 (calculate -> FLOAT .)
    EQUAL           reduce using rule 90 (calculate -> FLOAT .)


state 102

    (91) calculate -> STRING .

    PLUS            reduce using rule 91 (calculate -> STRING .)
    MINUS           reduce using rule 91 (calculate -> STRING .)
    MUL             reduce using rule 91 (calculate -> STRING .)
    DIV             reduce using rule 91 (calculate -> STRING .)
    SEMI            reduce using rule 91 (calculate -> STRING .)
    RSB             reduce using rule 91 (calculate -> STRING .)
    COMMA           reduce using rule 91 (calculate -> STRING .)
    LB              reduce using rule 91 (calculate -> STRING .)
    RB              reduce using rule 91 (calculate -> STRING .)
    EQUAL           reduce using rule 91 (calculate -> STRING .)


state 103

    (92) calculate -> IDENTIFIER .
    (93) calculate -> IDENTIFIER . LIST

    PLUS            reduce using rule 92 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 92 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 92 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 92 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 92 (calculate -> IDENTIFIER .)
    COMMA           reduce using rule 92 (calculate -> IDENTIFIER .)
    LB              reduce using rule 92 (calculate -> IDENTIFIER .)
    RB              reduce using rule 92 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 92 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 92 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 128


state 104

    (52) function_call -> IDENTIFIER LSB parameter . RSB
    (54) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 135
    COMMA           shift and go to state 136


state 105

    (53) function_call -> IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 137


state 106

    (55) parameter -> calculate .
    (84) calculate -> calculate . PLUS calculate
    (85) calculate -> calculate . MINUS calculate
    (87) calculate -> calculate . MUL calculate
    (88) calculate -> calculate . DIV calculate

    RSB             reduce using rule 55 (parameter -> calculate .)
    COMMA           reduce using rule 55 (parameter -> calculate .)
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    MUL             shift and go to state 131
    DIV             shift and go to state 132


state 107

    (94) calculate -> LIST .

    PLUS            reduce using rule 94 (calculate -> LIST .)
    MINUS           reduce using rule 94 (calculate -> LIST .)
    MUL             reduce using rule 94 (calculate -> LIST .)
    DIV             reduce using rule 94 (calculate -> LIST .)
    RSB             reduce using rule 94 (calculate -> LIST .)
    COMMA           reduce using rule 94 (calculate -> LIST .)
    LB              reduce using rule 94 (calculate -> LIST .)
    RB              reduce using rule 94 (calculate -> LIST .)
    EQUAL           reduce using rule 94 (calculate -> LIST .)
    SEMI            reduce using rule 94 (calculate -> LIST .)


state 108

    (57) if_statement -> if_statement_1 if_statement_2 if_statement_3 .

    VAR             reduce using rule 57 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IDENTIFIER      reduce using rule 57 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    USE             reduce using rule 57 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    GLOBAL          reduce using rule 57 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    CLASS           reduce using rule 57 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IF              reduce using rule 57 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FUNCTION        reduce using rule 57 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    REPEAT          reduce using rule 57 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FOR             reduce using rule 57 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    WHILE           reduce using rule 57 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    TRY             reduce using rule 57 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    $end            reduce using rule 57 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    RMB             reduce using rule 57 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)


state 109

    (63) if_statement_2 -> if_statement_2 ELSE . IF LSB condition RSB LMB expression RMB
    (64) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 138
    LMB             shift and go to state 111


state 110

    (62) if_statement_2 -> ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 139


state 111

    (64) if_statement_3 -> ELSE LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . variable_declaration SEMI
    (18) expression -> . variable_value_change SEMI
    (19) expression -> . if_statement
    (20) expression -> . function
    (21) expression -> . function_call
    (22) expression -> . repeat
    (23) expression -> . for
    (24) expression -> . while
    (25) expression -> . use SEMI
    (26) expression -> . error_handling
    (27) expression -> . variable_alone SEMI
    (28) expression -> . global_variable SEMI
    (29) expression -> . class_def
    (30) expression -> . debug SEMI
    (31) expression -> . function_class SEMI
    (32) expression -> . empty
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (96) empty -> .
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    RMB             reduce using rule 96 (empty -> .)
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

  ! VAR             [ reduce using rule 96 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 96 (empty -> .) ]
  ! USE             [ reduce using rule 96 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 96 (empty -> .) ]
  ! CLASS           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! REPEAT          [ reduce using rule 96 (empty -> .) ]
  ! FOR             [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! TRY             [ reduce using rule 96 (empty -> .) ]

    expression                     shift and go to state 140
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 112

    (51) function_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

    RMB             shift and go to state 141
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

    variable_declaration           shift and go to state 36
    variable_value_change          shift and go to state 37
    if_statement                   shift and go to state 38
    function                       shift and go to state 39
    function_call                  shift and go to state 40
    repeat                         shift and go to state 41
    for                            shift and go to state 42
    while                          shift and go to state 43
    use                            shift and go to state 44
    error_handling                 shift and go to state 45
    variable_alone                 shift and go to state 46
    global_variable                shift and go to state 47
    class_def                      shift and go to state 48
    debug                          shift and go to state 49
    function_class                 shift and go to state 50
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 113

    (44) repeat_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

    RMB             shift and go to state 142
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

    variable_declaration           shift and go to state 36
    variable_value_change          shift and go to state 37
    if_statement                   shift and go to state 38
    function                       shift and go to state 39
    function_call                  shift and go to state 40
    repeat                         shift and go to state 41
    for                            shift and go to state 42
    while                          shift and go to state 43
    use                            shift and go to state 44
    error_handling                 shift and go to state 45
    variable_alone                 shift and go to state 46
    global_variable                shift and go to state 47
    class_def                      shift and go to state 48
    debug                          shift and go to state 49
    function_class                 shift and go to state 50
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 114

    (38) for_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

    RMB             shift and go to state 143
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

    variable_declaration           shift and go to state 36
    variable_value_change          shift and go to state 37
    if_statement                   shift and go to state 38
    function                       shift and go to state 39
    function_call                  shift and go to state 40
    repeat                         shift and go to state 41
    for                            shift and go to state 42
    while                          shift and go to state 43
    use                            shift and go to state 44
    error_handling                 shift and go to state 45
    variable_alone                 shift and go to state 46
    global_variable                shift and go to state 47
    class_def                      shift and go to state 48
    debug                          shift and go to state 49
    function_class                 shift and go to state 50
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 115

    (41) while_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

    RMB             shift and go to state 144
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

    variable_declaration           shift and go to state 36
    variable_value_change          shift and go to state 37
    if_statement                   shift and go to state 38
    function                       shift and go to state 39
    function_call                  shift and go to state 40
    repeat                         shift and go to state 41
    for                            shift and go to state 42
    while                          shift and go to state 43
    use                            shift and go to state 44
    error_handling                 shift and go to state 45
    variable_alone                 shift and go to state 46
    global_variable                shift and go to state 47
    class_def                      shift and go to state 48
    debug                          shift and go to state 49
    function_class                 shift and go to state 50
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 116

    (35) catch -> CATCH LSB . IDENTIFIER RSB LMB expression RMB

    IDENTIFIER      shift and go to state 145


state 117

    (47) class_def -> CLASS IDENTIFIER LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . variable_declaration SEMI
    (18) expression -> . variable_value_change SEMI
    (19) expression -> . if_statement
    (20) expression -> . function
    (21) expression -> . function_call
    (22) expression -> . repeat
    (23) expression -> . for
    (24) expression -> . while
    (25) expression -> . use SEMI
    (26) expression -> . error_handling
    (27) expression -> . variable_alone SEMI
    (28) expression -> . global_variable SEMI
    (29) expression -> . class_def
    (30) expression -> . debug SEMI
    (31) expression -> . function_class SEMI
    (32) expression -> . empty
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (96) empty -> .
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    RMB             reduce using rule 96 (empty -> .)
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

  ! VAR             [ reduce using rule 96 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 96 (empty -> .) ]
  ! USE             [ reduce using rule 96 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 96 (empty -> .) ]
  ! CLASS           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! REPEAT          [ reduce using rule 96 (empty -> .) ]
  ! FOR             [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! TRY             [ reduce using rule 96 (empty -> .) ]

    expression                     shift and go to state 146
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 118

    (61) if_statement_1 -> IF LSB condition . RSB LMB expression RMB
    (65) condition -> condition . LB calculate
    (66) condition -> condition . RB calculate
    (67) condition -> condition . LB EQUAL calculate
    (68) condition -> condition . RB EQUAL calculate
    (69) condition -> condition . EQUAL calculate

    RSB             shift and go to state 147
    LB              shift and go to state 148
    RB              shift and go to state 149
    EQUAL           shift and go to state 150


state 119

    (70) condition -> calculate .
    (84) calculate -> calculate . PLUS calculate
    (85) calculate -> calculate . MINUS calculate
    (87) calculate -> calculate . MUL calculate
    (88) calculate -> calculate . DIV calculate

    RSB             reduce using rule 70 (condition -> calculate .)
    LB              reduce using rule 70 (condition -> calculate .)
    RB              reduce using rule 70 (condition -> calculate .)
    EQUAL           reduce using rule 70 (condition -> calculate .)
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    MUL             shift and go to state 131
    DIV             shift and go to state 132


state 120

    (49) function_head -> FUNCTION IDENTIFIER LSB . parameter RSB
    (50) function_head -> FUNCTION IDENTIFIER LSB . empty RSB
    (54) parameter -> . parameter COMMA calculate
    (55) parameter -> . calculate
    (96) empty -> .
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    RSB             reduce using rule 96 (empty -> .)
    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    parameter                      shift and go to state 151
    empty                          shift and go to state 152
    calculate                      shift and go to state 106

state 121

    (43) repeat_head -> REPEAT LSB calculate . RSB
    (84) calculate -> calculate . PLUS calculate
    (85) calculate -> calculate . MINUS calculate
    (87) calculate -> calculate . MUL calculate
    (88) calculate -> calculate . DIV calculate

    RSB             shift and go to state 153
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    MUL             shift and go to state 131
    DIV             shift and go to state 132


state 122

    (37) for_head -> FOR LSB IDENTIFIER . IN IDENTIFIER RSB

    IN              shift and go to state 154


state 123

    (40) while_head -> WHILE LSB condition . RSB
    (65) condition -> condition . LB calculate
    (66) condition -> condition . RB calculate
    (67) condition -> condition . LB EQUAL calculate
    (68) condition -> condition . RB EQUAL calculate
    (69) condition -> condition . EQUAL calculate

    RSB             shift and go to state 155
    LB              shift and go to state 148
    RB              shift and go to state 149
    EQUAL           shift and go to state 150


state 124

    (34) try -> TRY LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

    RMB             shift and go to state 156
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

    variable_declaration           shift and go to state 36
    variable_value_change          shift and go to state 37
    if_statement                   shift and go to state 38
    function                       shift and go to state 39
    function_call                  shift and go to state 40
    repeat                         shift and go to state 41
    for                            shift and go to state 42
    while                          shift and go to state 43
    use                            shift and go to state 44
    error_handling                 shift and go to state 45
    variable_alone                 shift and go to state 46
    global_variable                shift and go to state 47
    class_def                      shift and go to state 48
    debug                          shift and go to state 49
    function_class                 shift and go to state 50
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 125

    (81) variable_declaration -> VAR IDENTIFIER LIST EQUAL . calculate
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    calculate                      shift and go to state 157

state 126

    (82) variable_declaration -> VAR IDENTIFIER EQUAL calculate .
    (84) calculate -> calculate . PLUS calculate
    (85) calculate -> calculate . MINUS calculate
    (87) calculate -> calculate . MUL calculate
    (88) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 82 (variable_declaration -> VAR IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    MUL             shift and go to state 131
    DIV             shift and go to state 132


state 127

    (45) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB . parameter RSB
    (46) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB . empty RSB
    (54) parameter -> . parameter COMMA calculate
    (55) parameter -> . calculate
    (96) empty -> .
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    RSB             reduce using rule 96 (empty -> .)
    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    parameter                      shift and go to state 158
    empty                          shift and go to state 159
    calculate                      shift and go to state 106

state 128

    (93) calculate -> IDENTIFIER LIST .

    PLUS            reduce using rule 93 (calculate -> IDENTIFIER LIST .)
    MINUS           reduce using rule 93 (calculate -> IDENTIFIER LIST .)
    MUL             reduce using rule 93 (calculate -> IDENTIFIER LIST .)
    DIV             reduce using rule 93 (calculate -> IDENTIFIER LIST .)
    SEMI            reduce using rule 93 (calculate -> IDENTIFIER LIST .)
    RSB             reduce using rule 93 (calculate -> IDENTIFIER LIST .)
    COMMA           reduce using rule 93 (calculate -> IDENTIFIER LIST .)
    LB              reduce using rule 93 (calculate -> IDENTIFIER LIST .)
    RB              reduce using rule 93 (calculate -> IDENTIFIER LIST .)
    EQUAL           reduce using rule 93 (calculate -> IDENTIFIER LIST .)


state 129

    (84) calculate -> calculate PLUS . calculate
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    calculate                      shift and go to state 160

state 130

    (85) calculate -> calculate MINUS . calculate
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    calculate                      shift and go to state 161

state 131

    (87) calculate -> calculate MUL . calculate
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    calculate                      shift and go to state 162

state 132

    (88) calculate -> calculate DIV . calculate
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    calculate                      shift and go to state 163

state 133

    (95) calculate -> LSB calculate . RSB
    (84) calculate -> calculate . PLUS calculate
    (85) calculate -> calculate . MINUS calculate
    (87) calculate -> calculate . MUL calculate
    (88) calculate -> calculate . DIV calculate

    RSB             shift and go to state 164
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    MUL             shift and go to state 131
    DIV             shift and go to state 132


state 134

    (86) calculate -> MINUS calculate .
    (84) calculate -> calculate . PLUS calculate
    (85) calculate -> calculate . MINUS calculate
    (87) calculate -> calculate . MUL calculate
    (88) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 86 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 86 (calculate -> MINUS calculate .)
    MUL             reduce using rule 86 (calculate -> MINUS calculate .)
    DIV             reduce using rule 86 (calculate -> MINUS calculate .)
    SEMI            reduce using rule 86 (calculate -> MINUS calculate .)
    RSB             reduce using rule 86 (calculate -> MINUS calculate .)
    COMMA           reduce using rule 86 (calculate -> MINUS calculate .)
    LB              reduce using rule 86 (calculate -> MINUS calculate .)
    RB              reduce using rule 86 (calculate -> MINUS calculate .)
    EQUAL           reduce using rule 86 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 129 ]
  ! MINUS           [ shift and go to state 130 ]
  ! MUL             [ shift and go to state 131 ]
  ! DIV             [ shift and go to state 132 ]


state 135

    (52) function_call -> IDENTIFIER LSB parameter RSB .

    VAR             reduce using rule 52 (function_call -> IDENTIFIER LSB parameter RSB .)
    IDENTIFIER      reduce using rule 52 (function_call -> IDENTIFIER LSB parameter RSB .)
    USE             reduce using rule 52 (function_call -> IDENTIFIER LSB parameter RSB .)
    GLOBAL          reduce using rule 52 (function_call -> IDENTIFIER LSB parameter RSB .)
    CLASS           reduce using rule 52 (function_call -> IDENTIFIER LSB parameter RSB .)
    IF              reduce using rule 52 (function_call -> IDENTIFIER LSB parameter RSB .)
    FUNCTION        reduce using rule 52 (function_call -> IDENTIFIER LSB parameter RSB .)
    REPEAT          reduce using rule 52 (function_call -> IDENTIFIER LSB parameter RSB .)
    FOR             reduce using rule 52 (function_call -> IDENTIFIER LSB parameter RSB .)
    WHILE           reduce using rule 52 (function_call -> IDENTIFIER LSB parameter RSB .)
    TRY             reduce using rule 52 (function_call -> IDENTIFIER LSB parameter RSB .)
    $end            reduce using rule 52 (function_call -> IDENTIFIER LSB parameter RSB .)
    SEMI            reduce using rule 52 (function_call -> IDENTIFIER LSB parameter RSB .)
    RMB             reduce using rule 52 (function_call -> IDENTIFIER LSB parameter RSB .)


state 136

    (54) parameter -> parameter COMMA . calculate
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    calculate                      shift and go to state 165

state 137

    (53) function_call -> IDENTIFIER LSB empty RSB .

    VAR             reduce using rule 53 (function_call -> IDENTIFIER LSB empty RSB .)
    IDENTIFIER      reduce using rule 53 (function_call -> IDENTIFIER LSB empty RSB .)
    USE             reduce using rule 53 (function_call -> IDENTIFIER LSB empty RSB .)
    GLOBAL          reduce using rule 53 (function_call -> IDENTIFIER LSB empty RSB .)
    CLASS           reduce using rule 53 (function_call -> IDENTIFIER LSB empty RSB .)
    IF              reduce using rule 53 (function_call -> IDENTIFIER LSB empty RSB .)
    FUNCTION        reduce using rule 53 (function_call -> IDENTIFIER LSB empty RSB .)
    REPEAT          reduce using rule 53 (function_call -> IDENTIFIER LSB empty RSB .)
    FOR             reduce using rule 53 (function_call -> IDENTIFIER LSB empty RSB .)
    WHILE           reduce using rule 53 (function_call -> IDENTIFIER LSB empty RSB .)
    TRY             reduce using rule 53 (function_call -> IDENTIFIER LSB empty RSB .)
    $end            reduce using rule 53 (function_call -> IDENTIFIER LSB empty RSB .)
    SEMI            reduce using rule 53 (function_call -> IDENTIFIER LSB empty RSB .)
    RMB             reduce using rule 53 (function_call -> IDENTIFIER LSB empty RSB .)


state 138

    (63) if_statement_2 -> if_statement_2 ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 166


state 139

    (62) if_statement_2 -> ELSE IF LSB . condition RSB LMB expression RMB
    (65) condition -> . condition LB calculate
    (66) condition -> . condition RB calculate
    (67) condition -> . condition LB EQUAL calculate
    (68) condition -> . condition RB EQUAL calculate
    (69) condition -> . condition EQUAL calculate
    (70) condition -> . calculate
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    condition                      shift and go to state 167
    calculate                      shift and go to state 119

state 140

    (64) if_statement_3 -> ELSE LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

    RMB             shift and go to state 168
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

    variable_declaration           shift and go to state 36
    variable_value_change          shift and go to state 37
    if_statement                   shift and go to state 38
    function                       shift and go to state 39
    function_call                  shift and go to state 40
    repeat                         shift and go to state 41
    for                            shift and go to state 42
    while                          shift and go to state 43
    use                            shift and go to state 44
    error_handling                 shift and go to state 45
    variable_alone                 shift and go to state 46
    global_variable                shift and go to state 47
    class_def                      shift and go to state 48
    debug                          shift and go to state 49
    function_class                 shift and go to state 50
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 141

    (51) function_body -> LMB expression RMB .

    VAR             reduce using rule 51 (function_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 51 (function_body -> LMB expression RMB .)
    USE             reduce using rule 51 (function_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 51 (function_body -> LMB expression RMB .)
    CLASS           reduce using rule 51 (function_body -> LMB expression RMB .)
    IF              reduce using rule 51 (function_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 51 (function_body -> LMB expression RMB .)
    REPEAT          reduce using rule 51 (function_body -> LMB expression RMB .)
    FOR             reduce using rule 51 (function_body -> LMB expression RMB .)
    WHILE           reduce using rule 51 (function_body -> LMB expression RMB .)
    TRY             reduce using rule 51 (function_body -> LMB expression RMB .)
    $end            reduce using rule 51 (function_body -> LMB expression RMB .)
    RMB             reduce using rule 51 (function_body -> LMB expression RMB .)


state 142

    (44) repeat_body -> LMB expression RMB .

    VAR             reduce using rule 44 (repeat_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 44 (repeat_body -> LMB expression RMB .)
    USE             reduce using rule 44 (repeat_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 44 (repeat_body -> LMB expression RMB .)
    CLASS           reduce using rule 44 (repeat_body -> LMB expression RMB .)
    IF              reduce using rule 44 (repeat_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 44 (repeat_body -> LMB expression RMB .)
    REPEAT          reduce using rule 44 (repeat_body -> LMB expression RMB .)
    FOR             reduce using rule 44 (repeat_body -> LMB expression RMB .)
    WHILE           reduce using rule 44 (repeat_body -> LMB expression RMB .)
    TRY             reduce using rule 44 (repeat_body -> LMB expression RMB .)
    $end            reduce using rule 44 (repeat_body -> LMB expression RMB .)
    RMB             reduce using rule 44 (repeat_body -> LMB expression RMB .)


state 143

    (38) for_body -> LMB expression RMB .

    VAR             reduce using rule 38 (for_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 38 (for_body -> LMB expression RMB .)
    USE             reduce using rule 38 (for_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 38 (for_body -> LMB expression RMB .)
    CLASS           reduce using rule 38 (for_body -> LMB expression RMB .)
    IF              reduce using rule 38 (for_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 38 (for_body -> LMB expression RMB .)
    REPEAT          reduce using rule 38 (for_body -> LMB expression RMB .)
    FOR             reduce using rule 38 (for_body -> LMB expression RMB .)
    WHILE           reduce using rule 38 (for_body -> LMB expression RMB .)
    TRY             reduce using rule 38 (for_body -> LMB expression RMB .)
    $end            reduce using rule 38 (for_body -> LMB expression RMB .)
    RMB             reduce using rule 38 (for_body -> LMB expression RMB .)


state 144

    (41) while_body -> LMB expression RMB .

    VAR             reduce using rule 41 (while_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 41 (while_body -> LMB expression RMB .)
    USE             reduce using rule 41 (while_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 41 (while_body -> LMB expression RMB .)
    CLASS           reduce using rule 41 (while_body -> LMB expression RMB .)
    IF              reduce using rule 41 (while_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 41 (while_body -> LMB expression RMB .)
    REPEAT          reduce using rule 41 (while_body -> LMB expression RMB .)
    FOR             reduce using rule 41 (while_body -> LMB expression RMB .)
    WHILE           reduce using rule 41 (while_body -> LMB expression RMB .)
    TRY             reduce using rule 41 (while_body -> LMB expression RMB .)
    $end            reduce using rule 41 (while_body -> LMB expression RMB .)
    RMB             reduce using rule 41 (while_body -> LMB expression RMB .)


state 145

    (35) catch -> CATCH LSB IDENTIFIER . RSB LMB expression RMB

    RSB             shift and go to state 169


state 146

    (47) class_def -> CLASS IDENTIFIER LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

    RMB             shift and go to state 170
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

    variable_declaration           shift and go to state 36
    variable_value_change          shift and go to state 37
    if_statement                   shift and go to state 38
    function                       shift and go to state 39
    function_call                  shift and go to state 40
    repeat                         shift and go to state 41
    for                            shift and go to state 42
    while                          shift and go to state 43
    use                            shift and go to state 44
    error_handling                 shift and go to state 45
    variable_alone                 shift and go to state 46
    global_variable                shift and go to state 47
    class_def                      shift and go to state 48
    debug                          shift and go to state 49
    function_class                 shift and go to state 50
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 147

    (61) if_statement_1 -> IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 171


state 148

    (65) condition -> condition LB . calculate
    (67) condition -> condition LB . EQUAL calculate
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 173
    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    calculate                      shift and go to state 172

state 149

    (66) condition -> condition RB . calculate
    (68) condition -> condition RB . EQUAL calculate
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 175
    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    calculate                      shift and go to state 174

state 150

    (69) condition -> condition EQUAL . calculate
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    calculate                      shift and go to state 176

state 151

    (49) function_head -> FUNCTION IDENTIFIER LSB parameter . RSB
    (54) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 177
    COMMA           shift and go to state 136


state 152

    (50) function_head -> FUNCTION IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 178


state 153

    (43) repeat_head -> REPEAT LSB calculate RSB .

    LMB             reduce using rule 43 (repeat_head -> REPEAT LSB calculate RSB .)


state 154

    (37) for_head -> FOR LSB IDENTIFIER IN . IDENTIFIER RSB

    IDENTIFIER      shift and go to state 179


state 155

    (40) while_head -> WHILE LSB condition RSB .

    LMB             reduce using rule 40 (while_head -> WHILE LSB condition RSB .)


state 156

    (34) try -> TRY LMB expression RMB .

    CATCH           reduce using rule 34 (try -> TRY LMB expression RMB .)


state 157

    (81) variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .
    (84) calculate -> calculate . PLUS calculate
    (85) calculate -> calculate . MINUS calculate
    (87) calculate -> calculate . MUL calculate
    (88) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 81 (variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .)
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    MUL             shift and go to state 131
    DIV             shift and go to state 132


state 158

    (45) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter . RSB
    (54) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 180
    COMMA           shift and go to state 136


state 159

    (46) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 181


state 160

    (84) calculate -> calculate PLUS calculate .
    (84) calculate -> calculate . PLUS calculate
    (85) calculate -> calculate . MINUS calculate
    (87) calculate -> calculate . MUL calculate
    (88) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 84 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 84 (calculate -> calculate PLUS calculate .)
    SEMI            reduce using rule 84 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 84 (calculate -> calculate PLUS calculate .)
    COMMA           reduce using rule 84 (calculate -> calculate PLUS calculate .)
    LB              reduce using rule 84 (calculate -> calculate PLUS calculate .)
    RB              reduce using rule 84 (calculate -> calculate PLUS calculate .)
    EQUAL           reduce using rule 84 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 131
    DIV             shift and go to state 132

  ! MUL             [ reduce using rule 84 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 84 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 129 ]
  ! MINUS           [ shift and go to state 130 ]


state 161

    (85) calculate -> calculate MINUS calculate .
    (84) calculate -> calculate . PLUS calculate
    (85) calculate -> calculate . MINUS calculate
    (87) calculate -> calculate . MUL calculate
    (88) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 85 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 85 (calculate -> calculate MINUS calculate .)
    SEMI            reduce using rule 85 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 85 (calculate -> calculate MINUS calculate .)
    COMMA           reduce using rule 85 (calculate -> calculate MINUS calculate .)
    LB              reduce using rule 85 (calculate -> calculate MINUS calculate .)
    RB              reduce using rule 85 (calculate -> calculate MINUS calculate .)
    EQUAL           reduce using rule 85 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 131
    DIV             shift and go to state 132

  ! MUL             [ reduce using rule 85 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 85 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 129 ]
  ! MINUS           [ shift and go to state 130 ]


state 162

    (87) calculate -> calculate MUL calculate .
    (84) calculate -> calculate . PLUS calculate
    (85) calculate -> calculate . MINUS calculate
    (87) calculate -> calculate . MUL calculate
    (88) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 87 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 87 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 87 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 87 (calculate -> calculate MUL calculate .)
    SEMI            reduce using rule 87 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 87 (calculate -> calculate MUL calculate .)
    COMMA           reduce using rule 87 (calculate -> calculate MUL calculate .)
    LB              reduce using rule 87 (calculate -> calculate MUL calculate .)
    RB              reduce using rule 87 (calculate -> calculate MUL calculate .)
    EQUAL           reduce using rule 87 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 129 ]
  ! MINUS           [ shift and go to state 130 ]
  ! MUL             [ shift and go to state 131 ]
  ! DIV             [ shift and go to state 132 ]


state 163

    (88) calculate -> calculate DIV calculate .
    (84) calculate -> calculate . PLUS calculate
    (85) calculate -> calculate . MINUS calculate
    (87) calculate -> calculate . MUL calculate
    (88) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 88 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 88 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 88 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 88 (calculate -> calculate DIV calculate .)
    SEMI            reduce using rule 88 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 88 (calculate -> calculate DIV calculate .)
    COMMA           reduce using rule 88 (calculate -> calculate DIV calculate .)
    LB              reduce using rule 88 (calculate -> calculate DIV calculate .)
    RB              reduce using rule 88 (calculate -> calculate DIV calculate .)
    EQUAL           reduce using rule 88 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 129 ]
  ! MINUS           [ shift and go to state 130 ]
  ! MUL             [ shift and go to state 131 ]
  ! DIV             [ shift and go to state 132 ]


state 164

    (95) calculate -> LSB calculate RSB .

    PLUS            reduce using rule 95 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 95 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 95 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 95 (calculate -> LSB calculate RSB .)
    SEMI            reduce using rule 95 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 95 (calculate -> LSB calculate RSB .)
    COMMA           reduce using rule 95 (calculate -> LSB calculate RSB .)
    LB              reduce using rule 95 (calculate -> LSB calculate RSB .)
    RB              reduce using rule 95 (calculate -> LSB calculate RSB .)
    EQUAL           reduce using rule 95 (calculate -> LSB calculate RSB .)


state 165

    (54) parameter -> parameter COMMA calculate .
    (84) calculate -> calculate . PLUS calculate
    (85) calculate -> calculate . MINUS calculate
    (87) calculate -> calculate . MUL calculate
    (88) calculate -> calculate . DIV calculate

    RSB             reduce using rule 54 (parameter -> parameter COMMA calculate .)
    COMMA           reduce using rule 54 (parameter -> parameter COMMA calculate .)
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    MUL             shift and go to state 131
    DIV             shift and go to state 132


state 166

    (63) if_statement_2 -> if_statement_2 ELSE IF LSB . condition RSB LMB expression RMB
    (65) condition -> . condition LB calculate
    (66) condition -> . condition RB calculate
    (67) condition -> . condition LB EQUAL calculate
    (68) condition -> . condition RB EQUAL calculate
    (69) condition -> . condition EQUAL calculate
    (70) condition -> . calculate
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    condition                      shift and go to state 182
    calculate                      shift and go to state 119

state 167

    (62) if_statement_2 -> ELSE IF LSB condition . RSB LMB expression RMB
    (65) condition -> condition . LB calculate
    (66) condition -> condition . RB calculate
    (67) condition -> condition . LB EQUAL calculate
    (68) condition -> condition . RB EQUAL calculate
    (69) condition -> condition . EQUAL calculate

    RSB             shift and go to state 183
    LB              shift and go to state 148
    RB              shift and go to state 149
    EQUAL           shift and go to state 150


state 168

    (64) if_statement_3 -> ELSE LMB expression RMB .

    VAR             reduce using rule 64 (if_statement_3 -> ELSE LMB expression RMB .)
    IDENTIFIER      reduce using rule 64 (if_statement_3 -> ELSE LMB expression RMB .)
    USE             reduce using rule 64 (if_statement_3 -> ELSE LMB expression RMB .)
    GLOBAL          reduce using rule 64 (if_statement_3 -> ELSE LMB expression RMB .)
    CLASS           reduce using rule 64 (if_statement_3 -> ELSE LMB expression RMB .)
    IF              reduce using rule 64 (if_statement_3 -> ELSE LMB expression RMB .)
    FUNCTION        reduce using rule 64 (if_statement_3 -> ELSE LMB expression RMB .)
    REPEAT          reduce using rule 64 (if_statement_3 -> ELSE LMB expression RMB .)
    FOR             reduce using rule 64 (if_statement_3 -> ELSE LMB expression RMB .)
    WHILE           reduce using rule 64 (if_statement_3 -> ELSE LMB expression RMB .)
    TRY             reduce using rule 64 (if_statement_3 -> ELSE LMB expression RMB .)
    $end            reduce using rule 64 (if_statement_3 -> ELSE LMB expression RMB .)
    RMB             reduce using rule 64 (if_statement_3 -> ELSE LMB expression RMB .)


state 169

    (35) catch -> CATCH LSB IDENTIFIER RSB . LMB expression RMB

    LMB             shift and go to state 184


state 170

    (47) class_def -> CLASS IDENTIFIER LMB expression RMB .

    VAR             reduce using rule 47 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    IDENTIFIER      reduce using rule 47 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    USE             reduce using rule 47 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    GLOBAL          reduce using rule 47 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    CLASS           reduce using rule 47 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    IF              reduce using rule 47 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    FUNCTION        reduce using rule 47 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    REPEAT          reduce using rule 47 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    FOR             reduce using rule 47 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    WHILE           reduce using rule 47 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    TRY             reduce using rule 47 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    $end            reduce using rule 47 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    RMB             reduce using rule 47 (class_def -> CLASS IDENTIFIER LMB expression RMB .)


state 171

    (61) if_statement_1 -> IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . variable_declaration SEMI
    (18) expression -> . variable_value_change SEMI
    (19) expression -> . if_statement
    (20) expression -> . function
    (21) expression -> . function_call
    (22) expression -> . repeat
    (23) expression -> . for
    (24) expression -> . while
    (25) expression -> . use SEMI
    (26) expression -> . error_handling
    (27) expression -> . variable_alone SEMI
    (28) expression -> . global_variable SEMI
    (29) expression -> . class_def
    (30) expression -> . debug SEMI
    (31) expression -> . function_class SEMI
    (32) expression -> . empty
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (96) empty -> .
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    RMB             reduce using rule 96 (empty -> .)
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

  ! VAR             [ reduce using rule 96 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 96 (empty -> .) ]
  ! USE             [ reduce using rule 96 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 96 (empty -> .) ]
  ! CLASS           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! REPEAT          [ reduce using rule 96 (empty -> .) ]
  ! FOR             [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! TRY             [ reduce using rule 96 (empty -> .) ]

    expression                     shift and go to state 185
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 172

    (65) condition -> condition LB calculate .
    (84) calculate -> calculate . PLUS calculate
    (85) calculate -> calculate . MINUS calculate
    (87) calculate -> calculate . MUL calculate
    (88) calculate -> calculate . DIV calculate

    RSB             reduce using rule 65 (condition -> condition LB calculate .)
    LB              reduce using rule 65 (condition -> condition LB calculate .)
    RB              reduce using rule 65 (condition -> condition LB calculate .)
    EQUAL           reduce using rule 65 (condition -> condition LB calculate .)
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    MUL             shift and go to state 131
    DIV             shift and go to state 132


state 173

    (67) condition -> condition LB EQUAL . calculate
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    calculate                      shift and go to state 186

state 174

    (66) condition -> condition RB calculate .
    (84) calculate -> calculate . PLUS calculate
    (85) calculate -> calculate . MINUS calculate
    (87) calculate -> calculate . MUL calculate
    (88) calculate -> calculate . DIV calculate

    RSB             reduce using rule 66 (condition -> condition RB calculate .)
    LB              reduce using rule 66 (condition -> condition RB calculate .)
    RB              reduce using rule 66 (condition -> condition RB calculate .)
    EQUAL           reduce using rule 66 (condition -> condition RB calculate .)
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    MUL             shift and go to state 131
    DIV             shift and go to state 132


state 175

    (68) condition -> condition RB EQUAL . calculate
    (84) calculate -> . calculate PLUS calculate
    (85) calculate -> . calculate MINUS calculate
    (86) calculate -> . MINUS calculate
    (87) calculate -> . calculate MUL calculate
    (88) calculate -> . calculate DIV calculate
    (89) calculate -> . INT
    (90) calculate -> . FLOAT
    (91) calculate -> . STRING
    (92) calculate -> . IDENTIFIER
    (93) calculate -> . IDENTIFIER LIST
    (94) calculate -> . LIST
    (95) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    STRING          shift and go to state 102
    IDENTIFIER      shift and go to state 103
    LIST            shift and go to state 107
    LSB             shift and go to state 98

    calculate                      shift and go to state 187

state 176

    (69) condition -> condition EQUAL calculate .
    (84) calculate -> calculate . PLUS calculate
    (85) calculate -> calculate . MINUS calculate
    (87) calculate -> calculate . MUL calculate
    (88) calculate -> calculate . DIV calculate

    RSB             reduce using rule 69 (condition -> condition EQUAL calculate .)
    LB              reduce using rule 69 (condition -> condition EQUAL calculate .)
    RB              reduce using rule 69 (condition -> condition EQUAL calculate .)
    EQUAL           reduce using rule 69 (condition -> condition EQUAL calculate .)
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    MUL             shift and go to state 131
    DIV             shift and go to state 132


state 177

    (49) function_head -> FUNCTION IDENTIFIER LSB parameter RSB .

    LMB             reduce using rule 49 (function_head -> FUNCTION IDENTIFIER LSB parameter RSB .)


state 178

    (50) function_head -> FUNCTION IDENTIFIER LSB empty RSB .

    LMB             reduce using rule 50 (function_head -> FUNCTION IDENTIFIER LSB empty RSB .)


state 179

    (37) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER . RSB

    RSB             shift and go to state 188


state 180

    (45) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .

    SEMI            reduce using rule 45 (function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .)


state 181

    (46) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .

    SEMI            reduce using rule 46 (function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .)


state 182

    (63) if_statement_2 -> if_statement_2 ELSE IF LSB condition . RSB LMB expression RMB
    (65) condition -> condition . LB calculate
    (66) condition -> condition . RB calculate
    (67) condition -> condition . LB EQUAL calculate
    (68) condition -> condition . RB EQUAL calculate
    (69) condition -> condition . EQUAL calculate

    RSB             shift and go to state 189
    LB              shift and go to state 148
    RB              shift and go to state 149
    EQUAL           shift and go to state 150


state 183

    (62) if_statement_2 -> ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 190


state 184

    (35) catch -> CATCH LSB IDENTIFIER RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . variable_declaration SEMI
    (18) expression -> . variable_value_change SEMI
    (19) expression -> . if_statement
    (20) expression -> . function
    (21) expression -> . function_call
    (22) expression -> . repeat
    (23) expression -> . for
    (24) expression -> . while
    (25) expression -> . use SEMI
    (26) expression -> . error_handling
    (27) expression -> . variable_alone SEMI
    (28) expression -> . global_variable SEMI
    (29) expression -> . class_def
    (30) expression -> . debug SEMI
    (31) expression -> . function_class SEMI
    (32) expression -> . empty
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (96) empty -> .
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    RMB             reduce using rule 96 (empty -> .)
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

  ! VAR             [ reduce using rule 96 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 96 (empty -> .) ]
  ! USE             [ reduce using rule 96 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 96 (empty -> .) ]
  ! CLASS           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! REPEAT          [ reduce using rule 96 (empty -> .) ]
  ! FOR             [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! TRY             [ reduce using rule 96 (empty -> .) ]

    expression                     shift and go to state 191
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 185

    (61) if_statement_1 -> IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

    RMB             shift and go to state 192
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

    variable_declaration           shift and go to state 36
    variable_value_change          shift and go to state 37
    if_statement                   shift and go to state 38
    function                       shift and go to state 39
    function_call                  shift and go to state 40
    repeat                         shift and go to state 41
    for                            shift and go to state 42
    while                          shift and go to state 43
    use                            shift and go to state 44
    error_handling                 shift and go to state 45
    variable_alone                 shift and go to state 46
    global_variable                shift and go to state 47
    class_def                      shift and go to state 48
    debug                          shift and go to state 49
    function_class                 shift and go to state 50
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 186

    (67) condition -> condition LB EQUAL calculate .
    (84) calculate -> calculate . PLUS calculate
    (85) calculate -> calculate . MINUS calculate
    (87) calculate -> calculate . MUL calculate
    (88) calculate -> calculate . DIV calculate

    RSB             reduce using rule 67 (condition -> condition LB EQUAL calculate .)
    LB              reduce using rule 67 (condition -> condition LB EQUAL calculate .)
    RB              reduce using rule 67 (condition -> condition LB EQUAL calculate .)
    EQUAL           reduce using rule 67 (condition -> condition LB EQUAL calculate .)
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    MUL             shift and go to state 131
    DIV             shift and go to state 132


state 187

    (68) condition -> condition RB EQUAL calculate .
    (84) calculate -> calculate . PLUS calculate
    (85) calculate -> calculate . MINUS calculate
    (87) calculate -> calculate . MUL calculate
    (88) calculate -> calculate . DIV calculate

    RSB             reduce using rule 68 (condition -> condition RB EQUAL calculate .)
    LB              reduce using rule 68 (condition -> condition RB EQUAL calculate .)
    RB              reduce using rule 68 (condition -> condition RB EQUAL calculate .)
    EQUAL           reduce using rule 68 (condition -> condition RB EQUAL calculate .)
    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    MUL             shift and go to state 131
    DIV             shift and go to state 132


state 188

    (37) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .

    LMB             reduce using rule 37 (for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .)


state 189

    (63) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 193


state 190

    (62) if_statement_2 -> ELSE IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . variable_declaration SEMI
    (18) expression -> . variable_value_change SEMI
    (19) expression -> . if_statement
    (20) expression -> . function
    (21) expression -> . function_call
    (22) expression -> . repeat
    (23) expression -> . for
    (24) expression -> . while
    (25) expression -> . use SEMI
    (26) expression -> . error_handling
    (27) expression -> . variable_alone SEMI
    (28) expression -> . global_variable SEMI
    (29) expression -> . class_def
    (30) expression -> . debug SEMI
    (31) expression -> . function_class SEMI
    (32) expression -> . empty
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (96) empty -> .
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    RMB             reduce using rule 96 (empty -> .)
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

  ! VAR             [ reduce using rule 96 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 96 (empty -> .) ]
  ! USE             [ reduce using rule 96 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 96 (empty -> .) ]
  ! CLASS           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! REPEAT          [ reduce using rule 96 (empty -> .) ]
  ! FOR             [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! TRY             [ reduce using rule 96 (empty -> .) ]

    expression                     shift and go to state 194
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 191

    (35) catch -> CATCH LSB IDENTIFIER RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

    RMB             shift and go to state 195
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

    variable_declaration           shift and go to state 36
    variable_value_change          shift and go to state 37
    if_statement                   shift and go to state 38
    function                       shift and go to state 39
    function_call                  shift and go to state 40
    repeat                         shift and go to state 41
    for                            shift and go to state 42
    while                          shift and go to state 43
    use                            shift and go to state 44
    error_handling                 shift and go to state 45
    variable_alone                 shift and go to state 46
    global_variable                shift and go to state 47
    class_def                      shift and go to state 48
    debug                          shift and go to state 49
    function_class                 shift and go to state 50
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 192

    (61) if_statement_1 -> IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 61 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 61 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 61 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 61 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 61 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 61 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 61 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 61 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 61 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 61 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 61 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 61 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 61 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 61 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)


state 193

    (63) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . variable_declaration SEMI
    (18) expression -> . variable_value_change SEMI
    (19) expression -> . if_statement
    (20) expression -> . function
    (21) expression -> . function_call
    (22) expression -> . repeat
    (23) expression -> . for
    (24) expression -> . while
    (25) expression -> . use SEMI
    (26) expression -> . error_handling
    (27) expression -> . variable_alone SEMI
    (28) expression -> . global_variable SEMI
    (29) expression -> . class_def
    (30) expression -> . debug SEMI
    (31) expression -> . function_class SEMI
    (32) expression -> . empty
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (96) empty -> .
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    RMB             reduce using rule 96 (empty -> .)
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

  ! VAR             [ reduce using rule 96 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 96 (empty -> .) ]
  ! USE             [ reduce using rule 96 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 96 (empty -> .) ]
  ! CLASS           [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 96 (empty -> .) ]
  ! REPEAT          [ reduce using rule 96 (empty -> .) ]
  ! FOR             [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! TRY             [ reduce using rule 96 (empty -> .) ]

    expression                     shift and go to state 196
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 194

    (62) if_statement_2 -> ELSE IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

    RMB             shift and go to state 197
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

    variable_declaration           shift and go to state 36
    variable_value_change          shift and go to state 37
    if_statement                   shift and go to state 38
    function                       shift and go to state 39
    function_call                  shift and go to state 40
    repeat                         shift and go to state 41
    for                            shift and go to state 42
    while                          shift and go to state 43
    use                            shift and go to state 44
    error_handling                 shift and go to state 45
    variable_alone                 shift and go to state 46
    global_variable                shift and go to state 47
    class_def                      shift and go to state 48
    debug                          shift and go to state 49
    function_class                 shift and go to state 50
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 195

    (35) catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .

    VAR             reduce using rule 35 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 35 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    USE             reduce using rule 35 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    GLOBAL          reduce using rule 35 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    CLASS           reduce using rule 35 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IF              reduce using rule 35 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FUNCTION        reduce using rule 35 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    REPEAT          reduce using rule 35 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FOR             reduce using rule 35 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    WHILE           reduce using rule 35 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    TRY             reduce using rule 35 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    $end            reduce using rule 35 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    RMB             reduce using rule 35 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)


state 196

    (63) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (81) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (82) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER
    (79) variable_value_change -> . IDENTIFIER EQUAL LIST
    (80) variable_value_change -> . IDENTIFIER EQUAL calculate
    (57) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (58) if_statement -> . if_statement_1 if_statement_2
    (59) if_statement -> . if_statement_1 if_statement_3
    (60) if_statement -> . if_statement_1
    (48) function -> . function_head function_body
    (52) function_call -> . IDENTIFIER LSB parameter RSB
    (53) function_call -> . IDENTIFIER LSB empty RSB
    (42) repeat -> . repeat_head repeat_body
    (36) for -> . for_head for_body
    (39) while -> . while_head while_body
    (75) use -> . USE use_params
    (33) error_handling -> . try catch
    (78) variable_alone -> . IDENTIFIER
    (77) global_variable -> . GLOBAL IDENTIFIER
    (47) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (56) debug -> . USE DEBUG
    (45) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (46) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (49) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (50) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (43) repeat_head -> . REPEAT LSB calculate RSB
    (37) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (40) while_head -> . WHILE LSB condition RSB
    (34) try -> . TRY LMB expression RMB

    RMB             shift and go to state 198
    VAR             shift and go to state 19
    IDENTIFIER      shift and go to state 20
    USE             shift and go to state 26
    GLOBAL          shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    FUNCTION        shift and go to state 31
    REPEAT          shift and go to state 32
    FOR             shift and go to state 33
    WHILE           shift and go to state 34
    TRY             shift and go to state 35

    variable_declaration           shift and go to state 36
    variable_value_change          shift and go to state 37
    if_statement                   shift and go to state 38
    function                       shift and go to state 39
    function_call                  shift and go to state 40
    repeat                         shift and go to state 41
    for                            shift and go to state 42
    while                          shift and go to state 43
    use                            shift and go to state 44
    error_handling                 shift and go to state 45
    variable_alone                 shift and go to state 46
    global_variable                shift and go to state 47
    class_def                      shift and go to state 48
    debug                          shift and go to state 49
    function_class                 shift and go to state 50
    if_statement_1                 shift and go to state 21
    function_head                  shift and go to state 22
    repeat_head                    shift and go to state 23
    for_head                       shift and go to state 24
    while_head                     shift and go to state 25
    try                            shift and go to state 27

state 197

    (62) if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 62 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 62 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 62 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 62 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 62 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 62 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 62 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 62 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 62 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 62 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 62 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 62 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 62 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 62 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)


state 198

    (63) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 63 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 63 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 63 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 63 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 63 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 63 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 63 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 63 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 63 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 63 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 63 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 63 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 63 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 63 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for USE in state 0 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 65 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 65 resolved as shift
WARNING: shift/reduce conflict for USE in state 65 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 65 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 65 resolved as shift
WARNING: shift/reduce conflict for IF in state 65 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 65 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 65 resolved as shift
WARNING: shift/reduce conflict for FOR in state 65 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 65 resolved as shift
WARNING: shift/reduce conflict for TRY in state 65 resolved as shift
WARNING: shift/reduce conflict for VAR in state 67 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 67 resolved as shift
WARNING: shift/reduce conflict for USE in state 67 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 67 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 67 resolved as shift
WARNING: shift/reduce conflict for IF in state 67 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 67 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 67 resolved as shift
WARNING: shift/reduce conflict for FOR in state 67 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 67 resolved as shift
WARNING: shift/reduce conflict for TRY in state 67 resolved as shift
WARNING: shift/reduce conflict for VAR in state 69 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 69 resolved as shift
WARNING: shift/reduce conflict for USE in state 69 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 69 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 69 resolved as shift
WARNING: shift/reduce conflict for IF in state 69 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 69 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 69 resolved as shift
WARNING: shift/reduce conflict for FOR in state 69 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 69 resolved as shift
WARNING: shift/reduce conflict for TRY in state 69 resolved as shift
WARNING: shift/reduce conflict for VAR in state 71 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 71 resolved as shift
WARNING: shift/reduce conflict for USE in state 71 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 71 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 71 resolved as shift
WARNING: shift/reduce conflict for IF in state 71 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 71 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 71 resolved as shift
WARNING: shift/reduce conflict for FOR in state 71 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 71 resolved as shift
WARNING: shift/reduce conflict for TRY in state 71 resolved as shift
WARNING: shift/reduce conflict for VAR in state 84 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 84 resolved as shift
WARNING: shift/reduce conflict for USE in state 84 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 84 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 84 resolved as shift
WARNING: shift/reduce conflict for IF in state 84 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 84 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 84 resolved as shift
WARNING: shift/reduce conflict for FOR in state 84 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 84 resolved as shift
WARNING: shift/reduce conflict for TRY in state 84 resolved as shift
WARNING: shift/reduce conflict for VAR in state 111 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 111 resolved as shift
WARNING: shift/reduce conflict for USE in state 111 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 111 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 111 resolved as shift
WARNING: shift/reduce conflict for IF in state 111 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 111 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 111 resolved as shift
WARNING: shift/reduce conflict for FOR in state 111 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 111 resolved as shift
WARNING: shift/reduce conflict for TRY in state 111 resolved as shift
WARNING: shift/reduce conflict for VAR in state 117 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 117 resolved as shift
WARNING: shift/reduce conflict for USE in state 117 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 117 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 117 resolved as shift
WARNING: shift/reduce conflict for IF in state 117 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 117 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 117 resolved as shift
WARNING: shift/reduce conflict for FOR in state 117 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 117 resolved as shift
WARNING: shift/reduce conflict for TRY in state 117 resolved as shift
WARNING: shift/reduce conflict for VAR in state 171 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 171 resolved as shift
WARNING: shift/reduce conflict for USE in state 171 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 171 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 171 resolved as shift
WARNING: shift/reduce conflict for IF in state 171 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 171 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 171 resolved as shift
WARNING: shift/reduce conflict for FOR in state 171 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 171 resolved as shift
WARNING: shift/reduce conflict for TRY in state 171 resolved as shift
WARNING: shift/reduce conflict for VAR in state 184 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 184 resolved as shift
WARNING: shift/reduce conflict for USE in state 184 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 184 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 184 resolved as shift
WARNING: shift/reduce conflict for IF in state 184 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 184 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 184 resolved as shift
WARNING: shift/reduce conflict for FOR in state 184 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 184 resolved as shift
WARNING: shift/reduce conflict for TRY in state 184 resolved as shift
WARNING: shift/reduce conflict for VAR in state 190 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 190 resolved as shift
WARNING: shift/reduce conflict for USE in state 190 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 190 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 190 resolved as shift
WARNING: shift/reduce conflict for IF in state 190 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 190 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 190 resolved as shift
WARNING: shift/reduce conflict for FOR in state 190 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 190 resolved as shift
WARNING: shift/reduce conflict for TRY in state 190 resolved as shift
WARNING: shift/reduce conflict for VAR in state 193 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 193 resolved as shift
WARNING: shift/reduce conflict for USE in state 193 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 193 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 193 resolved as shift
WARNING: shift/reduce conflict for IF in state 193 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 193 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 193 resolved as shift
WARNING: shift/reduce conflict for FOR in state 193 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 193 resolved as shift
WARNING: shift/reduce conflict for TRY in state 193 resolved as shift
WARNING: reduce/reduce conflict in state 96 resolved using rule (variable_value_change -> IDENTIFIER EQUAL LIST)
WARNING: rejected rule (calculate -> LIST) in state 96
