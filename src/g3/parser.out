Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CLASS
    COLON

Grammar

Rule 0     S' -> root
Rule 1     root -> expression
Rule 2     expression -> expression variable_declaration SEMI
Rule 3     expression -> expression variable_value_change SEMI
Rule 4     expression -> expression if_statement
Rule 5     expression -> expression function
Rule 6     expression -> expression function_call SEMI
Rule 7     expression -> expression repeat
Rule 8     expression -> expression for
Rule 9     expression -> expression while
Rule 10    expression -> expression use SEMI
Rule 11    expression -> expression error_handling
Rule 12    expression -> expression variable_alone SEMI
Rule 13    expression -> expression global_variable SEMI
Rule 14    expression -> variable_declaration SEMI
Rule 15    expression -> variable_value_change SEMI
Rule 16    expression -> if_statement
Rule 17    expression -> function
Rule 18    expression -> function_call
Rule 19    expression -> repeat
Rule 20    expression -> for
Rule 21    expression -> while
Rule 22    expression -> use SEMI
Rule 23    expression -> error_handling
Rule 24    expression -> variable_alone SEMI
Rule 25    expression -> global_variable SEMI
Rule 26    expression -> empty
Rule 27    error_handling -> try catch
Rule 28    try -> TRY LMB expression RMB
Rule 29    catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB
Rule 30    for -> for_head for_body
Rule 31    for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB
Rule 32    for_body -> LMB expression RMB
Rule 33    while -> while_head while_body
Rule 34    while_head -> WHILE LSB condition RSB
Rule 35    while_body -> LMB expression RMB
Rule 36    repeat -> repeat_head repeat_body
Rule 37    repeat_head -> REPEAT LSB calculate RSB
Rule 38    repeat_body -> LMB expression RMB
Rule 39    function -> function_head function_body
Rule 40    function_head -> FUNCTION IDENTIFIER LSB empty RSB
Rule 41    function_head -> FUNCTION IDENTIFIER LSB parameter RSB
Rule 42    function_body -> LMB expression RMB
Rule 43    function_call -> IDENTIFIER LSB parameter RSB
Rule 44    parameter -> parameter COMMA calculate
Rule 45    parameter -> calculate
Rule 46    parameter -> empty
Rule 47    if_statement -> if_statement_1 if_statement_2 if_statement_3
Rule 48    if_statement -> if_statement_1 if_statement_2
Rule 49    if_statement -> if_statement_1 if_statement_3
Rule 50    if_statement -> if_statement_1
Rule 51    if_statement_1 -> IF LSB condition RSB LMB expression RMB
Rule 52    if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB
Rule 53    if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
Rule 54    if_statement_3 -> ELSE LMB expression RMB
Rule 55    condition -> condition LB calculate
Rule 56    condition -> condition RB calculate
Rule 57    condition -> condition LB EQUAL calculate
Rule 58    condition -> condition RB EQUAL calculate
Rule 59    condition -> condition EQUAL calculate
Rule 60    condition -> calculate
Rule 61    use -> USE use_params
Rule 62    use_params -> IDENTIFIER
Rule 63    global_variable -> GLOBAL IDENTIFIER
Rule 64    variable_alone -> IDENTIFIER
Rule 65    variable_value_change -> IDENTIFIER EQUAL LIST
Rule 66    variable_value_change -> IDENTIFIER EQUAL calculate
Rule 67    variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate
Rule 68    variable_declaration -> VAR IDENTIFIER EQUAL calculate
Rule 69    variable_declaration -> VAR IDENTIFIER
Rule 70    calculate -> calculate PLUS calculate
Rule 71    calculate -> calculate MINUS calculate
Rule 72    calculate -> MINUS calculate
Rule 73    calculate -> calculate MUL calculate
Rule 74    calculate -> calculate DIV calculate
Rule 75    calculate -> INT
Rule 76    calculate -> FLOAT
Rule 77    calculate -> STRING
Rule 78    calculate -> IDENTIFIER
Rule 79    calculate -> IDENTIFIER LIST
Rule 80    calculate -> LIST
Rule 81    calculate -> LSB calculate RSB
Rule 82    empty -> <empty>

Terminals, with rules where they appear

CATCH                : 29
CLASS                : 
COLON                : 
COMMA                : 44
DIV                  : 74
ELSE                 : 52 53 54
EQUAL                : 57 58 59 65 66 67 68
FLOAT                : 76
FOR                  : 31
FUNCTION             : 40 41
GLOBAL               : 63
IDENTIFIER           : 29 31 31 40 41 43 62 63 64 65 66 67 68 69 78 79
IF                   : 51 52 53
IN                   : 31
INT                  : 75
LB                   : 55 57
LIST                 : 65 67 79 80
LMB                  : 28 29 32 35 38 42 51 52 53 54
LSB                  : 29 31 34 37 40 41 43 51 52 53 81
MINUS                : 71 72
MUL                  : 73
PLUS                 : 70
RB                   : 56 58
REPEAT               : 37
RMB                  : 28 29 32 35 38 42 51 52 53 54
RSB                  : 29 31 34 37 40 41 43 51 52 53 81
SEMI                 : 2 3 6 10 12 13 14 15 22 24 25
STRING               : 77
TRY                  : 28
USE                  : 61
VAR                  : 67 68 69
WHILE                : 34
error                : 

Nonterminals, with rules where they appear

calculate            : 37 44 45 55 56 57 58 59 60 66 67 68 70 70 71 71 72 73 73 74 74 81
catch                : 27
condition            : 34 51 52 53 55 56 57 58 59
empty                : 26 40 46
error_handling       : 11 23
expression           : 1 2 3 4 5 6 7 8 9 10 11 12 13 28 29 32 35 38 42 51 52 53 54
for                  : 8 20
for_body             : 30
for_head             : 30
function             : 5 17
function_body        : 39
function_call        : 6 18
function_head        : 39
global_variable      : 13 25
if_statement         : 4 16
if_statement_1       : 47 48 49 50
if_statement_2       : 47 48 53
if_statement_3       : 47 49
parameter            : 41 43 44
repeat               : 7 19
repeat_body          : 36
repeat_head          : 36
root                 : 0
try                  : 27
use                  : 10 22
use_params           : 61
variable_alone       : 12 24
variable_declaration : 2 14
variable_value_change : 3 15
while                : 9 21
while_body           : 33
while_head           : 33

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . expression
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . variable_declaration SEMI
    (15) expression -> . variable_value_change SEMI
    (16) expression -> . if_statement
    (17) expression -> . function
    (18) expression -> . function_call
    (19) expression -> . repeat
    (20) expression -> . for
    (21) expression -> . while
    (22) expression -> . use SEMI
    (23) expression -> . error_handling
    (24) expression -> . variable_alone SEMI
    (25) expression -> . global_variable SEMI
    (26) expression -> . empty
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (82) empty -> .
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    $end            reduce using rule 82 (empty -> .)
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

  ! VAR             [ reduce using rule 82 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 82 (empty -> .) ]
  ! USE             [ reduce using rule 82 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 82 (empty -> .) ]
  ! IF              [ reduce using rule 82 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 82 (empty -> .) ]
  ! REPEAT          [ reduce using rule 82 (empty -> .) ]
  ! FOR             [ reduce using rule 82 (empty -> .) ]
  ! WHILE           [ reduce using rule 82 (empty -> .) ]
  ! TRY             [ reduce using rule 82 (empty -> .) ]

    root                           shift and go to state 1
    expression                     shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    empty                          shift and go to state 15
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 1

    (0) S' -> root .



state 2

    (1) root -> expression .
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

    $end            reduce using rule 1 (root -> expression .)
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

    variable_declaration           shift and go to state 32
    variable_value_change          shift and go to state 33
    if_statement                   shift and go to state 34
    function                       shift and go to state 35
    function_call                  shift and go to state 36
    repeat                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39
    use                            shift and go to state 40
    error_handling                 shift and go to state 41
    variable_alone                 shift and go to state 42
    global_variable                shift and go to state 43
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 3

    (14) expression -> variable_declaration . SEMI

    SEMI            shift and go to state 44


state 4

    (15) expression -> variable_value_change . SEMI

    SEMI            shift and go to state 45


state 5

    (16) expression -> if_statement .

    VAR             reduce using rule 16 (expression -> if_statement .)
    IDENTIFIER      reduce using rule 16 (expression -> if_statement .)
    USE             reduce using rule 16 (expression -> if_statement .)
    GLOBAL          reduce using rule 16 (expression -> if_statement .)
    IF              reduce using rule 16 (expression -> if_statement .)
    FUNCTION        reduce using rule 16 (expression -> if_statement .)
    REPEAT          reduce using rule 16 (expression -> if_statement .)
    FOR             reduce using rule 16 (expression -> if_statement .)
    WHILE           reduce using rule 16 (expression -> if_statement .)
    TRY             reduce using rule 16 (expression -> if_statement .)
    $end            reduce using rule 16 (expression -> if_statement .)
    RMB             reduce using rule 16 (expression -> if_statement .)


state 6

    (17) expression -> function .

    VAR             reduce using rule 17 (expression -> function .)
    IDENTIFIER      reduce using rule 17 (expression -> function .)
    USE             reduce using rule 17 (expression -> function .)
    GLOBAL          reduce using rule 17 (expression -> function .)
    IF              reduce using rule 17 (expression -> function .)
    FUNCTION        reduce using rule 17 (expression -> function .)
    REPEAT          reduce using rule 17 (expression -> function .)
    FOR             reduce using rule 17 (expression -> function .)
    WHILE           reduce using rule 17 (expression -> function .)
    TRY             reduce using rule 17 (expression -> function .)
    $end            reduce using rule 17 (expression -> function .)
    RMB             reduce using rule 17 (expression -> function .)


state 7

    (18) expression -> function_call .

    VAR             reduce using rule 18 (expression -> function_call .)
    IDENTIFIER      reduce using rule 18 (expression -> function_call .)
    USE             reduce using rule 18 (expression -> function_call .)
    GLOBAL          reduce using rule 18 (expression -> function_call .)
    IF              reduce using rule 18 (expression -> function_call .)
    FUNCTION        reduce using rule 18 (expression -> function_call .)
    REPEAT          reduce using rule 18 (expression -> function_call .)
    FOR             reduce using rule 18 (expression -> function_call .)
    WHILE           reduce using rule 18 (expression -> function_call .)
    TRY             reduce using rule 18 (expression -> function_call .)
    $end            reduce using rule 18 (expression -> function_call .)
    RMB             reduce using rule 18 (expression -> function_call .)


state 8

    (19) expression -> repeat .

    VAR             reduce using rule 19 (expression -> repeat .)
    IDENTIFIER      reduce using rule 19 (expression -> repeat .)
    USE             reduce using rule 19 (expression -> repeat .)
    GLOBAL          reduce using rule 19 (expression -> repeat .)
    IF              reduce using rule 19 (expression -> repeat .)
    FUNCTION        reduce using rule 19 (expression -> repeat .)
    REPEAT          reduce using rule 19 (expression -> repeat .)
    FOR             reduce using rule 19 (expression -> repeat .)
    WHILE           reduce using rule 19 (expression -> repeat .)
    TRY             reduce using rule 19 (expression -> repeat .)
    $end            reduce using rule 19 (expression -> repeat .)
    RMB             reduce using rule 19 (expression -> repeat .)


state 9

    (20) expression -> for .

    VAR             reduce using rule 20 (expression -> for .)
    IDENTIFIER      reduce using rule 20 (expression -> for .)
    USE             reduce using rule 20 (expression -> for .)
    GLOBAL          reduce using rule 20 (expression -> for .)
    IF              reduce using rule 20 (expression -> for .)
    FUNCTION        reduce using rule 20 (expression -> for .)
    REPEAT          reduce using rule 20 (expression -> for .)
    FOR             reduce using rule 20 (expression -> for .)
    WHILE           reduce using rule 20 (expression -> for .)
    TRY             reduce using rule 20 (expression -> for .)
    $end            reduce using rule 20 (expression -> for .)
    RMB             reduce using rule 20 (expression -> for .)


state 10

    (21) expression -> while .

    VAR             reduce using rule 21 (expression -> while .)
    IDENTIFIER      reduce using rule 21 (expression -> while .)
    USE             reduce using rule 21 (expression -> while .)
    GLOBAL          reduce using rule 21 (expression -> while .)
    IF              reduce using rule 21 (expression -> while .)
    FUNCTION        reduce using rule 21 (expression -> while .)
    REPEAT          reduce using rule 21 (expression -> while .)
    FOR             reduce using rule 21 (expression -> while .)
    WHILE           reduce using rule 21 (expression -> while .)
    TRY             reduce using rule 21 (expression -> while .)
    $end            reduce using rule 21 (expression -> while .)
    RMB             reduce using rule 21 (expression -> while .)


state 11

    (22) expression -> use . SEMI

    SEMI            shift and go to state 46


state 12

    (23) expression -> error_handling .

    VAR             reduce using rule 23 (expression -> error_handling .)
    IDENTIFIER      reduce using rule 23 (expression -> error_handling .)
    USE             reduce using rule 23 (expression -> error_handling .)
    GLOBAL          reduce using rule 23 (expression -> error_handling .)
    IF              reduce using rule 23 (expression -> error_handling .)
    FUNCTION        reduce using rule 23 (expression -> error_handling .)
    REPEAT          reduce using rule 23 (expression -> error_handling .)
    FOR             reduce using rule 23 (expression -> error_handling .)
    WHILE           reduce using rule 23 (expression -> error_handling .)
    TRY             reduce using rule 23 (expression -> error_handling .)
    $end            reduce using rule 23 (expression -> error_handling .)
    RMB             reduce using rule 23 (expression -> error_handling .)


state 13

    (24) expression -> variable_alone . SEMI

    SEMI            shift and go to state 47


state 14

    (25) expression -> global_variable . SEMI

    SEMI            shift and go to state 48


state 15

    (26) expression -> empty .

    VAR             reduce using rule 26 (expression -> empty .)
    IDENTIFIER      reduce using rule 26 (expression -> empty .)
    USE             reduce using rule 26 (expression -> empty .)
    GLOBAL          reduce using rule 26 (expression -> empty .)
    IF              reduce using rule 26 (expression -> empty .)
    FUNCTION        reduce using rule 26 (expression -> empty .)
    REPEAT          reduce using rule 26 (expression -> empty .)
    FOR             reduce using rule 26 (expression -> empty .)
    WHILE           reduce using rule 26 (expression -> empty .)
    TRY             reduce using rule 26 (expression -> empty .)
    $end            reduce using rule 26 (expression -> empty .)
    RMB             reduce using rule 26 (expression -> empty .)


state 16

    (67) variable_declaration -> VAR . IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> VAR . IDENTIFIER EQUAL calculate
    (69) variable_declaration -> VAR . IDENTIFIER

    IDENTIFIER      shift and go to state 49


state 17

    (65) variable_value_change -> IDENTIFIER . EQUAL LIST
    (66) variable_value_change -> IDENTIFIER . EQUAL calculate
    (43) function_call -> IDENTIFIER . LSB parameter RSB
    (64) variable_alone -> IDENTIFIER .

    EQUAL           shift and go to state 50
    LSB             shift and go to state 51
    SEMI            reduce using rule 64 (variable_alone -> IDENTIFIER .)


state 18

    (47) if_statement -> if_statement_1 . if_statement_2 if_statement_3
    (48) if_statement -> if_statement_1 . if_statement_2
    (49) if_statement -> if_statement_1 . if_statement_3
    (50) if_statement -> if_statement_1 .
    (52) if_statement_2 -> . ELSE IF LSB condition RSB LMB expression RMB
    (53) if_statement_2 -> . if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
    (54) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 50 (if_statement -> if_statement_1 .)
    IDENTIFIER      reduce using rule 50 (if_statement -> if_statement_1 .)
    USE             reduce using rule 50 (if_statement -> if_statement_1 .)
    GLOBAL          reduce using rule 50 (if_statement -> if_statement_1 .)
    IF              reduce using rule 50 (if_statement -> if_statement_1 .)
    FUNCTION        reduce using rule 50 (if_statement -> if_statement_1 .)
    REPEAT          reduce using rule 50 (if_statement -> if_statement_1 .)
    FOR             reduce using rule 50 (if_statement -> if_statement_1 .)
    WHILE           reduce using rule 50 (if_statement -> if_statement_1 .)
    TRY             reduce using rule 50 (if_statement -> if_statement_1 .)
    $end            reduce using rule 50 (if_statement -> if_statement_1 .)
    RMB             reduce using rule 50 (if_statement -> if_statement_1 .)
    ELSE            shift and go to state 54

    if_statement_2                 shift and go to state 52
    if_statement_3                 shift and go to state 53

state 19

    (39) function -> function_head . function_body
    (42) function_body -> . LMB expression RMB

    LMB             shift and go to state 56

    function_body                  shift and go to state 55

state 20

    (36) repeat -> repeat_head . repeat_body
    (38) repeat_body -> . LMB expression RMB

    LMB             shift and go to state 58

    repeat_body                    shift and go to state 57

state 21

    (30) for -> for_head . for_body
    (32) for_body -> . LMB expression RMB

    LMB             shift and go to state 60

    for_body                       shift and go to state 59

state 22

    (33) while -> while_head . while_body
    (35) while_body -> . LMB expression RMB

    LMB             shift and go to state 62

    while_body                     shift and go to state 61

state 23

    (61) use -> USE . use_params
    (62) use_params -> . IDENTIFIER

    IDENTIFIER      shift and go to state 64

    use_params                     shift and go to state 63

state 24

    (27) error_handling -> try . catch
    (29) catch -> . CATCH LSB IDENTIFIER RSB LMB expression RMB

    CATCH           shift and go to state 66

    catch                          shift and go to state 65

state 25

    (63) global_variable -> GLOBAL . IDENTIFIER

    IDENTIFIER      shift and go to state 67


state 26

    (51) if_statement_1 -> IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 68


state 27

    (40) function_head -> FUNCTION . IDENTIFIER LSB empty RSB
    (41) function_head -> FUNCTION . IDENTIFIER LSB parameter RSB

    IDENTIFIER      shift and go to state 69


state 28

    (37) repeat_head -> REPEAT . LSB calculate RSB

    LSB             shift and go to state 70


state 29

    (31) for_head -> FOR . LSB IDENTIFIER IN IDENTIFIER RSB

    LSB             shift and go to state 71


state 30

    (34) while_head -> WHILE . LSB condition RSB

    LSB             shift and go to state 72


state 31

    (28) try -> TRY . LMB expression RMB

    LMB             shift and go to state 73


state 32

    (2) expression -> expression variable_declaration . SEMI

    SEMI            shift and go to state 74


state 33

    (3) expression -> expression variable_value_change . SEMI

    SEMI            shift and go to state 75


state 34

    (4) expression -> expression if_statement .

    VAR             reduce using rule 4 (expression -> expression if_statement .)
    IDENTIFIER      reduce using rule 4 (expression -> expression if_statement .)
    USE             reduce using rule 4 (expression -> expression if_statement .)
    GLOBAL          reduce using rule 4 (expression -> expression if_statement .)
    IF              reduce using rule 4 (expression -> expression if_statement .)
    FUNCTION        reduce using rule 4 (expression -> expression if_statement .)
    REPEAT          reduce using rule 4 (expression -> expression if_statement .)
    FOR             reduce using rule 4 (expression -> expression if_statement .)
    WHILE           reduce using rule 4 (expression -> expression if_statement .)
    TRY             reduce using rule 4 (expression -> expression if_statement .)
    $end            reduce using rule 4 (expression -> expression if_statement .)
    RMB             reduce using rule 4 (expression -> expression if_statement .)


state 35

    (5) expression -> expression function .

    VAR             reduce using rule 5 (expression -> expression function .)
    IDENTIFIER      reduce using rule 5 (expression -> expression function .)
    USE             reduce using rule 5 (expression -> expression function .)
    GLOBAL          reduce using rule 5 (expression -> expression function .)
    IF              reduce using rule 5 (expression -> expression function .)
    FUNCTION        reduce using rule 5 (expression -> expression function .)
    REPEAT          reduce using rule 5 (expression -> expression function .)
    FOR             reduce using rule 5 (expression -> expression function .)
    WHILE           reduce using rule 5 (expression -> expression function .)
    TRY             reduce using rule 5 (expression -> expression function .)
    $end            reduce using rule 5 (expression -> expression function .)
    RMB             reduce using rule 5 (expression -> expression function .)


state 36

    (6) expression -> expression function_call . SEMI

    SEMI            shift and go to state 76


state 37

    (7) expression -> expression repeat .

    VAR             reduce using rule 7 (expression -> expression repeat .)
    IDENTIFIER      reduce using rule 7 (expression -> expression repeat .)
    USE             reduce using rule 7 (expression -> expression repeat .)
    GLOBAL          reduce using rule 7 (expression -> expression repeat .)
    IF              reduce using rule 7 (expression -> expression repeat .)
    FUNCTION        reduce using rule 7 (expression -> expression repeat .)
    REPEAT          reduce using rule 7 (expression -> expression repeat .)
    FOR             reduce using rule 7 (expression -> expression repeat .)
    WHILE           reduce using rule 7 (expression -> expression repeat .)
    TRY             reduce using rule 7 (expression -> expression repeat .)
    $end            reduce using rule 7 (expression -> expression repeat .)
    RMB             reduce using rule 7 (expression -> expression repeat .)


state 38

    (8) expression -> expression for .

    VAR             reduce using rule 8 (expression -> expression for .)
    IDENTIFIER      reduce using rule 8 (expression -> expression for .)
    USE             reduce using rule 8 (expression -> expression for .)
    GLOBAL          reduce using rule 8 (expression -> expression for .)
    IF              reduce using rule 8 (expression -> expression for .)
    FUNCTION        reduce using rule 8 (expression -> expression for .)
    REPEAT          reduce using rule 8 (expression -> expression for .)
    FOR             reduce using rule 8 (expression -> expression for .)
    WHILE           reduce using rule 8 (expression -> expression for .)
    TRY             reduce using rule 8 (expression -> expression for .)
    $end            reduce using rule 8 (expression -> expression for .)
    RMB             reduce using rule 8 (expression -> expression for .)


state 39

    (9) expression -> expression while .

    VAR             reduce using rule 9 (expression -> expression while .)
    IDENTIFIER      reduce using rule 9 (expression -> expression while .)
    USE             reduce using rule 9 (expression -> expression while .)
    GLOBAL          reduce using rule 9 (expression -> expression while .)
    IF              reduce using rule 9 (expression -> expression while .)
    FUNCTION        reduce using rule 9 (expression -> expression while .)
    REPEAT          reduce using rule 9 (expression -> expression while .)
    FOR             reduce using rule 9 (expression -> expression while .)
    WHILE           reduce using rule 9 (expression -> expression while .)
    TRY             reduce using rule 9 (expression -> expression while .)
    $end            reduce using rule 9 (expression -> expression while .)
    RMB             reduce using rule 9 (expression -> expression while .)


state 40

    (10) expression -> expression use . SEMI

    SEMI            shift and go to state 77


state 41

    (11) expression -> expression error_handling .

    VAR             reduce using rule 11 (expression -> expression error_handling .)
    IDENTIFIER      reduce using rule 11 (expression -> expression error_handling .)
    USE             reduce using rule 11 (expression -> expression error_handling .)
    GLOBAL          reduce using rule 11 (expression -> expression error_handling .)
    IF              reduce using rule 11 (expression -> expression error_handling .)
    FUNCTION        reduce using rule 11 (expression -> expression error_handling .)
    REPEAT          reduce using rule 11 (expression -> expression error_handling .)
    FOR             reduce using rule 11 (expression -> expression error_handling .)
    WHILE           reduce using rule 11 (expression -> expression error_handling .)
    TRY             reduce using rule 11 (expression -> expression error_handling .)
    $end            reduce using rule 11 (expression -> expression error_handling .)
    RMB             reduce using rule 11 (expression -> expression error_handling .)


state 42

    (12) expression -> expression variable_alone . SEMI

    SEMI            shift and go to state 78


state 43

    (13) expression -> expression global_variable . SEMI

    SEMI            shift and go to state 79


state 44

    (14) expression -> variable_declaration SEMI .

    VAR             reduce using rule 14 (expression -> variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 14 (expression -> variable_declaration SEMI .)
    USE             reduce using rule 14 (expression -> variable_declaration SEMI .)
    GLOBAL          reduce using rule 14 (expression -> variable_declaration SEMI .)
    IF              reduce using rule 14 (expression -> variable_declaration SEMI .)
    FUNCTION        reduce using rule 14 (expression -> variable_declaration SEMI .)
    REPEAT          reduce using rule 14 (expression -> variable_declaration SEMI .)
    FOR             reduce using rule 14 (expression -> variable_declaration SEMI .)
    WHILE           reduce using rule 14 (expression -> variable_declaration SEMI .)
    TRY             reduce using rule 14 (expression -> variable_declaration SEMI .)
    $end            reduce using rule 14 (expression -> variable_declaration SEMI .)
    RMB             reduce using rule 14 (expression -> variable_declaration SEMI .)


state 45

    (15) expression -> variable_value_change SEMI .

    VAR             reduce using rule 15 (expression -> variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 15 (expression -> variable_value_change SEMI .)
    USE             reduce using rule 15 (expression -> variable_value_change SEMI .)
    GLOBAL          reduce using rule 15 (expression -> variable_value_change SEMI .)
    IF              reduce using rule 15 (expression -> variable_value_change SEMI .)
    FUNCTION        reduce using rule 15 (expression -> variable_value_change SEMI .)
    REPEAT          reduce using rule 15 (expression -> variable_value_change SEMI .)
    FOR             reduce using rule 15 (expression -> variable_value_change SEMI .)
    WHILE           reduce using rule 15 (expression -> variable_value_change SEMI .)
    TRY             reduce using rule 15 (expression -> variable_value_change SEMI .)
    $end            reduce using rule 15 (expression -> variable_value_change SEMI .)
    RMB             reduce using rule 15 (expression -> variable_value_change SEMI .)


state 46

    (22) expression -> use SEMI .

    VAR             reduce using rule 22 (expression -> use SEMI .)
    IDENTIFIER      reduce using rule 22 (expression -> use SEMI .)
    USE             reduce using rule 22 (expression -> use SEMI .)
    GLOBAL          reduce using rule 22 (expression -> use SEMI .)
    IF              reduce using rule 22 (expression -> use SEMI .)
    FUNCTION        reduce using rule 22 (expression -> use SEMI .)
    REPEAT          reduce using rule 22 (expression -> use SEMI .)
    FOR             reduce using rule 22 (expression -> use SEMI .)
    WHILE           reduce using rule 22 (expression -> use SEMI .)
    TRY             reduce using rule 22 (expression -> use SEMI .)
    $end            reduce using rule 22 (expression -> use SEMI .)
    RMB             reduce using rule 22 (expression -> use SEMI .)


state 47

    (24) expression -> variable_alone SEMI .

    VAR             reduce using rule 24 (expression -> variable_alone SEMI .)
    IDENTIFIER      reduce using rule 24 (expression -> variable_alone SEMI .)
    USE             reduce using rule 24 (expression -> variable_alone SEMI .)
    GLOBAL          reduce using rule 24 (expression -> variable_alone SEMI .)
    IF              reduce using rule 24 (expression -> variable_alone SEMI .)
    FUNCTION        reduce using rule 24 (expression -> variable_alone SEMI .)
    REPEAT          reduce using rule 24 (expression -> variable_alone SEMI .)
    FOR             reduce using rule 24 (expression -> variable_alone SEMI .)
    WHILE           reduce using rule 24 (expression -> variable_alone SEMI .)
    TRY             reduce using rule 24 (expression -> variable_alone SEMI .)
    $end            reduce using rule 24 (expression -> variable_alone SEMI .)
    RMB             reduce using rule 24 (expression -> variable_alone SEMI .)


state 48

    (25) expression -> global_variable SEMI .

    VAR             reduce using rule 25 (expression -> global_variable SEMI .)
    IDENTIFIER      reduce using rule 25 (expression -> global_variable SEMI .)
    USE             reduce using rule 25 (expression -> global_variable SEMI .)
    GLOBAL          reduce using rule 25 (expression -> global_variable SEMI .)
    IF              reduce using rule 25 (expression -> global_variable SEMI .)
    FUNCTION        reduce using rule 25 (expression -> global_variable SEMI .)
    REPEAT          reduce using rule 25 (expression -> global_variable SEMI .)
    FOR             reduce using rule 25 (expression -> global_variable SEMI .)
    WHILE           reduce using rule 25 (expression -> global_variable SEMI .)
    TRY             reduce using rule 25 (expression -> global_variable SEMI .)
    $end            reduce using rule 25 (expression -> global_variable SEMI .)
    RMB             reduce using rule 25 (expression -> global_variable SEMI .)


state 49

    (67) variable_declaration -> VAR IDENTIFIER . LIST EQUAL calculate
    (68) variable_declaration -> VAR IDENTIFIER . EQUAL calculate
    (69) variable_declaration -> VAR IDENTIFIER .

    LIST            shift and go to state 80
    EQUAL           shift and go to state 81
    SEMI            reduce using rule 69 (variable_declaration -> VAR IDENTIFIER .)


state 50

    (65) variable_value_change -> IDENTIFIER EQUAL . LIST
    (66) variable_value_change -> IDENTIFIER EQUAL . calculate
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    LIST            shift and go to state 83
    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LSB             shift and go to state 89

    calculate                      shift and go to state 84

state 51

    (43) function_call -> IDENTIFIER LSB . parameter RSB
    (44) parameter -> . parameter COMMA calculate
    (45) parameter -> . calculate
    (46) parameter -> . empty
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB
    (82) empty -> .

    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89
    RSB             reduce using rule 82 (empty -> .)
    COMMA           reduce using rule 82 (empty -> .)

    parameter                      shift and go to state 90
    calculate                      shift and go to state 91
    empty                          shift and go to state 92

state 52

    (47) if_statement -> if_statement_1 if_statement_2 . if_statement_3
    (48) if_statement -> if_statement_1 if_statement_2 .
    (53) if_statement_2 -> if_statement_2 . ELSE IF LSB condition RSB LMB expression RMB
    (54) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 48 (if_statement -> if_statement_1 if_statement_2 .)
    IDENTIFIER      reduce using rule 48 (if_statement -> if_statement_1 if_statement_2 .)
    USE             reduce using rule 48 (if_statement -> if_statement_1 if_statement_2 .)
    GLOBAL          reduce using rule 48 (if_statement -> if_statement_1 if_statement_2 .)
    IF              reduce using rule 48 (if_statement -> if_statement_1 if_statement_2 .)
    FUNCTION        reduce using rule 48 (if_statement -> if_statement_1 if_statement_2 .)
    REPEAT          reduce using rule 48 (if_statement -> if_statement_1 if_statement_2 .)
    FOR             reduce using rule 48 (if_statement -> if_statement_1 if_statement_2 .)
    WHILE           reduce using rule 48 (if_statement -> if_statement_1 if_statement_2 .)
    TRY             reduce using rule 48 (if_statement -> if_statement_1 if_statement_2 .)
    $end            reduce using rule 48 (if_statement -> if_statement_1 if_statement_2 .)
    RMB             reduce using rule 48 (if_statement -> if_statement_1 if_statement_2 .)
    ELSE            shift and go to state 95

    if_statement_3                 shift and go to state 94

state 53

    (49) if_statement -> if_statement_1 if_statement_3 .

    VAR             reduce using rule 49 (if_statement -> if_statement_1 if_statement_3 .)
    IDENTIFIER      reduce using rule 49 (if_statement -> if_statement_1 if_statement_3 .)
    USE             reduce using rule 49 (if_statement -> if_statement_1 if_statement_3 .)
    GLOBAL          reduce using rule 49 (if_statement -> if_statement_1 if_statement_3 .)
    IF              reduce using rule 49 (if_statement -> if_statement_1 if_statement_3 .)
    FUNCTION        reduce using rule 49 (if_statement -> if_statement_1 if_statement_3 .)
    REPEAT          reduce using rule 49 (if_statement -> if_statement_1 if_statement_3 .)
    FOR             reduce using rule 49 (if_statement -> if_statement_1 if_statement_3 .)
    WHILE           reduce using rule 49 (if_statement -> if_statement_1 if_statement_3 .)
    TRY             reduce using rule 49 (if_statement -> if_statement_1 if_statement_3 .)
    $end            reduce using rule 49 (if_statement -> if_statement_1 if_statement_3 .)
    RMB             reduce using rule 49 (if_statement -> if_statement_1 if_statement_3 .)


state 54

    (52) if_statement_2 -> ELSE . IF LSB condition RSB LMB expression RMB
    (54) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 96
    LMB             shift and go to state 97


state 55

    (39) function -> function_head function_body .

    VAR             reduce using rule 39 (function -> function_head function_body .)
    IDENTIFIER      reduce using rule 39 (function -> function_head function_body .)
    USE             reduce using rule 39 (function -> function_head function_body .)
    GLOBAL          reduce using rule 39 (function -> function_head function_body .)
    IF              reduce using rule 39 (function -> function_head function_body .)
    FUNCTION        reduce using rule 39 (function -> function_head function_body .)
    REPEAT          reduce using rule 39 (function -> function_head function_body .)
    FOR             reduce using rule 39 (function -> function_head function_body .)
    WHILE           reduce using rule 39 (function -> function_head function_body .)
    TRY             reduce using rule 39 (function -> function_head function_body .)
    $end            reduce using rule 39 (function -> function_head function_body .)
    RMB             reduce using rule 39 (function -> function_head function_body .)


state 56

    (42) function_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . variable_declaration SEMI
    (15) expression -> . variable_value_change SEMI
    (16) expression -> . if_statement
    (17) expression -> . function
    (18) expression -> . function_call
    (19) expression -> . repeat
    (20) expression -> . for
    (21) expression -> . while
    (22) expression -> . use SEMI
    (23) expression -> . error_handling
    (24) expression -> . variable_alone SEMI
    (25) expression -> . global_variable SEMI
    (26) expression -> . empty
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (82) empty -> .
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    RMB             reduce using rule 82 (empty -> .)
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

  ! VAR             [ reduce using rule 82 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 82 (empty -> .) ]
  ! USE             [ reduce using rule 82 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 82 (empty -> .) ]
  ! IF              [ reduce using rule 82 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 82 (empty -> .) ]
  ! REPEAT          [ reduce using rule 82 (empty -> .) ]
  ! FOR             [ reduce using rule 82 (empty -> .) ]
  ! WHILE           [ reduce using rule 82 (empty -> .) ]
  ! TRY             [ reduce using rule 82 (empty -> .) ]

    expression                     shift and go to state 98
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    empty                          shift and go to state 15
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 57

    (36) repeat -> repeat_head repeat_body .

    VAR             reduce using rule 36 (repeat -> repeat_head repeat_body .)
    IDENTIFIER      reduce using rule 36 (repeat -> repeat_head repeat_body .)
    USE             reduce using rule 36 (repeat -> repeat_head repeat_body .)
    GLOBAL          reduce using rule 36 (repeat -> repeat_head repeat_body .)
    IF              reduce using rule 36 (repeat -> repeat_head repeat_body .)
    FUNCTION        reduce using rule 36 (repeat -> repeat_head repeat_body .)
    REPEAT          reduce using rule 36 (repeat -> repeat_head repeat_body .)
    FOR             reduce using rule 36 (repeat -> repeat_head repeat_body .)
    WHILE           reduce using rule 36 (repeat -> repeat_head repeat_body .)
    TRY             reduce using rule 36 (repeat -> repeat_head repeat_body .)
    $end            reduce using rule 36 (repeat -> repeat_head repeat_body .)
    RMB             reduce using rule 36 (repeat -> repeat_head repeat_body .)


state 58

    (38) repeat_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . variable_declaration SEMI
    (15) expression -> . variable_value_change SEMI
    (16) expression -> . if_statement
    (17) expression -> . function
    (18) expression -> . function_call
    (19) expression -> . repeat
    (20) expression -> . for
    (21) expression -> . while
    (22) expression -> . use SEMI
    (23) expression -> . error_handling
    (24) expression -> . variable_alone SEMI
    (25) expression -> . global_variable SEMI
    (26) expression -> . empty
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (82) empty -> .
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    RMB             reduce using rule 82 (empty -> .)
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

  ! VAR             [ reduce using rule 82 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 82 (empty -> .) ]
  ! USE             [ reduce using rule 82 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 82 (empty -> .) ]
  ! IF              [ reduce using rule 82 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 82 (empty -> .) ]
  ! REPEAT          [ reduce using rule 82 (empty -> .) ]
  ! FOR             [ reduce using rule 82 (empty -> .) ]
  ! WHILE           [ reduce using rule 82 (empty -> .) ]
  ! TRY             [ reduce using rule 82 (empty -> .) ]

    expression                     shift and go to state 99
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    empty                          shift and go to state 15
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 59

    (30) for -> for_head for_body .

    VAR             reduce using rule 30 (for -> for_head for_body .)
    IDENTIFIER      reduce using rule 30 (for -> for_head for_body .)
    USE             reduce using rule 30 (for -> for_head for_body .)
    GLOBAL          reduce using rule 30 (for -> for_head for_body .)
    IF              reduce using rule 30 (for -> for_head for_body .)
    FUNCTION        reduce using rule 30 (for -> for_head for_body .)
    REPEAT          reduce using rule 30 (for -> for_head for_body .)
    FOR             reduce using rule 30 (for -> for_head for_body .)
    WHILE           reduce using rule 30 (for -> for_head for_body .)
    TRY             reduce using rule 30 (for -> for_head for_body .)
    $end            reduce using rule 30 (for -> for_head for_body .)
    RMB             reduce using rule 30 (for -> for_head for_body .)


state 60

    (32) for_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . variable_declaration SEMI
    (15) expression -> . variable_value_change SEMI
    (16) expression -> . if_statement
    (17) expression -> . function
    (18) expression -> . function_call
    (19) expression -> . repeat
    (20) expression -> . for
    (21) expression -> . while
    (22) expression -> . use SEMI
    (23) expression -> . error_handling
    (24) expression -> . variable_alone SEMI
    (25) expression -> . global_variable SEMI
    (26) expression -> . empty
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (82) empty -> .
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    RMB             reduce using rule 82 (empty -> .)
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

  ! VAR             [ reduce using rule 82 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 82 (empty -> .) ]
  ! USE             [ reduce using rule 82 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 82 (empty -> .) ]
  ! IF              [ reduce using rule 82 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 82 (empty -> .) ]
  ! REPEAT          [ reduce using rule 82 (empty -> .) ]
  ! FOR             [ reduce using rule 82 (empty -> .) ]
  ! WHILE           [ reduce using rule 82 (empty -> .) ]
  ! TRY             [ reduce using rule 82 (empty -> .) ]

    expression                     shift and go to state 100
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    empty                          shift and go to state 15
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 61

    (33) while -> while_head while_body .

    VAR             reduce using rule 33 (while -> while_head while_body .)
    IDENTIFIER      reduce using rule 33 (while -> while_head while_body .)
    USE             reduce using rule 33 (while -> while_head while_body .)
    GLOBAL          reduce using rule 33 (while -> while_head while_body .)
    IF              reduce using rule 33 (while -> while_head while_body .)
    FUNCTION        reduce using rule 33 (while -> while_head while_body .)
    REPEAT          reduce using rule 33 (while -> while_head while_body .)
    FOR             reduce using rule 33 (while -> while_head while_body .)
    WHILE           reduce using rule 33 (while -> while_head while_body .)
    TRY             reduce using rule 33 (while -> while_head while_body .)
    $end            reduce using rule 33 (while -> while_head while_body .)
    RMB             reduce using rule 33 (while -> while_head while_body .)


state 62

    (35) while_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . variable_declaration SEMI
    (15) expression -> . variable_value_change SEMI
    (16) expression -> . if_statement
    (17) expression -> . function
    (18) expression -> . function_call
    (19) expression -> . repeat
    (20) expression -> . for
    (21) expression -> . while
    (22) expression -> . use SEMI
    (23) expression -> . error_handling
    (24) expression -> . variable_alone SEMI
    (25) expression -> . global_variable SEMI
    (26) expression -> . empty
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (82) empty -> .
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    RMB             reduce using rule 82 (empty -> .)
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

  ! VAR             [ reduce using rule 82 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 82 (empty -> .) ]
  ! USE             [ reduce using rule 82 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 82 (empty -> .) ]
  ! IF              [ reduce using rule 82 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 82 (empty -> .) ]
  ! REPEAT          [ reduce using rule 82 (empty -> .) ]
  ! FOR             [ reduce using rule 82 (empty -> .) ]
  ! WHILE           [ reduce using rule 82 (empty -> .) ]
  ! TRY             [ reduce using rule 82 (empty -> .) ]

    expression                     shift and go to state 101
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    empty                          shift and go to state 15
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 63

    (61) use -> USE use_params .

    SEMI            reduce using rule 61 (use -> USE use_params .)


state 64

    (62) use_params -> IDENTIFIER .

    SEMI            reduce using rule 62 (use_params -> IDENTIFIER .)


state 65

    (27) error_handling -> try catch .

    VAR             reduce using rule 27 (error_handling -> try catch .)
    IDENTIFIER      reduce using rule 27 (error_handling -> try catch .)
    USE             reduce using rule 27 (error_handling -> try catch .)
    GLOBAL          reduce using rule 27 (error_handling -> try catch .)
    IF              reduce using rule 27 (error_handling -> try catch .)
    FUNCTION        reduce using rule 27 (error_handling -> try catch .)
    REPEAT          reduce using rule 27 (error_handling -> try catch .)
    FOR             reduce using rule 27 (error_handling -> try catch .)
    WHILE           reduce using rule 27 (error_handling -> try catch .)
    TRY             reduce using rule 27 (error_handling -> try catch .)
    $end            reduce using rule 27 (error_handling -> try catch .)
    RMB             reduce using rule 27 (error_handling -> try catch .)


state 66

    (29) catch -> CATCH . LSB IDENTIFIER RSB LMB expression RMB

    LSB             shift and go to state 102


state 67

    (63) global_variable -> GLOBAL IDENTIFIER .

    SEMI            reduce using rule 63 (global_variable -> GLOBAL IDENTIFIER .)


state 68

    (51) if_statement_1 -> IF LSB . condition RSB LMB expression RMB
    (55) condition -> . condition LB calculate
    (56) condition -> . condition RB calculate
    (57) condition -> . condition LB EQUAL calculate
    (58) condition -> . condition RB EQUAL calculate
    (59) condition -> . condition EQUAL calculate
    (60) condition -> . calculate
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    condition                      shift and go to state 103
    calculate                      shift and go to state 104

state 69

    (40) function_head -> FUNCTION IDENTIFIER . LSB empty RSB
    (41) function_head -> FUNCTION IDENTIFIER . LSB parameter RSB

    LSB             shift and go to state 105


state 70

    (37) repeat_head -> REPEAT LSB . calculate RSB
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    calculate                      shift and go to state 106

state 71

    (31) for_head -> FOR LSB . IDENTIFIER IN IDENTIFIER RSB

    IDENTIFIER      shift and go to state 107


state 72

    (34) while_head -> WHILE LSB . condition RSB
    (55) condition -> . condition LB calculate
    (56) condition -> . condition RB calculate
    (57) condition -> . condition LB EQUAL calculate
    (58) condition -> . condition RB EQUAL calculate
    (59) condition -> . condition EQUAL calculate
    (60) condition -> . calculate
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    condition                      shift and go to state 108
    calculate                      shift and go to state 104

state 73

    (28) try -> TRY LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . variable_declaration SEMI
    (15) expression -> . variable_value_change SEMI
    (16) expression -> . if_statement
    (17) expression -> . function
    (18) expression -> . function_call
    (19) expression -> . repeat
    (20) expression -> . for
    (21) expression -> . while
    (22) expression -> . use SEMI
    (23) expression -> . error_handling
    (24) expression -> . variable_alone SEMI
    (25) expression -> . global_variable SEMI
    (26) expression -> . empty
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (82) empty -> .
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    RMB             reduce using rule 82 (empty -> .)
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

  ! VAR             [ reduce using rule 82 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 82 (empty -> .) ]
  ! USE             [ reduce using rule 82 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 82 (empty -> .) ]
  ! IF              [ reduce using rule 82 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 82 (empty -> .) ]
  ! REPEAT          [ reduce using rule 82 (empty -> .) ]
  ! FOR             [ reduce using rule 82 (empty -> .) ]
  ! WHILE           [ reduce using rule 82 (empty -> .) ]
  ! TRY             [ reduce using rule 82 (empty -> .) ]

    expression                     shift and go to state 109
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    empty                          shift and go to state 15
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 74

    (2) expression -> expression variable_declaration SEMI .

    VAR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    USE             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    GLOBAL          reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IF              reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FUNCTION        reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    REPEAT          reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FOR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    WHILE           reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    TRY             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    $end            reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    RMB             reduce using rule 2 (expression -> expression variable_declaration SEMI .)


state 75

    (3) expression -> expression variable_value_change SEMI .

    VAR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    USE             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    GLOBAL          reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IF              reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FUNCTION        reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    REPEAT          reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FOR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    WHILE           reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    TRY             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    $end            reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    RMB             reduce using rule 3 (expression -> expression variable_value_change SEMI .)


state 76

    (6) expression -> expression function_call SEMI .

    VAR             reduce using rule 6 (expression -> expression function_call SEMI .)
    IDENTIFIER      reduce using rule 6 (expression -> expression function_call SEMI .)
    USE             reduce using rule 6 (expression -> expression function_call SEMI .)
    GLOBAL          reduce using rule 6 (expression -> expression function_call SEMI .)
    IF              reduce using rule 6 (expression -> expression function_call SEMI .)
    FUNCTION        reduce using rule 6 (expression -> expression function_call SEMI .)
    REPEAT          reduce using rule 6 (expression -> expression function_call SEMI .)
    FOR             reduce using rule 6 (expression -> expression function_call SEMI .)
    WHILE           reduce using rule 6 (expression -> expression function_call SEMI .)
    TRY             reduce using rule 6 (expression -> expression function_call SEMI .)
    $end            reduce using rule 6 (expression -> expression function_call SEMI .)
    RMB             reduce using rule 6 (expression -> expression function_call SEMI .)


state 77

    (10) expression -> expression use SEMI .

    VAR             reduce using rule 10 (expression -> expression use SEMI .)
    IDENTIFIER      reduce using rule 10 (expression -> expression use SEMI .)
    USE             reduce using rule 10 (expression -> expression use SEMI .)
    GLOBAL          reduce using rule 10 (expression -> expression use SEMI .)
    IF              reduce using rule 10 (expression -> expression use SEMI .)
    FUNCTION        reduce using rule 10 (expression -> expression use SEMI .)
    REPEAT          reduce using rule 10 (expression -> expression use SEMI .)
    FOR             reduce using rule 10 (expression -> expression use SEMI .)
    WHILE           reduce using rule 10 (expression -> expression use SEMI .)
    TRY             reduce using rule 10 (expression -> expression use SEMI .)
    $end            reduce using rule 10 (expression -> expression use SEMI .)
    RMB             reduce using rule 10 (expression -> expression use SEMI .)


state 78

    (12) expression -> expression variable_alone SEMI .

    VAR             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    IDENTIFIER      reduce using rule 12 (expression -> expression variable_alone SEMI .)
    USE             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    GLOBAL          reduce using rule 12 (expression -> expression variable_alone SEMI .)
    IF              reduce using rule 12 (expression -> expression variable_alone SEMI .)
    FUNCTION        reduce using rule 12 (expression -> expression variable_alone SEMI .)
    REPEAT          reduce using rule 12 (expression -> expression variable_alone SEMI .)
    FOR             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    WHILE           reduce using rule 12 (expression -> expression variable_alone SEMI .)
    TRY             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    $end            reduce using rule 12 (expression -> expression variable_alone SEMI .)
    RMB             reduce using rule 12 (expression -> expression variable_alone SEMI .)


state 79

    (13) expression -> expression global_variable SEMI .

    VAR             reduce using rule 13 (expression -> expression global_variable SEMI .)
    IDENTIFIER      reduce using rule 13 (expression -> expression global_variable SEMI .)
    USE             reduce using rule 13 (expression -> expression global_variable SEMI .)
    GLOBAL          reduce using rule 13 (expression -> expression global_variable SEMI .)
    IF              reduce using rule 13 (expression -> expression global_variable SEMI .)
    FUNCTION        reduce using rule 13 (expression -> expression global_variable SEMI .)
    REPEAT          reduce using rule 13 (expression -> expression global_variable SEMI .)
    FOR             reduce using rule 13 (expression -> expression global_variable SEMI .)
    WHILE           reduce using rule 13 (expression -> expression global_variable SEMI .)
    TRY             reduce using rule 13 (expression -> expression global_variable SEMI .)
    $end            reduce using rule 13 (expression -> expression global_variable SEMI .)
    RMB             reduce using rule 13 (expression -> expression global_variable SEMI .)


state 80

    (67) variable_declaration -> VAR IDENTIFIER LIST . EQUAL calculate

    EQUAL           shift and go to state 110


state 81

    (68) variable_declaration -> VAR IDENTIFIER EQUAL . calculate
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    calculate                      shift and go to state 111

state 82

    (78) calculate -> IDENTIFIER .
    (79) calculate -> IDENTIFIER . LIST

    PLUS            reduce using rule 78 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 78 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 78 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 78 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 78 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 78 (calculate -> IDENTIFIER .)
    COMMA           reduce using rule 78 (calculate -> IDENTIFIER .)
    LB              reduce using rule 78 (calculate -> IDENTIFIER .)
    RB              reduce using rule 78 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 78 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 112


state 83

    (65) variable_value_change -> IDENTIFIER EQUAL LIST .
    (80) calculate -> LIST .

  ! reduce/reduce conflict for SEMI resolved using rule 65 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    SEMI            reduce using rule 65 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    PLUS            reduce using rule 80 (calculate -> LIST .)
    MINUS           reduce using rule 80 (calculate -> LIST .)
    MUL             reduce using rule 80 (calculate -> LIST .)
    DIV             reduce using rule 80 (calculate -> LIST .)

  ! SEMI            [ reduce using rule 80 (calculate -> LIST .) ]


state 84

    (66) variable_value_change -> IDENTIFIER EQUAL calculate .
    (70) calculate -> calculate . PLUS calculate
    (71) calculate -> calculate . MINUS calculate
    (73) calculate -> calculate . MUL calculate
    (74) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 66 (variable_value_change -> IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    MUL             shift and go to state 115
    DIV             shift and go to state 116


state 85

    (72) calculate -> MINUS . calculate
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    calculate                      shift and go to state 117

state 86

    (75) calculate -> INT .

    PLUS            reduce using rule 75 (calculate -> INT .)
    MINUS           reduce using rule 75 (calculate -> INT .)
    MUL             reduce using rule 75 (calculate -> INT .)
    DIV             reduce using rule 75 (calculate -> INT .)
    SEMI            reduce using rule 75 (calculate -> INT .)
    RSB             reduce using rule 75 (calculate -> INT .)
    COMMA           reduce using rule 75 (calculate -> INT .)
    LB              reduce using rule 75 (calculate -> INT .)
    RB              reduce using rule 75 (calculate -> INT .)
    EQUAL           reduce using rule 75 (calculate -> INT .)


state 87

    (76) calculate -> FLOAT .

    PLUS            reduce using rule 76 (calculate -> FLOAT .)
    MINUS           reduce using rule 76 (calculate -> FLOAT .)
    MUL             reduce using rule 76 (calculate -> FLOAT .)
    DIV             reduce using rule 76 (calculate -> FLOAT .)
    SEMI            reduce using rule 76 (calculate -> FLOAT .)
    RSB             reduce using rule 76 (calculate -> FLOAT .)
    COMMA           reduce using rule 76 (calculate -> FLOAT .)
    LB              reduce using rule 76 (calculate -> FLOAT .)
    RB              reduce using rule 76 (calculate -> FLOAT .)
    EQUAL           reduce using rule 76 (calculate -> FLOAT .)


state 88

    (77) calculate -> STRING .

    PLUS            reduce using rule 77 (calculate -> STRING .)
    MINUS           reduce using rule 77 (calculate -> STRING .)
    MUL             reduce using rule 77 (calculate -> STRING .)
    DIV             reduce using rule 77 (calculate -> STRING .)
    SEMI            reduce using rule 77 (calculate -> STRING .)
    RSB             reduce using rule 77 (calculate -> STRING .)
    COMMA           reduce using rule 77 (calculate -> STRING .)
    LB              reduce using rule 77 (calculate -> STRING .)
    RB              reduce using rule 77 (calculate -> STRING .)
    EQUAL           reduce using rule 77 (calculate -> STRING .)


state 89

    (81) calculate -> LSB . calculate RSB
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    calculate                      shift and go to state 118

state 90

    (43) function_call -> IDENTIFIER LSB parameter . RSB
    (44) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 119
    COMMA           shift and go to state 120


state 91

    (45) parameter -> calculate .
    (70) calculate -> calculate . PLUS calculate
    (71) calculate -> calculate . MINUS calculate
    (73) calculate -> calculate . MUL calculate
    (74) calculate -> calculate . DIV calculate

    RSB             reduce using rule 45 (parameter -> calculate .)
    COMMA           reduce using rule 45 (parameter -> calculate .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    MUL             shift and go to state 115
    DIV             shift and go to state 116


state 92

    (46) parameter -> empty .

    RSB             reduce using rule 46 (parameter -> empty .)
    COMMA           reduce using rule 46 (parameter -> empty .)


state 93

    (80) calculate -> LIST .

    PLUS            reduce using rule 80 (calculate -> LIST .)
    MINUS           reduce using rule 80 (calculate -> LIST .)
    MUL             reduce using rule 80 (calculate -> LIST .)
    DIV             reduce using rule 80 (calculate -> LIST .)
    RSB             reduce using rule 80 (calculate -> LIST .)
    COMMA           reduce using rule 80 (calculate -> LIST .)
    LB              reduce using rule 80 (calculate -> LIST .)
    RB              reduce using rule 80 (calculate -> LIST .)
    EQUAL           reduce using rule 80 (calculate -> LIST .)
    SEMI            reduce using rule 80 (calculate -> LIST .)


state 94

    (47) if_statement -> if_statement_1 if_statement_2 if_statement_3 .

    VAR             reduce using rule 47 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IDENTIFIER      reduce using rule 47 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    USE             reduce using rule 47 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    GLOBAL          reduce using rule 47 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IF              reduce using rule 47 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FUNCTION        reduce using rule 47 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    REPEAT          reduce using rule 47 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FOR             reduce using rule 47 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    WHILE           reduce using rule 47 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    TRY             reduce using rule 47 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    $end            reduce using rule 47 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    RMB             reduce using rule 47 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)


state 95

    (53) if_statement_2 -> if_statement_2 ELSE . IF LSB condition RSB LMB expression RMB
    (54) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 121
    LMB             shift and go to state 97


state 96

    (52) if_statement_2 -> ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 122


state 97

    (54) if_statement_3 -> ELSE LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . variable_declaration SEMI
    (15) expression -> . variable_value_change SEMI
    (16) expression -> . if_statement
    (17) expression -> . function
    (18) expression -> . function_call
    (19) expression -> . repeat
    (20) expression -> . for
    (21) expression -> . while
    (22) expression -> . use SEMI
    (23) expression -> . error_handling
    (24) expression -> . variable_alone SEMI
    (25) expression -> . global_variable SEMI
    (26) expression -> . empty
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (82) empty -> .
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    RMB             reduce using rule 82 (empty -> .)
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

  ! VAR             [ reduce using rule 82 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 82 (empty -> .) ]
  ! USE             [ reduce using rule 82 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 82 (empty -> .) ]
  ! IF              [ reduce using rule 82 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 82 (empty -> .) ]
  ! REPEAT          [ reduce using rule 82 (empty -> .) ]
  ! FOR             [ reduce using rule 82 (empty -> .) ]
  ! WHILE           [ reduce using rule 82 (empty -> .) ]
  ! TRY             [ reduce using rule 82 (empty -> .) ]

    expression                     shift and go to state 123
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    empty                          shift and go to state 15
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 98

    (42) function_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

    RMB             shift and go to state 124
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

    variable_declaration           shift and go to state 32
    variable_value_change          shift and go to state 33
    if_statement                   shift and go to state 34
    function                       shift and go to state 35
    function_call                  shift and go to state 36
    repeat                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39
    use                            shift and go to state 40
    error_handling                 shift and go to state 41
    variable_alone                 shift and go to state 42
    global_variable                shift and go to state 43
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 99

    (38) repeat_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

    RMB             shift and go to state 125
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

    variable_declaration           shift and go to state 32
    variable_value_change          shift and go to state 33
    if_statement                   shift and go to state 34
    function                       shift and go to state 35
    function_call                  shift and go to state 36
    repeat                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39
    use                            shift and go to state 40
    error_handling                 shift and go to state 41
    variable_alone                 shift and go to state 42
    global_variable                shift and go to state 43
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 100

    (32) for_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

    RMB             shift and go to state 126
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

    variable_declaration           shift and go to state 32
    variable_value_change          shift and go to state 33
    if_statement                   shift and go to state 34
    function                       shift and go to state 35
    function_call                  shift and go to state 36
    repeat                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39
    use                            shift and go to state 40
    error_handling                 shift and go to state 41
    variable_alone                 shift and go to state 42
    global_variable                shift and go to state 43
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 101

    (35) while_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

    RMB             shift and go to state 127
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

    variable_declaration           shift and go to state 32
    variable_value_change          shift and go to state 33
    if_statement                   shift and go to state 34
    function                       shift and go to state 35
    function_call                  shift and go to state 36
    repeat                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39
    use                            shift and go to state 40
    error_handling                 shift and go to state 41
    variable_alone                 shift and go to state 42
    global_variable                shift and go to state 43
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 102

    (29) catch -> CATCH LSB . IDENTIFIER RSB LMB expression RMB

    IDENTIFIER      shift and go to state 128


state 103

    (51) if_statement_1 -> IF LSB condition . RSB LMB expression RMB
    (55) condition -> condition . LB calculate
    (56) condition -> condition . RB calculate
    (57) condition -> condition . LB EQUAL calculate
    (58) condition -> condition . RB EQUAL calculate
    (59) condition -> condition . EQUAL calculate

    RSB             shift and go to state 129
    LB              shift and go to state 130
    RB              shift and go to state 131
    EQUAL           shift and go to state 132


state 104

    (60) condition -> calculate .
    (70) calculate -> calculate . PLUS calculate
    (71) calculate -> calculate . MINUS calculate
    (73) calculate -> calculate . MUL calculate
    (74) calculate -> calculate . DIV calculate

    RSB             reduce using rule 60 (condition -> calculate .)
    LB              reduce using rule 60 (condition -> calculate .)
    RB              reduce using rule 60 (condition -> calculate .)
    EQUAL           reduce using rule 60 (condition -> calculate .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    MUL             shift and go to state 115
    DIV             shift and go to state 116


state 105

    (40) function_head -> FUNCTION IDENTIFIER LSB . empty RSB
    (41) function_head -> FUNCTION IDENTIFIER LSB . parameter RSB
    (82) empty -> .
    (44) parameter -> . parameter COMMA calculate
    (45) parameter -> . calculate
    (46) parameter -> . empty
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    RSB             reduce using rule 82 (empty -> .)
    COMMA           reduce using rule 82 (empty -> .)
    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    empty                          shift and go to state 133
    parameter                      shift and go to state 134
    calculate                      shift and go to state 91

state 106

    (37) repeat_head -> REPEAT LSB calculate . RSB
    (70) calculate -> calculate . PLUS calculate
    (71) calculate -> calculate . MINUS calculate
    (73) calculate -> calculate . MUL calculate
    (74) calculate -> calculate . DIV calculate

    RSB             shift and go to state 135
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    MUL             shift and go to state 115
    DIV             shift and go to state 116


state 107

    (31) for_head -> FOR LSB IDENTIFIER . IN IDENTIFIER RSB

    IN              shift and go to state 136


state 108

    (34) while_head -> WHILE LSB condition . RSB
    (55) condition -> condition . LB calculate
    (56) condition -> condition . RB calculate
    (57) condition -> condition . LB EQUAL calculate
    (58) condition -> condition . RB EQUAL calculate
    (59) condition -> condition . EQUAL calculate

    RSB             shift and go to state 137
    LB              shift and go to state 130
    RB              shift and go to state 131
    EQUAL           shift and go to state 132


state 109

    (28) try -> TRY LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

    RMB             shift and go to state 138
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

    variable_declaration           shift and go to state 32
    variable_value_change          shift and go to state 33
    if_statement                   shift and go to state 34
    function                       shift and go to state 35
    function_call                  shift and go to state 36
    repeat                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39
    use                            shift and go to state 40
    error_handling                 shift and go to state 41
    variable_alone                 shift and go to state 42
    global_variable                shift and go to state 43
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 110

    (67) variable_declaration -> VAR IDENTIFIER LIST EQUAL . calculate
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    calculate                      shift and go to state 139

state 111

    (68) variable_declaration -> VAR IDENTIFIER EQUAL calculate .
    (70) calculate -> calculate . PLUS calculate
    (71) calculate -> calculate . MINUS calculate
    (73) calculate -> calculate . MUL calculate
    (74) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 68 (variable_declaration -> VAR IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    MUL             shift and go to state 115
    DIV             shift and go to state 116


state 112

    (79) calculate -> IDENTIFIER LIST .

    PLUS            reduce using rule 79 (calculate -> IDENTIFIER LIST .)
    MINUS           reduce using rule 79 (calculate -> IDENTIFIER LIST .)
    MUL             reduce using rule 79 (calculate -> IDENTIFIER LIST .)
    DIV             reduce using rule 79 (calculate -> IDENTIFIER LIST .)
    SEMI            reduce using rule 79 (calculate -> IDENTIFIER LIST .)
    RSB             reduce using rule 79 (calculate -> IDENTIFIER LIST .)
    COMMA           reduce using rule 79 (calculate -> IDENTIFIER LIST .)
    LB              reduce using rule 79 (calculate -> IDENTIFIER LIST .)
    RB              reduce using rule 79 (calculate -> IDENTIFIER LIST .)
    EQUAL           reduce using rule 79 (calculate -> IDENTIFIER LIST .)


state 113

    (70) calculate -> calculate PLUS . calculate
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    calculate                      shift and go to state 140

state 114

    (71) calculate -> calculate MINUS . calculate
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    calculate                      shift and go to state 141

state 115

    (73) calculate -> calculate MUL . calculate
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    calculate                      shift and go to state 142

state 116

    (74) calculate -> calculate DIV . calculate
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    calculate                      shift and go to state 143

state 117

    (72) calculate -> MINUS calculate .
    (70) calculate -> calculate . PLUS calculate
    (71) calculate -> calculate . MINUS calculate
    (73) calculate -> calculate . MUL calculate
    (74) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 72 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 72 (calculate -> MINUS calculate .)
    MUL             reduce using rule 72 (calculate -> MINUS calculate .)
    DIV             reduce using rule 72 (calculate -> MINUS calculate .)
    SEMI            reduce using rule 72 (calculate -> MINUS calculate .)
    RSB             reduce using rule 72 (calculate -> MINUS calculate .)
    COMMA           reduce using rule 72 (calculate -> MINUS calculate .)
    LB              reduce using rule 72 (calculate -> MINUS calculate .)
    RB              reduce using rule 72 (calculate -> MINUS calculate .)
    EQUAL           reduce using rule 72 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 113 ]
  ! MINUS           [ shift and go to state 114 ]
  ! MUL             [ shift and go to state 115 ]
  ! DIV             [ shift and go to state 116 ]


state 118

    (81) calculate -> LSB calculate . RSB
    (70) calculate -> calculate . PLUS calculate
    (71) calculate -> calculate . MINUS calculate
    (73) calculate -> calculate . MUL calculate
    (74) calculate -> calculate . DIV calculate

    RSB             shift and go to state 144
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    MUL             shift and go to state 115
    DIV             shift and go to state 116


state 119

    (43) function_call -> IDENTIFIER LSB parameter RSB .

    VAR             reduce using rule 43 (function_call -> IDENTIFIER LSB parameter RSB .)
    IDENTIFIER      reduce using rule 43 (function_call -> IDENTIFIER LSB parameter RSB .)
    USE             reduce using rule 43 (function_call -> IDENTIFIER LSB parameter RSB .)
    GLOBAL          reduce using rule 43 (function_call -> IDENTIFIER LSB parameter RSB .)
    IF              reduce using rule 43 (function_call -> IDENTIFIER LSB parameter RSB .)
    FUNCTION        reduce using rule 43 (function_call -> IDENTIFIER LSB parameter RSB .)
    REPEAT          reduce using rule 43 (function_call -> IDENTIFIER LSB parameter RSB .)
    FOR             reduce using rule 43 (function_call -> IDENTIFIER LSB parameter RSB .)
    WHILE           reduce using rule 43 (function_call -> IDENTIFIER LSB parameter RSB .)
    TRY             reduce using rule 43 (function_call -> IDENTIFIER LSB parameter RSB .)
    $end            reduce using rule 43 (function_call -> IDENTIFIER LSB parameter RSB .)
    SEMI            reduce using rule 43 (function_call -> IDENTIFIER LSB parameter RSB .)
    RMB             reduce using rule 43 (function_call -> IDENTIFIER LSB parameter RSB .)


state 120

    (44) parameter -> parameter COMMA . calculate
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    calculate                      shift and go to state 145

state 121

    (53) if_statement_2 -> if_statement_2 ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 146


state 122

    (52) if_statement_2 -> ELSE IF LSB . condition RSB LMB expression RMB
    (55) condition -> . condition LB calculate
    (56) condition -> . condition RB calculate
    (57) condition -> . condition LB EQUAL calculate
    (58) condition -> . condition RB EQUAL calculate
    (59) condition -> . condition EQUAL calculate
    (60) condition -> . calculate
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    condition                      shift and go to state 147
    calculate                      shift and go to state 104

state 123

    (54) if_statement_3 -> ELSE LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

    RMB             shift and go to state 148
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

    variable_declaration           shift and go to state 32
    variable_value_change          shift and go to state 33
    if_statement                   shift and go to state 34
    function                       shift and go to state 35
    function_call                  shift and go to state 36
    repeat                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39
    use                            shift and go to state 40
    error_handling                 shift and go to state 41
    variable_alone                 shift and go to state 42
    global_variable                shift and go to state 43
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 124

    (42) function_body -> LMB expression RMB .

    VAR             reduce using rule 42 (function_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 42 (function_body -> LMB expression RMB .)
    USE             reduce using rule 42 (function_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 42 (function_body -> LMB expression RMB .)
    IF              reduce using rule 42 (function_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 42 (function_body -> LMB expression RMB .)
    REPEAT          reduce using rule 42 (function_body -> LMB expression RMB .)
    FOR             reduce using rule 42 (function_body -> LMB expression RMB .)
    WHILE           reduce using rule 42 (function_body -> LMB expression RMB .)
    TRY             reduce using rule 42 (function_body -> LMB expression RMB .)
    $end            reduce using rule 42 (function_body -> LMB expression RMB .)
    RMB             reduce using rule 42 (function_body -> LMB expression RMB .)


state 125

    (38) repeat_body -> LMB expression RMB .

    VAR             reduce using rule 38 (repeat_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 38 (repeat_body -> LMB expression RMB .)
    USE             reduce using rule 38 (repeat_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 38 (repeat_body -> LMB expression RMB .)
    IF              reduce using rule 38 (repeat_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 38 (repeat_body -> LMB expression RMB .)
    REPEAT          reduce using rule 38 (repeat_body -> LMB expression RMB .)
    FOR             reduce using rule 38 (repeat_body -> LMB expression RMB .)
    WHILE           reduce using rule 38 (repeat_body -> LMB expression RMB .)
    TRY             reduce using rule 38 (repeat_body -> LMB expression RMB .)
    $end            reduce using rule 38 (repeat_body -> LMB expression RMB .)
    RMB             reduce using rule 38 (repeat_body -> LMB expression RMB .)


state 126

    (32) for_body -> LMB expression RMB .

    VAR             reduce using rule 32 (for_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 32 (for_body -> LMB expression RMB .)
    USE             reduce using rule 32 (for_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 32 (for_body -> LMB expression RMB .)
    IF              reduce using rule 32 (for_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 32 (for_body -> LMB expression RMB .)
    REPEAT          reduce using rule 32 (for_body -> LMB expression RMB .)
    FOR             reduce using rule 32 (for_body -> LMB expression RMB .)
    WHILE           reduce using rule 32 (for_body -> LMB expression RMB .)
    TRY             reduce using rule 32 (for_body -> LMB expression RMB .)
    $end            reduce using rule 32 (for_body -> LMB expression RMB .)
    RMB             reduce using rule 32 (for_body -> LMB expression RMB .)


state 127

    (35) while_body -> LMB expression RMB .

    VAR             reduce using rule 35 (while_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 35 (while_body -> LMB expression RMB .)
    USE             reduce using rule 35 (while_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 35 (while_body -> LMB expression RMB .)
    IF              reduce using rule 35 (while_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 35 (while_body -> LMB expression RMB .)
    REPEAT          reduce using rule 35 (while_body -> LMB expression RMB .)
    FOR             reduce using rule 35 (while_body -> LMB expression RMB .)
    WHILE           reduce using rule 35 (while_body -> LMB expression RMB .)
    TRY             reduce using rule 35 (while_body -> LMB expression RMB .)
    $end            reduce using rule 35 (while_body -> LMB expression RMB .)
    RMB             reduce using rule 35 (while_body -> LMB expression RMB .)


state 128

    (29) catch -> CATCH LSB IDENTIFIER . RSB LMB expression RMB

    RSB             shift and go to state 149


state 129

    (51) if_statement_1 -> IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 150


state 130

    (55) condition -> condition LB . calculate
    (57) condition -> condition LB . EQUAL calculate
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 152
    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    calculate                      shift and go to state 151

state 131

    (56) condition -> condition RB . calculate
    (58) condition -> condition RB . EQUAL calculate
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 154
    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    calculate                      shift and go to state 153

state 132

    (59) condition -> condition EQUAL . calculate
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    calculate                      shift and go to state 155

state 133

    (40) function_head -> FUNCTION IDENTIFIER LSB empty . RSB
    (46) parameter -> empty .

  ! shift/reduce conflict for RSB resolved as shift
    RSB             shift and go to state 156
    COMMA           reduce using rule 46 (parameter -> empty .)

  ! RSB             [ reduce using rule 46 (parameter -> empty .) ]


state 134

    (41) function_head -> FUNCTION IDENTIFIER LSB parameter . RSB
    (44) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 157
    COMMA           shift and go to state 120


state 135

    (37) repeat_head -> REPEAT LSB calculate RSB .

    LMB             reduce using rule 37 (repeat_head -> REPEAT LSB calculate RSB .)


state 136

    (31) for_head -> FOR LSB IDENTIFIER IN . IDENTIFIER RSB

    IDENTIFIER      shift and go to state 158


state 137

    (34) while_head -> WHILE LSB condition RSB .

    LMB             reduce using rule 34 (while_head -> WHILE LSB condition RSB .)


state 138

    (28) try -> TRY LMB expression RMB .

    CATCH           reduce using rule 28 (try -> TRY LMB expression RMB .)


state 139

    (67) variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .
    (70) calculate -> calculate . PLUS calculate
    (71) calculate -> calculate . MINUS calculate
    (73) calculate -> calculate . MUL calculate
    (74) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 67 (variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    MUL             shift and go to state 115
    DIV             shift and go to state 116


state 140

    (70) calculate -> calculate PLUS calculate .
    (70) calculate -> calculate . PLUS calculate
    (71) calculate -> calculate . MINUS calculate
    (73) calculate -> calculate . MUL calculate
    (74) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 70 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 70 (calculate -> calculate PLUS calculate .)
    SEMI            reduce using rule 70 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 70 (calculate -> calculate PLUS calculate .)
    COMMA           reduce using rule 70 (calculate -> calculate PLUS calculate .)
    LB              reduce using rule 70 (calculate -> calculate PLUS calculate .)
    RB              reduce using rule 70 (calculate -> calculate PLUS calculate .)
    EQUAL           reduce using rule 70 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 115
    DIV             shift and go to state 116

  ! MUL             [ reduce using rule 70 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 70 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 113 ]
  ! MINUS           [ shift and go to state 114 ]


state 141

    (71) calculate -> calculate MINUS calculate .
    (70) calculate -> calculate . PLUS calculate
    (71) calculate -> calculate . MINUS calculate
    (73) calculate -> calculate . MUL calculate
    (74) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 71 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 71 (calculate -> calculate MINUS calculate .)
    SEMI            reduce using rule 71 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 71 (calculate -> calculate MINUS calculate .)
    COMMA           reduce using rule 71 (calculate -> calculate MINUS calculate .)
    LB              reduce using rule 71 (calculate -> calculate MINUS calculate .)
    RB              reduce using rule 71 (calculate -> calculate MINUS calculate .)
    EQUAL           reduce using rule 71 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 115
    DIV             shift and go to state 116

  ! MUL             [ reduce using rule 71 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 71 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 113 ]
  ! MINUS           [ shift and go to state 114 ]


state 142

    (73) calculate -> calculate MUL calculate .
    (70) calculate -> calculate . PLUS calculate
    (71) calculate -> calculate . MINUS calculate
    (73) calculate -> calculate . MUL calculate
    (74) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 73 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 73 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 73 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 73 (calculate -> calculate MUL calculate .)
    SEMI            reduce using rule 73 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 73 (calculate -> calculate MUL calculate .)
    COMMA           reduce using rule 73 (calculate -> calculate MUL calculate .)
    LB              reduce using rule 73 (calculate -> calculate MUL calculate .)
    RB              reduce using rule 73 (calculate -> calculate MUL calculate .)
    EQUAL           reduce using rule 73 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 113 ]
  ! MINUS           [ shift and go to state 114 ]
  ! MUL             [ shift and go to state 115 ]
  ! DIV             [ shift and go to state 116 ]


state 143

    (74) calculate -> calculate DIV calculate .
    (70) calculate -> calculate . PLUS calculate
    (71) calculate -> calculate . MINUS calculate
    (73) calculate -> calculate . MUL calculate
    (74) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 74 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 74 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 74 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 74 (calculate -> calculate DIV calculate .)
    SEMI            reduce using rule 74 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 74 (calculate -> calculate DIV calculate .)
    COMMA           reduce using rule 74 (calculate -> calculate DIV calculate .)
    LB              reduce using rule 74 (calculate -> calculate DIV calculate .)
    RB              reduce using rule 74 (calculate -> calculate DIV calculate .)
    EQUAL           reduce using rule 74 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 113 ]
  ! MINUS           [ shift and go to state 114 ]
  ! MUL             [ shift and go to state 115 ]
  ! DIV             [ shift and go to state 116 ]


state 144

    (81) calculate -> LSB calculate RSB .

    PLUS            reduce using rule 81 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 81 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 81 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 81 (calculate -> LSB calculate RSB .)
    SEMI            reduce using rule 81 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 81 (calculate -> LSB calculate RSB .)
    COMMA           reduce using rule 81 (calculate -> LSB calculate RSB .)
    LB              reduce using rule 81 (calculate -> LSB calculate RSB .)
    RB              reduce using rule 81 (calculate -> LSB calculate RSB .)
    EQUAL           reduce using rule 81 (calculate -> LSB calculate RSB .)


state 145

    (44) parameter -> parameter COMMA calculate .
    (70) calculate -> calculate . PLUS calculate
    (71) calculate -> calculate . MINUS calculate
    (73) calculate -> calculate . MUL calculate
    (74) calculate -> calculate . DIV calculate

    RSB             reduce using rule 44 (parameter -> parameter COMMA calculate .)
    COMMA           reduce using rule 44 (parameter -> parameter COMMA calculate .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    MUL             shift and go to state 115
    DIV             shift and go to state 116


state 146

    (53) if_statement_2 -> if_statement_2 ELSE IF LSB . condition RSB LMB expression RMB
    (55) condition -> . condition LB calculate
    (56) condition -> . condition RB calculate
    (57) condition -> . condition LB EQUAL calculate
    (58) condition -> . condition RB EQUAL calculate
    (59) condition -> . condition EQUAL calculate
    (60) condition -> . calculate
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    condition                      shift and go to state 159
    calculate                      shift and go to state 104

state 147

    (52) if_statement_2 -> ELSE IF LSB condition . RSB LMB expression RMB
    (55) condition -> condition . LB calculate
    (56) condition -> condition . RB calculate
    (57) condition -> condition . LB EQUAL calculate
    (58) condition -> condition . RB EQUAL calculate
    (59) condition -> condition . EQUAL calculate

    RSB             shift and go to state 160
    LB              shift and go to state 130
    RB              shift and go to state 131
    EQUAL           shift and go to state 132


state 148

    (54) if_statement_3 -> ELSE LMB expression RMB .

    VAR             reduce using rule 54 (if_statement_3 -> ELSE LMB expression RMB .)
    IDENTIFIER      reduce using rule 54 (if_statement_3 -> ELSE LMB expression RMB .)
    USE             reduce using rule 54 (if_statement_3 -> ELSE LMB expression RMB .)
    GLOBAL          reduce using rule 54 (if_statement_3 -> ELSE LMB expression RMB .)
    IF              reduce using rule 54 (if_statement_3 -> ELSE LMB expression RMB .)
    FUNCTION        reduce using rule 54 (if_statement_3 -> ELSE LMB expression RMB .)
    REPEAT          reduce using rule 54 (if_statement_3 -> ELSE LMB expression RMB .)
    FOR             reduce using rule 54 (if_statement_3 -> ELSE LMB expression RMB .)
    WHILE           reduce using rule 54 (if_statement_3 -> ELSE LMB expression RMB .)
    TRY             reduce using rule 54 (if_statement_3 -> ELSE LMB expression RMB .)
    $end            reduce using rule 54 (if_statement_3 -> ELSE LMB expression RMB .)
    RMB             reduce using rule 54 (if_statement_3 -> ELSE LMB expression RMB .)


state 149

    (29) catch -> CATCH LSB IDENTIFIER RSB . LMB expression RMB

    LMB             shift and go to state 161


state 150

    (51) if_statement_1 -> IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . variable_declaration SEMI
    (15) expression -> . variable_value_change SEMI
    (16) expression -> . if_statement
    (17) expression -> . function
    (18) expression -> . function_call
    (19) expression -> . repeat
    (20) expression -> . for
    (21) expression -> . while
    (22) expression -> . use SEMI
    (23) expression -> . error_handling
    (24) expression -> . variable_alone SEMI
    (25) expression -> . global_variable SEMI
    (26) expression -> . empty
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (82) empty -> .
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    RMB             reduce using rule 82 (empty -> .)
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

  ! VAR             [ reduce using rule 82 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 82 (empty -> .) ]
  ! USE             [ reduce using rule 82 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 82 (empty -> .) ]
  ! IF              [ reduce using rule 82 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 82 (empty -> .) ]
  ! REPEAT          [ reduce using rule 82 (empty -> .) ]
  ! FOR             [ reduce using rule 82 (empty -> .) ]
  ! WHILE           [ reduce using rule 82 (empty -> .) ]
  ! TRY             [ reduce using rule 82 (empty -> .) ]

    expression                     shift and go to state 162
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    empty                          shift and go to state 15
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 151

    (55) condition -> condition LB calculate .
    (70) calculate -> calculate . PLUS calculate
    (71) calculate -> calculate . MINUS calculate
    (73) calculate -> calculate . MUL calculate
    (74) calculate -> calculate . DIV calculate

    RSB             reduce using rule 55 (condition -> condition LB calculate .)
    LB              reduce using rule 55 (condition -> condition LB calculate .)
    RB              reduce using rule 55 (condition -> condition LB calculate .)
    EQUAL           reduce using rule 55 (condition -> condition LB calculate .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    MUL             shift and go to state 115
    DIV             shift and go to state 116


state 152

    (57) condition -> condition LB EQUAL . calculate
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    calculate                      shift and go to state 163

state 153

    (56) condition -> condition RB calculate .
    (70) calculate -> calculate . PLUS calculate
    (71) calculate -> calculate . MINUS calculate
    (73) calculate -> calculate . MUL calculate
    (74) calculate -> calculate . DIV calculate

    RSB             reduce using rule 56 (condition -> condition RB calculate .)
    LB              reduce using rule 56 (condition -> condition RB calculate .)
    RB              reduce using rule 56 (condition -> condition RB calculate .)
    EQUAL           reduce using rule 56 (condition -> condition RB calculate .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    MUL             shift and go to state 115
    DIV             shift and go to state 116


state 154

    (58) condition -> condition RB EQUAL . calculate
    (70) calculate -> . calculate PLUS calculate
    (71) calculate -> . calculate MINUS calculate
    (72) calculate -> . MINUS calculate
    (73) calculate -> . calculate MUL calculate
    (74) calculate -> . calculate DIV calculate
    (75) calculate -> . INT
    (76) calculate -> . FLOAT
    (77) calculate -> . STRING
    (78) calculate -> . IDENTIFIER
    (79) calculate -> . IDENTIFIER LIST
    (80) calculate -> . LIST
    (81) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    STRING          shift and go to state 88
    IDENTIFIER      shift and go to state 82
    LIST            shift and go to state 93
    LSB             shift and go to state 89

    calculate                      shift and go to state 164

state 155

    (59) condition -> condition EQUAL calculate .
    (70) calculate -> calculate . PLUS calculate
    (71) calculate -> calculate . MINUS calculate
    (73) calculate -> calculate . MUL calculate
    (74) calculate -> calculate . DIV calculate

    RSB             reduce using rule 59 (condition -> condition EQUAL calculate .)
    LB              reduce using rule 59 (condition -> condition EQUAL calculate .)
    RB              reduce using rule 59 (condition -> condition EQUAL calculate .)
    EQUAL           reduce using rule 59 (condition -> condition EQUAL calculate .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    MUL             shift and go to state 115
    DIV             shift and go to state 116


state 156

    (40) function_head -> FUNCTION IDENTIFIER LSB empty RSB .

    LMB             reduce using rule 40 (function_head -> FUNCTION IDENTIFIER LSB empty RSB .)


state 157

    (41) function_head -> FUNCTION IDENTIFIER LSB parameter RSB .

    LMB             reduce using rule 41 (function_head -> FUNCTION IDENTIFIER LSB parameter RSB .)


state 158

    (31) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER . RSB

    RSB             shift and go to state 165


state 159

    (53) if_statement_2 -> if_statement_2 ELSE IF LSB condition . RSB LMB expression RMB
    (55) condition -> condition . LB calculate
    (56) condition -> condition . RB calculate
    (57) condition -> condition . LB EQUAL calculate
    (58) condition -> condition . RB EQUAL calculate
    (59) condition -> condition . EQUAL calculate

    RSB             shift and go to state 166
    LB              shift and go to state 130
    RB              shift and go to state 131
    EQUAL           shift and go to state 132


state 160

    (52) if_statement_2 -> ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 167


state 161

    (29) catch -> CATCH LSB IDENTIFIER RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . variable_declaration SEMI
    (15) expression -> . variable_value_change SEMI
    (16) expression -> . if_statement
    (17) expression -> . function
    (18) expression -> . function_call
    (19) expression -> . repeat
    (20) expression -> . for
    (21) expression -> . while
    (22) expression -> . use SEMI
    (23) expression -> . error_handling
    (24) expression -> . variable_alone SEMI
    (25) expression -> . global_variable SEMI
    (26) expression -> . empty
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (82) empty -> .
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    RMB             reduce using rule 82 (empty -> .)
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

  ! VAR             [ reduce using rule 82 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 82 (empty -> .) ]
  ! USE             [ reduce using rule 82 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 82 (empty -> .) ]
  ! IF              [ reduce using rule 82 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 82 (empty -> .) ]
  ! REPEAT          [ reduce using rule 82 (empty -> .) ]
  ! FOR             [ reduce using rule 82 (empty -> .) ]
  ! WHILE           [ reduce using rule 82 (empty -> .) ]
  ! TRY             [ reduce using rule 82 (empty -> .) ]

    expression                     shift and go to state 168
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    empty                          shift and go to state 15
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 162

    (51) if_statement_1 -> IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

    RMB             shift and go to state 169
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

    variable_declaration           shift and go to state 32
    variable_value_change          shift and go to state 33
    if_statement                   shift and go to state 34
    function                       shift and go to state 35
    function_call                  shift and go to state 36
    repeat                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39
    use                            shift and go to state 40
    error_handling                 shift and go to state 41
    variable_alone                 shift and go to state 42
    global_variable                shift and go to state 43
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 163

    (57) condition -> condition LB EQUAL calculate .
    (70) calculate -> calculate . PLUS calculate
    (71) calculate -> calculate . MINUS calculate
    (73) calculate -> calculate . MUL calculate
    (74) calculate -> calculate . DIV calculate

    RSB             reduce using rule 57 (condition -> condition LB EQUAL calculate .)
    LB              reduce using rule 57 (condition -> condition LB EQUAL calculate .)
    RB              reduce using rule 57 (condition -> condition LB EQUAL calculate .)
    EQUAL           reduce using rule 57 (condition -> condition LB EQUAL calculate .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    MUL             shift and go to state 115
    DIV             shift and go to state 116


state 164

    (58) condition -> condition RB EQUAL calculate .
    (70) calculate -> calculate . PLUS calculate
    (71) calculate -> calculate . MINUS calculate
    (73) calculate -> calculate . MUL calculate
    (74) calculate -> calculate . DIV calculate

    RSB             reduce using rule 58 (condition -> condition RB EQUAL calculate .)
    LB              reduce using rule 58 (condition -> condition RB EQUAL calculate .)
    RB              reduce using rule 58 (condition -> condition RB EQUAL calculate .)
    EQUAL           reduce using rule 58 (condition -> condition RB EQUAL calculate .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114
    MUL             shift and go to state 115
    DIV             shift and go to state 116


state 165

    (31) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .

    LMB             reduce using rule 31 (for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .)


state 166

    (53) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 170


state 167

    (52) if_statement_2 -> ELSE IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . variable_declaration SEMI
    (15) expression -> . variable_value_change SEMI
    (16) expression -> . if_statement
    (17) expression -> . function
    (18) expression -> . function_call
    (19) expression -> . repeat
    (20) expression -> . for
    (21) expression -> . while
    (22) expression -> . use SEMI
    (23) expression -> . error_handling
    (24) expression -> . variable_alone SEMI
    (25) expression -> . global_variable SEMI
    (26) expression -> . empty
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (82) empty -> .
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    RMB             reduce using rule 82 (empty -> .)
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

  ! VAR             [ reduce using rule 82 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 82 (empty -> .) ]
  ! USE             [ reduce using rule 82 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 82 (empty -> .) ]
  ! IF              [ reduce using rule 82 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 82 (empty -> .) ]
  ! REPEAT          [ reduce using rule 82 (empty -> .) ]
  ! FOR             [ reduce using rule 82 (empty -> .) ]
  ! WHILE           [ reduce using rule 82 (empty -> .) ]
  ! TRY             [ reduce using rule 82 (empty -> .) ]

    expression                     shift and go to state 171
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    empty                          shift and go to state 15
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 168

    (29) catch -> CATCH LSB IDENTIFIER RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

    RMB             shift and go to state 172
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

    variable_declaration           shift and go to state 32
    variable_value_change          shift and go to state 33
    if_statement                   shift and go to state 34
    function                       shift and go to state 35
    function_call                  shift and go to state 36
    repeat                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39
    use                            shift and go to state 40
    error_handling                 shift and go to state 41
    variable_alone                 shift and go to state 42
    global_variable                shift and go to state 43
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 169

    (51) if_statement_1 -> IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 51 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 51 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 51 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 51 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 51 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 51 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 51 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 51 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 51 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 51 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 51 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 51 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 51 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)


state 170

    (53) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . variable_declaration SEMI
    (15) expression -> . variable_value_change SEMI
    (16) expression -> . if_statement
    (17) expression -> . function
    (18) expression -> . function_call
    (19) expression -> . repeat
    (20) expression -> . for
    (21) expression -> . while
    (22) expression -> . use SEMI
    (23) expression -> . error_handling
    (24) expression -> . variable_alone SEMI
    (25) expression -> . global_variable SEMI
    (26) expression -> . empty
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (82) empty -> .
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    RMB             reduce using rule 82 (empty -> .)
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

  ! VAR             [ reduce using rule 82 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 82 (empty -> .) ]
  ! USE             [ reduce using rule 82 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 82 (empty -> .) ]
  ! IF              [ reduce using rule 82 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 82 (empty -> .) ]
  ! REPEAT          [ reduce using rule 82 (empty -> .) ]
  ! FOR             [ reduce using rule 82 (empty -> .) ]
  ! WHILE           [ reduce using rule 82 (empty -> .) ]
  ! TRY             [ reduce using rule 82 (empty -> .) ]

    expression                     shift and go to state 173
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    empty                          shift and go to state 15
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 171

    (52) if_statement_2 -> ELSE IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

    RMB             shift and go to state 174
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

    variable_declaration           shift and go to state 32
    variable_value_change          shift and go to state 33
    if_statement                   shift and go to state 34
    function                       shift and go to state 35
    function_call                  shift and go to state 36
    repeat                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39
    use                            shift and go to state 40
    error_handling                 shift and go to state 41
    variable_alone                 shift and go to state 42
    global_variable                shift and go to state 43
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 172

    (29) catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .

    VAR             reduce using rule 29 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 29 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    USE             reduce using rule 29 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    GLOBAL          reduce using rule 29 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IF              reduce using rule 29 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FUNCTION        reduce using rule 29 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    REPEAT          reduce using rule 29 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FOR             reduce using rule 29 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    WHILE           reduce using rule 29 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    TRY             reduce using rule 29 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    $end            reduce using rule 29 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    RMB             reduce using rule 29 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)


state 173

    (53) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (67) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (68) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (69) variable_declaration -> . VAR IDENTIFIER
    (65) variable_value_change -> . IDENTIFIER EQUAL LIST
    (66) variable_value_change -> . IDENTIFIER EQUAL calculate
    (47) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (48) if_statement -> . if_statement_1 if_statement_2
    (49) if_statement -> . if_statement_1 if_statement_3
    (50) if_statement -> . if_statement_1
    (39) function -> . function_head function_body
    (43) function_call -> . IDENTIFIER LSB parameter RSB
    (36) repeat -> . repeat_head repeat_body
    (30) for -> . for_head for_body
    (33) while -> . while_head while_body
    (61) use -> . USE use_params
    (27) error_handling -> . try catch
    (64) variable_alone -> . IDENTIFIER
    (63) global_variable -> . GLOBAL IDENTIFIER
    (51) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (40) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (41) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (37) repeat_head -> . REPEAT LSB calculate RSB
    (31) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (34) while_head -> . WHILE LSB condition RSB
    (28) try -> . TRY LMB expression RMB

    RMB             shift and go to state 175
    VAR             shift and go to state 16
    IDENTIFIER      shift and go to state 17
    USE             shift and go to state 23
    GLOBAL          shift and go to state 25
    IF              shift and go to state 26
    FUNCTION        shift and go to state 27
    REPEAT          shift and go to state 28
    FOR             shift and go to state 29
    WHILE           shift and go to state 30
    TRY             shift and go to state 31

    variable_declaration           shift and go to state 32
    variable_value_change          shift and go to state 33
    if_statement                   shift and go to state 34
    function                       shift and go to state 35
    function_call                  shift and go to state 36
    repeat                         shift and go to state 37
    for                            shift and go to state 38
    while                          shift and go to state 39
    use                            shift and go to state 40
    error_handling                 shift and go to state 41
    variable_alone                 shift and go to state 42
    global_variable                shift and go to state 43
    if_statement_1                 shift and go to state 18
    function_head                  shift and go to state 19
    repeat_head                    shift and go to state 20
    for_head                       shift and go to state 21
    while_head                     shift and go to state 22
    try                            shift and go to state 24

state 174

    (52) if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 52 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 52 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 52 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 52 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 52 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 52 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 52 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 52 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 52 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 52 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 52 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 52 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 52 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)


state 175

    (53) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 53 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 53 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 53 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 53 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 53 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 53 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 53 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 53 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 53 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 53 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 53 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 53 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 53 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for USE in state 0 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 56 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 56 resolved as shift
WARNING: shift/reduce conflict for USE in state 56 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 56 resolved as shift
WARNING: shift/reduce conflict for IF in state 56 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 56 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 56 resolved as shift
WARNING: shift/reduce conflict for FOR in state 56 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 56 resolved as shift
WARNING: shift/reduce conflict for TRY in state 56 resolved as shift
WARNING: shift/reduce conflict for VAR in state 58 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 58 resolved as shift
WARNING: shift/reduce conflict for USE in state 58 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 58 resolved as shift
WARNING: shift/reduce conflict for IF in state 58 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 58 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 58 resolved as shift
WARNING: shift/reduce conflict for FOR in state 58 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 58 resolved as shift
WARNING: shift/reduce conflict for TRY in state 58 resolved as shift
WARNING: shift/reduce conflict for VAR in state 60 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 60 resolved as shift
WARNING: shift/reduce conflict for USE in state 60 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 60 resolved as shift
WARNING: shift/reduce conflict for IF in state 60 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 60 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 60 resolved as shift
WARNING: shift/reduce conflict for FOR in state 60 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 60 resolved as shift
WARNING: shift/reduce conflict for TRY in state 60 resolved as shift
WARNING: shift/reduce conflict for VAR in state 62 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 62 resolved as shift
WARNING: shift/reduce conflict for USE in state 62 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 62 resolved as shift
WARNING: shift/reduce conflict for IF in state 62 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 62 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 62 resolved as shift
WARNING: shift/reduce conflict for FOR in state 62 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 62 resolved as shift
WARNING: shift/reduce conflict for TRY in state 62 resolved as shift
WARNING: shift/reduce conflict for VAR in state 73 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 73 resolved as shift
WARNING: shift/reduce conflict for USE in state 73 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 73 resolved as shift
WARNING: shift/reduce conflict for IF in state 73 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 73 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 73 resolved as shift
WARNING: shift/reduce conflict for FOR in state 73 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 73 resolved as shift
WARNING: shift/reduce conflict for TRY in state 73 resolved as shift
WARNING: shift/reduce conflict for VAR in state 97 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 97 resolved as shift
WARNING: shift/reduce conflict for USE in state 97 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 97 resolved as shift
WARNING: shift/reduce conflict for IF in state 97 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 97 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 97 resolved as shift
WARNING: shift/reduce conflict for FOR in state 97 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 97 resolved as shift
WARNING: shift/reduce conflict for TRY in state 97 resolved as shift
WARNING: shift/reduce conflict for RSB in state 133 resolved as shift
WARNING: shift/reduce conflict for VAR in state 150 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 150 resolved as shift
WARNING: shift/reduce conflict for USE in state 150 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 150 resolved as shift
WARNING: shift/reduce conflict for IF in state 150 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 150 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 150 resolved as shift
WARNING: shift/reduce conflict for FOR in state 150 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 150 resolved as shift
WARNING: shift/reduce conflict for TRY in state 150 resolved as shift
WARNING: shift/reduce conflict for VAR in state 161 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 161 resolved as shift
WARNING: shift/reduce conflict for USE in state 161 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 161 resolved as shift
WARNING: shift/reduce conflict for IF in state 161 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 161 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 161 resolved as shift
WARNING: shift/reduce conflict for FOR in state 161 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 161 resolved as shift
WARNING: shift/reduce conflict for TRY in state 161 resolved as shift
WARNING: shift/reduce conflict for VAR in state 167 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 167 resolved as shift
WARNING: shift/reduce conflict for USE in state 167 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 167 resolved as shift
WARNING: shift/reduce conflict for IF in state 167 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 167 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 167 resolved as shift
WARNING: shift/reduce conflict for FOR in state 167 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 167 resolved as shift
WARNING: shift/reduce conflict for TRY in state 167 resolved as shift
WARNING: shift/reduce conflict for VAR in state 170 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 170 resolved as shift
WARNING: shift/reduce conflict for USE in state 170 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 170 resolved as shift
WARNING: shift/reduce conflict for IF in state 170 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 170 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 170 resolved as shift
WARNING: shift/reduce conflict for FOR in state 170 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 170 resolved as shift
WARNING: shift/reduce conflict for TRY in state 170 resolved as shift
WARNING: reduce/reduce conflict in state 83 resolved using rule (variable_value_change -> IDENTIFIER EQUAL LIST)
WARNING: rejected rule (calculate -> LIST) in state 83
