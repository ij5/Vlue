Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CATCH
    CLASS
    COLON
    DEBUG
    DO
    DOT
    END
    FOR
    GLOBAL
    IN
    LBB
    LIST
    PYTHON
    RBB
    REPEAT
    TRY
    USE

Grammar

Rule 0     S' -> program
Rule 1     program -> root
Rule 2     root -> root statement
Rule 3     root -> statement
Rule 4     statement -> expression SEMI
Rule 5     statement -> if_statement
Rule 6     statement -> while_statement
Rule 7     statement -> variable_declaration SEMI
Rule 8     statement -> variable_value_change SEMI
Rule 9     statement -> function_declaration
Rule 10    statement -> empty
Rule 11    expression -> calculate
Rule 12    expression -> string_calculate
Rule 13    expression -> compare_expression
Rule 14    expression -> function_call
Rule 15    variable_declaration -> VAR IDENTIFIER EQUAL expression
Rule 16    variable_value_change -> IDENTIFIER EQUAL expression
Rule 17    function_call -> IDENTIFIER LSB function_parameter RSB
Rule 18    function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
Rule 19    function_parameter -> function_parameter COMMA IDENTIFIER
Rule 20    function_parameter -> IDENTIFIER
Rule 21    function_parameter -> empty
Rule 22    while_statement -> WHILE LSB compare_expression RSB LMB statement RMB
Rule 23    if_statement -> IF LSB compare_expression RSB LMB statement RMB
Rule 24    if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
Rule 25    if_statement -> if_statement ELSE LMB statement RMB
Rule 26    compare_expression -> compare_expression compare_operator calculate
Rule 27    compare_expression -> calculate
Rule 28    compare_operator -> LB
Rule 29    compare_operator -> RB
Rule 30    compare_operator -> LB EQUAL
Rule 31    compare_operator -> RB EQUAL
Rule 32    compare_operator -> EQUAL EQUAL
Rule 33    compare_operator -> NOTEQUAL EQUAL
Rule 34    string_calculate -> string_calculate stringoperator STRING
Rule 35    string_calculate -> STRING
Rule 36    stringoperator -> PLUS
Rule 37    calculate -> calculate baseoperator INT
Rule 38    calculate -> calculate baseoperator FLOAT
Rule 39    calculate -> calculate baseoperator IDENTIFIER
Rule 40    calculate -> INT
Rule 41    calculate -> FLOAT
Rule 42    calculate -> IDENTIFIER
Rule 43    baseoperator -> PLUS
Rule 44    baseoperator -> MINUS
Rule 45    baseoperator -> MUL
Rule 46    baseoperator -> DIV
Rule 47    empty -> <empty>

Terminals, with rules where they appear

CATCH                : 
CLASS                : 
COLON                : 
COMMA                : 19
DEBUG                : 
DIV                  : 46
DO                   : 
DOT                  : 
ELSE                 : 24 25
END                  : 
EQUAL                : 15 16 30 31 32 32 33
FLOAT                : 38 41
FOR                  : 
FUNCTION             : 18
GLOBAL               : 
IDENTIFIER           : 15 16 17 18 19 20 39 42
IF                   : 23 24
IN                   : 
INT                  : 37 40
LB                   : 28 30
LBB                  : 
LIST                 : 
LMB                  : 18 22 23 24 25
LSB                  : 17 18 22 23 24
MINUS                : 44
MUL                  : 45
NOTEQUAL             : 33
PLUS                 : 36 43
PYTHON               : 
RB                   : 29 31
RBB                  : 
REPEAT               : 
RMB                  : 18 22 23 24 25
RSB                  : 17 18 22 23 24
SEMI                 : 4 7 8
STRING               : 34 35
TRY                  : 
USE                  : 
VAR                  : 15
WHILE                : 22
error                : 

Nonterminals, with rules where they appear

baseoperator         : 37 38 39
calculate            : 11 26 27 37 38 39
compare_expression   : 13 22 23 24 26
compare_operator     : 26
empty                : 10 21
expression           : 4 15 16
function_call        : 14
function_declaration : 9
function_parameter   : 17 18 19
if_statement         : 5 24 25
program              : 0
root                 : 1 2
statement            : 2 3 18 22 23 24 25
string_calculate     : 12 34
stringoperator       : 34
variable_declaration : 7
variable_value_change : 8
while_statement      : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . root
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . expression SEMI
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration SEMI
    (8) statement -> . variable_value_change SEMI
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (23) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (24) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (25) if_statement -> . if_statement ELSE LMB statement RMB
    (22) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (18) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (47) empty -> .
    (37) calculate -> . calculate baseoperator INT
    (38) calculate -> . calculate baseoperator FLOAT
    (39) calculate -> . calculate baseoperator IDENTIFIER
    (40) calculate -> . INT
    (41) calculate -> . FLOAT
    (42) calculate -> . IDENTIFIER
    (34) string_calculate -> . string_calculate stringoperator STRING
    (35) string_calculate -> . STRING
    (26) compare_expression -> . compare_expression compare_operator calculate
    (27) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_parameter RSB

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    VAR             shift and go to state 17
    IDENTIFIER      shift and go to state 18
    FUNCTION        shift and go to state 19
    $end            reduce using rule 47 (empty -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22

  ! IF              [ reduce using rule 47 (empty -> .) ]
  ! WHILE           [ reduce using rule 47 (empty -> .) ]
  ! VAR             [ reduce using rule 47 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 47 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 47 (empty -> .) ]
  ! INT             [ reduce using rule 47 (empty -> .) ]
  ! FLOAT           [ reduce using rule 47 (empty -> .) ]
  ! STRING          [ reduce using rule 47 (empty -> .) ]

    program                        shift and go to state 1
    root                           shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11
    string_calculate               shift and go to state 12
    compare_expression             shift and go to state 13
    function_call                  shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> root .
    (2) root -> root . statement
    (4) statement -> . expression SEMI
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration SEMI
    (8) statement -> . variable_value_change SEMI
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (23) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (24) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (25) if_statement -> . if_statement ELSE LMB statement RMB
    (22) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (18) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (47) empty -> .
    (37) calculate -> . calculate baseoperator INT
    (38) calculate -> . calculate baseoperator FLOAT
    (39) calculate -> . calculate baseoperator IDENTIFIER
    (40) calculate -> . INT
    (41) calculate -> . FLOAT
    (42) calculate -> . IDENTIFIER
    (34) string_calculate -> . string_calculate stringoperator STRING
    (35) string_calculate -> . STRING
    (26) compare_expression -> . compare_expression compare_operator calculate
    (27) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_parameter RSB

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (program -> root .)
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    $end            reduce using rule 1 (program -> root .)
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    VAR             shift and go to state 17
    IDENTIFIER      shift and go to state 18
    FUNCTION        shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22

  ! IF              [ reduce using rule 47 (empty -> .) ]
  ! WHILE           [ reduce using rule 47 (empty -> .) ]
  ! VAR             [ reduce using rule 47 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 47 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 47 (empty -> .) ]
  ! INT             [ reduce using rule 47 (empty -> .) ]
  ! FLOAT           [ reduce using rule 47 (empty -> .) ]
  ! STRING          [ reduce using rule 47 (empty -> .) ]
  ! $end            [ reduce using rule 47 (empty -> .) ]

    statement                      shift and go to state 23
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11
    string_calculate               shift and go to state 12
    compare_expression             shift and go to state 13
    function_call                  shift and go to state 14

state 3

    (3) root -> statement .

    IF              reduce using rule 3 (root -> statement .)
    WHILE           reduce using rule 3 (root -> statement .)
    VAR             reduce using rule 3 (root -> statement .)
    IDENTIFIER      reduce using rule 3 (root -> statement .)
    FUNCTION        reduce using rule 3 (root -> statement .)
    INT             reduce using rule 3 (root -> statement .)
    FLOAT           reduce using rule 3 (root -> statement .)
    STRING          reduce using rule 3 (root -> statement .)
    $end            reduce using rule 3 (root -> statement .)


state 4

    (4) statement -> expression . SEMI

    SEMI            shift and go to state 24


state 5

    (5) statement -> if_statement .
    (24) if_statement -> if_statement . ELSE IF LSB compare_expression RSB LMB statement RMB
    (25) if_statement -> if_statement . ELSE LMB statement RMB

    IF              reduce using rule 5 (statement -> if_statement .)
    WHILE           reduce using rule 5 (statement -> if_statement .)
    VAR             reduce using rule 5 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 5 (statement -> if_statement .)
    FUNCTION        reduce using rule 5 (statement -> if_statement .)
    INT             reduce using rule 5 (statement -> if_statement .)
    FLOAT           reduce using rule 5 (statement -> if_statement .)
    STRING          reduce using rule 5 (statement -> if_statement .)
    $end            reduce using rule 5 (statement -> if_statement .)
    RMB             reduce using rule 5 (statement -> if_statement .)
    ELSE            shift and go to state 25


state 6

    (6) statement -> while_statement .

    IF              reduce using rule 6 (statement -> while_statement .)
    WHILE           reduce using rule 6 (statement -> while_statement .)
    VAR             reduce using rule 6 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 6 (statement -> while_statement .)
    FUNCTION        reduce using rule 6 (statement -> while_statement .)
    INT             reduce using rule 6 (statement -> while_statement .)
    FLOAT           reduce using rule 6 (statement -> while_statement .)
    STRING          reduce using rule 6 (statement -> while_statement .)
    $end            reduce using rule 6 (statement -> while_statement .)
    RMB             reduce using rule 6 (statement -> while_statement .)


state 7

    (7) statement -> variable_declaration . SEMI

    SEMI            shift and go to state 26


state 8

    (8) statement -> variable_value_change . SEMI

    SEMI            shift and go to state 27


state 9

    (9) statement -> function_declaration .

    IF              reduce using rule 9 (statement -> function_declaration .)
    WHILE           reduce using rule 9 (statement -> function_declaration .)
    VAR             reduce using rule 9 (statement -> function_declaration .)
    IDENTIFIER      reduce using rule 9 (statement -> function_declaration .)
    FUNCTION        reduce using rule 9 (statement -> function_declaration .)
    INT             reduce using rule 9 (statement -> function_declaration .)
    FLOAT           reduce using rule 9 (statement -> function_declaration .)
    STRING          reduce using rule 9 (statement -> function_declaration .)
    $end            reduce using rule 9 (statement -> function_declaration .)
    RMB             reduce using rule 9 (statement -> function_declaration .)


state 10

    (10) statement -> empty .

    IF              reduce using rule 10 (statement -> empty .)
    WHILE           reduce using rule 10 (statement -> empty .)
    VAR             reduce using rule 10 (statement -> empty .)
    IDENTIFIER      reduce using rule 10 (statement -> empty .)
    FUNCTION        reduce using rule 10 (statement -> empty .)
    INT             reduce using rule 10 (statement -> empty .)
    FLOAT           reduce using rule 10 (statement -> empty .)
    STRING          reduce using rule 10 (statement -> empty .)
    $end            reduce using rule 10 (statement -> empty .)
    RMB             reduce using rule 10 (statement -> empty .)


state 11

    (11) expression -> calculate .
    (37) calculate -> calculate . baseoperator INT
    (38) calculate -> calculate . baseoperator FLOAT
    (39) calculate -> calculate . baseoperator IDENTIFIER
    (27) compare_expression -> calculate .
    (43) baseoperator -> . PLUS
    (44) baseoperator -> . MINUS
    (45) baseoperator -> . MUL
    (46) baseoperator -> . DIV

  ! reduce/reduce conflict for SEMI resolved using rule 11 (expression -> calculate .)
    SEMI            reduce using rule 11 (expression -> calculate .)
    LB              reduce using rule 27 (compare_expression -> calculate .)
    RB              reduce using rule 27 (compare_expression -> calculate .)
    EQUAL           reduce using rule 27 (compare_expression -> calculate .)
    NOTEQUAL        reduce using rule 27 (compare_expression -> calculate .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MUL             shift and go to state 31
    DIV             shift and go to state 32

  ! SEMI            [ reduce using rule 27 (compare_expression -> calculate .) ]

    baseoperator                   shift and go to state 28

state 12

    (12) expression -> string_calculate .
    (34) string_calculate -> string_calculate . stringoperator STRING
    (36) stringoperator -> . PLUS

    SEMI            reduce using rule 12 (expression -> string_calculate .)
    PLUS            shift and go to state 34

    stringoperator                 shift and go to state 33

state 13

    (13) expression -> compare_expression .
    (26) compare_expression -> compare_expression . compare_operator calculate
    (28) compare_operator -> . LB
    (29) compare_operator -> . RB
    (30) compare_operator -> . LB EQUAL
    (31) compare_operator -> . RB EQUAL
    (32) compare_operator -> . EQUAL EQUAL
    (33) compare_operator -> . NOTEQUAL EQUAL

    SEMI            reduce using rule 13 (expression -> compare_expression .)
    LB              shift and go to state 36
    RB              shift and go to state 37
    EQUAL           shift and go to state 38
    NOTEQUAL        shift and go to state 39

    compare_operator               shift and go to state 35

state 14

    (14) expression -> function_call .

    SEMI            reduce using rule 14 (expression -> function_call .)


state 15

    (23) if_statement -> IF . LSB compare_expression RSB LMB statement RMB

    LSB             shift and go to state 40


state 16

    (22) while_statement -> WHILE . LSB compare_expression RSB LMB statement RMB

    LSB             shift and go to state 41


state 17

    (15) variable_declaration -> VAR . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 42


state 18

    (16) variable_value_change -> IDENTIFIER . EQUAL expression
    (42) calculate -> IDENTIFIER .
    (17) function_call -> IDENTIFIER . LSB function_parameter RSB

  ! shift/reduce conflict for EQUAL resolved as shift
    EQUAL           shift and go to state 43
    PLUS            reduce using rule 42 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 42 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 42 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 42 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 42 (calculate -> IDENTIFIER .)
    LB              reduce using rule 42 (calculate -> IDENTIFIER .)
    RB              reduce using rule 42 (calculate -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 42 (calculate -> IDENTIFIER .)
    LSB             shift and go to state 44

  ! EQUAL           [ reduce using rule 42 (calculate -> IDENTIFIER .) ]


state 19

    (18) function_declaration -> FUNCTION . IDENTIFIER LSB function_parameter RSB LMB statement RMB

    IDENTIFIER      shift and go to state 45


state 20

    (40) calculate -> INT .

    PLUS            reduce using rule 40 (calculate -> INT .)
    MINUS           reduce using rule 40 (calculate -> INT .)
    MUL             reduce using rule 40 (calculate -> INT .)
    DIV             reduce using rule 40 (calculate -> INT .)
    SEMI            reduce using rule 40 (calculate -> INT .)
    LB              reduce using rule 40 (calculate -> INT .)
    RB              reduce using rule 40 (calculate -> INT .)
    EQUAL           reduce using rule 40 (calculate -> INT .)
    NOTEQUAL        reduce using rule 40 (calculate -> INT .)
    RSB             reduce using rule 40 (calculate -> INT .)


state 21

    (41) calculate -> FLOAT .

    PLUS            reduce using rule 41 (calculate -> FLOAT .)
    MINUS           reduce using rule 41 (calculate -> FLOAT .)
    MUL             reduce using rule 41 (calculate -> FLOAT .)
    DIV             reduce using rule 41 (calculate -> FLOAT .)
    SEMI            reduce using rule 41 (calculate -> FLOAT .)
    LB              reduce using rule 41 (calculate -> FLOAT .)
    RB              reduce using rule 41 (calculate -> FLOAT .)
    EQUAL           reduce using rule 41 (calculate -> FLOAT .)
    NOTEQUAL        reduce using rule 41 (calculate -> FLOAT .)
    RSB             reduce using rule 41 (calculate -> FLOAT .)


state 22

    (35) string_calculate -> STRING .

    PLUS            reduce using rule 35 (string_calculate -> STRING .)
    SEMI            reduce using rule 35 (string_calculate -> STRING .)


state 23

    (2) root -> root statement .

    IF              reduce using rule 2 (root -> root statement .)
    WHILE           reduce using rule 2 (root -> root statement .)
    VAR             reduce using rule 2 (root -> root statement .)
    IDENTIFIER      reduce using rule 2 (root -> root statement .)
    FUNCTION        reduce using rule 2 (root -> root statement .)
    INT             reduce using rule 2 (root -> root statement .)
    FLOAT           reduce using rule 2 (root -> root statement .)
    STRING          reduce using rule 2 (root -> root statement .)
    $end            reduce using rule 2 (root -> root statement .)


state 24

    (4) statement -> expression SEMI .

    IF              reduce using rule 4 (statement -> expression SEMI .)
    WHILE           reduce using rule 4 (statement -> expression SEMI .)
    VAR             reduce using rule 4 (statement -> expression SEMI .)
    IDENTIFIER      reduce using rule 4 (statement -> expression SEMI .)
    FUNCTION        reduce using rule 4 (statement -> expression SEMI .)
    INT             reduce using rule 4 (statement -> expression SEMI .)
    FLOAT           reduce using rule 4 (statement -> expression SEMI .)
    STRING          reduce using rule 4 (statement -> expression SEMI .)
    $end            reduce using rule 4 (statement -> expression SEMI .)
    RMB             reduce using rule 4 (statement -> expression SEMI .)


state 25

    (24) if_statement -> if_statement ELSE . IF LSB compare_expression RSB LMB statement RMB
    (25) if_statement -> if_statement ELSE . LMB statement RMB

    IF              shift and go to state 46
    LMB             shift and go to state 47


state 26

    (7) statement -> variable_declaration SEMI .

    IF              reduce using rule 7 (statement -> variable_declaration SEMI .)
    WHILE           reduce using rule 7 (statement -> variable_declaration SEMI .)
    VAR             reduce using rule 7 (statement -> variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 7 (statement -> variable_declaration SEMI .)
    FUNCTION        reduce using rule 7 (statement -> variable_declaration SEMI .)
    INT             reduce using rule 7 (statement -> variable_declaration SEMI .)
    FLOAT           reduce using rule 7 (statement -> variable_declaration SEMI .)
    STRING          reduce using rule 7 (statement -> variable_declaration SEMI .)
    $end            reduce using rule 7 (statement -> variable_declaration SEMI .)
    RMB             reduce using rule 7 (statement -> variable_declaration SEMI .)


state 27

    (8) statement -> variable_value_change SEMI .

    IF              reduce using rule 8 (statement -> variable_value_change SEMI .)
    WHILE           reduce using rule 8 (statement -> variable_value_change SEMI .)
    VAR             reduce using rule 8 (statement -> variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 8 (statement -> variable_value_change SEMI .)
    FUNCTION        reduce using rule 8 (statement -> variable_value_change SEMI .)
    INT             reduce using rule 8 (statement -> variable_value_change SEMI .)
    FLOAT           reduce using rule 8 (statement -> variable_value_change SEMI .)
    STRING          reduce using rule 8 (statement -> variable_value_change SEMI .)
    $end            reduce using rule 8 (statement -> variable_value_change SEMI .)
    RMB             reduce using rule 8 (statement -> variable_value_change SEMI .)


state 28

    (37) calculate -> calculate baseoperator . INT
    (38) calculate -> calculate baseoperator . FLOAT
    (39) calculate -> calculate baseoperator . IDENTIFIER

    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    IDENTIFIER      shift and go to state 50


state 29

    (43) baseoperator -> PLUS .

    INT             reduce using rule 43 (baseoperator -> PLUS .)
    FLOAT           reduce using rule 43 (baseoperator -> PLUS .)
    IDENTIFIER      reduce using rule 43 (baseoperator -> PLUS .)


state 30

    (44) baseoperator -> MINUS .

    INT             reduce using rule 44 (baseoperator -> MINUS .)
    FLOAT           reduce using rule 44 (baseoperator -> MINUS .)
    IDENTIFIER      reduce using rule 44 (baseoperator -> MINUS .)


state 31

    (45) baseoperator -> MUL .

    INT             reduce using rule 45 (baseoperator -> MUL .)
    FLOAT           reduce using rule 45 (baseoperator -> MUL .)
    IDENTIFIER      reduce using rule 45 (baseoperator -> MUL .)


state 32

    (46) baseoperator -> DIV .

    INT             reduce using rule 46 (baseoperator -> DIV .)
    FLOAT           reduce using rule 46 (baseoperator -> DIV .)
    IDENTIFIER      reduce using rule 46 (baseoperator -> DIV .)


state 33

    (34) string_calculate -> string_calculate stringoperator . STRING

    STRING          shift and go to state 51


state 34

    (36) stringoperator -> PLUS .

    STRING          reduce using rule 36 (stringoperator -> PLUS .)


state 35

    (26) compare_expression -> compare_expression compare_operator . calculate
    (37) calculate -> . calculate baseoperator INT
    (38) calculate -> . calculate baseoperator FLOAT
    (39) calculate -> . calculate baseoperator IDENTIFIER
    (40) calculate -> . INT
    (41) calculate -> . FLOAT
    (42) calculate -> . IDENTIFIER

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    IDENTIFIER      shift and go to state 53

    calculate                      shift and go to state 52

state 36

    (28) compare_operator -> LB .
    (30) compare_operator -> LB . EQUAL

    INT             reduce using rule 28 (compare_operator -> LB .)
    FLOAT           reduce using rule 28 (compare_operator -> LB .)
    IDENTIFIER      reduce using rule 28 (compare_operator -> LB .)
    EQUAL           shift and go to state 54


state 37

    (29) compare_operator -> RB .
    (31) compare_operator -> RB . EQUAL

    INT             reduce using rule 29 (compare_operator -> RB .)
    FLOAT           reduce using rule 29 (compare_operator -> RB .)
    IDENTIFIER      reduce using rule 29 (compare_operator -> RB .)
    EQUAL           shift and go to state 55


state 38

    (32) compare_operator -> EQUAL . EQUAL

    EQUAL           shift and go to state 56


state 39

    (33) compare_operator -> NOTEQUAL . EQUAL

    EQUAL           shift and go to state 57


state 40

    (23) if_statement -> IF LSB . compare_expression RSB LMB statement RMB
    (26) compare_expression -> . compare_expression compare_operator calculate
    (27) compare_expression -> . calculate
    (37) calculate -> . calculate baseoperator INT
    (38) calculate -> . calculate baseoperator FLOAT
    (39) calculate -> . calculate baseoperator IDENTIFIER
    (40) calculate -> . INT
    (41) calculate -> . FLOAT
    (42) calculate -> . IDENTIFIER

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    IDENTIFIER      shift and go to state 53

    compare_expression             shift and go to state 58
    calculate                      shift and go to state 59

state 41

    (22) while_statement -> WHILE LSB . compare_expression RSB LMB statement RMB
    (26) compare_expression -> . compare_expression compare_operator calculate
    (27) compare_expression -> . calculate
    (37) calculate -> . calculate baseoperator INT
    (38) calculate -> . calculate baseoperator FLOAT
    (39) calculate -> . calculate baseoperator IDENTIFIER
    (40) calculate -> . INT
    (41) calculate -> . FLOAT
    (42) calculate -> . IDENTIFIER

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    IDENTIFIER      shift and go to state 53

    compare_expression             shift and go to state 60
    calculate                      shift and go to state 59

state 42

    (15) variable_declaration -> VAR IDENTIFIER . EQUAL expression

    EQUAL           shift and go to state 61


state 43

    (16) variable_value_change -> IDENTIFIER EQUAL . expression
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (37) calculate -> . calculate baseoperator INT
    (38) calculate -> . calculate baseoperator FLOAT
    (39) calculate -> . calculate baseoperator IDENTIFIER
    (40) calculate -> . INT
    (41) calculate -> . FLOAT
    (42) calculate -> . IDENTIFIER
    (34) string_calculate -> . string_calculate stringoperator STRING
    (35) string_calculate -> . STRING
    (26) compare_expression -> . compare_expression compare_operator calculate
    (27) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_parameter RSB

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    IDENTIFIER      shift and go to state 62
    STRING          shift and go to state 22

    expression                     shift and go to state 63
    calculate                      shift and go to state 11
    string_calculate               shift and go to state 12
    compare_expression             shift and go to state 13
    function_call                  shift and go to state 14

state 44

    (17) function_call -> IDENTIFIER LSB . function_parameter RSB
    (19) function_parameter -> . function_parameter COMMA IDENTIFIER
    (20) function_parameter -> . IDENTIFIER
    (21) function_parameter -> . empty
    (47) empty -> .

    IDENTIFIER      shift and go to state 64
    RSB             reduce using rule 47 (empty -> .)
    COMMA           reduce using rule 47 (empty -> .)

    function_parameter             shift and go to state 65
    empty                          shift and go to state 66

state 45

    (18) function_declaration -> FUNCTION IDENTIFIER . LSB function_parameter RSB LMB statement RMB

    LSB             shift and go to state 67


state 46

    (24) if_statement -> if_statement ELSE IF . LSB compare_expression RSB LMB statement RMB

    LSB             shift and go to state 68


state 47

    (25) if_statement -> if_statement ELSE LMB . statement RMB
    (4) statement -> . expression SEMI
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration SEMI
    (8) statement -> . variable_value_change SEMI
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (23) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (24) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (25) if_statement -> . if_statement ELSE LMB statement RMB
    (22) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (18) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (47) empty -> .
    (37) calculate -> . calculate baseoperator INT
    (38) calculate -> . calculate baseoperator FLOAT
    (39) calculate -> . calculate baseoperator IDENTIFIER
    (40) calculate -> . INT
    (41) calculate -> . FLOAT
    (42) calculate -> . IDENTIFIER
    (34) string_calculate -> . string_calculate stringoperator STRING
    (35) string_calculate -> . STRING
    (26) compare_expression -> . compare_expression compare_operator calculate
    (27) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_parameter RSB

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    VAR             shift and go to state 17
    IDENTIFIER      shift and go to state 18
    FUNCTION        shift and go to state 19
    RMB             reduce using rule 47 (empty -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22

    if_statement                   shift and go to state 5
    statement                      shift and go to state 69
    expression                     shift and go to state 4
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11
    string_calculate               shift and go to state 12
    compare_expression             shift and go to state 13
    function_call                  shift and go to state 14

state 48

    (37) calculate -> calculate baseoperator INT .

    PLUS            reduce using rule 37 (calculate -> calculate baseoperator INT .)
    MINUS           reduce using rule 37 (calculate -> calculate baseoperator INT .)
    MUL             reduce using rule 37 (calculate -> calculate baseoperator INT .)
    DIV             reduce using rule 37 (calculate -> calculate baseoperator INT .)
    SEMI            reduce using rule 37 (calculate -> calculate baseoperator INT .)
    LB              reduce using rule 37 (calculate -> calculate baseoperator INT .)
    RB              reduce using rule 37 (calculate -> calculate baseoperator INT .)
    EQUAL           reduce using rule 37 (calculate -> calculate baseoperator INT .)
    NOTEQUAL        reduce using rule 37 (calculate -> calculate baseoperator INT .)
    RSB             reduce using rule 37 (calculate -> calculate baseoperator INT .)


state 49

    (38) calculate -> calculate baseoperator FLOAT .

    PLUS            reduce using rule 38 (calculate -> calculate baseoperator FLOAT .)
    MINUS           reduce using rule 38 (calculate -> calculate baseoperator FLOAT .)
    MUL             reduce using rule 38 (calculate -> calculate baseoperator FLOAT .)
    DIV             reduce using rule 38 (calculate -> calculate baseoperator FLOAT .)
    SEMI            reduce using rule 38 (calculate -> calculate baseoperator FLOAT .)
    LB              reduce using rule 38 (calculate -> calculate baseoperator FLOAT .)
    RB              reduce using rule 38 (calculate -> calculate baseoperator FLOAT .)
    EQUAL           reduce using rule 38 (calculate -> calculate baseoperator FLOAT .)
    NOTEQUAL        reduce using rule 38 (calculate -> calculate baseoperator FLOAT .)
    RSB             reduce using rule 38 (calculate -> calculate baseoperator FLOAT .)


state 50

    (39) calculate -> calculate baseoperator IDENTIFIER .

    PLUS            reduce using rule 39 (calculate -> calculate baseoperator IDENTIFIER .)
    MINUS           reduce using rule 39 (calculate -> calculate baseoperator IDENTIFIER .)
    MUL             reduce using rule 39 (calculate -> calculate baseoperator IDENTIFIER .)
    DIV             reduce using rule 39 (calculate -> calculate baseoperator IDENTIFIER .)
    SEMI            reduce using rule 39 (calculate -> calculate baseoperator IDENTIFIER .)
    LB              reduce using rule 39 (calculate -> calculate baseoperator IDENTIFIER .)
    RB              reduce using rule 39 (calculate -> calculate baseoperator IDENTIFIER .)
    EQUAL           reduce using rule 39 (calculate -> calculate baseoperator IDENTIFIER .)
    NOTEQUAL        reduce using rule 39 (calculate -> calculate baseoperator IDENTIFIER .)
    RSB             reduce using rule 39 (calculate -> calculate baseoperator IDENTIFIER .)


state 51

    (34) string_calculate -> string_calculate stringoperator STRING .

    PLUS            reduce using rule 34 (string_calculate -> string_calculate stringoperator STRING .)
    SEMI            reduce using rule 34 (string_calculate -> string_calculate stringoperator STRING .)


state 52

    (26) compare_expression -> compare_expression compare_operator calculate .
    (37) calculate -> calculate . baseoperator INT
    (38) calculate -> calculate . baseoperator FLOAT
    (39) calculate -> calculate . baseoperator IDENTIFIER
    (43) baseoperator -> . PLUS
    (44) baseoperator -> . MINUS
    (45) baseoperator -> . MUL
    (46) baseoperator -> . DIV

    LB              reduce using rule 26 (compare_expression -> compare_expression compare_operator calculate .)
    RB              reduce using rule 26 (compare_expression -> compare_expression compare_operator calculate .)
    EQUAL           reduce using rule 26 (compare_expression -> compare_expression compare_operator calculate .)
    NOTEQUAL        reduce using rule 26 (compare_expression -> compare_expression compare_operator calculate .)
    SEMI            reduce using rule 26 (compare_expression -> compare_expression compare_operator calculate .)
    RSB             reduce using rule 26 (compare_expression -> compare_expression compare_operator calculate .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MUL             shift and go to state 31
    DIV             shift and go to state 32

    baseoperator                   shift and go to state 28

state 53

    (42) calculate -> IDENTIFIER .

    PLUS            reduce using rule 42 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 42 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 42 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 42 (calculate -> IDENTIFIER .)
    LB              reduce using rule 42 (calculate -> IDENTIFIER .)
    RB              reduce using rule 42 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 42 (calculate -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 42 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 42 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 42 (calculate -> IDENTIFIER .)


state 54

    (30) compare_operator -> LB EQUAL .

    INT             reduce using rule 30 (compare_operator -> LB EQUAL .)
    FLOAT           reduce using rule 30 (compare_operator -> LB EQUAL .)
    IDENTIFIER      reduce using rule 30 (compare_operator -> LB EQUAL .)


state 55

    (31) compare_operator -> RB EQUAL .

    INT             reduce using rule 31 (compare_operator -> RB EQUAL .)
    FLOAT           reduce using rule 31 (compare_operator -> RB EQUAL .)
    IDENTIFIER      reduce using rule 31 (compare_operator -> RB EQUAL .)


state 56

    (32) compare_operator -> EQUAL EQUAL .

    INT             reduce using rule 32 (compare_operator -> EQUAL EQUAL .)
    FLOAT           reduce using rule 32 (compare_operator -> EQUAL EQUAL .)
    IDENTIFIER      reduce using rule 32 (compare_operator -> EQUAL EQUAL .)


state 57

    (33) compare_operator -> NOTEQUAL EQUAL .

    INT             reduce using rule 33 (compare_operator -> NOTEQUAL EQUAL .)
    FLOAT           reduce using rule 33 (compare_operator -> NOTEQUAL EQUAL .)
    IDENTIFIER      reduce using rule 33 (compare_operator -> NOTEQUAL EQUAL .)


state 58

    (23) if_statement -> IF LSB compare_expression . RSB LMB statement RMB
    (26) compare_expression -> compare_expression . compare_operator calculate
    (28) compare_operator -> . LB
    (29) compare_operator -> . RB
    (30) compare_operator -> . LB EQUAL
    (31) compare_operator -> . RB EQUAL
    (32) compare_operator -> . EQUAL EQUAL
    (33) compare_operator -> . NOTEQUAL EQUAL

    RSB             shift and go to state 70
    LB              shift and go to state 36
    RB              shift and go to state 37
    EQUAL           shift and go to state 38
    NOTEQUAL        shift and go to state 39

    compare_operator               shift and go to state 35

state 59

    (27) compare_expression -> calculate .
    (37) calculate -> calculate . baseoperator INT
    (38) calculate -> calculate . baseoperator FLOAT
    (39) calculate -> calculate . baseoperator IDENTIFIER
    (43) baseoperator -> . PLUS
    (44) baseoperator -> . MINUS
    (45) baseoperator -> . MUL
    (46) baseoperator -> . DIV

    RSB             reduce using rule 27 (compare_expression -> calculate .)
    LB              reduce using rule 27 (compare_expression -> calculate .)
    RB              reduce using rule 27 (compare_expression -> calculate .)
    EQUAL           reduce using rule 27 (compare_expression -> calculate .)
    NOTEQUAL        reduce using rule 27 (compare_expression -> calculate .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MUL             shift and go to state 31
    DIV             shift and go to state 32

    baseoperator                   shift and go to state 28

state 60

    (22) while_statement -> WHILE LSB compare_expression . RSB LMB statement RMB
    (26) compare_expression -> compare_expression . compare_operator calculate
    (28) compare_operator -> . LB
    (29) compare_operator -> . RB
    (30) compare_operator -> . LB EQUAL
    (31) compare_operator -> . RB EQUAL
    (32) compare_operator -> . EQUAL EQUAL
    (33) compare_operator -> . NOTEQUAL EQUAL

    RSB             shift and go to state 71
    LB              shift and go to state 36
    RB              shift and go to state 37
    EQUAL           shift and go to state 38
    NOTEQUAL        shift and go to state 39

    compare_operator               shift and go to state 35

state 61

    (15) variable_declaration -> VAR IDENTIFIER EQUAL . expression
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (37) calculate -> . calculate baseoperator INT
    (38) calculate -> . calculate baseoperator FLOAT
    (39) calculate -> . calculate baseoperator IDENTIFIER
    (40) calculate -> . INT
    (41) calculate -> . FLOAT
    (42) calculate -> . IDENTIFIER
    (34) string_calculate -> . string_calculate stringoperator STRING
    (35) string_calculate -> . STRING
    (26) compare_expression -> . compare_expression compare_operator calculate
    (27) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_parameter RSB

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    IDENTIFIER      shift and go to state 62
    STRING          shift and go to state 22

    expression                     shift and go to state 72
    calculate                      shift and go to state 11
    string_calculate               shift and go to state 12
    compare_expression             shift and go to state 13
    function_call                  shift and go to state 14

state 62

    (42) calculate -> IDENTIFIER .
    (17) function_call -> IDENTIFIER . LSB function_parameter RSB

    PLUS            reduce using rule 42 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 42 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 42 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 42 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 42 (calculate -> IDENTIFIER .)
    LB              reduce using rule 42 (calculate -> IDENTIFIER .)
    RB              reduce using rule 42 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 42 (calculate -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 42 (calculate -> IDENTIFIER .)
    LSB             shift and go to state 44


state 63

    (16) variable_value_change -> IDENTIFIER EQUAL expression .

    SEMI            reduce using rule 16 (variable_value_change -> IDENTIFIER EQUAL expression .)


state 64

    (20) function_parameter -> IDENTIFIER .

    RSB             reduce using rule 20 (function_parameter -> IDENTIFIER .)
    COMMA           reduce using rule 20 (function_parameter -> IDENTIFIER .)


state 65

    (17) function_call -> IDENTIFIER LSB function_parameter . RSB
    (19) function_parameter -> function_parameter . COMMA IDENTIFIER

    RSB             shift and go to state 73
    COMMA           shift and go to state 74


state 66

    (21) function_parameter -> empty .

    RSB             reduce using rule 21 (function_parameter -> empty .)
    COMMA           reduce using rule 21 (function_parameter -> empty .)


state 67

    (18) function_declaration -> FUNCTION IDENTIFIER LSB . function_parameter RSB LMB statement RMB
    (19) function_parameter -> . function_parameter COMMA IDENTIFIER
    (20) function_parameter -> . IDENTIFIER
    (21) function_parameter -> . empty
    (47) empty -> .

    IDENTIFIER      shift and go to state 64
    RSB             reduce using rule 47 (empty -> .)
    COMMA           reduce using rule 47 (empty -> .)

    function_parameter             shift and go to state 75
    empty                          shift and go to state 66

state 68

    (24) if_statement -> if_statement ELSE IF LSB . compare_expression RSB LMB statement RMB
    (26) compare_expression -> . compare_expression compare_operator calculate
    (27) compare_expression -> . calculate
    (37) calculate -> . calculate baseoperator INT
    (38) calculate -> . calculate baseoperator FLOAT
    (39) calculate -> . calculate baseoperator IDENTIFIER
    (40) calculate -> . INT
    (41) calculate -> . FLOAT
    (42) calculate -> . IDENTIFIER

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    IDENTIFIER      shift and go to state 53

    compare_expression             shift and go to state 76
    calculate                      shift and go to state 59

state 69

    (25) if_statement -> if_statement ELSE LMB statement . RMB

    RMB             shift and go to state 77


state 70

    (23) if_statement -> IF LSB compare_expression RSB . LMB statement RMB

    LMB             shift and go to state 78


state 71

    (22) while_statement -> WHILE LSB compare_expression RSB . LMB statement RMB

    LMB             shift and go to state 79


state 72

    (15) variable_declaration -> VAR IDENTIFIER EQUAL expression .

    SEMI            reduce using rule 15 (variable_declaration -> VAR IDENTIFIER EQUAL expression .)


state 73

    (17) function_call -> IDENTIFIER LSB function_parameter RSB .

    SEMI            reduce using rule 17 (function_call -> IDENTIFIER LSB function_parameter RSB .)


state 74

    (19) function_parameter -> function_parameter COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 80


state 75

    (18) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter . RSB LMB statement RMB
    (19) function_parameter -> function_parameter . COMMA IDENTIFIER

    RSB             shift and go to state 81
    COMMA           shift and go to state 74


state 76

    (24) if_statement -> if_statement ELSE IF LSB compare_expression . RSB LMB statement RMB
    (26) compare_expression -> compare_expression . compare_operator calculate
    (28) compare_operator -> . LB
    (29) compare_operator -> . RB
    (30) compare_operator -> . LB EQUAL
    (31) compare_operator -> . RB EQUAL
    (32) compare_operator -> . EQUAL EQUAL
    (33) compare_operator -> . NOTEQUAL EQUAL

    RSB             shift and go to state 82
    LB              shift and go to state 36
    RB              shift and go to state 37
    EQUAL           shift and go to state 38
    NOTEQUAL        shift and go to state 39

    compare_operator               shift and go to state 35

state 77

    (25) if_statement -> if_statement ELSE LMB statement RMB .

    ELSE            reduce using rule 25 (if_statement -> if_statement ELSE LMB statement RMB .)
    IF              reduce using rule 25 (if_statement -> if_statement ELSE LMB statement RMB .)
    WHILE           reduce using rule 25 (if_statement -> if_statement ELSE LMB statement RMB .)
    VAR             reduce using rule 25 (if_statement -> if_statement ELSE LMB statement RMB .)
    IDENTIFIER      reduce using rule 25 (if_statement -> if_statement ELSE LMB statement RMB .)
    FUNCTION        reduce using rule 25 (if_statement -> if_statement ELSE LMB statement RMB .)
    INT             reduce using rule 25 (if_statement -> if_statement ELSE LMB statement RMB .)
    FLOAT           reduce using rule 25 (if_statement -> if_statement ELSE LMB statement RMB .)
    STRING          reduce using rule 25 (if_statement -> if_statement ELSE LMB statement RMB .)
    $end            reduce using rule 25 (if_statement -> if_statement ELSE LMB statement RMB .)
    RMB             reduce using rule 25 (if_statement -> if_statement ELSE LMB statement RMB .)


state 78

    (23) if_statement -> IF LSB compare_expression RSB LMB . statement RMB
    (4) statement -> . expression SEMI
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration SEMI
    (8) statement -> . variable_value_change SEMI
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (23) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (24) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (25) if_statement -> . if_statement ELSE LMB statement RMB
    (22) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (18) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (47) empty -> .
    (37) calculate -> . calculate baseoperator INT
    (38) calculate -> . calculate baseoperator FLOAT
    (39) calculate -> . calculate baseoperator IDENTIFIER
    (40) calculate -> . INT
    (41) calculate -> . FLOAT
    (42) calculate -> . IDENTIFIER
    (34) string_calculate -> . string_calculate stringoperator STRING
    (35) string_calculate -> . STRING
    (26) compare_expression -> . compare_expression compare_operator calculate
    (27) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_parameter RSB

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    VAR             shift and go to state 17
    IDENTIFIER      shift and go to state 18
    FUNCTION        shift and go to state 19
    RMB             reduce using rule 47 (empty -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22

    compare_expression             shift and go to state 13
    statement                      shift and go to state 83
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11
    string_calculate               shift and go to state 12
    function_call                  shift and go to state 14

state 79

    (22) while_statement -> WHILE LSB compare_expression RSB LMB . statement RMB
    (4) statement -> . expression SEMI
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration SEMI
    (8) statement -> . variable_value_change SEMI
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (23) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (24) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (25) if_statement -> . if_statement ELSE LMB statement RMB
    (22) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (18) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (47) empty -> .
    (37) calculate -> . calculate baseoperator INT
    (38) calculate -> . calculate baseoperator FLOAT
    (39) calculate -> . calculate baseoperator IDENTIFIER
    (40) calculate -> . INT
    (41) calculate -> . FLOAT
    (42) calculate -> . IDENTIFIER
    (34) string_calculate -> . string_calculate stringoperator STRING
    (35) string_calculate -> . STRING
    (26) compare_expression -> . compare_expression compare_operator calculate
    (27) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_parameter RSB

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    VAR             shift and go to state 17
    IDENTIFIER      shift and go to state 18
    FUNCTION        shift and go to state 19
    RMB             reduce using rule 47 (empty -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22

    compare_expression             shift and go to state 13
    statement                      shift and go to state 84
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11
    string_calculate               shift and go to state 12
    function_call                  shift and go to state 14

state 80

    (19) function_parameter -> function_parameter COMMA IDENTIFIER .

    RSB             reduce using rule 19 (function_parameter -> function_parameter COMMA IDENTIFIER .)
    COMMA           reduce using rule 19 (function_parameter -> function_parameter COMMA IDENTIFIER .)


state 81

    (18) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB . LMB statement RMB

    LMB             shift and go to state 85


state 82

    (24) if_statement -> if_statement ELSE IF LSB compare_expression RSB . LMB statement RMB

    LMB             shift and go to state 86


state 83

    (23) if_statement -> IF LSB compare_expression RSB LMB statement . RMB

    RMB             shift and go to state 87


state 84

    (22) while_statement -> WHILE LSB compare_expression RSB LMB statement . RMB

    RMB             shift and go to state 88


state 85

    (18) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB . statement RMB
    (4) statement -> . expression SEMI
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration SEMI
    (8) statement -> . variable_value_change SEMI
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (23) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (24) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (25) if_statement -> . if_statement ELSE LMB statement RMB
    (22) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (18) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (47) empty -> .
    (37) calculate -> . calculate baseoperator INT
    (38) calculate -> . calculate baseoperator FLOAT
    (39) calculate -> . calculate baseoperator IDENTIFIER
    (40) calculate -> . INT
    (41) calculate -> . FLOAT
    (42) calculate -> . IDENTIFIER
    (34) string_calculate -> . string_calculate stringoperator STRING
    (35) string_calculate -> . STRING
    (26) compare_expression -> . compare_expression compare_operator calculate
    (27) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_parameter RSB

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    VAR             shift and go to state 17
    IDENTIFIER      shift and go to state 18
    FUNCTION        shift and go to state 19
    RMB             reduce using rule 47 (empty -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22

    statement                      shift and go to state 89
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11
    string_calculate               shift and go to state 12
    compare_expression             shift and go to state 13
    function_call                  shift and go to state 14

state 86

    (24) if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB . statement RMB
    (4) statement -> . expression SEMI
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration SEMI
    (8) statement -> . variable_value_change SEMI
    (9) statement -> . function_declaration
    (10) statement -> . empty
    (11) expression -> . calculate
    (12) expression -> . string_calculate
    (13) expression -> . compare_expression
    (14) expression -> . function_call
    (23) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (24) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (25) if_statement -> . if_statement ELSE LMB statement RMB
    (22) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (15) variable_declaration -> . VAR IDENTIFIER EQUAL expression
    (16) variable_value_change -> . IDENTIFIER EQUAL expression
    (18) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (47) empty -> .
    (37) calculate -> . calculate baseoperator INT
    (38) calculate -> . calculate baseoperator FLOAT
    (39) calculate -> . calculate baseoperator IDENTIFIER
    (40) calculate -> . INT
    (41) calculate -> . FLOAT
    (42) calculate -> . IDENTIFIER
    (34) string_calculate -> . string_calculate stringoperator STRING
    (35) string_calculate -> . STRING
    (26) compare_expression -> . compare_expression compare_operator calculate
    (27) compare_expression -> . calculate
    (17) function_call -> . IDENTIFIER LSB function_parameter RSB

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    VAR             shift and go to state 17
    IDENTIFIER      shift and go to state 18
    FUNCTION        shift and go to state 19
    RMB             reduce using rule 47 (empty -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22

    if_statement                   shift and go to state 5
    compare_expression             shift and go to state 13
    statement                      shift and go to state 90
    expression                     shift and go to state 4
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    variable_value_change          shift and go to state 8
    function_declaration           shift and go to state 9
    empty                          shift and go to state 10
    calculate                      shift and go to state 11
    string_calculate               shift and go to state 12
    function_call                  shift and go to state 14

state 87

    (23) if_statement -> IF LSB compare_expression RSB LMB statement RMB .

    ELSE            reduce using rule 23 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    IF              reduce using rule 23 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    WHILE           reduce using rule 23 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    VAR             reduce using rule 23 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    IDENTIFIER      reduce using rule 23 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    FUNCTION        reduce using rule 23 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    INT             reduce using rule 23 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    FLOAT           reduce using rule 23 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    STRING          reduce using rule 23 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    $end            reduce using rule 23 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    RMB             reduce using rule 23 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)


state 88

    (22) while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .

    IF              reduce using rule 22 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    WHILE           reduce using rule 22 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    VAR             reduce using rule 22 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    IDENTIFIER      reduce using rule 22 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    FUNCTION        reduce using rule 22 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    INT             reduce using rule 22 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    FLOAT           reduce using rule 22 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    STRING          reduce using rule 22 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    $end            reduce using rule 22 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    RMB             reduce using rule 22 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)


state 89

    (18) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement . RMB

    RMB             shift and go to state 91


state 90

    (24) if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement . RMB

    RMB             shift and go to state 92


state 91

    (18) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .

    IF              reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    WHILE           reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    VAR             reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    IDENTIFIER      reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    FUNCTION        reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    INT             reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    FLOAT           reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    STRING          reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    $end            reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    RMB             reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)


state 92

    (24) if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .

    ELSE            reduce using rule 24 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    IF              reduce using rule 24 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    WHILE           reduce using rule 24 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    VAR             reduce using rule 24 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    IDENTIFIER      reduce using rule 24 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    FUNCTION        reduce using rule 24 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    INT             reduce using rule 24 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    FLOAT           reduce using rule 24 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    STRING          reduce using rule 24 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    $end            reduce using rule 24 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    RMB             reduce using rule 24 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for INT in state 2 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 2 resolved as shift
WARNING: shift/reduce conflict for STRING in state 2 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 18 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (program -> root)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 11 resolved using rule (expression -> calculate)
WARNING: rejected rule (compare_expression -> calculate) in state 11
