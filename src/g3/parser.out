Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    INPUT
    PRINT
    PYTHON
    SLICE

Grammar

Rule 0     S' -> root
Rule 1     root -> exex
Rule 2     exex -> exex expression
Rule 3     exex -> expression
Rule 4     expression -> expression variable_declaration SEMI
Rule 5     expression -> expression variable_value_change SEMI
Rule 6     expression -> expression if_statement
Rule 7     expression -> expression function
Rule 8     expression -> expression function_call SEMI
Rule 9     expression -> expression repeat
Rule 10    expression -> expression for
Rule 11    expression -> expression while
Rule 12    expression -> expression use SEMI
Rule 13    expression -> expression error_handling
Rule 14    expression -> expression variable_alone SEMI
Rule 15    expression -> expression global_variable SEMI
Rule 16    expression -> expression class_def
Rule 17    expression -> expression debug SEMI
Rule 18    expression -> expression function_class SEMI
Rule 19    expression -> expression inside_root SEMI
Rule 20    expression -> variable_declaration SEMI
Rule 21    expression -> variable_value_change SEMI
Rule 22    expression -> if_statement
Rule 23    expression -> function
Rule 24    expression -> function_call SEMI
Rule 25    expression -> repeat
Rule 26    expression -> for
Rule 27    expression -> while
Rule 28    expression -> use SEMI
Rule 29    expression -> error_handling
Rule 30    expression -> variable_alone SEMI
Rule 31    expression -> global_variable SEMI
Rule 32    expression -> class_def
Rule 33    expression -> debug SEMI
Rule 34    expression -> function_class SEMI
Rule 35    expression -> inside_root SEMI
Rule 36    expression -> empty
Rule 37    error_handling -> try catch
Rule 38    try -> TRY LMB expression RMB
Rule 39    catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB
Rule 40    for -> for_head for_body
Rule 41    for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB
Rule 42    for_body -> LMB expression RMB
Rule 43    while -> while_head while_body
Rule 44    while_head -> WHILE LSB condition RSB
Rule 45    while_body -> LMB expression RMB
Rule 46    repeat -> repeat_head repeat_body
Rule 47    repeat_head -> REPEAT LSB calculate RSB
Rule 48    repeat_body -> LMB expression RMB
Rule 49    inside_root -> inside
Rule 50    inside_root -> inside DOT IDENTIFIER LSB parameter RSB
Rule 51    inside -> DOT IDENTIFIER LSB empty RSB
Rule 52    inside -> inside DOT IDENTIFIER
Rule 53    inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
Rule 54    inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
Rule 55    inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
Rule 56    inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
Rule 57    inside -> IDENTIFIER DOT IDENTIFIER LSB parameter RSB
Rule 58    inside -> IDENTIFIER DOT IDENTIFIER LSB empty RSB
Rule 59    inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER
Rule 60    inside -> IDENTIFIER DOT IDENTIFIER
Rule 61    function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
Rule 62    function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
Rule 63    function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
Rule 64    function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
Rule 65    class_def -> CLASS IDENTIFIER LMB expression RMB
Rule 66    function -> function_head function_body
Rule 67    function_head -> FUNCTION IDENTIFIER LSB parameter RSB
Rule 68    function_head -> FUNCTION IDENTIFIER LSB empty RSB
Rule 69    function_body -> LMB expression RMB
Rule 70    function_call -> IDENTIFIER LSB parameter RSB
Rule 71    function_call -> IDENTIFIER LSB empty RSB
Rule 72    parameter -> parameter COMMA calculate
Rule 73    parameter -> calculate
Rule 74    debug -> USE DEBUG
Rule 75    if_statement -> if_statement_1 if_statement_2 if_statement_3
Rule 76    if_statement -> if_statement_1 if_statement_2
Rule 77    if_statement -> if_statement_1 if_statement_3
Rule 78    if_statement -> if_statement_1
Rule 79    if_statement_1 -> IF LSB condition RSB LMB expression RMB
Rule 80    if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB
Rule 81    if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
Rule 82    if_statement_3 -> ELSE LMB expression RMB
Rule 83    condition -> condition LB calculate
Rule 84    condition -> condition RB calculate
Rule 85    condition -> condition LB EQUAL calculate
Rule 86    condition -> condition RB EQUAL calculate
Rule 87    condition -> condition EQUAL calculate
Rule 88    condition -> calculate
Rule 89    use -> USE use_params
Rule 90    use_params -> IDENTIFIER
Rule 91    global_variable -> GLOBAL IDENTIFIER
Rule 92    variable_alone -> IDENTIFIER
Rule 93    variable_value_change -> IDENTIFIER EQUAL LIST
Rule 94    variable_value_change -> IDENTIFIER EQUAL calculate
Rule 95    variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate
Rule 96    variable_declaration -> VAR IDENTIFIER EQUAL calculate
Rule 97    variable_declaration -> VAR IDENTIFIER
Rule 98    calculate -> calculate PLUS calculate
Rule 99    calculate -> calculate MINUS calculate
Rule 100   calculate -> MINUS calculate
Rule 101   calculate -> calculate MUL calculate
Rule 102   calculate -> calculate DIV calculate
Rule 103   calculate -> INT
Rule 104   calculate -> FLOAT
Rule 105   calculate -> STRING
Rule 106   calculate -> IDENTIFIER
Rule 107   calculate -> IDENTIFIER LIST
Rule 108   calculate -> LIST
Rule 109   calculate -> LSB calculate RSB
Rule 110   empty -> <empty>

Terminals, with rules where they appear

CATCH                : 39
CLASS                : 65
COLON                : 
COMMA                : 72
DEBUG                : 74
DIV                  : 102
DOT                  : 50 51 52 53 54 55 56 57 58 59 60
ELSE                 : 80 81 82
EQUAL                : 61 62 63 64 85 86 87 93 94 95 96
FLOAT                : 104
FOR                  : 41
FUNCTION             : 67 68
GLOBAL               : 91
IDENTIFIER           : 39 41 41 50 51 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 67 68 70 71 90 91 92 93 94 95 96 97 106 107
IF                   : 79 80 81
IN                   : 41
INPUT                : 
INT                  : 103
LB                   : 83 85
LIST                 : 93 95 107 108
LMB                  : 38 39 42 45 48 65 69 79 80 81 82
LSB                  : 39 41 44 47 50 51 53 53 54 54 55 55 56 56 57 58 59 61 62 63 64 67 68 70 71 79 80 81 109
MINUS                : 99 100
MUL                  : 101
PLUS                 : 98
PRINT                : 
PYTHON               : 
RB                   : 84 86
REPEAT               : 47
RMB                  : 38 39 42 45 48 65 69 79 80 81 82
RSB                  : 39 41 44 47 50 51 53 53 54 54 55 55 56 56 57 58 59 61 62 63 64 67 68 70 71 79 80 81 109
SEMI                 : 4 5 8 12 14 15 17 18 19 20 21 24 28 30 31 33 34 35
SLICE                : 
STRING               : 105
TRY                  : 38
USE                  : 74 89
VAR                  : 61 62 95 96 97
WHILE                : 44
error                : 

Nonterminals, with rules where they appear

calculate            : 47 72 73 83 84 85 86 87 88 94 95 96 98 98 99 99 100 101 101 102 102 109
catch                : 37
class_def            : 16 32
condition            : 44 79 80 81 83 84 85 86 87
debug                : 17 33
empty                : 36 51 54 54 55 56 58 62 64 68 71
error_handling       : 13 29
exex                 : 1 2
expression           : 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 38 39 42 45 48 65 69 79 80 81 82
for                  : 10 26
for_body             : 40
for_head             : 40
function             : 7 23
function_body        : 66
function_call        : 8 24
function_class       : 18 34
function_head        : 66
global_variable      : 15 31
if_statement         : 6 22
if_statement_1       : 75 76 77 78
if_statement_2       : 75 76 81
if_statement_3       : 75 77
inside               : 49 50 52
inside_root          : 19 35
parameter            : 50 53 53 55 56 57 59 61 63 67 70 72
repeat               : 9 25
repeat_body          : 46
repeat_head          : 46
root                 : 0
try                  : 37
use                  : 12 28
use_params           : 89
variable_alone       : 14 30
variable_declaration : 4 20
variable_value_change : 5 21
while                : 11 27
while_body           : 43
while_head           : 43

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . exex
    (2) exex -> . exex expression
    (3) exex -> . expression
    (4) expression -> . expression variable_declaration SEMI
    (5) expression -> . expression variable_value_change SEMI
    (6) expression -> . expression if_statement
    (7) expression -> . expression function
    (8) expression -> . expression function_call SEMI
    (9) expression -> . expression repeat
    (10) expression -> . expression for
    (11) expression -> . expression while
    (12) expression -> . expression use SEMI
    (13) expression -> . expression error_handling
    (14) expression -> . expression variable_alone SEMI
    (15) expression -> . expression global_variable SEMI
    (16) expression -> . expression class_def
    (17) expression -> . expression debug SEMI
    (18) expression -> . expression function_class SEMI
    (19) expression -> . expression inside_root SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . inside_root SEMI
    (36) expression -> . empty
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (110) empty -> .
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    $end            reduce using rule 110 (empty -> .)
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 110 (empty -> .) ]
  ! USE             [ reduce using rule 110 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 110 (empty -> .) ]
  ! CLASS           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 110 (empty -> .) ]
  ! REPEAT          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! TRY             [ reduce using rule 110 (empty -> .) ]
  ! DOT             [ reduce using rule 110 (empty -> .) ]

    root                           shift and go to state 1
    exex                           shift and go to state 2
    expression                     shift and go to state 3
    variable_declaration           shift and go to state 4
    variable_value_change          shift and go to state 5
    if_statement                   shift and go to state 6
    function                       shift and go to state 7
    function_call                  shift and go to state 8
    repeat                         shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    use                            shift and go to state 12
    error_handling                 shift and go to state 13
    variable_alone                 shift and go to state 14
    global_variable                shift and go to state 15
    class_def                      shift and go to state 16
    debug                          shift and go to state 17
    function_class                 shift and go to state 18
    inside_root                    shift and go to state 19
    empty                          shift and go to state 20
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 1

    (0) S' -> root .



state 2

    (1) root -> exex .
    (2) exex -> exex . expression
    (4) expression -> . expression variable_declaration SEMI
    (5) expression -> . expression variable_value_change SEMI
    (6) expression -> . expression if_statement
    (7) expression -> . expression function
    (8) expression -> . expression function_call SEMI
    (9) expression -> . expression repeat
    (10) expression -> . expression for
    (11) expression -> . expression while
    (12) expression -> . expression use SEMI
    (13) expression -> . expression error_handling
    (14) expression -> . expression variable_alone SEMI
    (15) expression -> . expression global_variable SEMI
    (16) expression -> . expression class_def
    (17) expression -> . expression debug SEMI
    (18) expression -> . expression function_class SEMI
    (19) expression -> . expression inside_root SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . inside_root SEMI
    (36) expression -> . empty
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (110) empty -> .
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (root -> exex .)
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    $end            reduce using rule 1 (root -> exex .)
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 110 (empty -> .) ]
  ! USE             [ reduce using rule 110 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 110 (empty -> .) ]
  ! CLASS           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 110 (empty -> .) ]
  ! REPEAT          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! TRY             [ reduce using rule 110 (empty -> .) ]
  ! DOT             [ reduce using rule 110 (empty -> .) ]
  ! $end            [ reduce using rule 110 (empty -> .) ]

    expression                     shift and go to state 40
    variable_declaration           shift and go to state 4
    variable_value_change          shift and go to state 5
    if_statement                   shift and go to state 6
    function                       shift and go to state 7
    function_call                  shift and go to state 8
    repeat                         shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    use                            shift and go to state 12
    error_handling                 shift and go to state 13
    variable_alone                 shift and go to state 14
    global_variable                shift and go to state 15
    class_def                      shift and go to state 16
    debug                          shift and go to state 17
    function_class                 shift and go to state 18
    inside_root                    shift and go to state 19
    empty                          shift and go to state 20
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 3

    (3) exex -> expression .
    (4) expression -> expression . variable_declaration SEMI
    (5) expression -> expression . variable_value_change SEMI
    (6) expression -> expression . if_statement
    (7) expression -> expression . function
    (8) expression -> expression . function_call SEMI
    (9) expression -> expression . repeat
    (10) expression -> expression . for
    (11) expression -> expression . while
    (12) expression -> expression . use SEMI
    (13) expression -> expression . error_handling
    (14) expression -> expression . variable_alone SEMI
    (15) expression -> expression . global_variable SEMI
    (16) expression -> expression . class_def
    (17) expression -> expression . debug SEMI
    (18) expression -> expression . function_class SEMI
    (19) expression -> expression . inside_root SEMI
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    $end            reduce using rule 3 (exex -> expression .)
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

  ! VAR             [ reduce using rule 3 (exex -> expression .) ]
  ! IDENTIFIER      [ reduce using rule 3 (exex -> expression .) ]
  ! USE             [ reduce using rule 3 (exex -> expression .) ]
  ! GLOBAL          [ reduce using rule 3 (exex -> expression .) ]
  ! CLASS           [ reduce using rule 3 (exex -> expression .) ]
  ! IF              [ reduce using rule 3 (exex -> expression .) ]
  ! FUNCTION        [ reduce using rule 3 (exex -> expression .) ]
  ! REPEAT          [ reduce using rule 3 (exex -> expression .) ]
  ! FOR             [ reduce using rule 3 (exex -> expression .) ]
  ! WHILE           [ reduce using rule 3 (exex -> expression .) ]
  ! TRY             [ reduce using rule 3 (exex -> expression .) ]
  ! DOT             [ reduce using rule 3 (exex -> expression .) ]

    variable_declaration           shift and go to state 41
    variable_value_change          shift and go to state 42
    if_statement                   shift and go to state 43
    function                       shift and go to state 44
    function_call                  shift and go to state 45
    repeat                         shift and go to state 46
    for                            shift and go to state 47
    while                          shift and go to state 48
    use                            shift and go to state 49
    error_handling                 shift and go to state 50
    variable_alone                 shift and go to state 51
    global_variable                shift and go to state 52
    class_def                      shift and go to state 53
    debug                          shift and go to state 54
    function_class                 shift and go to state 55
    inside_root                    shift and go to state 56
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 4

    (20) expression -> variable_declaration . SEMI

    SEMI            shift and go to state 57


state 5

    (21) expression -> variable_value_change . SEMI

    SEMI            shift and go to state 58


state 6

    (22) expression -> if_statement .

    VAR             reduce using rule 22 (expression -> if_statement .)
    IDENTIFIER      reduce using rule 22 (expression -> if_statement .)
    USE             reduce using rule 22 (expression -> if_statement .)
    GLOBAL          reduce using rule 22 (expression -> if_statement .)
    CLASS           reduce using rule 22 (expression -> if_statement .)
    IF              reduce using rule 22 (expression -> if_statement .)
    FUNCTION        reduce using rule 22 (expression -> if_statement .)
    REPEAT          reduce using rule 22 (expression -> if_statement .)
    FOR             reduce using rule 22 (expression -> if_statement .)
    WHILE           reduce using rule 22 (expression -> if_statement .)
    TRY             reduce using rule 22 (expression -> if_statement .)
    DOT             reduce using rule 22 (expression -> if_statement .)
    $end            reduce using rule 22 (expression -> if_statement .)
    RMB             reduce using rule 22 (expression -> if_statement .)


state 7

    (23) expression -> function .

    VAR             reduce using rule 23 (expression -> function .)
    IDENTIFIER      reduce using rule 23 (expression -> function .)
    USE             reduce using rule 23 (expression -> function .)
    GLOBAL          reduce using rule 23 (expression -> function .)
    CLASS           reduce using rule 23 (expression -> function .)
    IF              reduce using rule 23 (expression -> function .)
    FUNCTION        reduce using rule 23 (expression -> function .)
    REPEAT          reduce using rule 23 (expression -> function .)
    FOR             reduce using rule 23 (expression -> function .)
    WHILE           reduce using rule 23 (expression -> function .)
    TRY             reduce using rule 23 (expression -> function .)
    DOT             reduce using rule 23 (expression -> function .)
    $end            reduce using rule 23 (expression -> function .)
    RMB             reduce using rule 23 (expression -> function .)


state 8

    (24) expression -> function_call . SEMI

    SEMI            shift and go to state 59


state 9

    (25) expression -> repeat .

    VAR             reduce using rule 25 (expression -> repeat .)
    IDENTIFIER      reduce using rule 25 (expression -> repeat .)
    USE             reduce using rule 25 (expression -> repeat .)
    GLOBAL          reduce using rule 25 (expression -> repeat .)
    CLASS           reduce using rule 25 (expression -> repeat .)
    IF              reduce using rule 25 (expression -> repeat .)
    FUNCTION        reduce using rule 25 (expression -> repeat .)
    REPEAT          reduce using rule 25 (expression -> repeat .)
    FOR             reduce using rule 25 (expression -> repeat .)
    WHILE           reduce using rule 25 (expression -> repeat .)
    TRY             reduce using rule 25 (expression -> repeat .)
    DOT             reduce using rule 25 (expression -> repeat .)
    $end            reduce using rule 25 (expression -> repeat .)
    RMB             reduce using rule 25 (expression -> repeat .)


state 10

    (26) expression -> for .

    VAR             reduce using rule 26 (expression -> for .)
    IDENTIFIER      reduce using rule 26 (expression -> for .)
    USE             reduce using rule 26 (expression -> for .)
    GLOBAL          reduce using rule 26 (expression -> for .)
    CLASS           reduce using rule 26 (expression -> for .)
    IF              reduce using rule 26 (expression -> for .)
    FUNCTION        reduce using rule 26 (expression -> for .)
    REPEAT          reduce using rule 26 (expression -> for .)
    FOR             reduce using rule 26 (expression -> for .)
    WHILE           reduce using rule 26 (expression -> for .)
    TRY             reduce using rule 26 (expression -> for .)
    DOT             reduce using rule 26 (expression -> for .)
    $end            reduce using rule 26 (expression -> for .)
    RMB             reduce using rule 26 (expression -> for .)


state 11

    (27) expression -> while .

    VAR             reduce using rule 27 (expression -> while .)
    IDENTIFIER      reduce using rule 27 (expression -> while .)
    USE             reduce using rule 27 (expression -> while .)
    GLOBAL          reduce using rule 27 (expression -> while .)
    CLASS           reduce using rule 27 (expression -> while .)
    IF              reduce using rule 27 (expression -> while .)
    FUNCTION        reduce using rule 27 (expression -> while .)
    REPEAT          reduce using rule 27 (expression -> while .)
    FOR             reduce using rule 27 (expression -> while .)
    WHILE           reduce using rule 27 (expression -> while .)
    TRY             reduce using rule 27 (expression -> while .)
    DOT             reduce using rule 27 (expression -> while .)
    $end            reduce using rule 27 (expression -> while .)
    RMB             reduce using rule 27 (expression -> while .)


state 12

    (28) expression -> use . SEMI

    SEMI            shift and go to state 60


state 13

    (29) expression -> error_handling .

    VAR             reduce using rule 29 (expression -> error_handling .)
    IDENTIFIER      reduce using rule 29 (expression -> error_handling .)
    USE             reduce using rule 29 (expression -> error_handling .)
    GLOBAL          reduce using rule 29 (expression -> error_handling .)
    CLASS           reduce using rule 29 (expression -> error_handling .)
    IF              reduce using rule 29 (expression -> error_handling .)
    FUNCTION        reduce using rule 29 (expression -> error_handling .)
    REPEAT          reduce using rule 29 (expression -> error_handling .)
    FOR             reduce using rule 29 (expression -> error_handling .)
    WHILE           reduce using rule 29 (expression -> error_handling .)
    TRY             reduce using rule 29 (expression -> error_handling .)
    DOT             reduce using rule 29 (expression -> error_handling .)
    $end            reduce using rule 29 (expression -> error_handling .)
    RMB             reduce using rule 29 (expression -> error_handling .)


state 14

    (30) expression -> variable_alone . SEMI

    SEMI            shift and go to state 61


state 15

    (31) expression -> global_variable . SEMI

    SEMI            shift and go to state 62


state 16

    (32) expression -> class_def .

    VAR             reduce using rule 32 (expression -> class_def .)
    IDENTIFIER      reduce using rule 32 (expression -> class_def .)
    USE             reduce using rule 32 (expression -> class_def .)
    GLOBAL          reduce using rule 32 (expression -> class_def .)
    CLASS           reduce using rule 32 (expression -> class_def .)
    IF              reduce using rule 32 (expression -> class_def .)
    FUNCTION        reduce using rule 32 (expression -> class_def .)
    REPEAT          reduce using rule 32 (expression -> class_def .)
    FOR             reduce using rule 32 (expression -> class_def .)
    WHILE           reduce using rule 32 (expression -> class_def .)
    TRY             reduce using rule 32 (expression -> class_def .)
    DOT             reduce using rule 32 (expression -> class_def .)
    $end            reduce using rule 32 (expression -> class_def .)
    RMB             reduce using rule 32 (expression -> class_def .)


state 17

    (33) expression -> debug . SEMI

    SEMI            shift and go to state 63


state 18

    (34) expression -> function_class . SEMI

    SEMI            shift and go to state 64


state 19

    (35) expression -> inside_root . SEMI

    SEMI            shift and go to state 65


state 20

    (36) expression -> empty .

    VAR             reduce using rule 36 (expression -> empty .)
    IDENTIFIER      reduce using rule 36 (expression -> empty .)
    USE             reduce using rule 36 (expression -> empty .)
    GLOBAL          reduce using rule 36 (expression -> empty .)
    CLASS           reduce using rule 36 (expression -> empty .)
    IF              reduce using rule 36 (expression -> empty .)
    FUNCTION        reduce using rule 36 (expression -> empty .)
    REPEAT          reduce using rule 36 (expression -> empty .)
    FOR             reduce using rule 36 (expression -> empty .)
    WHILE           reduce using rule 36 (expression -> empty .)
    TRY             reduce using rule 36 (expression -> empty .)
    DOT             reduce using rule 36 (expression -> empty .)
    $end            reduce using rule 36 (expression -> empty .)
    RMB             reduce using rule 36 (expression -> empty .)


state 21

    (95) variable_declaration -> VAR . IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> VAR . IDENTIFIER EQUAL calculate
    (97) variable_declaration -> VAR . IDENTIFIER
    (61) function_class -> VAR . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> VAR . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB

    IDENTIFIER      shift and go to state 66


state 22

    (93) variable_value_change -> IDENTIFIER . EQUAL LIST
    (94) variable_value_change -> IDENTIFIER . EQUAL calculate
    (70) function_call -> IDENTIFIER . LSB parameter RSB
    (71) function_call -> IDENTIFIER . LSB empty RSB
    (92) variable_alone -> IDENTIFIER .
    (63) function_class -> IDENTIFIER . EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> IDENTIFIER . EQUAL IDENTIFIER LSB empty RSB
    (53) inside -> IDENTIFIER . LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> IDENTIFIER . LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> IDENTIFIER . LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> IDENTIFIER . LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> IDENTIFIER . DOT IDENTIFIER LSB parameter RSB
    (58) inside -> IDENTIFIER . DOT IDENTIFIER LSB empty RSB
    (59) inside -> IDENTIFIER . LSB parameter RSB DOT IDENTIFIER
    (60) inside -> IDENTIFIER . DOT IDENTIFIER

    EQUAL           shift and go to state 67
    LSB             shift and go to state 68
    SEMI            reduce using rule 92 (variable_alone -> IDENTIFIER .)
    DOT             shift and go to state 69


state 23

    (75) if_statement -> if_statement_1 . if_statement_2 if_statement_3
    (76) if_statement -> if_statement_1 . if_statement_2
    (77) if_statement -> if_statement_1 . if_statement_3
    (78) if_statement -> if_statement_1 .
    (80) if_statement_2 -> . ELSE IF LSB condition RSB LMB expression RMB
    (81) if_statement_2 -> . if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
    (82) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 78 (if_statement -> if_statement_1 .)
    IDENTIFIER      reduce using rule 78 (if_statement -> if_statement_1 .)
    USE             reduce using rule 78 (if_statement -> if_statement_1 .)
    GLOBAL          reduce using rule 78 (if_statement -> if_statement_1 .)
    CLASS           reduce using rule 78 (if_statement -> if_statement_1 .)
    IF              reduce using rule 78 (if_statement -> if_statement_1 .)
    FUNCTION        reduce using rule 78 (if_statement -> if_statement_1 .)
    REPEAT          reduce using rule 78 (if_statement -> if_statement_1 .)
    FOR             reduce using rule 78 (if_statement -> if_statement_1 .)
    WHILE           reduce using rule 78 (if_statement -> if_statement_1 .)
    TRY             reduce using rule 78 (if_statement -> if_statement_1 .)
    DOT             reduce using rule 78 (if_statement -> if_statement_1 .)
    $end            reduce using rule 78 (if_statement -> if_statement_1 .)
    RMB             reduce using rule 78 (if_statement -> if_statement_1 .)
    ELSE            shift and go to state 72

    if_statement_2                 shift and go to state 70
    if_statement_3                 shift and go to state 71

state 24

    (66) function -> function_head . function_body
    (69) function_body -> . LMB expression RMB

    LMB             shift and go to state 74

    function_body                  shift and go to state 73

state 25

    (46) repeat -> repeat_head . repeat_body
    (48) repeat_body -> . LMB expression RMB

    LMB             shift and go to state 76

    repeat_body                    shift and go to state 75

state 26

    (40) for -> for_head . for_body
    (42) for_body -> . LMB expression RMB

    LMB             shift and go to state 78

    for_body                       shift and go to state 77

state 27

    (43) while -> while_head . while_body
    (45) while_body -> . LMB expression RMB

    LMB             shift and go to state 80

    while_body                     shift and go to state 79

state 28

    (89) use -> USE . use_params
    (74) debug -> USE . DEBUG
    (90) use_params -> . IDENTIFIER

    DEBUG           shift and go to state 82
    IDENTIFIER      shift and go to state 83

    use_params                     shift and go to state 81

state 29

    (37) error_handling -> try . catch
    (39) catch -> . CATCH LSB IDENTIFIER RSB LMB expression RMB

    CATCH           shift and go to state 85

    catch                          shift and go to state 84

state 30

    (91) global_variable -> GLOBAL . IDENTIFIER

    IDENTIFIER      shift and go to state 86


state 31

    (65) class_def -> CLASS . IDENTIFIER LMB expression RMB

    IDENTIFIER      shift and go to state 87


state 32

    (49) inside_root -> inside .
    (50) inside_root -> inside . DOT IDENTIFIER LSB parameter RSB
    (52) inside -> inside . DOT IDENTIFIER

    SEMI            reduce using rule 49 (inside_root -> inside .)
    DOT             shift and go to state 88


state 33

    (51) inside -> DOT . IDENTIFIER LSB empty RSB

    IDENTIFIER      shift and go to state 89


state 34

    (79) if_statement_1 -> IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 90


state 35

    (67) function_head -> FUNCTION . IDENTIFIER LSB parameter RSB
    (68) function_head -> FUNCTION . IDENTIFIER LSB empty RSB

    IDENTIFIER      shift and go to state 91


state 36

    (47) repeat_head -> REPEAT . LSB calculate RSB

    LSB             shift and go to state 92


state 37

    (41) for_head -> FOR . LSB IDENTIFIER IN IDENTIFIER RSB

    LSB             shift and go to state 93


state 38

    (44) while_head -> WHILE . LSB condition RSB

    LSB             shift and go to state 94


state 39

    (38) try -> TRY . LMB expression RMB

    LMB             shift and go to state 95


state 40

    (2) exex -> exex expression .
    (4) expression -> expression . variable_declaration SEMI
    (5) expression -> expression . variable_value_change SEMI
    (6) expression -> expression . if_statement
    (7) expression -> expression . function
    (8) expression -> expression . function_call SEMI
    (9) expression -> expression . repeat
    (10) expression -> expression . for
    (11) expression -> expression . while
    (12) expression -> expression . use SEMI
    (13) expression -> expression . error_handling
    (14) expression -> expression . variable_alone SEMI
    (15) expression -> expression . global_variable SEMI
    (16) expression -> expression . class_def
    (17) expression -> expression . debug SEMI
    (18) expression -> expression . function_class SEMI
    (19) expression -> expression . inside_root SEMI
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    $end            reduce using rule 2 (exex -> exex expression .)
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

  ! VAR             [ reduce using rule 2 (exex -> exex expression .) ]
  ! IDENTIFIER      [ reduce using rule 2 (exex -> exex expression .) ]
  ! USE             [ reduce using rule 2 (exex -> exex expression .) ]
  ! GLOBAL          [ reduce using rule 2 (exex -> exex expression .) ]
  ! CLASS           [ reduce using rule 2 (exex -> exex expression .) ]
  ! IF              [ reduce using rule 2 (exex -> exex expression .) ]
  ! FUNCTION        [ reduce using rule 2 (exex -> exex expression .) ]
  ! REPEAT          [ reduce using rule 2 (exex -> exex expression .) ]
  ! FOR             [ reduce using rule 2 (exex -> exex expression .) ]
  ! WHILE           [ reduce using rule 2 (exex -> exex expression .) ]
  ! TRY             [ reduce using rule 2 (exex -> exex expression .) ]
  ! DOT             [ reduce using rule 2 (exex -> exex expression .) ]

    variable_declaration           shift and go to state 41
    variable_value_change          shift and go to state 42
    if_statement                   shift and go to state 43
    function                       shift and go to state 44
    function_call                  shift and go to state 45
    repeat                         shift and go to state 46
    for                            shift and go to state 47
    while                          shift and go to state 48
    use                            shift and go to state 49
    error_handling                 shift and go to state 50
    variable_alone                 shift and go to state 51
    global_variable                shift and go to state 52
    class_def                      shift and go to state 53
    debug                          shift and go to state 54
    function_class                 shift and go to state 55
    inside_root                    shift and go to state 56
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 41

    (4) expression -> expression variable_declaration . SEMI

    SEMI            shift and go to state 96


state 42

    (5) expression -> expression variable_value_change . SEMI

    SEMI            shift and go to state 97


state 43

    (6) expression -> expression if_statement .

    VAR             reduce using rule 6 (expression -> expression if_statement .)
    IDENTIFIER      reduce using rule 6 (expression -> expression if_statement .)
    USE             reduce using rule 6 (expression -> expression if_statement .)
    GLOBAL          reduce using rule 6 (expression -> expression if_statement .)
    CLASS           reduce using rule 6 (expression -> expression if_statement .)
    IF              reduce using rule 6 (expression -> expression if_statement .)
    FUNCTION        reduce using rule 6 (expression -> expression if_statement .)
    REPEAT          reduce using rule 6 (expression -> expression if_statement .)
    FOR             reduce using rule 6 (expression -> expression if_statement .)
    WHILE           reduce using rule 6 (expression -> expression if_statement .)
    TRY             reduce using rule 6 (expression -> expression if_statement .)
    DOT             reduce using rule 6 (expression -> expression if_statement .)
    $end            reduce using rule 6 (expression -> expression if_statement .)
    RMB             reduce using rule 6 (expression -> expression if_statement .)


state 44

    (7) expression -> expression function .

    VAR             reduce using rule 7 (expression -> expression function .)
    IDENTIFIER      reduce using rule 7 (expression -> expression function .)
    USE             reduce using rule 7 (expression -> expression function .)
    GLOBAL          reduce using rule 7 (expression -> expression function .)
    CLASS           reduce using rule 7 (expression -> expression function .)
    IF              reduce using rule 7 (expression -> expression function .)
    FUNCTION        reduce using rule 7 (expression -> expression function .)
    REPEAT          reduce using rule 7 (expression -> expression function .)
    FOR             reduce using rule 7 (expression -> expression function .)
    WHILE           reduce using rule 7 (expression -> expression function .)
    TRY             reduce using rule 7 (expression -> expression function .)
    DOT             reduce using rule 7 (expression -> expression function .)
    $end            reduce using rule 7 (expression -> expression function .)
    RMB             reduce using rule 7 (expression -> expression function .)


state 45

    (8) expression -> expression function_call . SEMI

    SEMI            shift and go to state 98


state 46

    (9) expression -> expression repeat .

    VAR             reduce using rule 9 (expression -> expression repeat .)
    IDENTIFIER      reduce using rule 9 (expression -> expression repeat .)
    USE             reduce using rule 9 (expression -> expression repeat .)
    GLOBAL          reduce using rule 9 (expression -> expression repeat .)
    CLASS           reduce using rule 9 (expression -> expression repeat .)
    IF              reduce using rule 9 (expression -> expression repeat .)
    FUNCTION        reduce using rule 9 (expression -> expression repeat .)
    REPEAT          reduce using rule 9 (expression -> expression repeat .)
    FOR             reduce using rule 9 (expression -> expression repeat .)
    WHILE           reduce using rule 9 (expression -> expression repeat .)
    TRY             reduce using rule 9 (expression -> expression repeat .)
    DOT             reduce using rule 9 (expression -> expression repeat .)
    $end            reduce using rule 9 (expression -> expression repeat .)
    RMB             reduce using rule 9 (expression -> expression repeat .)


state 47

    (10) expression -> expression for .

    VAR             reduce using rule 10 (expression -> expression for .)
    IDENTIFIER      reduce using rule 10 (expression -> expression for .)
    USE             reduce using rule 10 (expression -> expression for .)
    GLOBAL          reduce using rule 10 (expression -> expression for .)
    CLASS           reduce using rule 10 (expression -> expression for .)
    IF              reduce using rule 10 (expression -> expression for .)
    FUNCTION        reduce using rule 10 (expression -> expression for .)
    REPEAT          reduce using rule 10 (expression -> expression for .)
    FOR             reduce using rule 10 (expression -> expression for .)
    WHILE           reduce using rule 10 (expression -> expression for .)
    TRY             reduce using rule 10 (expression -> expression for .)
    DOT             reduce using rule 10 (expression -> expression for .)
    $end            reduce using rule 10 (expression -> expression for .)
    RMB             reduce using rule 10 (expression -> expression for .)


state 48

    (11) expression -> expression while .

    VAR             reduce using rule 11 (expression -> expression while .)
    IDENTIFIER      reduce using rule 11 (expression -> expression while .)
    USE             reduce using rule 11 (expression -> expression while .)
    GLOBAL          reduce using rule 11 (expression -> expression while .)
    CLASS           reduce using rule 11 (expression -> expression while .)
    IF              reduce using rule 11 (expression -> expression while .)
    FUNCTION        reduce using rule 11 (expression -> expression while .)
    REPEAT          reduce using rule 11 (expression -> expression while .)
    FOR             reduce using rule 11 (expression -> expression while .)
    WHILE           reduce using rule 11 (expression -> expression while .)
    TRY             reduce using rule 11 (expression -> expression while .)
    DOT             reduce using rule 11 (expression -> expression while .)
    $end            reduce using rule 11 (expression -> expression while .)
    RMB             reduce using rule 11 (expression -> expression while .)


state 49

    (12) expression -> expression use . SEMI

    SEMI            shift and go to state 99


state 50

    (13) expression -> expression error_handling .

    VAR             reduce using rule 13 (expression -> expression error_handling .)
    IDENTIFIER      reduce using rule 13 (expression -> expression error_handling .)
    USE             reduce using rule 13 (expression -> expression error_handling .)
    GLOBAL          reduce using rule 13 (expression -> expression error_handling .)
    CLASS           reduce using rule 13 (expression -> expression error_handling .)
    IF              reduce using rule 13 (expression -> expression error_handling .)
    FUNCTION        reduce using rule 13 (expression -> expression error_handling .)
    REPEAT          reduce using rule 13 (expression -> expression error_handling .)
    FOR             reduce using rule 13 (expression -> expression error_handling .)
    WHILE           reduce using rule 13 (expression -> expression error_handling .)
    TRY             reduce using rule 13 (expression -> expression error_handling .)
    DOT             reduce using rule 13 (expression -> expression error_handling .)
    $end            reduce using rule 13 (expression -> expression error_handling .)
    RMB             reduce using rule 13 (expression -> expression error_handling .)


state 51

    (14) expression -> expression variable_alone . SEMI

    SEMI            shift and go to state 100


state 52

    (15) expression -> expression global_variable . SEMI

    SEMI            shift and go to state 101


state 53

    (16) expression -> expression class_def .

    VAR             reduce using rule 16 (expression -> expression class_def .)
    IDENTIFIER      reduce using rule 16 (expression -> expression class_def .)
    USE             reduce using rule 16 (expression -> expression class_def .)
    GLOBAL          reduce using rule 16 (expression -> expression class_def .)
    CLASS           reduce using rule 16 (expression -> expression class_def .)
    IF              reduce using rule 16 (expression -> expression class_def .)
    FUNCTION        reduce using rule 16 (expression -> expression class_def .)
    REPEAT          reduce using rule 16 (expression -> expression class_def .)
    FOR             reduce using rule 16 (expression -> expression class_def .)
    WHILE           reduce using rule 16 (expression -> expression class_def .)
    TRY             reduce using rule 16 (expression -> expression class_def .)
    DOT             reduce using rule 16 (expression -> expression class_def .)
    $end            reduce using rule 16 (expression -> expression class_def .)
    RMB             reduce using rule 16 (expression -> expression class_def .)


state 54

    (17) expression -> expression debug . SEMI

    SEMI            shift and go to state 102


state 55

    (18) expression -> expression function_class . SEMI

    SEMI            shift and go to state 103


state 56

    (19) expression -> expression inside_root . SEMI

    SEMI            shift and go to state 104


state 57

    (20) expression -> variable_declaration SEMI .

    VAR             reduce using rule 20 (expression -> variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 20 (expression -> variable_declaration SEMI .)
    USE             reduce using rule 20 (expression -> variable_declaration SEMI .)
    GLOBAL          reduce using rule 20 (expression -> variable_declaration SEMI .)
    CLASS           reduce using rule 20 (expression -> variable_declaration SEMI .)
    IF              reduce using rule 20 (expression -> variable_declaration SEMI .)
    FUNCTION        reduce using rule 20 (expression -> variable_declaration SEMI .)
    REPEAT          reduce using rule 20 (expression -> variable_declaration SEMI .)
    FOR             reduce using rule 20 (expression -> variable_declaration SEMI .)
    WHILE           reduce using rule 20 (expression -> variable_declaration SEMI .)
    TRY             reduce using rule 20 (expression -> variable_declaration SEMI .)
    DOT             reduce using rule 20 (expression -> variable_declaration SEMI .)
    $end            reduce using rule 20 (expression -> variable_declaration SEMI .)
    RMB             reduce using rule 20 (expression -> variable_declaration SEMI .)


state 58

    (21) expression -> variable_value_change SEMI .

    VAR             reduce using rule 21 (expression -> variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 21 (expression -> variable_value_change SEMI .)
    USE             reduce using rule 21 (expression -> variable_value_change SEMI .)
    GLOBAL          reduce using rule 21 (expression -> variable_value_change SEMI .)
    CLASS           reduce using rule 21 (expression -> variable_value_change SEMI .)
    IF              reduce using rule 21 (expression -> variable_value_change SEMI .)
    FUNCTION        reduce using rule 21 (expression -> variable_value_change SEMI .)
    REPEAT          reduce using rule 21 (expression -> variable_value_change SEMI .)
    FOR             reduce using rule 21 (expression -> variable_value_change SEMI .)
    WHILE           reduce using rule 21 (expression -> variable_value_change SEMI .)
    TRY             reduce using rule 21 (expression -> variable_value_change SEMI .)
    DOT             reduce using rule 21 (expression -> variable_value_change SEMI .)
    $end            reduce using rule 21 (expression -> variable_value_change SEMI .)
    RMB             reduce using rule 21 (expression -> variable_value_change SEMI .)


state 59

    (24) expression -> function_call SEMI .

    VAR             reduce using rule 24 (expression -> function_call SEMI .)
    IDENTIFIER      reduce using rule 24 (expression -> function_call SEMI .)
    USE             reduce using rule 24 (expression -> function_call SEMI .)
    GLOBAL          reduce using rule 24 (expression -> function_call SEMI .)
    CLASS           reduce using rule 24 (expression -> function_call SEMI .)
    IF              reduce using rule 24 (expression -> function_call SEMI .)
    FUNCTION        reduce using rule 24 (expression -> function_call SEMI .)
    REPEAT          reduce using rule 24 (expression -> function_call SEMI .)
    FOR             reduce using rule 24 (expression -> function_call SEMI .)
    WHILE           reduce using rule 24 (expression -> function_call SEMI .)
    TRY             reduce using rule 24 (expression -> function_call SEMI .)
    DOT             reduce using rule 24 (expression -> function_call SEMI .)
    $end            reduce using rule 24 (expression -> function_call SEMI .)
    RMB             reduce using rule 24 (expression -> function_call SEMI .)


state 60

    (28) expression -> use SEMI .

    VAR             reduce using rule 28 (expression -> use SEMI .)
    IDENTIFIER      reduce using rule 28 (expression -> use SEMI .)
    USE             reduce using rule 28 (expression -> use SEMI .)
    GLOBAL          reduce using rule 28 (expression -> use SEMI .)
    CLASS           reduce using rule 28 (expression -> use SEMI .)
    IF              reduce using rule 28 (expression -> use SEMI .)
    FUNCTION        reduce using rule 28 (expression -> use SEMI .)
    REPEAT          reduce using rule 28 (expression -> use SEMI .)
    FOR             reduce using rule 28 (expression -> use SEMI .)
    WHILE           reduce using rule 28 (expression -> use SEMI .)
    TRY             reduce using rule 28 (expression -> use SEMI .)
    DOT             reduce using rule 28 (expression -> use SEMI .)
    $end            reduce using rule 28 (expression -> use SEMI .)
    RMB             reduce using rule 28 (expression -> use SEMI .)


state 61

    (30) expression -> variable_alone SEMI .

    VAR             reduce using rule 30 (expression -> variable_alone SEMI .)
    IDENTIFIER      reduce using rule 30 (expression -> variable_alone SEMI .)
    USE             reduce using rule 30 (expression -> variable_alone SEMI .)
    GLOBAL          reduce using rule 30 (expression -> variable_alone SEMI .)
    CLASS           reduce using rule 30 (expression -> variable_alone SEMI .)
    IF              reduce using rule 30 (expression -> variable_alone SEMI .)
    FUNCTION        reduce using rule 30 (expression -> variable_alone SEMI .)
    REPEAT          reduce using rule 30 (expression -> variable_alone SEMI .)
    FOR             reduce using rule 30 (expression -> variable_alone SEMI .)
    WHILE           reduce using rule 30 (expression -> variable_alone SEMI .)
    TRY             reduce using rule 30 (expression -> variable_alone SEMI .)
    DOT             reduce using rule 30 (expression -> variable_alone SEMI .)
    $end            reduce using rule 30 (expression -> variable_alone SEMI .)
    RMB             reduce using rule 30 (expression -> variable_alone SEMI .)


state 62

    (31) expression -> global_variable SEMI .

    VAR             reduce using rule 31 (expression -> global_variable SEMI .)
    IDENTIFIER      reduce using rule 31 (expression -> global_variable SEMI .)
    USE             reduce using rule 31 (expression -> global_variable SEMI .)
    GLOBAL          reduce using rule 31 (expression -> global_variable SEMI .)
    CLASS           reduce using rule 31 (expression -> global_variable SEMI .)
    IF              reduce using rule 31 (expression -> global_variable SEMI .)
    FUNCTION        reduce using rule 31 (expression -> global_variable SEMI .)
    REPEAT          reduce using rule 31 (expression -> global_variable SEMI .)
    FOR             reduce using rule 31 (expression -> global_variable SEMI .)
    WHILE           reduce using rule 31 (expression -> global_variable SEMI .)
    TRY             reduce using rule 31 (expression -> global_variable SEMI .)
    DOT             reduce using rule 31 (expression -> global_variable SEMI .)
    $end            reduce using rule 31 (expression -> global_variable SEMI .)
    RMB             reduce using rule 31 (expression -> global_variable SEMI .)


state 63

    (33) expression -> debug SEMI .

    VAR             reduce using rule 33 (expression -> debug SEMI .)
    IDENTIFIER      reduce using rule 33 (expression -> debug SEMI .)
    USE             reduce using rule 33 (expression -> debug SEMI .)
    GLOBAL          reduce using rule 33 (expression -> debug SEMI .)
    CLASS           reduce using rule 33 (expression -> debug SEMI .)
    IF              reduce using rule 33 (expression -> debug SEMI .)
    FUNCTION        reduce using rule 33 (expression -> debug SEMI .)
    REPEAT          reduce using rule 33 (expression -> debug SEMI .)
    FOR             reduce using rule 33 (expression -> debug SEMI .)
    WHILE           reduce using rule 33 (expression -> debug SEMI .)
    TRY             reduce using rule 33 (expression -> debug SEMI .)
    DOT             reduce using rule 33 (expression -> debug SEMI .)
    $end            reduce using rule 33 (expression -> debug SEMI .)
    RMB             reduce using rule 33 (expression -> debug SEMI .)


state 64

    (34) expression -> function_class SEMI .

    VAR             reduce using rule 34 (expression -> function_class SEMI .)
    IDENTIFIER      reduce using rule 34 (expression -> function_class SEMI .)
    USE             reduce using rule 34 (expression -> function_class SEMI .)
    GLOBAL          reduce using rule 34 (expression -> function_class SEMI .)
    CLASS           reduce using rule 34 (expression -> function_class SEMI .)
    IF              reduce using rule 34 (expression -> function_class SEMI .)
    FUNCTION        reduce using rule 34 (expression -> function_class SEMI .)
    REPEAT          reduce using rule 34 (expression -> function_class SEMI .)
    FOR             reduce using rule 34 (expression -> function_class SEMI .)
    WHILE           reduce using rule 34 (expression -> function_class SEMI .)
    TRY             reduce using rule 34 (expression -> function_class SEMI .)
    DOT             reduce using rule 34 (expression -> function_class SEMI .)
    $end            reduce using rule 34 (expression -> function_class SEMI .)
    RMB             reduce using rule 34 (expression -> function_class SEMI .)


state 65

    (35) expression -> inside_root SEMI .

    VAR             reduce using rule 35 (expression -> inside_root SEMI .)
    IDENTIFIER      reduce using rule 35 (expression -> inside_root SEMI .)
    USE             reduce using rule 35 (expression -> inside_root SEMI .)
    GLOBAL          reduce using rule 35 (expression -> inside_root SEMI .)
    CLASS           reduce using rule 35 (expression -> inside_root SEMI .)
    IF              reduce using rule 35 (expression -> inside_root SEMI .)
    FUNCTION        reduce using rule 35 (expression -> inside_root SEMI .)
    REPEAT          reduce using rule 35 (expression -> inside_root SEMI .)
    FOR             reduce using rule 35 (expression -> inside_root SEMI .)
    WHILE           reduce using rule 35 (expression -> inside_root SEMI .)
    TRY             reduce using rule 35 (expression -> inside_root SEMI .)
    DOT             reduce using rule 35 (expression -> inside_root SEMI .)
    $end            reduce using rule 35 (expression -> inside_root SEMI .)
    RMB             reduce using rule 35 (expression -> inside_root SEMI .)


state 66

    (95) variable_declaration -> VAR IDENTIFIER . LIST EQUAL calculate
    (96) variable_declaration -> VAR IDENTIFIER . EQUAL calculate
    (97) variable_declaration -> VAR IDENTIFIER .
    (61) function_class -> VAR IDENTIFIER . EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> VAR IDENTIFIER . EQUAL IDENTIFIER LSB empty RSB

    LIST            shift and go to state 105
    EQUAL           shift and go to state 106
    SEMI            reduce using rule 97 (variable_declaration -> VAR IDENTIFIER .)


state 67

    (93) variable_value_change -> IDENTIFIER EQUAL . LIST
    (94) variable_value_change -> IDENTIFIER EQUAL . calculate
    (63) function_class -> IDENTIFIER EQUAL . IDENTIFIER LSB parameter RSB
    (64) function_class -> IDENTIFIER EQUAL . IDENTIFIER LSB empty RSB
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    LIST            shift and go to state 108
    IDENTIFIER      shift and go to state 107
    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    LSB             shift and go to state 110

    calculate                      shift and go to state 109

state 68

    (70) function_call -> IDENTIFIER LSB . parameter RSB
    (71) function_call -> IDENTIFIER LSB . empty RSB
    (53) inside -> IDENTIFIER LSB . parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> IDENTIFIER LSB . empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> IDENTIFIER LSB . parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> IDENTIFIER LSB . empty RSB DOT IDENTIFIER LSB parameter RSB
    (59) inside -> IDENTIFIER LSB . parameter RSB DOT IDENTIFIER
    (72) parameter -> . parameter COMMA calculate
    (73) parameter -> . calculate
    (110) empty -> .
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    RSB             reduce using rule 110 (empty -> .)
    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    parameter                      shift and go to state 116
    empty                          shift and go to state 117
    calculate                      shift and go to state 118

state 69

    (57) inside -> IDENTIFIER DOT . IDENTIFIER LSB parameter RSB
    (58) inside -> IDENTIFIER DOT . IDENTIFIER LSB empty RSB
    (60) inside -> IDENTIFIER DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 120


state 70

    (75) if_statement -> if_statement_1 if_statement_2 . if_statement_3
    (76) if_statement -> if_statement_1 if_statement_2 .
    (81) if_statement_2 -> if_statement_2 . ELSE IF LSB condition RSB LMB expression RMB
    (82) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 76 (if_statement -> if_statement_1 if_statement_2 .)
    IDENTIFIER      reduce using rule 76 (if_statement -> if_statement_1 if_statement_2 .)
    USE             reduce using rule 76 (if_statement -> if_statement_1 if_statement_2 .)
    GLOBAL          reduce using rule 76 (if_statement -> if_statement_1 if_statement_2 .)
    CLASS           reduce using rule 76 (if_statement -> if_statement_1 if_statement_2 .)
    IF              reduce using rule 76 (if_statement -> if_statement_1 if_statement_2 .)
    FUNCTION        reduce using rule 76 (if_statement -> if_statement_1 if_statement_2 .)
    REPEAT          reduce using rule 76 (if_statement -> if_statement_1 if_statement_2 .)
    FOR             reduce using rule 76 (if_statement -> if_statement_1 if_statement_2 .)
    WHILE           reduce using rule 76 (if_statement -> if_statement_1 if_statement_2 .)
    TRY             reduce using rule 76 (if_statement -> if_statement_1 if_statement_2 .)
    DOT             reduce using rule 76 (if_statement -> if_statement_1 if_statement_2 .)
    $end            reduce using rule 76 (if_statement -> if_statement_1 if_statement_2 .)
    RMB             reduce using rule 76 (if_statement -> if_statement_1 if_statement_2 .)
    ELSE            shift and go to state 122

    if_statement_3                 shift and go to state 121

state 71

    (77) if_statement -> if_statement_1 if_statement_3 .

    VAR             reduce using rule 77 (if_statement -> if_statement_1 if_statement_3 .)
    IDENTIFIER      reduce using rule 77 (if_statement -> if_statement_1 if_statement_3 .)
    USE             reduce using rule 77 (if_statement -> if_statement_1 if_statement_3 .)
    GLOBAL          reduce using rule 77 (if_statement -> if_statement_1 if_statement_3 .)
    CLASS           reduce using rule 77 (if_statement -> if_statement_1 if_statement_3 .)
    IF              reduce using rule 77 (if_statement -> if_statement_1 if_statement_3 .)
    FUNCTION        reduce using rule 77 (if_statement -> if_statement_1 if_statement_3 .)
    REPEAT          reduce using rule 77 (if_statement -> if_statement_1 if_statement_3 .)
    FOR             reduce using rule 77 (if_statement -> if_statement_1 if_statement_3 .)
    WHILE           reduce using rule 77 (if_statement -> if_statement_1 if_statement_3 .)
    TRY             reduce using rule 77 (if_statement -> if_statement_1 if_statement_3 .)
    DOT             reduce using rule 77 (if_statement -> if_statement_1 if_statement_3 .)
    $end            reduce using rule 77 (if_statement -> if_statement_1 if_statement_3 .)
    RMB             reduce using rule 77 (if_statement -> if_statement_1 if_statement_3 .)


state 72

    (80) if_statement_2 -> ELSE . IF LSB condition RSB LMB expression RMB
    (82) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 123
    LMB             shift and go to state 124


state 73

    (66) function -> function_head function_body .

    VAR             reduce using rule 66 (function -> function_head function_body .)
    IDENTIFIER      reduce using rule 66 (function -> function_head function_body .)
    USE             reduce using rule 66 (function -> function_head function_body .)
    GLOBAL          reduce using rule 66 (function -> function_head function_body .)
    CLASS           reduce using rule 66 (function -> function_head function_body .)
    IF              reduce using rule 66 (function -> function_head function_body .)
    FUNCTION        reduce using rule 66 (function -> function_head function_body .)
    REPEAT          reduce using rule 66 (function -> function_head function_body .)
    FOR             reduce using rule 66 (function -> function_head function_body .)
    WHILE           reduce using rule 66 (function -> function_head function_body .)
    TRY             reduce using rule 66 (function -> function_head function_body .)
    DOT             reduce using rule 66 (function -> function_head function_body .)
    $end            reduce using rule 66 (function -> function_head function_body .)
    RMB             reduce using rule 66 (function -> function_head function_body .)


state 74

    (69) function_body -> LMB . expression RMB
    (4) expression -> . expression variable_declaration SEMI
    (5) expression -> . expression variable_value_change SEMI
    (6) expression -> . expression if_statement
    (7) expression -> . expression function
    (8) expression -> . expression function_call SEMI
    (9) expression -> . expression repeat
    (10) expression -> . expression for
    (11) expression -> . expression while
    (12) expression -> . expression use SEMI
    (13) expression -> . expression error_handling
    (14) expression -> . expression variable_alone SEMI
    (15) expression -> . expression global_variable SEMI
    (16) expression -> . expression class_def
    (17) expression -> . expression debug SEMI
    (18) expression -> . expression function_class SEMI
    (19) expression -> . expression inside_root SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . inside_root SEMI
    (36) expression -> . empty
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (110) empty -> .
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    RMB             reduce using rule 110 (empty -> .)
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 110 (empty -> .) ]
  ! USE             [ reduce using rule 110 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 110 (empty -> .) ]
  ! CLASS           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 110 (empty -> .) ]
  ! REPEAT          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! TRY             [ reduce using rule 110 (empty -> .) ]
  ! DOT             [ reduce using rule 110 (empty -> .) ]

    expression                     shift and go to state 125
    variable_declaration           shift and go to state 4
    variable_value_change          shift and go to state 5
    if_statement                   shift and go to state 6
    function                       shift and go to state 7
    function_call                  shift and go to state 8
    repeat                         shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    use                            shift and go to state 12
    error_handling                 shift and go to state 13
    variable_alone                 shift and go to state 14
    global_variable                shift and go to state 15
    class_def                      shift and go to state 16
    debug                          shift and go to state 17
    function_class                 shift and go to state 18
    inside_root                    shift and go to state 19
    empty                          shift and go to state 20
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 75

    (46) repeat -> repeat_head repeat_body .

    VAR             reduce using rule 46 (repeat -> repeat_head repeat_body .)
    IDENTIFIER      reduce using rule 46 (repeat -> repeat_head repeat_body .)
    USE             reduce using rule 46 (repeat -> repeat_head repeat_body .)
    GLOBAL          reduce using rule 46 (repeat -> repeat_head repeat_body .)
    CLASS           reduce using rule 46 (repeat -> repeat_head repeat_body .)
    IF              reduce using rule 46 (repeat -> repeat_head repeat_body .)
    FUNCTION        reduce using rule 46 (repeat -> repeat_head repeat_body .)
    REPEAT          reduce using rule 46 (repeat -> repeat_head repeat_body .)
    FOR             reduce using rule 46 (repeat -> repeat_head repeat_body .)
    WHILE           reduce using rule 46 (repeat -> repeat_head repeat_body .)
    TRY             reduce using rule 46 (repeat -> repeat_head repeat_body .)
    DOT             reduce using rule 46 (repeat -> repeat_head repeat_body .)
    $end            reduce using rule 46 (repeat -> repeat_head repeat_body .)
    RMB             reduce using rule 46 (repeat -> repeat_head repeat_body .)


state 76

    (48) repeat_body -> LMB . expression RMB
    (4) expression -> . expression variable_declaration SEMI
    (5) expression -> . expression variable_value_change SEMI
    (6) expression -> . expression if_statement
    (7) expression -> . expression function
    (8) expression -> . expression function_call SEMI
    (9) expression -> . expression repeat
    (10) expression -> . expression for
    (11) expression -> . expression while
    (12) expression -> . expression use SEMI
    (13) expression -> . expression error_handling
    (14) expression -> . expression variable_alone SEMI
    (15) expression -> . expression global_variable SEMI
    (16) expression -> . expression class_def
    (17) expression -> . expression debug SEMI
    (18) expression -> . expression function_class SEMI
    (19) expression -> . expression inside_root SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . inside_root SEMI
    (36) expression -> . empty
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (110) empty -> .
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    RMB             reduce using rule 110 (empty -> .)
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 110 (empty -> .) ]
  ! USE             [ reduce using rule 110 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 110 (empty -> .) ]
  ! CLASS           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 110 (empty -> .) ]
  ! REPEAT          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! TRY             [ reduce using rule 110 (empty -> .) ]
  ! DOT             [ reduce using rule 110 (empty -> .) ]

    expression                     shift and go to state 126
    variable_declaration           shift and go to state 4
    variable_value_change          shift and go to state 5
    if_statement                   shift and go to state 6
    function                       shift and go to state 7
    function_call                  shift and go to state 8
    repeat                         shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    use                            shift and go to state 12
    error_handling                 shift and go to state 13
    variable_alone                 shift and go to state 14
    global_variable                shift and go to state 15
    class_def                      shift and go to state 16
    debug                          shift and go to state 17
    function_class                 shift and go to state 18
    inside_root                    shift and go to state 19
    empty                          shift and go to state 20
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 77

    (40) for -> for_head for_body .

    VAR             reduce using rule 40 (for -> for_head for_body .)
    IDENTIFIER      reduce using rule 40 (for -> for_head for_body .)
    USE             reduce using rule 40 (for -> for_head for_body .)
    GLOBAL          reduce using rule 40 (for -> for_head for_body .)
    CLASS           reduce using rule 40 (for -> for_head for_body .)
    IF              reduce using rule 40 (for -> for_head for_body .)
    FUNCTION        reduce using rule 40 (for -> for_head for_body .)
    REPEAT          reduce using rule 40 (for -> for_head for_body .)
    FOR             reduce using rule 40 (for -> for_head for_body .)
    WHILE           reduce using rule 40 (for -> for_head for_body .)
    TRY             reduce using rule 40 (for -> for_head for_body .)
    DOT             reduce using rule 40 (for -> for_head for_body .)
    $end            reduce using rule 40 (for -> for_head for_body .)
    RMB             reduce using rule 40 (for -> for_head for_body .)


state 78

    (42) for_body -> LMB . expression RMB
    (4) expression -> . expression variable_declaration SEMI
    (5) expression -> . expression variable_value_change SEMI
    (6) expression -> . expression if_statement
    (7) expression -> . expression function
    (8) expression -> . expression function_call SEMI
    (9) expression -> . expression repeat
    (10) expression -> . expression for
    (11) expression -> . expression while
    (12) expression -> . expression use SEMI
    (13) expression -> . expression error_handling
    (14) expression -> . expression variable_alone SEMI
    (15) expression -> . expression global_variable SEMI
    (16) expression -> . expression class_def
    (17) expression -> . expression debug SEMI
    (18) expression -> . expression function_class SEMI
    (19) expression -> . expression inside_root SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . inside_root SEMI
    (36) expression -> . empty
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (110) empty -> .
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    RMB             reduce using rule 110 (empty -> .)
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 110 (empty -> .) ]
  ! USE             [ reduce using rule 110 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 110 (empty -> .) ]
  ! CLASS           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 110 (empty -> .) ]
  ! REPEAT          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! TRY             [ reduce using rule 110 (empty -> .) ]
  ! DOT             [ reduce using rule 110 (empty -> .) ]

    expression                     shift and go to state 127
    variable_declaration           shift and go to state 4
    variable_value_change          shift and go to state 5
    if_statement                   shift and go to state 6
    function                       shift and go to state 7
    function_call                  shift and go to state 8
    repeat                         shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    use                            shift and go to state 12
    error_handling                 shift and go to state 13
    variable_alone                 shift and go to state 14
    global_variable                shift and go to state 15
    class_def                      shift and go to state 16
    debug                          shift and go to state 17
    function_class                 shift and go to state 18
    inside_root                    shift and go to state 19
    empty                          shift and go to state 20
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 79

    (43) while -> while_head while_body .

    VAR             reduce using rule 43 (while -> while_head while_body .)
    IDENTIFIER      reduce using rule 43 (while -> while_head while_body .)
    USE             reduce using rule 43 (while -> while_head while_body .)
    GLOBAL          reduce using rule 43 (while -> while_head while_body .)
    CLASS           reduce using rule 43 (while -> while_head while_body .)
    IF              reduce using rule 43 (while -> while_head while_body .)
    FUNCTION        reduce using rule 43 (while -> while_head while_body .)
    REPEAT          reduce using rule 43 (while -> while_head while_body .)
    FOR             reduce using rule 43 (while -> while_head while_body .)
    WHILE           reduce using rule 43 (while -> while_head while_body .)
    TRY             reduce using rule 43 (while -> while_head while_body .)
    DOT             reduce using rule 43 (while -> while_head while_body .)
    $end            reduce using rule 43 (while -> while_head while_body .)
    RMB             reduce using rule 43 (while -> while_head while_body .)


state 80

    (45) while_body -> LMB . expression RMB
    (4) expression -> . expression variable_declaration SEMI
    (5) expression -> . expression variable_value_change SEMI
    (6) expression -> . expression if_statement
    (7) expression -> . expression function
    (8) expression -> . expression function_call SEMI
    (9) expression -> . expression repeat
    (10) expression -> . expression for
    (11) expression -> . expression while
    (12) expression -> . expression use SEMI
    (13) expression -> . expression error_handling
    (14) expression -> . expression variable_alone SEMI
    (15) expression -> . expression global_variable SEMI
    (16) expression -> . expression class_def
    (17) expression -> . expression debug SEMI
    (18) expression -> . expression function_class SEMI
    (19) expression -> . expression inside_root SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . inside_root SEMI
    (36) expression -> . empty
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (110) empty -> .
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    RMB             reduce using rule 110 (empty -> .)
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 110 (empty -> .) ]
  ! USE             [ reduce using rule 110 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 110 (empty -> .) ]
  ! CLASS           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 110 (empty -> .) ]
  ! REPEAT          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! TRY             [ reduce using rule 110 (empty -> .) ]
  ! DOT             [ reduce using rule 110 (empty -> .) ]

    expression                     shift and go to state 128
    variable_declaration           shift and go to state 4
    variable_value_change          shift and go to state 5
    if_statement                   shift and go to state 6
    function                       shift and go to state 7
    function_call                  shift and go to state 8
    repeat                         shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    use                            shift and go to state 12
    error_handling                 shift and go to state 13
    variable_alone                 shift and go to state 14
    global_variable                shift and go to state 15
    class_def                      shift and go to state 16
    debug                          shift and go to state 17
    function_class                 shift and go to state 18
    inside_root                    shift and go to state 19
    empty                          shift and go to state 20
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 81

    (89) use -> USE use_params .

    SEMI            reduce using rule 89 (use -> USE use_params .)


state 82

    (74) debug -> USE DEBUG .

    SEMI            reduce using rule 74 (debug -> USE DEBUG .)


state 83

    (90) use_params -> IDENTIFIER .

    SEMI            reduce using rule 90 (use_params -> IDENTIFIER .)


state 84

    (37) error_handling -> try catch .

    VAR             reduce using rule 37 (error_handling -> try catch .)
    IDENTIFIER      reduce using rule 37 (error_handling -> try catch .)
    USE             reduce using rule 37 (error_handling -> try catch .)
    GLOBAL          reduce using rule 37 (error_handling -> try catch .)
    CLASS           reduce using rule 37 (error_handling -> try catch .)
    IF              reduce using rule 37 (error_handling -> try catch .)
    FUNCTION        reduce using rule 37 (error_handling -> try catch .)
    REPEAT          reduce using rule 37 (error_handling -> try catch .)
    FOR             reduce using rule 37 (error_handling -> try catch .)
    WHILE           reduce using rule 37 (error_handling -> try catch .)
    TRY             reduce using rule 37 (error_handling -> try catch .)
    DOT             reduce using rule 37 (error_handling -> try catch .)
    $end            reduce using rule 37 (error_handling -> try catch .)
    RMB             reduce using rule 37 (error_handling -> try catch .)


state 85

    (39) catch -> CATCH . LSB IDENTIFIER RSB LMB expression RMB

    LSB             shift and go to state 129


state 86

    (91) global_variable -> GLOBAL IDENTIFIER .

    SEMI            reduce using rule 91 (global_variable -> GLOBAL IDENTIFIER .)


state 87

    (65) class_def -> CLASS IDENTIFIER . LMB expression RMB

    LMB             shift and go to state 130


state 88

    (50) inside_root -> inside DOT . IDENTIFIER LSB parameter RSB
    (52) inside -> inside DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 131


state 89

    (51) inside -> DOT IDENTIFIER . LSB empty RSB

    LSB             shift and go to state 132


state 90

    (79) if_statement_1 -> IF LSB . condition RSB LMB expression RMB
    (83) condition -> . condition LB calculate
    (84) condition -> . condition RB calculate
    (85) condition -> . condition LB EQUAL calculate
    (86) condition -> . condition RB EQUAL calculate
    (87) condition -> . condition EQUAL calculate
    (88) condition -> . calculate
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    condition                      shift and go to state 133
    calculate                      shift and go to state 134

state 91

    (67) function_head -> FUNCTION IDENTIFIER . LSB parameter RSB
    (68) function_head -> FUNCTION IDENTIFIER . LSB empty RSB

    LSB             shift and go to state 135


state 92

    (47) repeat_head -> REPEAT LSB . calculate RSB
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    calculate                      shift and go to state 136

state 93

    (41) for_head -> FOR LSB . IDENTIFIER IN IDENTIFIER RSB

    IDENTIFIER      shift and go to state 137


state 94

    (44) while_head -> WHILE LSB . condition RSB
    (83) condition -> . condition LB calculate
    (84) condition -> . condition RB calculate
    (85) condition -> . condition LB EQUAL calculate
    (86) condition -> . condition RB EQUAL calculate
    (87) condition -> . condition EQUAL calculate
    (88) condition -> . calculate
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    condition                      shift and go to state 138
    calculate                      shift and go to state 134

state 95

    (38) try -> TRY LMB . expression RMB
    (4) expression -> . expression variable_declaration SEMI
    (5) expression -> . expression variable_value_change SEMI
    (6) expression -> . expression if_statement
    (7) expression -> . expression function
    (8) expression -> . expression function_call SEMI
    (9) expression -> . expression repeat
    (10) expression -> . expression for
    (11) expression -> . expression while
    (12) expression -> . expression use SEMI
    (13) expression -> . expression error_handling
    (14) expression -> . expression variable_alone SEMI
    (15) expression -> . expression global_variable SEMI
    (16) expression -> . expression class_def
    (17) expression -> . expression debug SEMI
    (18) expression -> . expression function_class SEMI
    (19) expression -> . expression inside_root SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . inside_root SEMI
    (36) expression -> . empty
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (110) empty -> .
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    RMB             reduce using rule 110 (empty -> .)
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 110 (empty -> .) ]
  ! USE             [ reduce using rule 110 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 110 (empty -> .) ]
  ! CLASS           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 110 (empty -> .) ]
  ! REPEAT          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! TRY             [ reduce using rule 110 (empty -> .) ]
  ! DOT             [ reduce using rule 110 (empty -> .) ]

    expression                     shift and go to state 139
    variable_declaration           shift and go to state 4
    variable_value_change          shift and go to state 5
    if_statement                   shift and go to state 6
    function                       shift and go to state 7
    function_call                  shift and go to state 8
    repeat                         shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    use                            shift and go to state 12
    error_handling                 shift and go to state 13
    variable_alone                 shift and go to state 14
    global_variable                shift and go to state 15
    class_def                      shift and go to state 16
    debug                          shift and go to state 17
    function_class                 shift and go to state 18
    inside_root                    shift and go to state 19
    empty                          shift and go to state 20
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 96

    (4) expression -> expression variable_declaration SEMI .

    VAR             reduce using rule 4 (expression -> expression variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 4 (expression -> expression variable_declaration SEMI .)
    USE             reduce using rule 4 (expression -> expression variable_declaration SEMI .)
    GLOBAL          reduce using rule 4 (expression -> expression variable_declaration SEMI .)
    CLASS           reduce using rule 4 (expression -> expression variable_declaration SEMI .)
    IF              reduce using rule 4 (expression -> expression variable_declaration SEMI .)
    FUNCTION        reduce using rule 4 (expression -> expression variable_declaration SEMI .)
    REPEAT          reduce using rule 4 (expression -> expression variable_declaration SEMI .)
    FOR             reduce using rule 4 (expression -> expression variable_declaration SEMI .)
    WHILE           reduce using rule 4 (expression -> expression variable_declaration SEMI .)
    TRY             reduce using rule 4 (expression -> expression variable_declaration SEMI .)
    DOT             reduce using rule 4 (expression -> expression variable_declaration SEMI .)
    $end            reduce using rule 4 (expression -> expression variable_declaration SEMI .)
    RMB             reduce using rule 4 (expression -> expression variable_declaration SEMI .)


state 97

    (5) expression -> expression variable_value_change SEMI .

    VAR             reduce using rule 5 (expression -> expression variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 5 (expression -> expression variable_value_change SEMI .)
    USE             reduce using rule 5 (expression -> expression variable_value_change SEMI .)
    GLOBAL          reduce using rule 5 (expression -> expression variable_value_change SEMI .)
    CLASS           reduce using rule 5 (expression -> expression variable_value_change SEMI .)
    IF              reduce using rule 5 (expression -> expression variable_value_change SEMI .)
    FUNCTION        reduce using rule 5 (expression -> expression variable_value_change SEMI .)
    REPEAT          reduce using rule 5 (expression -> expression variable_value_change SEMI .)
    FOR             reduce using rule 5 (expression -> expression variable_value_change SEMI .)
    WHILE           reduce using rule 5 (expression -> expression variable_value_change SEMI .)
    TRY             reduce using rule 5 (expression -> expression variable_value_change SEMI .)
    DOT             reduce using rule 5 (expression -> expression variable_value_change SEMI .)
    $end            reduce using rule 5 (expression -> expression variable_value_change SEMI .)
    RMB             reduce using rule 5 (expression -> expression variable_value_change SEMI .)


state 98

    (8) expression -> expression function_call SEMI .

    VAR             reduce using rule 8 (expression -> expression function_call SEMI .)
    IDENTIFIER      reduce using rule 8 (expression -> expression function_call SEMI .)
    USE             reduce using rule 8 (expression -> expression function_call SEMI .)
    GLOBAL          reduce using rule 8 (expression -> expression function_call SEMI .)
    CLASS           reduce using rule 8 (expression -> expression function_call SEMI .)
    IF              reduce using rule 8 (expression -> expression function_call SEMI .)
    FUNCTION        reduce using rule 8 (expression -> expression function_call SEMI .)
    REPEAT          reduce using rule 8 (expression -> expression function_call SEMI .)
    FOR             reduce using rule 8 (expression -> expression function_call SEMI .)
    WHILE           reduce using rule 8 (expression -> expression function_call SEMI .)
    TRY             reduce using rule 8 (expression -> expression function_call SEMI .)
    DOT             reduce using rule 8 (expression -> expression function_call SEMI .)
    $end            reduce using rule 8 (expression -> expression function_call SEMI .)
    RMB             reduce using rule 8 (expression -> expression function_call SEMI .)


state 99

    (12) expression -> expression use SEMI .

    VAR             reduce using rule 12 (expression -> expression use SEMI .)
    IDENTIFIER      reduce using rule 12 (expression -> expression use SEMI .)
    USE             reduce using rule 12 (expression -> expression use SEMI .)
    GLOBAL          reduce using rule 12 (expression -> expression use SEMI .)
    CLASS           reduce using rule 12 (expression -> expression use SEMI .)
    IF              reduce using rule 12 (expression -> expression use SEMI .)
    FUNCTION        reduce using rule 12 (expression -> expression use SEMI .)
    REPEAT          reduce using rule 12 (expression -> expression use SEMI .)
    FOR             reduce using rule 12 (expression -> expression use SEMI .)
    WHILE           reduce using rule 12 (expression -> expression use SEMI .)
    TRY             reduce using rule 12 (expression -> expression use SEMI .)
    DOT             reduce using rule 12 (expression -> expression use SEMI .)
    $end            reduce using rule 12 (expression -> expression use SEMI .)
    RMB             reduce using rule 12 (expression -> expression use SEMI .)


state 100

    (14) expression -> expression variable_alone SEMI .

    VAR             reduce using rule 14 (expression -> expression variable_alone SEMI .)
    IDENTIFIER      reduce using rule 14 (expression -> expression variable_alone SEMI .)
    USE             reduce using rule 14 (expression -> expression variable_alone SEMI .)
    GLOBAL          reduce using rule 14 (expression -> expression variable_alone SEMI .)
    CLASS           reduce using rule 14 (expression -> expression variable_alone SEMI .)
    IF              reduce using rule 14 (expression -> expression variable_alone SEMI .)
    FUNCTION        reduce using rule 14 (expression -> expression variable_alone SEMI .)
    REPEAT          reduce using rule 14 (expression -> expression variable_alone SEMI .)
    FOR             reduce using rule 14 (expression -> expression variable_alone SEMI .)
    WHILE           reduce using rule 14 (expression -> expression variable_alone SEMI .)
    TRY             reduce using rule 14 (expression -> expression variable_alone SEMI .)
    DOT             reduce using rule 14 (expression -> expression variable_alone SEMI .)
    $end            reduce using rule 14 (expression -> expression variable_alone SEMI .)
    RMB             reduce using rule 14 (expression -> expression variable_alone SEMI .)


state 101

    (15) expression -> expression global_variable SEMI .

    VAR             reduce using rule 15 (expression -> expression global_variable SEMI .)
    IDENTIFIER      reduce using rule 15 (expression -> expression global_variable SEMI .)
    USE             reduce using rule 15 (expression -> expression global_variable SEMI .)
    GLOBAL          reduce using rule 15 (expression -> expression global_variable SEMI .)
    CLASS           reduce using rule 15 (expression -> expression global_variable SEMI .)
    IF              reduce using rule 15 (expression -> expression global_variable SEMI .)
    FUNCTION        reduce using rule 15 (expression -> expression global_variable SEMI .)
    REPEAT          reduce using rule 15 (expression -> expression global_variable SEMI .)
    FOR             reduce using rule 15 (expression -> expression global_variable SEMI .)
    WHILE           reduce using rule 15 (expression -> expression global_variable SEMI .)
    TRY             reduce using rule 15 (expression -> expression global_variable SEMI .)
    DOT             reduce using rule 15 (expression -> expression global_variable SEMI .)
    $end            reduce using rule 15 (expression -> expression global_variable SEMI .)
    RMB             reduce using rule 15 (expression -> expression global_variable SEMI .)


state 102

    (17) expression -> expression debug SEMI .

    VAR             reduce using rule 17 (expression -> expression debug SEMI .)
    IDENTIFIER      reduce using rule 17 (expression -> expression debug SEMI .)
    USE             reduce using rule 17 (expression -> expression debug SEMI .)
    GLOBAL          reduce using rule 17 (expression -> expression debug SEMI .)
    CLASS           reduce using rule 17 (expression -> expression debug SEMI .)
    IF              reduce using rule 17 (expression -> expression debug SEMI .)
    FUNCTION        reduce using rule 17 (expression -> expression debug SEMI .)
    REPEAT          reduce using rule 17 (expression -> expression debug SEMI .)
    FOR             reduce using rule 17 (expression -> expression debug SEMI .)
    WHILE           reduce using rule 17 (expression -> expression debug SEMI .)
    TRY             reduce using rule 17 (expression -> expression debug SEMI .)
    DOT             reduce using rule 17 (expression -> expression debug SEMI .)
    $end            reduce using rule 17 (expression -> expression debug SEMI .)
    RMB             reduce using rule 17 (expression -> expression debug SEMI .)


state 103

    (18) expression -> expression function_class SEMI .

    VAR             reduce using rule 18 (expression -> expression function_class SEMI .)
    IDENTIFIER      reduce using rule 18 (expression -> expression function_class SEMI .)
    USE             reduce using rule 18 (expression -> expression function_class SEMI .)
    GLOBAL          reduce using rule 18 (expression -> expression function_class SEMI .)
    CLASS           reduce using rule 18 (expression -> expression function_class SEMI .)
    IF              reduce using rule 18 (expression -> expression function_class SEMI .)
    FUNCTION        reduce using rule 18 (expression -> expression function_class SEMI .)
    REPEAT          reduce using rule 18 (expression -> expression function_class SEMI .)
    FOR             reduce using rule 18 (expression -> expression function_class SEMI .)
    WHILE           reduce using rule 18 (expression -> expression function_class SEMI .)
    TRY             reduce using rule 18 (expression -> expression function_class SEMI .)
    DOT             reduce using rule 18 (expression -> expression function_class SEMI .)
    $end            reduce using rule 18 (expression -> expression function_class SEMI .)
    RMB             reduce using rule 18 (expression -> expression function_class SEMI .)


state 104

    (19) expression -> expression inside_root SEMI .

    VAR             reduce using rule 19 (expression -> expression inside_root SEMI .)
    IDENTIFIER      reduce using rule 19 (expression -> expression inside_root SEMI .)
    USE             reduce using rule 19 (expression -> expression inside_root SEMI .)
    GLOBAL          reduce using rule 19 (expression -> expression inside_root SEMI .)
    CLASS           reduce using rule 19 (expression -> expression inside_root SEMI .)
    IF              reduce using rule 19 (expression -> expression inside_root SEMI .)
    FUNCTION        reduce using rule 19 (expression -> expression inside_root SEMI .)
    REPEAT          reduce using rule 19 (expression -> expression inside_root SEMI .)
    FOR             reduce using rule 19 (expression -> expression inside_root SEMI .)
    WHILE           reduce using rule 19 (expression -> expression inside_root SEMI .)
    TRY             reduce using rule 19 (expression -> expression inside_root SEMI .)
    DOT             reduce using rule 19 (expression -> expression inside_root SEMI .)
    $end            reduce using rule 19 (expression -> expression inside_root SEMI .)
    RMB             reduce using rule 19 (expression -> expression inside_root SEMI .)


state 105

    (95) variable_declaration -> VAR IDENTIFIER LIST . EQUAL calculate

    EQUAL           shift and go to state 140


state 106

    (96) variable_declaration -> VAR IDENTIFIER EQUAL . calculate
    (61) function_class -> VAR IDENTIFIER EQUAL . IDENTIFIER LSB parameter RSB
    (62) function_class -> VAR IDENTIFIER EQUAL . IDENTIFIER LSB empty RSB
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    IDENTIFIER      shift and go to state 141
    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    calculate                      shift and go to state 142

state 107

    (63) function_class -> IDENTIFIER EQUAL IDENTIFIER . LSB parameter RSB
    (64) function_class -> IDENTIFIER EQUAL IDENTIFIER . LSB empty RSB
    (106) calculate -> IDENTIFIER .
    (107) calculate -> IDENTIFIER . LIST

    LSB             shift and go to state 143
    PLUS            reduce using rule 106 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 106 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 106 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 106 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 106 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 144


state 108

    (93) variable_value_change -> IDENTIFIER EQUAL LIST .
    (108) calculate -> LIST .

  ! reduce/reduce conflict for SEMI resolved using rule 93 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    SEMI            reduce using rule 93 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    PLUS            reduce using rule 108 (calculate -> LIST .)
    MINUS           reduce using rule 108 (calculate -> LIST .)
    MUL             reduce using rule 108 (calculate -> LIST .)
    DIV             reduce using rule 108 (calculate -> LIST .)

  ! SEMI            [ reduce using rule 108 (calculate -> LIST .) ]


state 109

    (94) variable_value_change -> IDENTIFIER EQUAL calculate .
    (98) calculate -> calculate . PLUS calculate
    (99) calculate -> calculate . MINUS calculate
    (101) calculate -> calculate . MUL calculate
    (102) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 94 (variable_value_change -> IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MUL             shift and go to state 147
    DIV             shift and go to state 148


state 110

    (109) calculate -> LSB . calculate RSB
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    calculate                      shift and go to state 149

state 111

    (100) calculate -> MINUS . calculate
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    calculate                      shift and go to state 150

state 112

    (103) calculate -> INT .

    PLUS            reduce using rule 103 (calculate -> INT .)
    MINUS           reduce using rule 103 (calculate -> INT .)
    MUL             reduce using rule 103 (calculate -> INT .)
    DIV             reduce using rule 103 (calculate -> INT .)
    SEMI            reduce using rule 103 (calculate -> INT .)
    RSB             reduce using rule 103 (calculate -> INT .)
    COMMA           reduce using rule 103 (calculate -> INT .)
    LB              reduce using rule 103 (calculate -> INT .)
    RB              reduce using rule 103 (calculate -> INT .)
    EQUAL           reduce using rule 103 (calculate -> INT .)


state 113

    (104) calculate -> FLOAT .

    PLUS            reduce using rule 104 (calculate -> FLOAT .)
    MINUS           reduce using rule 104 (calculate -> FLOAT .)
    MUL             reduce using rule 104 (calculate -> FLOAT .)
    DIV             reduce using rule 104 (calculate -> FLOAT .)
    SEMI            reduce using rule 104 (calculate -> FLOAT .)
    RSB             reduce using rule 104 (calculate -> FLOAT .)
    COMMA           reduce using rule 104 (calculate -> FLOAT .)
    LB              reduce using rule 104 (calculate -> FLOAT .)
    RB              reduce using rule 104 (calculate -> FLOAT .)
    EQUAL           reduce using rule 104 (calculate -> FLOAT .)


state 114

    (105) calculate -> STRING .

    PLUS            reduce using rule 105 (calculate -> STRING .)
    MINUS           reduce using rule 105 (calculate -> STRING .)
    MUL             reduce using rule 105 (calculate -> STRING .)
    DIV             reduce using rule 105 (calculate -> STRING .)
    SEMI            reduce using rule 105 (calculate -> STRING .)
    RSB             reduce using rule 105 (calculate -> STRING .)
    COMMA           reduce using rule 105 (calculate -> STRING .)
    LB              reduce using rule 105 (calculate -> STRING .)
    RB              reduce using rule 105 (calculate -> STRING .)
    EQUAL           reduce using rule 105 (calculate -> STRING .)


state 115

    (106) calculate -> IDENTIFIER .
    (107) calculate -> IDENTIFIER . LIST

    PLUS            reduce using rule 106 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 106 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 106 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 106 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 106 (calculate -> IDENTIFIER .)
    COMMA           reduce using rule 106 (calculate -> IDENTIFIER .)
    LB              reduce using rule 106 (calculate -> IDENTIFIER .)
    RB              reduce using rule 106 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 106 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 106 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 144


state 116

    (70) function_call -> IDENTIFIER LSB parameter . RSB
    (53) inside -> IDENTIFIER LSB parameter . RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> IDENTIFIER LSB parameter . RSB DOT IDENTIFIER LSB empty RSB
    (59) inside -> IDENTIFIER LSB parameter . RSB DOT IDENTIFIER
    (72) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 151
    COMMA           shift and go to state 152


state 117

    (71) function_call -> IDENTIFIER LSB empty . RSB
    (54) inside -> IDENTIFIER LSB empty . RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> IDENTIFIER LSB empty . RSB DOT IDENTIFIER LSB parameter RSB

    RSB             shift and go to state 153


state 118

    (73) parameter -> calculate .
    (98) calculate -> calculate . PLUS calculate
    (99) calculate -> calculate . MINUS calculate
    (101) calculate -> calculate . MUL calculate
    (102) calculate -> calculate . DIV calculate

    RSB             reduce using rule 73 (parameter -> calculate .)
    COMMA           reduce using rule 73 (parameter -> calculate .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MUL             shift and go to state 147
    DIV             shift and go to state 148


state 119

    (108) calculate -> LIST .

    PLUS            reduce using rule 108 (calculate -> LIST .)
    MINUS           reduce using rule 108 (calculate -> LIST .)
    MUL             reduce using rule 108 (calculate -> LIST .)
    DIV             reduce using rule 108 (calculate -> LIST .)
    RSB             reduce using rule 108 (calculate -> LIST .)
    COMMA           reduce using rule 108 (calculate -> LIST .)
    LB              reduce using rule 108 (calculate -> LIST .)
    RB              reduce using rule 108 (calculate -> LIST .)
    EQUAL           reduce using rule 108 (calculate -> LIST .)
    SEMI            reduce using rule 108 (calculate -> LIST .)


state 120

    (57) inside -> IDENTIFIER DOT IDENTIFIER . LSB parameter RSB
    (58) inside -> IDENTIFIER DOT IDENTIFIER . LSB empty RSB
    (60) inside -> IDENTIFIER DOT IDENTIFIER .

    LSB             shift and go to state 154
    DOT             reduce using rule 60 (inside -> IDENTIFIER DOT IDENTIFIER .)
    SEMI            reduce using rule 60 (inside -> IDENTIFIER DOT IDENTIFIER .)


state 121

    (75) if_statement -> if_statement_1 if_statement_2 if_statement_3 .

    VAR             reduce using rule 75 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IDENTIFIER      reduce using rule 75 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    USE             reduce using rule 75 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    GLOBAL          reduce using rule 75 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    CLASS           reduce using rule 75 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IF              reduce using rule 75 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FUNCTION        reduce using rule 75 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    REPEAT          reduce using rule 75 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FOR             reduce using rule 75 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    WHILE           reduce using rule 75 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    TRY             reduce using rule 75 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    DOT             reduce using rule 75 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    $end            reduce using rule 75 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    RMB             reduce using rule 75 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)


state 122

    (81) if_statement_2 -> if_statement_2 ELSE . IF LSB condition RSB LMB expression RMB
    (82) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 155
    LMB             shift and go to state 124


state 123

    (80) if_statement_2 -> ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 156


state 124

    (82) if_statement_3 -> ELSE LMB . expression RMB
    (4) expression -> . expression variable_declaration SEMI
    (5) expression -> . expression variable_value_change SEMI
    (6) expression -> . expression if_statement
    (7) expression -> . expression function
    (8) expression -> . expression function_call SEMI
    (9) expression -> . expression repeat
    (10) expression -> . expression for
    (11) expression -> . expression while
    (12) expression -> . expression use SEMI
    (13) expression -> . expression error_handling
    (14) expression -> . expression variable_alone SEMI
    (15) expression -> . expression global_variable SEMI
    (16) expression -> . expression class_def
    (17) expression -> . expression debug SEMI
    (18) expression -> . expression function_class SEMI
    (19) expression -> . expression inside_root SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . inside_root SEMI
    (36) expression -> . empty
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (110) empty -> .
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    RMB             reduce using rule 110 (empty -> .)
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 110 (empty -> .) ]
  ! USE             [ reduce using rule 110 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 110 (empty -> .) ]
  ! CLASS           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 110 (empty -> .) ]
  ! REPEAT          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! TRY             [ reduce using rule 110 (empty -> .) ]
  ! DOT             [ reduce using rule 110 (empty -> .) ]

    expression                     shift and go to state 157
    variable_declaration           shift and go to state 4
    variable_value_change          shift and go to state 5
    if_statement                   shift and go to state 6
    function                       shift and go to state 7
    function_call                  shift and go to state 8
    repeat                         shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    use                            shift and go to state 12
    error_handling                 shift and go to state 13
    variable_alone                 shift and go to state 14
    global_variable                shift and go to state 15
    class_def                      shift and go to state 16
    debug                          shift and go to state 17
    function_class                 shift and go to state 18
    inside_root                    shift and go to state 19
    empty                          shift and go to state 20
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 125

    (69) function_body -> LMB expression . RMB
    (4) expression -> expression . variable_declaration SEMI
    (5) expression -> expression . variable_value_change SEMI
    (6) expression -> expression . if_statement
    (7) expression -> expression . function
    (8) expression -> expression . function_call SEMI
    (9) expression -> expression . repeat
    (10) expression -> expression . for
    (11) expression -> expression . while
    (12) expression -> expression . use SEMI
    (13) expression -> expression . error_handling
    (14) expression -> expression . variable_alone SEMI
    (15) expression -> expression . global_variable SEMI
    (16) expression -> expression . class_def
    (17) expression -> expression . debug SEMI
    (18) expression -> expression . function_class SEMI
    (19) expression -> expression . inside_root SEMI
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 158
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

    variable_declaration           shift and go to state 41
    variable_value_change          shift and go to state 42
    if_statement                   shift and go to state 43
    function                       shift and go to state 44
    function_call                  shift and go to state 45
    repeat                         shift and go to state 46
    for                            shift and go to state 47
    while                          shift and go to state 48
    use                            shift and go to state 49
    error_handling                 shift and go to state 50
    variable_alone                 shift and go to state 51
    global_variable                shift and go to state 52
    class_def                      shift and go to state 53
    debug                          shift and go to state 54
    function_class                 shift and go to state 55
    inside_root                    shift and go to state 56
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 126

    (48) repeat_body -> LMB expression . RMB
    (4) expression -> expression . variable_declaration SEMI
    (5) expression -> expression . variable_value_change SEMI
    (6) expression -> expression . if_statement
    (7) expression -> expression . function
    (8) expression -> expression . function_call SEMI
    (9) expression -> expression . repeat
    (10) expression -> expression . for
    (11) expression -> expression . while
    (12) expression -> expression . use SEMI
    (13) expression -> expression . error_handling
    (14) expression -> expression . variable_alone SEMI
    (15) expression -> expression . global_variable SEMI
    (16) expression -> expression . class_def
    (17) expression -> expression . debug SEMI
    (18) expression -> expression . function_class SEMI
    (19) expression -> expression . inside_root SEMI
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 159
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

    variable_declaration           shift and go to state 41
    variable_value_change          shift and go to state 42
    if_statement                   shift and go to state 43
    function                       shift and go to state 44
    function_call                  shift and go to state 45
    repeat                         shift and go to state 46
    for                            shift and go to state 47
    while                          shift and go to state 48
    use                            shift and go to state 49
    error_handling                 shift and go to state 50
    variable_alone                 shift and go to state 51
    global_variable                shift and go to state 52
    class_def                      shift and go to state 53
    debug                          shift and go to state 54
    function_class                 shift and go to state 55
    inside_root                    shift and go to state 56
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 127

    (42) for_body -> LMB expression . RMB
    (4) expression -> expression . variable_declaration SEMI
    (5) expression -> expression . variable_value_change SEMI
    (6) expression -> expression . if_statement
    (7) expression -> expression . function
    (8) expression -> expression . function_call SEMI
    (9) expression -> expression . repeat
    (10) expression -> expression . for
    (11) expression -> expression . while
    (12) expression -> expression . use SEMI
    (13) expression -> expression . error_handling
    (14) expression -> expression . variable_alone SEMI
    (15) expression -> expression . global_variable SEMI
    (16) expression -> expression . class_def
    (17) expression -> expression . debug SEMI
    (18) expression -> expression . function_class SEMI
    (19) expression -> expression . inside_root SEMI
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 160
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

    variable_declaration           shift and go to state 41
    variable_value_change          shift and go to state 42
    if_statement                   shift and go to state 43
    function                       shift and go to state 44
    function_call                  shift and go to state 45
    repeat                         shift and go to state 46
    for                            shift and go to state 47
    while                          shift and go to state 48
    use                            shift and go to state 49
    error_handling                 shift and go to state 50
    variable_alone                 shift and go to state 51
    global_variable                shift and go to state 52
    class_def                      shift and go to state 53
    debug                          shift and go to state 54
    function_class                 shift and go to state 55
    inside_root                    shift and go to state 56
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 128

    (45) while_body -> LMB expression . RMB
    (4) expression -> expression . variable_declaration SEMI
    (5) expression -> expression . variable_value_change SEMI
    (6) expression -> expression . if_statement
    (7) expression -> expression . function
    (8) expression -> expression . function_call SEMI
    (9) expression -> expression . repeat
    (10) expression -> expression . for
    (11) expression -> expression . while
    (12) expression -> expression . use SEMI
    (13) expression -> expression . error_handling
    (14) expression -> expression . variable_alone SEMI
    (15) expression -> expression . global_variable SEMI
    (16) expression -> expression . class_def
    (17) expression -> expression . debug SEMI
    (18) expression -> expression . function_class SEMI
    (19) expression -> expression . inside_root SEMI
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 161
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

    variable_declaration           shift and go to state 41
    variable_value_change          shift and go to state 42
    if_statement                   shift and go to state 43
    function                       shift and go to state 44
    function_call                  shift and go to state 45
    repeat                         shift and go to state 46
    for                            shift and go to state 47
    while                          shift and go to state 48
    use                            shift and go to state 49
    error_handling                 shift and go to state 50
    variable_alone                 shift and go to state 51
    global_variable                shift and go to state 52
    class_def                      shift and go to state 53
    debug                          shift and go to state 54
    function_class                 shift and go to state 55
    inside_root                    shift and go to state 56
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 129

    (39) catch -> CATCH LSB . IDENTIFIER RSB LMB expression RMB

    IDENTIFIER      shift and go to state 162


state 130

    (65) class_def -> CLASS IDENTIFIER LMB . expression RMB
    (4) expression -> . expression variable_declaration SEMI
    (5) expression -> . expression variable_value_change SEMI
    (6) expression -> . expression if_statement
    (7) expression -> . expression function
    (8) expression -> . expression function_call SEMI
    (9) expression -> . expression repeat
    (10) expression -> . expression for
    (11) expression -> . expression while
    (12) expression -> . expression use SEMI
    (13) expression -> . expression error_handling
    (14) expression -> . expression variable_alone SEMI
    (15) expression -> . expression global_variable SEMI
    (16) expression -> . expression class_def
    (17) expression -> . expression debug SEMI
    (18) expression -> . expression function_class SEMI
    (19) expression -> . expression inside_root SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . inside_root SEMI
    (36) expression -> . empty
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (110) empty -> .
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    RMB             reduce using rule 110 (empty -> .)
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 110 (empty -> .) ]
  ! USE             [ reduce using rule 110 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 110 (empty -> .) ]
  ! CLASS           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 110 (empty -> .) ]
  ! REPEAT          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! TRY             [ reduce using rule 110 (empty -> .) ]
  ! DOT             [ reduce using rule 110 (empty -> .) ]

    expression                     shift and go to state 163
    variable_declaration           shift and go to state 4
    variable_value_change          shift and go to state 5
    if_statement                   shift and go to state 6
    function                       shift and go to state 7
    function_call                  shift and go to state 8
    repeat                         shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    use                            shift and go to state 12
    error_handling                 shift and go to state 13
    variable_alone                 shift and go to state 14
    global_variable                shift and go to state 15
    class_def                      shift and go to state 16
    debug                          shift and go to state 17
    function_class                 shift and go to state 18
    inside_root                    shift and go to state 19
    empty                          shift and go to state 20
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 131

    (50) inside_root -> inside DOT IDENTIFIER . LSB parameter RSB
    (52) inside -> inside DOT IDENTIFIER .

    LSB             shift and go to state 164
    DOT             reduce using rule 52 (inside -> inside DOT IDENTIFIER .)
    SEMI            reduce using rule 52 (inside -> inside DOT IDENTIFIER .)


state 132

    (51) inside -> DOT IDENTIFIER LSB . empty RSB
    (110) empty -> .

    RSB             reduce using rule 110 (empty -> .)

    empty                          shift and go to state 165

state 133

    (79) if_statement_1 -> IF LSB condition . RSB LMB expression RMB
    (83) condition -> condition . LB calculate
    (84) condition -> condition . RB calculate
    (85) condition -> condition . LB EQUAL calculate
    (86) condition -> condition . RB EQUAL calculate
    (87) condition -> condition . EQUAL calculate

    RSB             shift and go to state 166
    LB              shift and go to state 167
    RB              shift and go to state 168
    EQUAL           shift and go to state 169


state 134

    (88) condition -> calculate .
    (98) calculate -> calculate . PLUS calculate
    (99) calculate -> calculate . MINUS calculate
    (101) calculate -> calculate . MUL calculate
    (102) calculate -> calculate . DIV calculate

    RSB             reduce using rule 88 (condition -> calculate .)
    LB              reduce using rule 88 (condition -> calculate .)
    RB              reduce using rule 88 (condition -> calculate .)
    EQUAL           reduce using rule 88 (condition -> calculate .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MUL             shift and go to state 147
    DIV             shift and go to state 148


state 135

    (67) function_head -> FUNCTION IDENTIFIER LSB . parameter RSB
    (68) function_head -> FUNCTION IDENTIFIER LSB . empty RSB
    (72) parameter -> . parameter COMMA calculate
    (73) parameter -> . calculate
    (110) empty -> .
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    RSB             reduce using rule 110 (empty -> .)
    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    parameter                      shift and go to state 170
    empty                          shift and go to state 171
    calculate                      shift and go to state 118

state 136

    (47) repeat_head -> REPEAT LSB calculate . RSB
    (98) calculate -> calculate . PLUS calculate
    (99) calculate -> calculate . MINUS calculate
    (101) calculate -> calculate . MUL calculate
    (102) calculate -> calculate . DIV calculate

    RSB             shift and go to state 172
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MUL             shift and go to state 147
    DIV             shift and go to state 148


state 137

    (41) for_head -> FOR LSB IDENTIFIER . IN IDENTIFIER RSB

    IN              shift and go to state 173


state 138

    (44) while_head -> WHILE LSB condition . RSB
    (83) condition -> condition . LB calculate
    (84) condition -> condition . RB calculate
    (85) condition -> condition . LB EQUAL calculate
    (86) condition -> condition . RB EQUAL calculate
    (87) condition -> condition . EQUAL calculate

    RSB             shift and go to state 174
    LB              shift and go to state 167
    RB              shift and go to state 168
    EQUAL           shift and go to state 169


state 139

    (38) try -> TRY LMB expression . RMB
    (4) expression -> expression . variable_declaration SEMI
    (5) expression -> expression . variable_value_change SEMI
    (6) expression -> expression . if_statement
    (7) expression -> expression . function
    (8) expression -> expression . function_call SEMI
    (9) expression -> expression . repeat
    (10) expression -> expression . for
    (11) expression -> expression . while
    (12) expression -> expression . use SEMI
    (13) expression -> expression . error_handling
    (14) expression -> expression . variable_alone SEMI
    (15) expression -> expression . global_variable SEMI
    (16) expression -> expression . class_def
    (17) expression -> expression . debug SEMI
    (18) expression -> expression . function_class SEMI
    (19) expression -> expression . inside_root SEMI
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 175
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

    variable_declaration           shift and go to state 41
    variable_value_change          shift and go to state 42
    if_statement                   shift and go to state 43
    function                       shift and go to state 44
    function_call                  shift and go to state 45
    repeat                         shift and go to state 46
    for                            shift and go to state 47
    while                          shift and go to state 48
    use                            shift and go to state 49
    error_handling                 shift and go to state 50
    variable_alone                 shift and go to state 51
    global_variable                shift and go to state 52
    class_def                      shift and go to state 53
    debug                          shift and go to state 54
    function_class                 shift and go to state 55
    inside_root                    shift and go to state 56
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 140

    (95) variable_declaration -> VAR IDENTIFIER LIST EQUAL . calculate
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    calculate                      shift and go to state 176

state 141

    (61) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER . LSB parameter RSB
    (62) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER . LSB empty RSB
    (106) calculate -> IDENTIFIER .
    (107) calculate -> IDENTIFIER . LIST

    LSB             shift and go to state 177
    PLUS            reduce using rule 106 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 106 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 106 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 106 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 106 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 144


state 142

    (96) variable_declaration -> VAR IDENTIFIER EQUAL calculate .
    (98) calculate -> calculate . PLUS calculate
    (99) calculate -> calculate . MINUS calculate
    (101) calculate -> calculate . MUL calculate
    (102) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 96 (variable_declaration -> VAR IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MUL             shift and go to state 147
    DIV             shift and go to state 148


state 143

    (63) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB . parameter RSB
    (64) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB . empty RSB
    (72) parameter -> . parameter COMMA calculate
    (73) parameter -> . calculate
    (110) empty -> .
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    RSB             reduce using rule 110 (empty -> .)
    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    parameter                      shift and go to state 178
    empty                          shift and go to state 179
    calculate                      shift and go to state 118

state 144

    (107) calculate -> IDENTIFIER LIST .

    PLUS            reduce using rule 107 (calculate -> IDENTIFIER LIST .)
    MINUS           reduce using rule 107 (calculate -> IDENTIFIER LIST .)
    MUL             reduce using rule 107 (calculate -> IDENTIFIER LIST .)
    DIV             reduce using rule 107 (calculate -> IDENTIFIER LIST .)
    SEMI            reduce using rule 107 (calculate -> IDENTIFIER LIST .)
    RSB             reduce using rule 107 (calculate -> IDENTIFIER LIST .)
    COMMA           reduce using rule 107 (calculate -> IDENTIFIER LIST .)
    LB              reduce using rule 107 (calculate -> IDENTIFIER LIST .)
    RB              reduce using rule 107 (calculate -> IDENTIFIER LIST .)
    EQUAL           reduce using rule 107 (calculate -> IDENTIFIER LIST .)


state 145

    (98) calculate -> calculate PLUS . calculate
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    calculate                      shift and go to state 180

state 146

    (99) calculate -> calculate MINUS . calculate
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    calculate                      shift and go to state 181

state 147

    (101) calculate -> calculate MUL . calculate
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    calculate                      shift and go to state 182

state 148

    (102) calculate -> calculate DIV . calculate
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    calculate                      shift and go to state 183

state 149

    (109) calculate -> LSB calculate . RSB
    (98) calculate -> calculate . PLUS calculate
    (99) calculate -> calculate . MINUS calculate
    (101) calculate -> calculate . MUL calculate
    (102) calculate -> calculate . DIV calculate

    RSB             shift and go to state 184
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MUL             shift and go to state 147
    DIV             shift and go to state 148


state 150

    (100) calculate -> MINUS calculate .
    (98) calculate -> calculate . PLUS calculate
    (99) calculate -> calculate . MINUS calculate
    (101) calculate -> calculate . MUL calculate
    (102) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 100 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 100 (calculate -> MINUS calculate .)
    MUL             reduce using rule 100 (calculate -> MINUS calculate .)
    DIV             reduce using rule 100 (calculate -> MINUS calculate .)
    SEMI            reduce using rule 100 (calculate -> MINUS calculate .)
    RSB             reduce using rule 100 (calculate -> MINUS calculate .)
    COMMA           reduce using rule 100 (calculate -> MINUS calculate .)
    LB              reduce using rule 100 (calculate -> MINUS calculate .)
    RB              reduce using rule 100 (calculate -> MINUS calculate .)
    EQUAL           reduce using rule 100 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 145 ]
  ! MINUS           [ shift and go to state 146 ]
  ! MUL             [ shift and go to state 147 ]
  ! DIV             [ shift and go to state 148 ]


state 151

    (70) function_call -> IDENTIFIER LSB parameter RSB .
    (53) inside -> IDENTIFIER LSB parameter RSB . DOT IDENTIFIER LSB parameter RSB
    (55) inside -> IDENTIFIER LSB parameter RSB . DOT IDENTIFIER LSB empty RSB
    (59) inside -> IDENTIFIER LSB parameter RSB . DOT IDENTIFIER

    SEMI            reduce using rule 70 (function_call -> IDENTIFIER LSB parameter RSB .)
    DOT             shift and go to state 185


state 152

    (72) parameter -> parameter COMMA . calculate
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    calculate                      shift and go to state 186

state 153

    (71) function_call -> IDENTIFIER LSB empty RSB .
    (54) inside -> IDENTIFIER LSB empty RSB . DOT IDENTIFIER LSB empty RSB
    (56) inside -> IDENTIFIER LSB empty RSB . DOT IDENTIFIER LSB parameter RSB

    SEMI            reduce using rule 71 (function_call -> IDENTIFIER LSB empty RSB .)
    DOT             shift and go to state 187


state 154

    (57) inside -> IDENTIFIER DOT IDENTIFIER LSB . parameter RSB
    (58) inside -> IDENTIFIER DOT IDENTIFIER LSB . empty RSB
    (72) parameter -> . parameter COMMA calculate
    (73) parameter -> . calculate
    (110) empty -> .
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    RSB             reduce using rule 110 (empty -> .)
    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    parameter                      shift and go to state 188
    empty                          shift and go to state 189
    calculate                      shift and go to state 118

state 155

    (81) if_statement_2 -> if_statement_2 ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 190


state 156

    (80) if_statement_2 -> ELSE IF LSB . condition RSB LMB expression RMB
    (83) condition -> . condition LB calculate
    (84) condition -> . condition RB calculate
    (85) condition -> . condition LB EQUAL calculate
    (86) condition -> . condition RB EQUAL calculate
    (87) condition -> . condition EQUAL calculate
    (88) condition -> . calculate
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    condition                      shift and go to state 191
    calculate                      shift and go to state 134

state 157

    (82) if_statement_3 -> ELSE LMB expression . RMB
    (4) expression -> expression . variable_declaration SEMI
    (5) expression -> expression . variable_value_change SEMI
    (6) expression -> expression . if_statement
    (7) expression -> expression . function
    (8) expression -> expression . function_call SEMI
    (9) expression -> expression . repeat
    (10) expression -> expression . for
    (11) expression -> expression . while
    (12) expression -> expression . use SEMI
    (13) expression -> expression . error_handling
    (14) expression -> expression . variable_alone SEMI
    (15) expression -> expression . global_variable SEMI
    (16) expression -> expression . class_def
    (17) expression -> expression . debug SEMI
    (18) expression -> expression . function_class SEMI
    (19) expression -> expression . inside_root SEMI
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 192
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

    variable_declaration           shift and go to state 41
    variable_value_change          shift and go to state 42
    if_statement                   shift and go to state 43
    function                       shift and go to state 44
    function_call                  shift and go to state 45
    repeat                         shift and go to state 46
    for                            shift and go to state 47
    while                          shift and go to state 48
    use                            shift and go to state 49
    error_handling                 shift and go to state 50
    variable_alone                 shift and go to state 51
    global_variable                shift and go to state 52
    class_def                      shift and go to state 53
    debug                          shift and go to state 54
    function_class                 shift and go to state 55
    inside_root                    shift and go to state 56
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 158

    (69) function_body -> LMB expression RMB .

    VAR             reduce using rule 69 (function_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 69 (function_body -> LMB expression RMB .)
    USE             reduce using rule 69 (function_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 69 (function_body -> LMB expression RMB .)
    CLASS           reduce using rule 69 (function_body -> LMB expression RMB .)
    IF              reduce using rule 69 (function_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 69 (function_body -> LMB expression RMB .)
    REPEAT          reduce using rule 69 (function_body -> LMB expression RMB .)
    FOR             reduce using rule 69 (function_body -> LMB expression RMB .)
    WHILE           reduce using rule 69 (function_body -> LMB expression RMB .)
    TRY             reduce using rule 69 (function_body -> LMB expression RMB .)
    DOT             reduce using rule 69 (function_body -> LMB expression RMB .)
    $end            reduce using rule 69 (function_body -> LMB expression RMB .)
    RMB             reduce using rule 69 (function_body -> LMB expression RMB .)


state 159

    (48) repeat_body -> LMB expression RMB .

    VAR             reduce using rule 48 (repeat_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 48 (repeat_body -> LMB expression RMB .)
    USE             reduce using rule 48 (repeat_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 48 (repeat_body -> LMB expression RMB .)
    CLASS           reduce using rule 48 (repeat_body -> LMB expression RMB .)
    IF              reduce using rule 48 (repeat_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 48 (repeat_body -> LMB expression RMB .)
    REPEAT          reduce using rule 48 (repeat_body -> LMB expression RMB .)
    FOR             reduce using rule 48 (repeat_body -> LMB expression RMB .)
    WHILE           reduce using rule 48 (repeat_body -> LMB expression RMB .)
    TRY             reduce using rule 48 (repeat_body -> LMB expression RMB .)
    DOT             reduce using rule 48 (repeat_body -> LMB expression RMB .)
    $end            reduce using rule 48 (repeat_body -> LMB expression RMB .)
    RMB             reduce using rule 48 (repeat_body -> LMB expression RMB .)


state 160

    (42) for_body -> LMB expression RMB .

    VAR             reduce using rule 42 (for_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 42 (for_body -> LMB expression RMB .)
    USE             reduce using rule 42 (for_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 42 (for_body -> LMB expression RMB .)
    CLASS           reduce using rule 42 (for_body -> LMB expression RMB .)
    IF              reduce using rule 42 (for_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 42 (for_body -> LMB expression RMB .)
    REPEAT          reduce using rule 42 (for_body -> LMB expression RMB .)
    FOR             reduce using rule 42 (for_body -> LMB expression RMB .)
    WHILE           reduce using rule 42 (for_body -> LMB expression RMB .)
    TRY             reduce using rule 42 (for_body -> LMB expression RMB .)
    DOT             reduce using rule 42 (for_body -> LMB expression RMB .)
    $end            reduce using rule 42 (for_body -> LMB expression RMB .)
    RMB             reduce using rule 42 (for_body -> LMB expression RMB .)


state 161

    (45) while_body -> LMB expression RMB .

    VAR             reduce using rule 45 (while_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 45 (while_body -> LMB expression RMB .)
    USE             reduce using rule 45 (while_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 45 (while_body -> LMB expression RMB .)
    CLASS           reduce using rule 45 (while_body -> LMB expression RMB .)
    IF              reduce using rule 45 (while_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 45 (while_body -> LMB expression RMB .)
    REPEAT          reduce using rule 45 (while_body -> LMB expression RMB .)
    FOR             reduce using rule 45 (while_body -> LMB expression RMB .)
    WHILE           reduce using rule 45 (while_body -> LMB expression RMB .)
    TRY             reduce using rule 45 (while_body -> LMB expression RMB .)
    DOT             reduce using rule 45 (while_body -> LMB expression RMB .)
    $end            reduce using rule 45 (while_body -> LMB expression RMB .)
    RMB             reduce using rule 45 (while_body -> LMB expression RMB .)


state 162

    (39) catch -> CATCH LSB IDENTIFIER . RSB LMB expression RMB

    RSB             shift and go to state 193


state 163

    (65) class_def -> CLASS IDENTIFIER LMB expression . RMB
    (4) expression -> expression . variable_declaration SEMI
    (5) expression -> expression . variable_value_change SEMI
    (6) expression -> expression . if_statement
    (7) expression -> expression . function
    (8) expression -> expression . function_call SEMI
    (9) expression -> expression . repeat
    (10) expression -> expression . for
    (11) expression -> expression . while
    (12) expression -> expression . use SEMI
    (13) expression -> expression . error_handling
    (14) expression -> expression . variable_alone SEMI
    (15) expression -> expression . global_variable SEMI
    (16) expression -> expression . class_def
    (17) expression -> expression . debug SEMI
    (18) expression -> expression . function_class SEMI
    (19) expression -> expression . inside_root SEMI
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 194
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

    variable_declaration           shift and go to state 41
    variable_value_change          shift and go to state 42
    if_statement                   shift and go to state 43
    function                       shift and go to state 44
    function_call                  shift and go to state 45
    repeat                         shift and go to state 46
    for                            shift and go to state 47
    while                          shift and go to state 48
    use                            shift and go to state 49
    error_handling                 shift and go to state 50
    variable_alone                 shift and go to state 51
    global_variable                shift and go to state 52
    class_def                      shift and go to state 53
    debug                          shift and go to state 54
    function_class                 shift and go to state 55
    inside_root                    shift and go to state 56
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 164

    (50) inside_root -> inside DOT IDENTIFIER LSB . parameter RSB
    (72) parameter -> . parameter COMMA calculate
    (73) parameter -> . calculate
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    parameter                      shift and go to state 195
    calculate                      shift and go to state 118

state 165

    (51) inside -> DOT IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 196


state 166

    (79) if_statement_1 -> IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 197


state 167

    (83) condition -> condition LB . calculate
    (85) condition -> condition LB . EQUAL calculate
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 199
    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    calculate                      shift and go to state 198

state 168

    (84) condition -> condition RB . calculate
    (86) condition -> condition RB . EQUAL calculate
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 201
    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    calculate                      shift and go to state 200

state 169

    (87) condition -> condition EQUAL . calculate
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    calculate                      shift and go to state 202

state 170

    (67) function_head -> FUNCTION IDENTIFIER LSB parameter . RSB
    (72) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 203
    COMMA           shift and go to state 152


state 171

    (68) function_head -> FUNCTION IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 204


state 172

    (47) repeat_head -> REPEAT LSB calculate RSB .

    LMB             reduce using rule 47 (repeat_head -> REPEAT LSB calculate RSB .)


state 173

    (41) for_head -> FOR LSB IDENTIFIER IN . IDENTIFIER RSB

    IDENTIFIER      shift and go to state 205


state 174

    (44) while_head -> WHILE LSB condition RSB .

    LMB             reduce using rule 44 (while_head -> WHILE LSB condition RSB .)


state 175

    (38) try -> TRY LMB expression RMB .

    CATCH           reduce using rule 38 (try -> TRY LMB expression RMB .)


state 176

    (95) variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .
    (98) calculate -> calculate . PLUS calculate
    (99) calculate -> calculate . MINUS calculate
    (101) calculate -> calculate . MUL calculate
    (102) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 95 (variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MUL             shift and go to state 147
    DIV             shift and go to state 148


state 177

    (61) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB . parameter RSB
    (62) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB . empty RSB
    (72) parameter -> . parameter COMMA calculate
    (73) parameter -> . calculate
    (110) empty -> .
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    RSB             reduce using rule 110 (empty -> .)
    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    parameter                      shift and go to state 206
    empty                          shift and go to state 207
    calculate                      shift and go to state 118

state 178

    (63) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter . RSB
    (72) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 208
    COMMA           shift and go to state 152


state 179

    (64) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 209


state 180

    (98) calculate -> calculate PLUS calculate .
    (98) calculate -> calculate . PLUS calculate
    (99) calculate -> calculate . MINUS calculate
    (101) calculate -> calculate . MUL calculate
    (102) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 98 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 98 (calculate -> calculate PLUS calculate .)
    SEMI            reduce using rule 98 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 98 (calculate -> calculate PLUS calculate .)
    COMMA           reduce using rule 98 (calculate -> calculate PLUS calculate .)
    LB              reduce using rule 98 (calculate -> calculate PLUS calculate .)
    RB              reduce using rule 98 (calculate -> calculate PLUS calculate .)
    EQUAL           reduce using rule 98 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 147
    DIV             shift and go to state 148

  ! MUL             [ reduce using rule 98 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 98 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 145 ]
  ! MINUS           [ shift and go to state 146 ]


state 181

    (99) calculate -> calculate MINUS calculate .
    (98) calculate -> calculate . PLUS calculate
    (99) calculate -> calculate . MINUS calculate
    (101) calculate -> calculate . MUL calculate
    (102) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 99 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 99 (calculate -> calculate MINUS calculate .)
    SEMI            reduce using rule 99 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 99 (calculate -> calculate MINUS calculate .)
    COMMA           reduce using rule 99 (calculate -> calculate MINUS calculate .)
    LB              reduce using rule 99 (calculate -> calculate MINUS calculate .)
    RB              reduce using rule 99 (calculate -> calculate MINUS calculate .)
    EQUAL           reduce using rule 99 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 147
    DIV             shift and go to state 148

  ! MUL             [ reduce using rule 99 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 99 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 145 ]
  ! MINUS           [ shift and go to state 146 ]


state 182

    (101) calculate -> calculate MUL calculate .
    (98) calculate -> calculate . PLUS calculate
    (99) calculate -> calculate . MINUS calculate
    (101) calculate -> calculate . MUL calculate
    (102) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 101 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 101 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 101 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 101 (calculate -> calculate MUL calculate .)
    SEMI            reduce using rule 101 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 101 (calculate -> calculate MUL calculate .)
    COMMA           reduce using rule 101 (calculate -> calculate MUL calculate .)
    LB              reduce using rule 101 (calculate -> calculate MUL calculate .)
    RB              reduce using rule 101 (calculate -> calculate MUL calculate .)
    EQUAL           reduce using rule 101 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 145 ]
  ! MINUS           [ shift and go to state 146 ]
  ! MUL             [ shift and go to state 147 ]
  ! DIV             [ shift and go to state 148 ]


state 183

    (102) calculate -> calculate DIV calculate .
    (98) calculate -> calculate . PLUS calculate
    (99) calculate -> calculate . MINUS calculate
    (101) calculate -> calculate . MUL calculate
    (102) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 102 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 102 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 102 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 102 (calculate -> calculate DIV calculate .)
    SEMI            reduce using rule 102 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 102 (calculate -> calculate DIV calculate .)
    COMMA           reduce using rule 102 (calculate -> calculate DIV calculate .)
    LB              reduce using rule 102 (calculate -> calculate DIV calculate .)
    RB              reduce using rule 102 (calculate -> calculate DIV calculate .)
    EQUAL           reduce using rule 102 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 145 ]
  ! MINUS           [ shift and go to state 146 ]
  ! MUL             [ shift and go to state 147 ]
  ! DIV             [ shift and go to state 148 ]


state 184

    (109) calculate -> LSB calculate RSB .

    PLUS            reduce using rule 109 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 109 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 109 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 109 (calculate -> LSB calculate RSB .)
    SEMI            reduce using rule 109 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 109 (calculate -> LSB calculate RSB .)
    COMMA           reduce using rule 109 (calculate -> LSB calculate RSB .)
    LB              reduce using rule 109 (calculate -> LSB calculate RSB .)
    RB              reduce using rule 109 (calculate -> LSB calculate RSB .)
    EQUAL           reduce using rule 109 (calculate -> LSB calculate RSB .)


state 185

    (53) inside -> IDENTIFIER LSB parameter RSB DOT . IDENTIFIER LSB parameter RSB
    (55) inside -> IDENTIFIER LSB parameter RSB DOT . IDENTIFIER LSB empty RSB
    (59) inside -> IDENTIFIER LSB parameter RSB DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 210


state 186

    (72) parameter -> parameter COMMA calculate .
    (98) calculate -> calculate . PLUS calculate
    (99) calculate -> calculate . MINUS calculate
    (101) calculate -> calculate . MUL calculate
    (102) calculate -> calculate . DIV calculate

    RSB             reduce using rule 72 (parameter -> parameter COMMA calculate .)
    COMMA           reduce using rule 72 (parameter -> parameter COMMA calculate .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MUL             shift and go to state 147
    DIV             shift and go to state 148


state 187

    (54) inside -> IDENTIFIER LSB empty RSB DOT . IDENTIFIER LSB empty RSB
    (56) inside -> IDENTIFIER LSB empty RSB DOT . IDENTIFIER LSB parameter RSB

    IDENTIFIER      shift and go to state 211


state 188

    (57) inside -> IDENTIFIER DOT IDENTIFIER LSB parameter . RSB
    (72) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 212
    COMMA           shift and go to state 152


state 189

    (58) inside -> IDENTIFIER DOT IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 213


state 190

    (81) if_statement_2 -> if_statement_2 ELSE IF LSB . condition RSB LMB expression RMB
    (83) condition -> . condition LB calculate
    (84) condition -> . condition RB calculate
    (85) condition -> . condition LB EQUAL calculate
    (86) condition -> . condition RB EQUAL calculate
    (87) condition -> . condition EQUAL calculate
    (88) condition -> . calculate
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    condition                      shift and go to state 214
    calculate                      shift and go to state 134

state 191

    (80) if_statement_2 -> ELSE IF LSB condition . RSB LMB expression RMB
    (83) condition -> condition . LB calculate
    (84) condition -> condition . RB calculate
    (85) condition -> condition . LB EQUAL calculate
    (86) condition -> condition . RB EQUAL calculate
    (87) condition -> condition . EQUAL calculate

    RSB             shift and go to state 215
    LB              shift and go to state 167
    RB              shift and go to state 168
    EQUAL           shift and go to state 169


state 192

    (82) if_statement_3 -> ELSE LMB expression RMB .

    VAR             reduce using rule 82 (if_statement_3 -> ELSE LMB expression RMB .)
    IDENTIFIER      reduce using rule 82 (if_statement_3 -> ELSE LMB expression RMB .)
    USE             reduce using rule 82 (if_statement_3 -> ELSE LMB expression RMB .)
    GLOBAL          reduce using rule 82 (if_statement_3 -> ELSE LMB expression RMB .)
    CLASS           reduce using rule 82 (if_statement_3 -> ELSE LMB expression RMB .)
    IF              reduce using rule 82 (if_statement_3 -> ELSE LMB expression RMB .)
    FUNCTION        reduce using rule 82 (if_statement_3 -> ELSE LMB expression RMB .)
    REPEAT          reduce using rule 82 (if_statement_3 -> ELSE LMB expression RMB .)
    FOR             reduce using rule 82 (if_statement_3 -> ELSE LMB expression RMB .)
    WHILE           reduce using rule 82 (if_statement_3 -> ELSE LMB expression RMB .)
    TRY             reduce using rule 82 (if_statement_3 -> ELSE LMB expression RMB .)
    DOT             reduce using rule 82 (if_statement_3 -> ELSE LMB expression RMB .)
    $end            reduce using rule 82 (if_statement_3 -> ELSE LMB expression RMB .)
    RMB             reduce using rule 82 (if_statement_3 -> ELSE LMB expression RMB .)


state 193

    (39) catch -> CATCH LSB IDENTIFIER RSB . LMB expression RMB

    LMB             shift and go to state 216


state 194

    (65) class_def -> CLASS IDENTIFIER LMB expression RMB .

    VAR             reduce using rule 65 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    IDENTIFIER      reduce using rule 65 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    USE             reduce using rule 65 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    GLOBAL          reduce using rule 65 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    CLASS           reduce using rule 65 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    IF              reduce using rule 65 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    FUNCTION        reduce using rule 65 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    REPEAT          reduce using rule 65 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    FOR             reduce using rule 65 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    WHILE           reduce using rule 65 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    TRY             reduce using rule 65 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    DOT             reduce using rule 65 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    $end            reduce using rule 65 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    RMB             reduce using rule 65 (class_def -> CLASS IDENTIFIER LMB expression RMB .)


state 195

    (50) inside_root -> inside DOT IDENTIFIER LSB parameter . RSB
    (72) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 217
    COMMA           shift and go to state 152


state 196

    (51) inside -> DOT IDENTIFIER LSB empty RSB .

    DOT             reduce using rule 51 (inside -> DOT IDENTIFIER LSB empty RSB .)
    SEMI            reduce using rule 51 (inside -> DOT IDENTIFIER LSB empty RSB .)


state 197

    (79) if_statement_1 -> IF LSB condition RSB LMB . expression RMB
    (4) expression -> . expression variable_declaration SEMI
    (5) expression -> . expression variable_value_change SEMI
    (6) expression -> . expression if_statement
    (7) expression -> . expression function
    (8) expression -> . expression function_call SEMI
    (9) expression -> . expression repeat
    (10) expression -> . expression for
    (11) expression -> . expression while
    (12) expression -> . expression use SEMI
    (13) expression -> . expression error_handling
    (14) expression -> . expression variable_alone SEMI
    (15) expression -> . expression global_variable SEMI
    (16) expression -> . expression class_def
    (17) expression -> . expression debug SEMI
    (18) expression -> . expression function_class SEMI
    (19) expression -> . expression inside_root SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . inside_root SEMI
    (36) expression -> . empty
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (110) empty -> .
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    RMB             reduce using rule 110 (empty -> .)
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 110 (empty -> .) ]
  ! USE             [ reduce using rule 110 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 110 (empty -> .) ]
  ! CLASS           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 110 (empty -> .) ]
  ! REPEAT          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! TRY             [ reduce using rule 110 (empty -> .) ]
  ! DOT             [ reduce using rule 110 (empty -> .) ]

    expression                     shift and go to state 218
    variable_declaration           shift and go to state 4
    variable_value_change          shift and go to state 5
    if_statement                   shift and go to state 6
    function                       shift and go to state 7
    function_call                  shift and go to state 8
    repeat                         shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    use                            shift and go to state 12
    error_handling                 shift and go to state 13
    variable_alone                 shift and go to state 14
    global_variable                shift and go to state 15
    class_def                      shift and go to state 16
    debug                          shift and go to state 17
    function_class                 shift and go to state 18
    inside_root                    shift and go to state 19
    empty                          shift and go to state 20
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 198

    (83) condition -> condition LB calculate .
    (98) calculate -> calculate . PLUS calculate
    (99) calculate -> calculate . MINUS calculate
    (101) calculate -> calculate . MUL calculate
    (102) calculate -> calculate . DIV calculate

    RSB             reduce using rule 83 (condition -> condition LB calculate .)
    LB              reduce using rule 83 (condition -> condition LB calculate .)
    RB              reduce using rule 83 (condition -> condition LB calculate .)
    EQUAL           reduce using rule 83 (condition -> condition LB calculate .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MUL             shift and go to state 147
    DIV             shift and go to state 148


state 199

    (85) condition -> condition LB EQUAL . calculate
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    calculate                      shift and go to state 219

state 200

    (84) condition -> condition RB calculate .
    (98) calculate -> calculate . PLUS calculate
    (99) calculate -> calculate . MINUS calculate
    (101) calculate -> calculate . MUL calculate
    (102) calculate -> calculate . DIV calculate

    RSB             reduce using rule 84 (condition -> condition RB calculate .)
    LB              reduce using rule 84 (condition -> condition RB calculate .)
    RB              reduce using rule 84 (condition -> condition RB calculate .)
    EQUAL           reduce using rule 84 (condition -> condition RB calculate .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MUL             shift and go to state 147
    DIV             shift and go to state 148


state 201

    (86) condition -> condition RB EQUAL . calculate
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    calculate                      shift and go to state 220

state 202

    (87) condition -> condition EQUAL calculate .
    (98) calculate -> calculate . PLUS calculate
    (99) calculate -> calculate . MINUS calculate
    (101) calculate -> calculate . MUL calculate
    (102) calculate -> calculate . DIV calculate

    RSB             reduce using rule 87 (condition -> condition EQUAL calculate .)
    LB              reduce using rule 87 (condition -> condition EQUAL calculate .)
    RB              reduce using rule 87 (condition -> condition EQUAL calculate .)
    EQUAL           reduce using rule 87 (condition -> condition EQUAL calculate .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MUL             shift and go to state 147
    DIV             shift and go to state 148


state 203

    (67) function_head -> FUNCTION IDENTIFIER LSB parameter RSB .

    LMB             reduce using rule 67 (function_head -> FUNCTION IDENTIFIER LSB parameter RSB .)


state 204

    (68) function_head -> FUNCTION IDENTIFIER LSB empty RSB .

    LMB             reduce using rule 68 (function_head -> FUNCTION IDENTIFIER LSB empty RSB .)


state 205

    (41) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER . RSB

    RSB             shift and go to state 221


state 206

    (61) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter . RSB
    (72) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 222
    COMMA           shift and go to state 152


state 207

    (62) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 223


state 208

    (63) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .

    SEMI            reduce using rule 63 (function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .)


state 209

    (64) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .

    SEMI            reduce using rule 64 (function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .)


state 210

    (53) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER . LSB parameter RSB
    (55) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER . LSB empty RSB
    (59) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER .

    LSB             shift and go to state 224
    DOT             reduce using rule 59 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER .)
    SEMI            reduce using rule 59 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER .)


state 211

    (54) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER . LSB empty RSB
    (56) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER . LSB parameter RSB

    LSB             shift and go to state 225


state 212

    (57) inside -> IDENTIFIER DOT IDENTIFIER LSB parameter RSB .

    DOT             reduce using rule 57 (inside -> IDENTIFIER DOT IDENTIFIER LSB parameter RSB .)
    SEMI            reduce using rule 57 (inside -> IDENTIFIER DOT IDENTIFIER LSB parameter RSB .)


state 213

    (58) inside -> IDENTIFIER DOT IDENTIFIER LSB empty RSB .

    DOT             reduce using rule 58 (inside -> IDENTIFIER DOT IDENTIFIER LSB empty RSB .)
    SEMI            reduce using rule 58 (inside -> IDENTIFIER DOT IDENTIFIER LSB empty RSB .)


state 214

    (81) if_statement_2 -> if_statement_2 ELSE IF LSB condition . RSB LMB expression RMB
    (83) condition -> condition . LB calculate
    (84) condition -> condition . RB calculate
    (85) condition -> condition . LB EQUAL calculate
    (86) condition -> condition . RB EQUAL calculate
    (87) condition -> condition . EQUAL calculate

    RSB             shift and go to state 226
    LB              shift and go to state 167
    RB              shift and go to state 168
    EQUAL           shift and go to state 169


state 215

    (80) if_statement_2 -> ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 227


state 216

    (39) catch -> CATCH LSB IDENTIFIER RSB LMB . expression RMB
    (4) expression -> . expression variable_declaration SEMI
    (5) expression -> . expression variable_value_change SEMI
    (6) expression -> . expression if_statement
    (7) expression -> . expression function
    (8) expression -> . expression function_call SEMI
    (9) expression -> . expression repeat
    (10) expression -> . expression for
    (11) expression -> . expression while
    (12) expression -> . expression use SEMI
    (13) expression -> . expression error_handling
    (14) expression -> . expression variable_alone SEMI
    (15) expression -> . expression global_variable SEMI
    (16) expression -> . expression class_def
    (17) expression -> . expression debug SEMI
    (18) expression -> . expression function_class SEMI
    (19) expression -> . expression inside_root SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . inside_root SEMI
    (36) expression -> . empty
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (110) empty -> .
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    RMB             reduce using rule 110 (empty -> .)
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 110 (empty -> .) ]
  ! USE             [ reduce using rule 110 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 110 (empty -> .) ]
  ! CLASS           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 110 (empty -> .) ]
  ! REPEAT          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! TRY             [ reduce using rule 110 (empty -> .) ]
  ! DOT             [ reduce using rule 110 (empty -> .) ]

    expression                     shift and go to state 228
    variable_declaration           shift and go to state 4
    variable_value_change          shift and go to state 5
    if_statement                   shift and go to state 6
    function                       shift and go to state 7
    function_call                  shift and go to state 8
    repeat                         shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    use                            shift and go to state 12
    error_handling                 shift and go to state 13
    variable_alone                 shift and go to state 14
    global_variable                shift and go to state 15
    class_def                      shift and go to state 16
    debug                          shift and go to state 17
    function_class                 shift and go to state 18
    inside_root                    shift and go to state 19
    empty                          shift and go to state 20
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 217

    (50) inside_root -> inside DOT IDENTIFIER LSB parameter RSB .

    SEMI            reduce using rule 50 (inside_root -> inside DOT IDENTIFIER LSB parameter RSB .)


state 218

    (79) if_statement_1 -> IF LSB condition RSB LMB expression . RMB
    (4) expression -> expression . variable_declaration SEMI
    (5) expression -> expression . variable_value_change SEMI
    (6) expression -> expression . if_statement
    (7) expression -> expression . function
    (8) expression -> expression . function_call SEMI
    (9) expression -> expression . repeat
    (10) expression -> expression . for
    (11) expression -> expression . while
    (12) expression -> expression . use SEMI
    (13) expression -> expression . error_handling
    (14) expression -> expression . variable_alone SEMI
    (15) expression -> expression . global_variable SEMI
    (16) expression -> expression . class_def
    (17) expression -> expression . debug SEMI
    (18) expression -> expression . function_class SEMI
    (19) expression -> expression . inside_root SEMI
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 229
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

    variable_declaration           shift and go to state 41
    variable_value_change          shift and go to state 42
    if_statement                   shift and go to state 43
    function                       shift and go to state 44
    function_call                  shift and go to state 45
    repeat                         shift and go to state 46
    for                            shift and go to state 47
    while                          shift and go to state 48
    use                            shift and go to state 49
    error_handling                 shift and go to state 50
    variable_alone                 shift and go to state 51
    global_variable                shift and go to state 52
    class_def                      shift and go to state 53
    debug                          shift and go to state 54
    function_class                 shift and go to state 55
    inside_root                    shift and go to state 56
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 219

    (85) condition -> condition LB EQUAL calculate .
    (98) calculate -> calculate . PLUS calculate
    (99) calculate -> calculate . MINUS calculate
    (101) calculate -> calculate . MUL calculate
    (102) calculate -> calculate . DIV calculate

    RSB             reduce using rule 85 (condition -> condition LB EQUAL calculate .)
    LB              reduce using rule 85 (condition -> condition LB EQUAL calculate .)
    RB              reduce using rule 85 (condition -> condition LB EQUAL calculate .)
    EQUAL           reduce using rule 85 (condition -> condition LB EQUAL calculate .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MUL             shift and go to state 147
    DIV             shift and go to state 148


state 220

    (86) condition -> condition RB EQUAL calculate .
    (98) calculate -> calculate . PLUS calculate
    (99) calculate -> calculate . MINUS calculate
    (101) calculate -> calculate . MUL calculate
    (102) calculate -> calculate . DIV calculate

    RSB             reduce using rule 86 (condition -> condition RB EQUAL calculate .)
    LB              reduce using rule 86 (condition -> condition RB EQUAL calculate .)
    RB              reduce using rule 86 (condition -> condition RB EQUAL calculate .)
    EQUAL           reduce using rule 86 (condition -> condition RB EQUAL calculate .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    MUL             shift and go to state 147
    DIV             shift and go to state 148


state 221

    (41) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .

    LMB             reduce using rule 41 (for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .)


state 222

    (61) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .

    SEMI            reduce using rule 61 (function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .)


state 223

    (62) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .

    SEMI            reduce using rule 62 (function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .)


state 224

    (53) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB . parameter RSB
    (55) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB . empty RSB
    (72) parameter -> . parameter COMMA calculate
    (73) parameter -> . calculate
    (110) empty -> .
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    RSB             reduce using rule 110 (empty -> .)
    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    parameter                      shift and go to state 230
    empty                          shift and go to state 231
    calculate                      shift and go to state 118

state 225

    (54) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB . empty RSB
    (56) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB . parameter RSB
    (110) empty -> .
    (72) parameter -> . parameter COMMA calculate
    (73) parameter -> . calculate
    (98) calculate -> . calculate PLUS calculate
    (99) calculate -> . calculate MINUS calculate
    (100) calculate -> . MINUS calculate
    (101) calculate -> . calculate MUL calculate
    (102) calculate -> . calculate DIV calculate
    (103) calculate -> . INT
    (104) calculate -> . FLOAT
    (105) calculate -> . STRING
    (106) calculate -> . IDENTIFIER
    (107) calculate -> . IDENTIFIER LIST
    (108) calculate -> . LIST
    (109) calculate -> . LSB calculate RSB

    RSB             reduce using rule 110 (empty -> .)
    MINUS           shift and go to state 111
    INT             shift and go to state 112
    FLOAT           shift and go to state 113
    STRING          shift and go to state 114
    IDENTIFIER      shift and go to state 115
    LIST            shift and go to state 119
    LSB             shift and go to state 110

    empty                          shift and go to state 232
    parameter                      shift and go to state 233
    calculate                      shift and go to state 118

state 226

    (81) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 234


state 227

    (80) if_statement_2 -> ELSE IF LSB condition RSB LMB . expression RMB
    (4) expression -> . expression variable_declaration SEMI
    (5) expression -> . expression variable_value_change SEMI
    (6) expression -> . expression if_statement
    (7) expression -> . expression function
    (8) expression -> . expression function_call SEMI
    (9) expression -> . expression repeat
    (10) expression -> . expression for
    (11) expression -> . expression while
    (12) expression -> . expression use SEMI
    (13) expression -> . expression error_handling
    (14) expression -> . expression variable_alone SEMI
    (15) expression -> . expression global_variable SEMI
    (16) expression -> . expression class_def
    (17) expression -> . expression debug SEMI
    (18) expression -> . expression function_class SEMI
    (19) expression -> . expression inside_root SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . inside_root SEMI
    (36) expression -> . empty
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (110) empty -> .
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    RMB             reduce using rule 110 (empty -> .)
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 110 (empty -> .) ]
  ! USE             [ reduce using rule 110 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 110 (empty -> .) ]
  ! CLASS           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 110 (empty -> .) ]
  ! REPEAT          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! TRY             [ reduce using rule 110 (empty -> .) ]
  ! DOT             [ reduce using rule 110 (empty -> .) ]

    expression                     shift and go to state 235
    variable_declaration           shift and go to state 4
    variable_value_change          shift and go to state 5
    if_statement                   shift and go to state 6
    function                       shift and go to state 7
    function_call                  shift and go to state 8
    repeat                         shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    use                            shift and go to state 12
    error_handling                 shift and go to state 13
    variable_alone                 shift and go to state 14
    global_variable                shift and go to state 15
    class_def                      shift and go to state 16
    debug                          shift and go to state 17
    function_class                 shift and go to state 18
    inside_root                    shift and go to state 19
    empty                          shift and go to state 20
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 228

    (39) catch -> CATCH LSB IDENTIFIER RSB LMB expression . RMB
    (4) expression -> expression . variable_declaration SEMI
    (5) expression -> expression . variable_value_change SEMI
    (6) expression -> expression . if_statement
    (7) expression -> expression . function
    (8) expression -> expression . function_call SEMI
    (9) expression -> expression . repeat
    (10) expression -> expression . for
    (11) expression -> expression . while
    (12) expression -> expression . use SEMI
    (13) expression -> expression . error_handling
    (14) expression -> expression . variable_alone SEMI
    (15) expression -> expression . global_variable SEMI
    (16) expression -> expression . class_def
    (17) expression -> expression . debug SEMI
    (18) expression -> expression . function_class SEMI
    (19) expression -> expression . inside_root SEMI
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 236
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

    variable_declaration           shift and go to state 41
    variable_value_change          shift and go to state 42
    if_statement                   shift and go to state 43
    function                       shift and go to state 44
    function_call                  shift and go to state 45
    repeat                         shift and go to state 46
    for                            shift and go to state 47
    while                          shift and go to state 48
    use                            shift and go to state 49
    error_handling                 shift and go to state 50
    variable_alone                 shift and go to state 51
    global_variable                shift and go to state 52
    class_def                      shift and go to state 53
    debug                          shift and go to state 54
    function_class                 shift and go to state 55
    inside_root                    shift and go to state 56
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 229

    (79) if_statement_1 -> IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 79 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 79 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 79 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 79 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 79 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 79 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 79 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 79 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 79 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 79 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 79 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 79 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    DOT             reduce using rule 79 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 79 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 79 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)


state 230

    (53) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter . RSB
    (72) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 237
    COMMA           shift and go to state 152


state 231

    (55) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 238


state 232

    (54) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 239


state 233

    (56) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter . RSB
    (72) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 240
    COMMA           shift and go to state 152


state 234

    (81) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB . expression RMB
    (4) expression -> . expression variable_declaration SEMI
    (5) expression -> . expression variable_value_change SEMI
    (6) expression -> . expression if_statement
    (7) expression -> . expression function
    (8) expression -> . expression function_call SEMI
    (9) expression -> . expression repeat
    (10) expression -> . expression for
    (11) expression -> . expression while
    (12) expression -> . expression use SEMI
    (13) expression -> . expression error_handling
    (14) expression -> . expression variable_alone SEMI
    (15) expression -> . expression global_variable SEMI
    (16) expression -> . expression class_def
    (17) expression -> . expression debug SEMI
    (18) expression -> . expression function_class SEMI
    (19) expression -> . expression inside_root SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . inside_root SEMI
    (36) expression -> . empty
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (110) empty -> .
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    RMB             reduce using rule 110 (empty -> .)
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 110 (empty -> .) ]
  ! USE             [ reduce using rule 110 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 110 (empty -> .) ]
  ! CLASS           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 110 (empty -> .) ]
  ! REPEAT          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! TRY             [ reduce using rule 110 (empty -> .) ]
  ! DOT             [ reduce using rule 110 (empty -> .) ]

    expression                     shift and go to state 241
    variable_declaration           shift and go to state 4
    variable_value_change          shift and go to state 5
    if_statement                   shift and go to state 6
    function                       shift and go to state 7
    function_call                  shift and go to state 8
    repeat                         shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    use                            shift and go to state 12
    error_handling                 shift and go to state 13
    variable_alone                 shift and go to state 14
    global_variable                shift and go to state 15
    class_def                      shift and go to state 16
    debug                          shift and go to state 17
    function_class                 shift and go to state 18
    inside_root                    shift and go to state 19
    empty                          shift and go to state 20
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 235

    (80) if_statement_2 -> ELSE IF LSB condition RSB LMB expression . RMB
    (4) expression -> expression . variable_declaration SEMI
    (5) expression -> expression . variable_value_change SEMI
    (6) expression -> expression . if_statement
    (7) expression -> expression . function
    (8) expression -> expression . function_call SEMI
    (9) expression -> expression . repeat
    (10) expression -> expression . for
    (11) expression -> expression . while
    (12) expression -> expression . use SEMI
    (13) expression -> expression . error_handling
    (14) expression -> expression . variable_alone SEMI
    (15) expression -> expression . global_variable SEMI
    (16) expression -> expression . class_def
    (17) expression -> expression . debug SEMI
    (18) expression -> expression . function_class SEMI
    (19) expression -> expression . inside_root SEMI
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 242
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

    variable_declaration           shift and go to state 41
    variable_value_change          shift and go to state 42
    if_statement                   shift and go to state 43
    function                       shift and go to state 44
    function_call                  shift and go to state 45
    repeat                         shift and go to state 46
    for                            shift and go to state 47
    while                          shift and go to state 48
    use                            shift and go to state 49
    error_handling                 shift and go to state 50
    variable_alone                 shift and go to state 51
    global_variable                shift and go to state 52
    class_def                      shift and go to state 53
    debug                          shift and go to state 54
    function_class                 shift and go to state 55
    inside_root                    shift and go to state 56
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 236

    (39) catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .

    VAR             reduce using rule 39 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 39 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    USE             reduce using rule 39 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    GLOBAL          reduce using rule 39 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    CLASS           reduce using rule 39 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IF              reduce using rule 39 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FUNCTION        reduce using rule 39 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    REPEAT          reduce using rule 39 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FOR             reduce using rule 39 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    WHILE           reduce using rule 39 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    TRY             reduce using rule 39 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    DOT             reduce using rule 39 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    $end            reduce using rule 39 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    RMB             reduce using rule 39 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)


state 237

    (53) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB .

    DOT             reduce using rule 53 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB .)
    SEMI            reduce using rule 53 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB .)


state 238

    (55) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB .

    DOT             reduce using rule 55 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB .)
    SEMI            reduce using rule 55 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB .)


state 239

    (54) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB .

    DOT             reduce using rule 54 (inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB .)
    SEMI            reduce using rule 54 (inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB .)


state 240

    (56) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB .

    DOT             reduce using rule 56 (inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB .)
    SEMI            reduce using rule 56 (inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB .)


state 241

    (81) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression . RMB
    (4) expression -> expression . variable_declaration SEMI
    (5) expression -> expression . variable_value_change SEMI
    (6) expression -> expression . if_statement
    (7) expression -> expression . function
    (8) expression -> expression . function_call SEMI
    (9) expression -> expression . repeat
    (10) expression -> expression . for
    (11) expression -> expression . while
    (12) expression -> expression . use SEMI
    (13) expression -> expression . error_handling
    (14) expression -> expression . variable_alone SEMI
    (15) expression -> expression . global_variable SEMI
    (16) expression -> expression . class_def
    (17) expression -> expression . debug SEMI
    (18) expression -> expression . function_class SEMI
    (19) expression -> expression . inside_root SEMI
    (95) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (96) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (97) variable_declaration -> . VAR IDENTIFIER
    (93) variable_value_change -> . IDENTIFIER EQUAL LIST
    (94) variable_value_change -> . IDENTIFIER EQUAL calculate
    (75) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (76) if_statement -> . if_statement_1 if_statement_2
    (77) if_statement -> . if_statement_1 if_statement_3
    (78) if_statement -> . if_statement_1
    (66) function -> . function_head function_body
    (70) function_call -> . IDENTIFIER LSB parameter RSB
    (71) function_call -> . IDENTIFIER LSB empty RSB
    (46) repeat -> . repeat_head repeat_body
    (40) for -> . for_head for_body
    (43) while -> . while_head while_body
    (89) use -> . USE use_params
    (37) error_handling -> . try catch
    (92) variable_alone -> . IDENTIFIER
    (91) global_variable -> . GLOBAL IDENTIFIER
    (65) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (74) debug -> . USE DEBUG
    (61) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (63) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (64) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (49) inside_root -> . inside
    (50) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (79) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (67) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (68) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (47) repeat_head -> . REPEAT LSB calculate RSB
    (41) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (44) while_head -> . WHILE LSB condition RSB
    (38) try -> . TRY LMB expression RMB
    (51) inside -> . DOT IDENTIFIER LSB empty RSB
    (52) inside -> . inside DOT IDENTIFIER
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (55) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (56) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (58) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (59) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (60) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 243
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 22
    USE             shift and go to state 28
    GLOBAL          shift and go to state 30
    CLASS           shift and go to state 31
    IF              shift and go to state 34
    FUNCTION        shift and go to state 35
    REPEAT          shift and go to state 36
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    TRY             shift and go to state 39
    DOT             shift and go to state 33

    variable_declaration           shift and go to state 41
    variable_value_change          shift and go to state 42
    if_statement                   shift and go to state 43
    function                       shift and go to state 44
    function_call                  shift and go to state 45
    repeat                         shift and go to state 46
    for                            shift and go to state 47
    while                          shift and go to state 48
    use                            shift and go to state 49
    error_handling                 shift and go to state 50
    variable_alone                 shift and go to state 51
    global_variable                shift and go to state 52
    class_def                      shift and go to state 53
    debug                          shift and go to state 54
    function_class                 shift and go to state 55
    inside_root                    shift and go to state 56
    if_statement_1                 shift and go to state 23
    function_head                  shift and go to state 24
    repeat_head                    shift and go to state 25
    for_head                       shift and go to state 26
    while_head                     shift and go to state 27
    try                            shift and go to state 29
    inside                         shift and go to state 32

state 242

    (80) if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 80 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 80 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 80 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 80 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 80 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 80 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 80 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 80 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 80 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 80 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 80 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 80 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    DOT             reduce using rule 80 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 80 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 80 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)


state 243

    (81) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 81 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 81 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 81 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 81 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 81 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 81 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 81 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 81 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 81 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 81 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 81 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 81 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    DOT             reduce using rule 81 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 81 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 81 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for USE in state 0 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for DOT in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 2 resolved as shift
WARNING: shift/reduce conflict for USE in state 2 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 2 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for TRY in state 2 resolved as shift
WARNING: shift/reduce conflict for DOT in state 2 resolved as shift
WARNING: shift/reduce conflict for VAR in state 3 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 3 resolved as shift
WARNING: shift/reduce conflict for USE in state 3 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 3 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for TRY in state 3 resolved as shift
WARNING: shift/reduce conflict for DOT in state 3 resolved as shift
WARNING: shift/reduce conflict for VAR in state 40 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 40 resolved as shift
WARNING: shift/reduce conflict for USE in state 40 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 40 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 40 resolved as shift
WARNING: shift/reduce conflict for IF in state 40 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 40 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 40 resolved as shift
WARNING: shift/reduce conflict for FOR in state 40 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 40 resolved as shift
WARNING: shift/reduce conflict for TRY in state 40 resolved as shift
WARNING: shift/reduce conflict for DOT in state 40 resolved as shift
WARNING: shift/reduce conflict for VAR in state 74 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 74 resolved as shift
WARNING: shift/reduce conflict for USE in state 74 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 74 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 74 resolved as shift
WARNING: shift/reduce conflict for IF in state 74 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 74 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 74 resolved as shift
WARNING: shift/reduce conflict for FOR in state 74 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 74 resolved as shift
WARNING: shift/reduce conflict for TRY in state 74 resolved as shift
WARNING: shift/reduce conflict for DOT in state 74 resolved as shift
WARNING: shift/reduce conflict for VAR in state 76 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 76 resolved as shift
WARNING: shift/reduce conflict for USE in state 76 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 76 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 76 resolved as shift
WARNING: shift/reduce conflict for IF in state 76 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 76 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 76 resolved as shift
WARNING: shift/reduce conflict for FOR in state 76 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 76 resolved as shift
WARNING: shift/reduce conflict for TRY in state 76 resolved as shift
WARNING: shift/reduce conflict for DOT in state 76 resolved as shift
WARNING: shift/reduce conflict for VAR in state 78 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 78 resolved as shift
WARNING: shift/reduce conflict for USE in state 78 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 78 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 78 resolved as shift
WARNING: shift/reduce conflict for IF in state 78 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 78 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 78 resolved as shift
WARNING: shift/reduce conflict for FOR in state 78 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 78 resolved as shift
WARNING: shift/reduce conflict for TRY in state 78 resolved as shift
WARNING: shift/reduce conflict for DOT in state 78 resolved as shift
WARNING: shift/reduce conflict for VAR in state 80 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 80 resolved as shift
WARNING: shift/reduce conflict for USE in state 80 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 80 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 80 resolved as shift
WARNING: shift/reduce conflict for IF in state 80 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 80 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 80 resolved as shift
WARNING: shift/reduce conflict for FOR in state 80 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 80 resolved as shift
WARNING: shift/reduce conflict for TRY in state 80 resolved as shift
WARNING: shift/reduce conflict for DOT in state 80 resolved as shift
WARNING: shift/reduce conflict for VAR in state 95 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 95 resolved as shift
WARNING: shift/reduce conflict for USE in state 95 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 95 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 95 resolved as shift
WARNING: shift/reduce conflict for IF in state 95 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 95 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 95 resolved as shift
WARNING: shift/reduce conflict for FOR in state 95 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 95 resolved as shift
WARNING: shift/reduce conflict for TRY in state 95 resolved as shift
WARNING: shift/reduce conflict for DOT in state 95 resolved as shift
WARNING: shift/reduce conflict for VAR in state 124 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 124 resolved as shift
WARNING: shift/reduce conflict for USE in state 124 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 124 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 124 resolved as shift
WARNING: shift/reduce conflict for IF in state 124 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 124 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 124 resolved as shift
WARNING: shift/reduce conflict for FOR in state 124 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 124 resolved as shift
WARNING: shift/reduce conflict for TRY in state 124 resolved as shift
WARNING: shift/reduce conflict for DOT in state 124 resolved as shift
WARNING: shift/reduce conflict for VAR in state 130 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 130 resolved as shift
WARNING: shift/reduce conflict for USE in state 130 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 130 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 130 resolved as shift
WARNING: shift/reduce conflict for IF in state 130 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 130 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 130 resolved as shift
WARNING: shift/reduce conflict for FOR in state 130 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 130 resolved as shift
WARNING: shift/reduce conflict for TRY in state 130 resolved as shift
WARNING: shift/reduce conflict for DOT in state 130 resolved as shift
WARNING: shift/reduce conflict for VAR in state 197 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 197 resolved as shift
WARNING: shift/reduce conflict for USE in state 197 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 197 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 197 resolved as shift
WARNING: shift/reduce conflict for IF in state 197 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 197 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 197 resolved as shift
WARNING: shift/reduce conflict for FOR in state 197 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 197 resolved as shift
WARNING: shift/reduce conflict for TRY in state 197 resolved as shift
WARNING: shift/reduce conflict for DOT in state 197 resolved as shift
WARNING: shift/reduce conflict for VAR in state 216 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 216 resolved as shift
WARNING: shift/reduce conflict for USE in state 216 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 216 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 216 resolved as shift
WARNING: shift/reduce conflict for IF in state 216 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 216 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 216 resolved as shift
WARNING: shift/reduce conflict for FOR in state 216 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 216 resolved as shift
WARNING: shift/reduce conflict for TRY in state 216 resolved as shift
WARNING: shift/reduce conflict for DOT in state 216 resolved as shift
WARNING: shift/reduce conflict for VAR in state 227 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 227 resolved as shift
WARNING: shift/reduce conflict for USE in state 227 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 227 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 227 resolved as shift
WARNING: shift/reduce conflict for IF in state 227 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 227 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 227 resolved as shift
WARNING: shift/reduce conflict for FOR in state 227 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 227 resolved as shift
WARNING: shift/reduce conflict for TRY in state 227 resolved as shift
WARNING: shift/reduce conflict for DOT in state 227 resolved as shift
WARNING: shift/reduce conflict for VAR in state 234 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 234 resolved as shift
WARNING: shift/reduce conflict for USE in state 234 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 234 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 234 resolved as shift
WARNING: shift/reduce conflict for IF in state 234 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 234 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 234 resolved as shift
WARNING: shift/reduce conflict for FOR in state 234 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 234 resolved as shift
WARNING: shift/reduce conflict for TRY in state 234 resolved as shift
WARNING: shift/reduce conflict for DOT in state 234 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (root -> exex)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 108 resolved using rule (variable_value_change -> IDENTIFIER EQUAL LIST)
WARNING: rejected rule (calculate -> LIST) in state 108
