Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CONTENTS
    LMB
    RMB

Grammar

Rule 0     S' -> elements_expr
Rule 1     elements_expr -> LSB elements RSB
Rule 2     elements -> elements COMMA elements
Rule 3     elements -> IDENTIFIER EQUAL IDENTIFIER

Terminals, with rules where they appear

COMMA                : 2
CONTENTS             : 
EQUAL                : 3
IDENTIFIER           : 3 3
LMB                  : 
LSB                  : 1
RMB                  : 
RSB                  : 1
error                : 

Nonterminals, with rules where they appear

elements             : 1 2 2
elements_expr        : 0

Parsing method: LALR

state 0

    (0) S' -> . elements_expr
    (1) elements_expr -> . LSB elements RSB

    LSB             shift and go to state 2

    elements_expr                  shift and go to state 1

state 1

    (0) S' -> elements_expr .



state 2

    (1) elements_expr -> LSB . elements RSB
    (2) elements -> . elements COMMA elements
    (3) elements -> . IDENTIFIER EQUAL IDENTIFIER

    IDENTIFIER      shift and go to state 4

    elements                       shift and go to state 3

state 3

    (1) elements_expr -> LSB elements . RSB
    (2) elements -> elements . COMMA elements

    RSB             shift and go to state 5
    COMMA           shift and go to state 6


state 4

    (3) elements -> IDENTIFIER . EQUAL IDENTIFIER

    EQUAL           shift and go to state 7


state 5

    (1) elements_expr -> LSB elements RSB .

    $end            reduce using rule 1 (elements_expr -> LSB elements RSB .)


state 6

    (2) elements -> elements COMMA . elements
    (2) elements -> . elements COMMA elements
    (3) elements -> . IDENTIFIER EQUAL IDENTIFIER

    IDENTIFIER      shift and go to state 4

    elements                       shift and go to state 8

state 7

    (3) elements -> IDENTIFIER EQUAL . IDENTIFIER

    IDENTIFIER      shift and go to state 9


state 8

    (2) elements -> elements COMMA elements .
    (2) elements -> elements . COMMA elements

  ! shift/reduce conflict for COMMA resolved as shift
    RSB             reduce using rule 2 (elements -> elements COMMA elements .)
    COMMA           shift and go to state 6

  ! COMMA           [ reduce using rule 2 (elements -> elements COMMA elements .) ]


state 9

    (3) elements -> IDENTIFIER EQUAL IDENTIFIER .

    RSB             reduce using rule 3 (elements -> IDENTIFIER EQUAL IDENTIFIER .)
    COMMA           reduce using rule 3 (elements -> IDENTIFIER EQUAL IDENTIFIER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 8 resolved as shift
