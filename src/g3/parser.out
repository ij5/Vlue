Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> root
Rule 1     root -> expression
Rule 2     expression -> expression variable_declaration SEMI
Rule 3     expression -> expression variable_value_change SEMI
Rule 4     expression -> expression if_statement
Rule 5     expression -> expression function
Rule 6     expression -> expression function_call SEMI
Rule 7     expression -> expression repeat
Rule 8     expression -> expression for
Rule 9     expression -> expression while
Rule 10    expression -> expression use
Rule 11    expression -> variable_declaration SEMI
Rule 12    expression -> variable_value_change SEMI
Rule 13    expression -> if_statement
Rule 14    expression -> function
Rule 15    expression -> function_call
Rule 16    expression -> repeat
Rule 17    expression -> for
Rule 18    expression -> while
Rule 19    expression -> use
Rule 20    expression -> empty
Rule 21    for -> for_head for_body
Rule 22    for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB
Rule 23    for_body -> LMB expression RMB
Rule 24    while -> while_head while_body
Rule 25    while_head -> WHILE LSB condition RSB
Rule 26    while_body -> LMB expression RMB
Rule 27    repeat -> repeat_head repeat_body
Rule 28    repeat_head -> REPEAT LSB calculate RSB
Rule 29    repeat_body -> LMB expression RMB
Rule 30    function -> function_head function_body
Rule 31    function_head -> FUNCTION IDENTIFIER LSB empty RSB
Rule 32    function_head -> FUNCTION IDENTIFIER LSB parameter RSB
Rule 33    function_body -> LMB expression RMB
Rule 34    function_call -> IDENTIFIER LSB parameter RSB
Rule 35    parameter -> parameter COMMA calculate
Rule 36    parameter -> calculate
Rule 37    parameter -> empty
Rule 38    if_statement -> if_statement_1
Rule 39    if_statement -> if_statement_2
Rule 40    if_statement -> if_statement_3
Rule 41    if_statement_1 -> if_statement_head_1 if_statement_body
Rule 42    if_statement_2 -> if_statement_1 if_statement_head_2 if_statement_body
Rule 43    if_statement_2 -> if_statement_2 if_statement_head_2 if_statement_body
Rule 44    if_statement_3 -> if_statement_2 if_statement_head_3 if_statement_body
Rule 45    if_statement_3 -> if_statement_1 if_statement_head_3 if_statement_body
Rule 46    if_statement_head_1 -> IF LSB condition RSB
Rule 47    if_statement_head_2 -> ELSE IF LSB condition RSB
Rule 48    if_statement_head_3 -> ELSE LSB condition RSB
Rule 49    if_statement_body -> LMB expression RMB
Rule 50    condition -> condition LB calculate
Rule 51    condition -> condition RB calculate
Rule 52    condition -> condition LB EQUAL calculate
Rule 53    condition -> condition RB EQUAL calculate
Rule 54    condition -> condition EQUAL calculate
Rule 55    condition -> calculate
Rule 56    use -> USE IDENTIFIER
Rule 57    variable_value_change -> IDENTIFIER EQUAL LIST
Rule 58    variable_value_change -> IDENTIFIER EQUAL calculate
Rule 59    variable_declaration -> VAR IDENTIFIER EQUAL LIST
Rule 60    variable_declaration -> VAR IDENTIFIER EQUAL calculate
Rule 61    variable_declaration -> VAR IDENTIFIER
Rule 62    calculate -> calculate PLUS calculate
Rule 63    calculate -> calculate MINUS calculate
Rule 64    calculate -> MINUS calculate
Rule 65    calculate -> calculate MUL calculate
Rule 66    calculate -> calculate DIV calculate
Rule 67    calculate -> INT
Rule 68    calculate -> FLOAT
Rule 69    calculate -> STRING
Rule 70    calculate -> IDENTIFIER
Rule 71    calculate -> LSB calculate RSB
Rule 72    empty -> <empty>

Terminals, with rules where they appear

COLON                : 
COMMA                : 35
DIV                  : 66
ELSE                 : 47 48
EQUAL                : 52 53 54 57 58 59 60
FLOAT                : 68
FOR                  : 22
FUNCTION             : 31 32
IDENTIFIER           : 22 22 31 32 34 56 57 58 59 60 61 70
IF                   : 46 47
IN                   : 22
INT                  : 67
LB                   : 50 52
LIST                 : 57 59
LMB                  : 23 26 29 33 49
LSB                  : 22 25 28 31 32 34 46 47 48 71
MINUS                : 63 64
MUL                  : 65
PLUS                 : 62
RB                   : 51 53
REPEAT               : 28
RMB                  : 23 26 29 33 49
RSB                  : 22 25 28 31 32 34 46 47 48 71
SEMI                 : 2 3 6 11 12
STRING               : 69
USE                  : 56
VAR                  : 59 60 61
WHILE                : 25
error                : 

Nonterminals, with rules where they appear

calculate            : 28 35 36 50 51 52 53 54 55 58 60 62 62 63 63 64 65 65 66 66 71
condition            : 25 46 47 48 50 51 52 53 54
empty                : 20 31 37
expression           : 1 2 3 4 5 6 7 8 9 10 23 26 29 33 49
for                  : 8 17
for_body             : 21
for_head             : 21
function             : 5 14
function_body        : 30
function_call        : 6 15
function_head        : 30
if_statement         : 4 13
if_statement_1       : 38 42 45
if_statement_2       : 39 43 44
if_statement_3       : 40
if_statement_body    : 41 42 43 44 45
if_statement_head_1  : 41
if_statement_head_2  : 42 43
if_statement_head_3  : 44 45
parameter            : 32 34 35
repeat               : 7 16
repeat_body          : 27
repeat_head          : 27
root                 : 0
use                  : 10 19
variable_declaration : 2 11
variable_value_change : 3 12
while                : 9 18
while_body           : 24
while_head           : 24

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . expression
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (59) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (60) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER
    (57) variable_value_change -> . IDENTIFIER EQUAL LIST
    (58) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1
    (39) if_statement -> . if_statement_2
    (40) if_statement -> . if_statement_3
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (56) use -> . USE IDENTIFIER
    (72) empty -> .
    (41) if_statement_1 -> . if_statement_head_1 if_statement_body
    (42) if_statement_2 -> . if_statement_1 if_statement_head_2 if_statement_body
    (43) if_statement_2 -> . if_statement_2 if_statement_head_2 if_statement_body
    (44) if_statement_3 -> . if_statement_2 if_statement_head_3 if_statement_body
    (45) if_statement_3 -> . if_statement_1 if_statement_head_3 if_statement_body
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB
    (46) if_statement_head_1 -> . IF LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 22
    $end            reduce using rule 72 (empty -> .)
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28

  ! VAR             [ reduce using rule 72 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 72 (empty -> .) ]
  ! USE             [ reduce using rule 72 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 72 (empty -> .) ]
  ! REPEAT          [ reduce using rule 72 (empty -> .) ]
  ! FOR             [ reduce using rule 72 (empty -> .) ]
  ! WHILE           [ reduce using rule 72 (empty -> .) ]
  ! IF              [ reduce using rule 72 (empty -> .) ]

    root                           shift and go to state 1
    expression                     shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_1                 shift and go to state 15
    if_statement_2                 shift and go to state 16
    if_statement_3                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    if_statement_head_1            shift and go to state 23

state 1

    (0) S' -> root .



state 2

    (1) root -> expression .
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (59) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (60) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER
    (57) variable_value_change -> . IDENTIFIER EQUAL LIST
    (58) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1
    (39) if_statement -> . if_statement_2
    (40) if_statement -> . if_statement_3
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (56) use -> . USE IDENTIFIER
    (41) if_statement_1 -> . if_statement_head_1 if_statement_body
    (42) if_statement_2 -> . if_statement_1 if_statement_head_2 if_statement_body
    (43) if_statement_2 -> . if_statement_2 if_statement_head_2 if_statement_body
    (44) if_statement_3 -> . if_statement_2 if_statement_head_3 if_statement_body
    (45) if_statement_3 -> . if_statement_1 if_statement_head_3 if_statement_body
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB
    (46) if_statement_head_1 -> . IF LSB condition RSB

    $end            reduce using rule 1 (root -> expression .)
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 22
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28

    variable_declaration           shift and go to state 29
    variable_value_change          shift and go to state 30
    if_statement                   shift and go to state 31
    function                       shift and go to state 32
    function_call                  shift and go to state 33
    repeat                         shift and go to state 34
    for                            shift and go to state 35
    while                          shift and go to state 36
    use                            shift and go to state 37
    if_statement_1                 shift and go to state 15
    if_statement_2                 shift and go to state 16
    if_statement_3                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    if_statement_head_1            shift and go to state 23

state 3

    (11) expression -> variable_declaration . SEMI

    SEMI            shift and go to state 38


state 4

    (12) expression -> variable_value_change . SEMI

    SEMI            shift and go to state 39


state 5

    (13) expression -> if_statement .

    VAR             reduce using rule 13 (expression -> if_statement .)
    IDENTIFIER      reduce using rule 13 (expression -> if_statement .)
    USE             reduce using rule 13 (expression -> if_statement .)
    FUNCTION        reduce using rule 13 (expression -> if_statement .)
    REPEAT          reduce using rule 13 (expression -> if_statement .)
    FOR             reduce using rule 13 (expression -> if_statement .)
    WHILE           reduce using rule 13 (expression -> if_statement .)
    IF              reduce using rule 13 (expression -> if_statement .)
    $end            reduce using rule 13 (expression -> if_statement .)
    RMB             reduce using rule 13 (expression -> if_statement .)


state 6

    (14) expression -> function .

    VAR             reduce using rule 14 (expression -> function .)
    IDENTIFIER      reduce using rule 14 (expression -> function .)
    USE             reduce using rule 14 (expression -> function .)
    FUNCTION        reduce using rule 14 (expression -> function .)
    REPEAT          reduce using rule 14 (expression -> function .)
    FOR             reduce using rule 14 (expression -> function .)
    WHILE           reduce using rule 14 (expression -> function .)
    IF              reduce using rule 14 (expression -> function .)
    $end            reduce using rule 14 (expression -> function .)
    RMB             reduce using rule 14 (expression -> function .)


state 7

    (15) expression -> function_call .

    VAR             reduce using rule 15 (expression -> function_call .)
    IDENTIFIER      reduce using rule 15 (expression -> function_call .)
    USE             reduce using rule 15 (expression -> function_call .)
    FUNCTION        reduce using rule 15 (expression -> function_call .)
    REPEAT          reduce using rule 15 (expression -> function_call .)
    FOR             reduce using rule 15 (expression -> function_call .)
    WHILE           reduce using rule 15 (expression -> function_call .)
    IF              reduce using rule 15 (expression -> function_call .)
    $end            reduce using rule 15 (expression -> function_call .)
    RMB             reduce using rule 15 (expression -> function_call .)


state 8

    (16) expression -> repeat .

    VAR             reduce using rule 16 (expression -> repeat .)
    IDENTIFIER      reduce using rule 16 (expression -> repeat .)
    USE             reduce using rule 16 (expression -> repeat .)
    FUNCTION        reduce using rule 16 (expression -> repeat .)
    REPEAT          reduce using rule 16 (expression -> repeat .)
    FOR             reduce using rule 16 (expression -> repeat .)
    WHILE           reduce using rule 16 (expression -> repeat .)
    IF              reduce using rule 16 (expression -> repeat .)
    $end            reduce using rule 16 (expression -> repeat .)
    RMB             reduce using rule 16 (expression -> repeat .)


state 9

    (17) expression -> for .

    VAR             reduce using rule 17 (expression -> for .)
    IDENTIFIER      reduce using rule 17 (expression -> for .)
    USE             reduce using rule 17 (expression -> for .)
    FUNCTION        reduce using rule 17 (expression -> for .)
    REPEAT          reduce using rule 17 (expression -> for .)
    FOR             reduce using rule 17 (expression -> for .)
    WHILE           reduce using rule 17 (expression -> for .)
    IF              reduce using rule 17 (expression -> for .)
    $end            reduce using rule 17 (expression -> for .)
    RMB             reduce using rule 17 (expression -> for .)


state 10

    (18) expression -> while .

    VAR             reduce using rule 18 (expression -> while .)
    IDENTIFIER      reduce using rule 18 (expression -> while .)
    USE             reduce using rule 18 (expression -> while .)
    FUNCTION        reduce using rule 18 (expression -> while .)
    REPEAT          reduce using rule 18 (expression -> while .)
    FOR             reduce using rule 18 (expression -> while .)
    WHILE           reduce using rule 18 (expression -> while .)
    IF              reduce using rule 18 (expression -> while .)
    $end            reduce using rule 18 (expression -> while .)
    RMB             reduce using rule 18 (expression -> while .)


state 11

    (19) expression -> use .

    VAR             reduce using rule 19 (expression -> use .)
    IDENTIFIER      reduce using rule 19 (expression -> use .)
    USE             reduce using rule 19 (expression -> use .)
    FUNCTION        reduce using rule 19 (expression -> use .)
    REPEAT          reduce using rule 19 (expression -> use .)
    FOR             reduce using rule 19 (expression -> use .)
    WHILE           reduce using rule 19 (expression -> use .)
    IF              reduce using rule 19 (expression -> use .)
    $end            reduce using rule 19 (expression -> use .)
    RMB             reduce using rule 19 (expression -> use .)


state 12

    (20) expression -> empty .

    VAR             reduce using rule 20 (expression -> empty .)
    IDENTIFIER      reduce using rule 20 (expression -> empty .)
    USE             reduce using rule 20 (expression -> empty .)
    FUNCTION        reduce using rule 20 (expression -> empty .)
    REPEAT          reduce using rule 20 (expression -> empty .)
    FOR             reduce using rule 20 (expression -> empty .)
    WHILE           reduce using rule 20 (expression -> empty .)
    IF              reduce using rule 20 (expression -> empty .)
    $end            reduce using rule 20 (expression -> empty .)
    RMB             reduce using rule 20 (expression -> empty .)


state 13

    (59) variable_declaration -> VAR . IDENTIFIER EQUAL LIST
    (60) variable_declaration -> VAR . IDENTIFIER EQUAL calculate
    (61) variable_declaration -> VAR . IDENTIFIER

    IDENTIFIER      shift and go to state 40


state 14

    (57) variable_value_change -> IDENTIFIER . EQUAL LIST
    (58) variable_value_change -> IDENTIFIER . EQUAL calculate
    (34) function_call -> IDENTIFIER . LSB parameter RSB

    EQUAL           shift and go to state 41
    LSB             shift and go to state 42


state 15

    (38) if_statement -> if_statement_1 .
    (42) if_statement_2 -> if_statement_1 . if_statement_head_2 if_statement_body
    (45) if_statement_3 -> if_statement_1 . if_statement_head_3 if_statement_body
    (47) if_statement_head_2 -> . ELSE IF LSB condition RSB
    (48) if_statement_head_3 -> . ELSE LSB condition RSB

    VAR             reduce using rule 38 (if_statement -> if_statement_1 .)
    IDENTIFIER      reduce using rule 38 (if_statement -> if_statement_1 .)
    USE             reduce using rule 38 (if_statement -> if_statement_1 .)
    FUNCTION        reduce using rule 38 (if_statement -> if_statement_1 .)
    REPEAT          reduce using rule 38 (if_statement -> if_statement_1 .)
    FOR             reduce using rule 38 (if_statement -> if_statement_1 .)
    WHILE           reduce using rule 38 (if_statement -> if_statement_1 .)
    IF              reduce using rule 38 (if_statement -> if_statement_1 .)
    $end            reduce using rule 38 (if_statement -> if_statement_1 .)
    RMB             reduce using rule 38 (if_statement -> if_statement_1 .)
    ELSE            shift and go to state 45

    if_statement_head_2            shift and go to state 43
    if_statement_head_3            shift and go to state 44

state 16

    (39) if_statement -> if_statement_2 .
    (43) if_statement_2 -> if_statement_2 . if_statement_head_2 if_statement_body
    (44) if_statement_3 -> if_statement_2 . if_statement_head_3 if_statement_body
    (47) if_statement_head_2 -> . ELSE IF LSB condition RSB
    (48) if_statement_head_3 -> . ELSE LSB condition RSB

    VAR             reduce using rule 39 (if_statement -> if_statement_2 .)
    IDENTIFIER      reduce using rule 39 (if_statement -> if_statement_2 .)
    USE             reduce using rule 39 (if_statement -> if_statement_2 .)
    FUNCTION        reduce using rule 39 (if_statement -> if_statement_2 .)
    REPEAT          reduce using rule 39 (if_statement -> if_statement_2 .)
    FOR             reduce using rule 39 (if_statement -> if_statement_2 .)
    WHILE           reduce using rule 39 (if_statement -> if_statement_2 .)
    IF              reduce using rule 39 (if_statement -> if_statement_2 .)
    $end            reduce using rule 39 (if_statement -> if_statement_2 .)
    RMB             reduce using rule 39 (if_statement -> if_statement_2 .)
    ELSE            shift and go to state 45

    if_statement_head_2            shift and go to state 46
    if_statement_head_3            shift and go to state 47

state 17

    (40) if_statement -> if_statement_3 .

    VAR             reduce using rule 40 (if_statement -> if_statement_3 .)
    IDENTIFIER      reduce using rule 40 (if_statement -> if_statement_3 .)
    USE             reduce using rule 40 (if_statement -> if_statement_3 .)
    FUNCTION        reduce using rule 40 (if_statement -> if_statement_3 .)
    REPEAT          reduce using rule 40 (if_statement -> if_statement_3 .)
    FOR             reduce using rule 40 (if_statement -> if_statement_3 .)
    WHILE           reduce using rule 40 (if_statement -> if_statement_3 .)
    IF              reduce using rule 40 (if_statement -> if_statement_3 .)
    $end            reduce using rule 40 (if_statement -> if_statement_3 .)
    RMB             reduce using rule 40 (if_statement -> if_statement_3 .)


state 18

    (30) function -> function_head . function_body
    (33) function_body -> . LMB expression RMB

    LMB             shift and go to state 49

    function_body                  shift and go to state 48

state 19

    (27) repeat -> repeat_head . repeat_body
    (29) repeat_body -> . LMB expression RMB

    LMB             shift and go to state 51

    repeat_body                    shift and go to state 50

state 20

    (21) for -> for_head . for_body
    (23) for_body -> . LMB expression RMB

    LMB             shift and go to state 53

    for_body                       shift and go to state 52

state 21

    (24) while -> while_head . while_body
    (26) while_body -> . LMB expression RMB

    LMB             shift and go to state 55

    while_body                     shift and go to state 54

state 22

    (56) use -> USE . IDENTIFIER

    IDENTIFIER      shift and go to state 56


state 23

    (41) if_statement_1 -> if_statement_head_1 . if_statement_body
    (49) if_statement_body -> . LMB expression RMB

    LMB             shift and go to state 58

    if_statement_body              shift and go to state 57

state 24

    (31) function_head -> FUNCTION . IDENTIFIER LSB empty RSB
    (32) function_head -> FUNCTION . IDENTIFIER LSB parameter RSB

    IDENTIFIER      shift and go to state 59


state 25

    (28) repeat_head -> REPEAT . LSB calculate RSB

    LSB             shift and go to state 60


state 26

    (22) for_head -> FOR . LSB IDENTIFIER IN IDENTIFIER RSB

    LSB             shift and go to state 61


state 27

    (25) while_head -> WHILE . LSB condition RSB

    LSB             shift and go to state 62


state 28

    (46) if_statement_head_1 -> IF . LSB condition RSB

    LSB             shift and go to state 63


state 29

    (2) expression -> expression variable_declaration . SEMI

    SEMI            shift and go to state 64


state 30

    (3) expression -> expression variable_value_change . SEMI

    SEMI            shift and go to state 65


state 31

    (4) expression -> expression if_statement .

    VAR             reduce using rule 4 (expression -> expression if_statement .)
    IDENTIFIER      reduce using rule 4 (expression -> expression if_statement .)
    USE             reduce using rule 4 (expression -> expression if_statement .)
    FUNCTION        reduce using rule 4 (expression -> expression if_statement .)
    REPEAT          reduce using rule 4 (expression -> expression if_statement .)
    FOR             reduce using rule 4 (expression -> expression if_statement .)
    WHILE           reduce using rule 4 (expression -> expression if_statement .)
    IF              reduce using rule 4 (expression -> expression if_statement .)
    $end            reduce using rule 4 (expression -> expression if_statement .)
    RMB             reduce using rule 4 (expression -> expression if_statement .)


state 32

    (5) expression -> expression function .

    VAR             reduce using rule 5 (expression -> expression function .)
    IDENTIFIER      reduce using rule 5 (expression -> expression function .)
    USE             reduce using rule 5 (expression -> expression function .)
    FUNCTION        reduce using rule 5 (expression -> expression function .)
    REPEAT          reduce using rule 5 (expression -> expression function .)
    FOR             reduce using rule 5 (expression -> expression function .)
    WHILE           reduce using rule 5 (expression -> expression function .)
    IF              reduce using rule 5 (expression -> expression function .)
    $end            reduce using rule 5 (expression -> expression function .)
    RMB             reduce using rule 5 (expression -> expression function .)


state 33

    (6) expression -> expression function_call . SEMI

    SEMI            shift and go to state 66


state 34

    (7) expression -> expression repeat .

    VAR             reduce using rule 7 (expression -> expression repeat .)
    IDENTIFIER      reduce using rule 7 (expression -> expression repeat .)
    USE             reduce using rule 7 (expression -> expression repeat .)
    FUNCTION        reduce using rule 7 (expression -> expression repeat .)
    REPEAT          reduce using rule 7 (expression -> expression repeat .)
    FOR             reduce using rule 7 (expression -> expression repeat .)
    WHILE           reduce using rule 7 (expression -> expression repeat .)
    IF              reduce using rule 7 (expression -> expression repeat .)
    $end            reduce using rule 7 (expression -> expression repeat .)
    RMB             reduce using rule 7 (expression -> expression repeat .)


state 35

    (8) expression -> expression for .

    VAR             reduce using rule 8 (expression -> expression for .)
    IDENTIFIER      reduce using rule 8 (expression -> expression for .)
    USE             reduce using rule 8 (expression -> expression for .)
    FUNCTION        reduce using rule 8 (expression -> expression for .)
    REPEAT          reduce using rule 8 (expression -> expression for .)
    FOR             reduce using rule 8 (expression -> expression for .)
    WHILE           reduce using rule 8 (expression -> expression for .)
    IF              reduce using rule 8 (expression -> expression for .)
    $end            reduce using rule 8 (expression -> expression for .)
    RMB             reduce using rule 8 (expression -> expression for .)


state 36

    (9) expression -> expression while .

    VAR             reduce using rule 9 (expression -> expression while .)
    IDENTIFIER      reduce using rule 9 (expression -> expression while .)
    USE             reduce using rule 9 (expression -> expression while .)
    FUNCTION        reduce using rule 9 (expression -> expression while .)
    REPEAT          reduce using rule 9 (expression -> expression while .)
    FOR             reduce using rule 9 (expression -> expression while .)
    WHILE           reduce using rule 9 (expression -> expression while .)
    IF              reduce using rule 9 (expression -> expression while .)
    $end            reduce using rule 9 (expression -> expression while .)
    RMB             reduce using rule 9 (expression -> expression while .)


state 37

    (10) expression -> expression use .

    VAR             reduce using rule 10 (expression -> expression use .)
    IDENTIFIER      reduce using rule 10 (expression -> expression use .)
    USE             reduce using rule 10 (expression -> expression use .)
    FUNCTION        reduce using rule 10 (expression -> expression use .)
    REPEAT          reduce using rule 10 (expression -> expression use .)
    FOR             reduce using rule 10 (expression -> expression use .)
    WHILE           reduce using rule 10 (expression -> expression use .)
    IF              reduce using rule 10 (expression -> expression use .)
    $end            reduce using rule 10 (expression -> expression use .)
    RMB             reduce using rule 10 (expression -> expression use .)


state 38

    (11) expression -> variable_declaration SEMI .

    VAR             reduce using rule 11 (expression -> variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 11 (expression -> variable_declaration SEMI .)
    USE             reduce using rule 11 (expression -> variable_declaration SEMI .)
    FUNCTION        reduce using rule 11 (expression -> variable_declaration SEMI .)
    REPEAT          reduce using rule 11 (expression -> variable_declaration SEMI .)
    FOR             reduce using rule 11 (expression -> variable_declaration SEMI .)
    WHILE           reduce using rule 11 (expression -> variable_declaration SEMI .)
    IF              reduce using rule 11 (expression -> variable_declaration SEMI .)
    $end            reduce using rule 11 (expression -> variable_declaration SEMI .)
    RMB             reduce using rule 11 (expression -> variable_declaration SEMI .)


state 39

    (12) expression -> variable_value_change SEMI .

    VAR             reduce using rule 12 (expression -> variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 12 (expression -> variable_value_change SEMI .)
    USE             reduce using rule 12 (expression -> variable_value_change SEMI .)
    FUNCTION        reduce using rule 12 (expression -> variable_value_change SEMI .)
    REPEAT          reduce using rule 12 (expression -> variable_value_change SEMI .)
    FOR             reduce using rule 12 (expression -> variable_value_change SEMI .)
    WHILE           reduce using rule 12 (expression -> variable_value_change SEMI .)
    IF              reduce using rule 12 (expression -> variable_value_change SEMI .)
    $end            reduce using rule 12 (expression -> variable_value_change SEMI .)
    RMB             reduce using rule 12 (expression -> variable_value_change SEMI .)


state 40

    (59) variable_declaration -> VAR IDENTIFIER . EQUAL LIST
    (60) variable_declaration -> VAR IDENTIFIER . EQUAL calculate
    (61) variable_declaration -> VAR IDENTIFIER .

    EQUAL           shift and go to state 67
    SEMI            reduce using rule 61 (variable_declaration -> VAR IDENTIFIER .)


state 41

    (57) variable_value_change -> IDENTIFIER EQUAL . LIST
    (58) variable_value_change -> IDENTIFIER EQUAL . calculate
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    LIST            shift and go to state 69
    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    calculate                      shift and go to state 70

state 42

    (34) function_call -> IDENTIFIER LSB . parameter RSB
    (35) parameter -> . parameter COMMA calculate
    (36) parameter -> . calculate
    (37) parameter -> . empty
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB
    (72) empty -> .

    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75
    RSB             reduce using rule 72 (empty -> .)
    COMMA           reduce using rule 72 (empty -> .)

    parameter                      shift and go to state 76
    calculate                      shift and go to state 77
    empty                          shift and go to state 78

state 43

    (42) if_statement_2 -> if_statement_1 if_statement_head_2 . if_statement_body
    (49) if_statement_body -> . LMB expression RMB

    LMB             shift and go to state 58

    if_statement_body              shift and go to state 79

state 44

    (45) if_statement_3 -> if_statement_1 if_statement_head_3 . if_statement_body
    (49) if_statement_body -> . LMB expression RMB

    LMB             shift and go to state 58

    if_statement_body              shift and go to state 80

state 45

    (47) if_statement_head_2 -> ELSE . IF LSB condition RSB
    (48) if_statement_head_3 -> ELSE . LSB condition RSB

    IF              shift and go to state 81
    LSB             shift and go to state 82


state 46

    (43) if_statement_2 -> if_statement_2 if_statement_head_2 . if_statement_body
    (49) if_statement_body -> . LMB expression RMB

    LMB             shift and go to state 58

    if_statement_body              shift and go to state 83

state 47

    (44) if_statement_3 -> if_statement_2 if_statement_head_3 . if_statement_body
    (49) if_statement_body -> . LMB expression RMB

    LMB             shift and go to state 58

    if_statement_body              shift and go to state 84

state 48

    (30) function -> function_head function_body .

    VAR             reduce using rule 30 (function -> function_head function_body .)
    IDENTIFIER      reduce using rule 30 (function -> function_head function_body .)
    USE             reduce using rule 30 (function -> function_head function_body .)
    FUNCTION        reduce using rule 30 (function -> function_head function_body .)
    REPEAT          reduce using rule 30 (function -> function_head function_body .)
    FOR             reduce using rule 30 (function -> function_head function_body .)
    WHILE           reduce using rule 30 (function -> function_head function_body .)
    IF              reduce using rule 30 (function -> function_head function_body .)
    $end            reduce using rule 30 (function -> function_head function_body .)
    RMB             reduce using rule 30 (function -> function_head function_body .)


state 49

    (33) function_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (59) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (60) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER
    (57) variable_value_change -> . IDENTIFIER EQUAL LIST
    (58) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1
    (39) if_statement -> . if_statement_2
    (40) if_statement -> . if_statement_3
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (56) use -> . USE IDENTIFIER
    (72) empty -> .
    (41) if_statement_1 -> . if_statement_head_1 if_statement_body
    (42) if_statement_2 -> . if_statement_1 if_statement_head_2 if_statement_body
    (43) if_statement_2 -> . if_statement_2 if_statement_head_2 if_statement_body
    (44) if_statement_3 -> . if_statement_2 if_statement_head_3 if_statement_body
    (45) if_statement_3 -> . if_statement_1 if_statement_head_3 if_statement_body
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB
    (46) if_statement_head_1 -> . IF LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 22
    RMB             reduce using rule 72 (empty -> .)
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28

  ! VAR             [ reduce using rule 72 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 72 (empty -> .) ]
  ! USE             [ reduce using rule 72 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 72 (empty -> .) ]
  ! REPEAT          [ reduce using rule 72 (empty -> .) ]
  ! FOR             [ reduce using rule 72 (empty -> .) ]
  ! WHILE           [ reduce using rule 72 (empty -> .) ]
  ! IF              [ reduce using rule 72 (empty -> .) ]

    expression                     shift and go to state 85
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_1                 shift and go to state 15
    if_statement_2                 shift and go to state 16
    if_statement_3                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    if_statement_head_1            shift and go to state 23

state 50

    (27) repeat -> repeat_head repeat_body .

    VAR             reduce using rule 27 (repeat -> repeat_head repeat_body .)
    IDENTIFIER      reduce using rule 27 (repeat -> repeat_head repeat_body .)
    USE             reduce using rule 27 (repeat -> repeat_head repeat_body .)
    FUNCTION        reduce using rule 27 (repeat -> repeat_head repeat_body .)
    REPEAT          reduce using rule 27 (repeat -> repeat_head repeat_body .)
    FOR             reduce using rule 27 (repeat -> repeat_head repeat_body .)
    WHILE           reduce using rule 27 (repeat -> repeat_head repeat_body .)
    IF              reduce using rule 27 (repeat -> repeat_head repeat_body .)
    $end            reduce using rule 27 (repeat -> repeat_head repeat_body .)
    RMB             reduce using rule 27 (repeat -> repeat_head repeat_body .)


state 51

    (29) repeat_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (59) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (60) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER
    (57) variable_value_change -> . IDENTIFIER EQUAL LIST
    (58) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1
    (39) if_statement -> . if_statement_2
    (40) if_statement -> . if_statement_3
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (56) use -> . USE IDENTIFIER
    (72) empty -> .
    (41) if_statement_1 -> . if_statement_head_1 if_statement_body
    (42) if_statement_2 -> . if_statement_1 if_statement_head_2 if_statement_body
    (43) if_statement_2 -> . if_statement_2 if_statement_head_2 if_statement_body
    (44) if_statement_3 -> . if_statement_2 if_statement_head_3 if_statement_body
    (45) if_statement_3 -> . if_statement_1 if_statement_head_3 if_statement_body
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB
    (46) if_statement_head_1 -> . IF LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 22
    RMB             reduce using rule 72 (empty -> .)
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28

  ! VAR             [ reduce using rule 72 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 72 (empty -> .) ]
  ! USE             [ reduce using rule 72 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 72 (empty -> .) ]
  ! REPEAT          [ reduce using rule 72 (empty -> .) ]
  ! FOR             [ reduce using rule 72 (empty -> .) ]
  ! WHILE           [ reduce using rule 72 (empty -> .) ]
  ! IF              [ reduce using rule 72 (empty -> .) ]

    expression                     shift and go to state 86
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_1                 shift and go to state 15
    if_statement_2                 shift and go to state 16
    if_statement_3                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    if_statement_head_1            shift and go to state 23

state 52

    (21) for -> for_head for_body .

    VAR             reduce using rule 21 (for -> for_head for_body .)
    IDENTIFIER      reduce using rule 21 (for -> for_head for_body .)
    USE             reduce using rule 21 (for -> for_head for_body .)
    FUNCTION        reduce using rule 21 (for -> for_head for_body .)
    REPEAT          reduce using rule 21 (for -> for_head for_body .)
    FOR             reduce using rule 21 (for -> for_head for_body .)
    WHILE           reduce using rule 21 (for -> for_head for_body .)
    IF              reduce using rule 21 (for -> for_head for_body .)
    $end            reduce using rule 21 (for -> for_head for_body .)
    RMB             reduce using rule 21 (for -> for_head for_body .)


state 53

    (23) for_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (59) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (60) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER
    (57) variable_value_change -> . IDENTIFIER EQUAL LIST
    (58) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1
    (39) if_statement -> . if_statement_2
    (40) if_statement -> . if_statement_3
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (56) use -> . USE IDENTIFIER
    (72) empty -> .
    (41) if_statement_1 -> . if_statement_head_1 if_statement_body
    (42) if_statement_2 -> . if_statement_1 if_statement_head_2 if_statement_body
    (43) if_statement_2 -> . if_statement_2 if_statement_head_2 if_statement_body
    (44) if_statement_3 -> . if_statement_2 if_statement_head_3 if_statement_body
    (45) if_statement_3 -> . if_statement_1 if_statement_head_3 if_statement_body
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB
    (46) if_statement_head_1 -> . IF LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 22
    RMB             reduce using rule 72 (empty -> .)
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28

  ! VAR             [ reduce using rule 72 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 72 (empty -> .) ]
  ! USE             [ reduce using rule 72 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 72 (empty -> .) ]
  ! REPEAT          [ reduce using rule 72 (empty -> .) ]
  ! FOR             [ reduce using rule 72 (empty -> .) ]
  ! WHILE           [ reduce using rule 72 (empty -> .) ]
  ! IF              [ reduce using rule 72 (empty -> .) ]

    expression                     shift and go to state 87
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_1                 shift and go to state 15
    if_statement_2                 shift and go to state 16
    if_statement_3                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    if_statement_head_1            shift and go to state 23

state 54

    (24) while -> while_head while_body .

    VAR             reduce using rule 24 (while -> while_head while_body .)
    IDENTIFIER      reduce using rule 24 (while -> while_head while_body .)
    USE             reduce using rule 24 (while -> while_head while_body .)
    FUNCTION        reduce using rule 24 (while -> while_head while_body .)
    REPEAT          reduce using rule 24 (while -> while_head while_body .)
    FOR             reduce using rule 24 (while -> while_head while_body .)
    WHILE           reduce using rule 24 (while -> while_head while_body .)
    IF              reduce using rule 24 (while -> while_head while_body .)
    $end            reduce using rule 24 (while -> while_head while_body .)
    RMB             reduce using rule 24 (while -> while_head while_body .)


state 55

    (26) while_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (59) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (60) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER
    (57) variable_value_change -> . IDENTIFIER EQUAL LIST
    (58) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1
    (39) if_statement -> . if_statement_2
    (40) if_statement -> . if_statement_3
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (56) use -> . USE IDENTIFIER
    (72) empty -> .
    (41) if_statement_1 -> . if_statement_head_1 if_statement_body
    (42) if_statement_2 -> . if_statement_1 if_statement_head_2 if_statement_body
    (43) if_statement_2 -> . if_statement_2 if_statement_head_2 if_statement_body
    (44) if_statement_3 -> . if_statement_2 if_statement_head_3 if_statement_body
    (45) if_statement_3 -> . if_statement_1 if_statement_head_3 if_statement_body
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB
    (46) if_statement_head_1 -> . IF LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 22
    RMB             reduce using rule 72 (empty -> .)
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28

  ! VAR             [ reduce using rule 72 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 72 (empty -> .) ]
  ! USE             [ reduce using rule 72 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 72 (empty -> .) ]
  ! REPEAT          [ reduce using rule 72 (empty -> .) ]
  ! FOR             [ reduce using rule 72 (empty -> .) ]
  ! WHILE           [ reduce using rule 72 (empty -> .) ]
  ! IF              [ reduce using rule 72 (empty -> .) ]

    expression                     shift and go to state 88
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_1                 shift and go to state 15
    if_statement_2                 shift and go to state 16
    if_statement_3                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    if_statement_head_1            shift and go to state 23

state 56

    (56) use -> USE IDENTIFIER .

    VAR             reduce using rule 56 (use -> USE IDENTIFIER .)
    IDENTIFIER      reduce using rule 56 (use -> USE IDENTIFIER .)
    USE             reduce using rule 56 (use -> USE IDENTIFIER .)
    FUNCTION        reduce using rule 56 (use -> USE IDENTIFIER .)
    REPEAT          reduce using rule 56 (use -> USE IDENTIFIER .)
    FOR             reduce using rule 56 (use -> USE IDENTIFIER .)
    WHILE           reduce using rule 56 (use -> USE IDENTIFIER .)
    IF              reduce using rule 56 (use -> USE IDENTIFIER .)
    $end            reduce using rule 56 (use -> USE IDENTIFIER .)
    RMB             reduce using rule 56 (use -> USE IDENTIFIER .)


state 57

    (41) if_statement_1 -> if_statement_head_1 if_statement_body .

    ELSE            reduce using rule 41 (if_statement_1 -> if_statement_head_1 if_statement_body .)
    VAR             reduce using rule 41 (if_statement_1 -> if_statement_head_1 if_statement_body .)
    IDENTIFIER      reduce using rule 41 (if_statement_1 -> if_statement_head_1 if_statement_body .)
    USE             reduce using rule 41 (if_statement_1 -> if_statement_head_1 if_statement_body .)
    FUNCTION        reduce using rule 41 (if_statement_1 -> if_statement_head_1 if_statement_body .)
    REPEAT          reduce using rule 41 (if_statement_1 -> if_statement_head_1 if_statement_body .)
    FOR             reduce using rule 41 (if_statement_1 -> if_statement_head_1 if_statement_body .)
    WHILE           reduce using rule 41 (if_statement_1 -> if_statement_head_1 if_statement_body .)
    IF              reduce using rule 41 (if_statement_1 -> if_statement_head_1 if_statement_body .)
    $end            reduce using rule 41 (if_statement_1 -> if_statement_head_1 if_statement_body .)
    RMB             reduce using rule 41 (if_statement_1 -> if_statement_head_1 if_statement_body .)


state 58

    (49) if_statement_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (59) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (60) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER
    (57) variable_value_change -> . IDENTIFIER EQUAL LIST
    (58) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1
    (39) if_statement -> . if_statement_2
    (40) if_statement -> . if_statement_3
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (56) use -> . USE IDENTIFIER
    (72) empty -> .
    (41) if_statement_1 -> . if_statement_head_1 if_statement_body
    (42) if_statement_2 -> . if_statement_1 if_statement_head_2 if_statement_body
    (43) if_statement_2 -> . if_statement_2 if_statement_head_2 if_statement_body
    (44) if_statement_3 -> . if_statement_2 if_statement_head_3 if_statement_body
    (45) if_statement_3 -> . if_statement_1 if_statement_head_3 if_statement_body
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB
    (46) if_statement_head_1 -> . IF LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 22
    RMB             reduce using rule 72 (empty -> .)
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28

  ! VAR             [ reduce using rule 72 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 72 (empty -> .) ]
  ! USE             [ reduce using rule 72 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 72 (empty -> .) ]
  ! REPEAT          [ reduce using rule 72 (empty -> .) ]
  ! FOR             [ reduce using rule 72 (empty -> .) ]
  ! WHILE           [ reduce using rule 72 (empty -> .) ]
  ! IF              [ reduce using rule 72 (empty -> .) ]

    expression                     shift and go to state 89
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_1                 shift and go to state 15
    if_statement_2                 shift and go to state 16
    if_statement_3                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    if_statement_head_1            shift and go to state 23

state 59

    (31) function_head -> FUNCTION IDENTIFIER . LSB empty RSB
    (32) function_head -> FUNCTION IDENTIFIER . LSB parameter RSB

    LSB             shift and go to state 90


state 60

    (28) repeat_head -> REPEAT LSB . calculate RSB
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    calculate                      shift and go to state 91

state 61

    (22) for_head -> FOR LSB . IDENTIFIER IN IDENTIFIER RSB

    IDENTIFIER      shift and go to state 92


state 62

    (25) while_head -> WHILE LSB . condition RSB
    (50) condition -> . condition LB calculate
    (51) condition -> . condition RB calculate
    (52) condition -> . condition LB EQUAL calculate
    (53) condition -> . condition RB EQUAL calculate
    (54) condition -> . condition EQUAL calculate
    (55) condition -> . calculate
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    condition                      shift and go to state 93
    calculate                      shift and go to state 94

state 63

    (46) if_statement_head_1 -> IF LSB . condition RSB
    (50) condition -> . condition LB calculate
    (51) condition -> . condition RB calculate
    (52) condition -> . condition LB EQUAL calculate
    (53) condition -> . condition RB EQUAL calculate
    (54) condition -> . condition EQUAL calculate
    (55) condition -> . calculate
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    condition                      shift and go to state 95
    calculate                      shift and go to state 94

state 64

    (2) expression -> expression variable_declaration SEMI .

    VAR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    USE             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FUNCTION        reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    REPEAT          reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FOR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    WHILE           reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IF              reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    $end            reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    RMB             reduce using rule 2 (expression -> expression variable_declaration SEMI .)


state 65

    (3) expression -> expression variable_value_change SEMI .

    VAR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    USE             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FUNCTION        reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    REPEAT          reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FOR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    WHILE           reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IF              reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    $end            reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    RMB             reduce using rule 3 (expression -> expression variable_value_change SEMI .)


state 66

    (6) expression -> expression function_call SEMI .

    VAR             reduce using rule 6 (expression -> expression function_call SEMI .)
    IDENTIFIER      reduce using rule 6 (expression -> expression function_call SEMI .)
    USE             reduce using rule 6 (expression -> expression function_call SEMI .)
    FUNCTION        reduce using rule 6 (expression -> expression function_call SEMI .)
    REPEAT          reduce using rule 6 (expression -> expression function_call SEMI .)
    FOR             reduce using rule 6 (expression -> expression function_call SEMI .)
    WHILE           reduce using rule 6 (expression -> expression function_call SEMI .)
    IF              reduce using rule 6 (expression -> expression function_call SEMI .)
    $end            reduce using rule 6 (expression -> expression function_call SEMI .)
    RMB             reduce using rule 6 (expression -> expression function_call SEMI .)


state 67

    (59) variable_declaration -> VAR IDENTIFIER EQUAL . LIST
    (60) variable_declaration -> VAR IDENTIFIER EQUAL . calculate
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    LIST            shift and go to state 96
    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    calculate                      shift and go to state 97

state 68

    (70) calculate -> IDENTIFIER .

    PLUS            reduce using rule 70 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 70 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 70 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 70 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 70 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 70 (calculate -> IDENTIFIER .)
    COMMA           reduce using rule 70 (calculate -> IDENTIFIER .)
    LB              reduce using rule 70 (calculate -> IDENTIFIER .)
    RB              reduce using rule 70 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 70 (calculate -> IDENTIFIER .)


state 69

    (57) variable_value_change -> IDENTIFIER EQUAL LIST .

    SEMI            reduce using rule 57 (variable_value_change -> IDENTIFIER EQUAL LIST .)


state 70

    (58) variable_value_change -> IDENTIFIER EQUAL calculate .
    (62) calculate -> calculate . PLUS calculate
    (63) calculate -> calculate . MINUS calculate
    (65) calculate -> calculate . MUL calculate
    (66) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 58 (variable_value_change -> IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    MUL             shift and go to state 100
    DIV             shift and go to state 101


state 71

    (64) calculate -> MINUS . calculate
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    calculate                      shift and go to state 102

state 72

    (67) calculate -> INT .

    PLUS            reduce using rule 67 (calculate -> INT .)
    MINUS           reduce using rule 67 (calculate -> INT .)
    MUL             reduce using rule 67 (calculate -> INT .)
    DIV             reduce using rule 67 (calculate -> INT .)
    SEMI            reduce using rule 67 (calculate -> INT .)
    RSB             reduce using rule 67 (calculate -> INT .)
    COMMA           reduce using rule 67 (calculate -> INT .)
    LB              reduce using rule 67 (calculate -> INT .)
    RB              reduce using rule 67 (calculate -> INT .)
    EQUAL           reduce using rule 67 (calculate -> INT .)


state 73

    (68) calculate -> FLOAT .

    PLUS            reduce using rule 68 (calculate -> FLOAT .)
    MINUS           reduce using rule 68 (calculate -> FLOAT .)
    MUL             reduce using rule 68 (calculate -> FLOAT .)
    DIV             reduce using rule 68 (calculate -> FLOAT .)
    SEMI            reduce using rule 68 (calculate -> FLOAT .)
    RSB             reduce using rule 68 (calculate -> FLOAT .)
    COMMA           reduce using rule 68 (calculate -> FLOAT .)
    LB              reduce using rule 68 (calculate -> FLOAT .)
    RB              reduce using rule 68 (calculate -> FLOAT .)
    EQUAL           reduce using rule 68 (calculate -> FLOAT .)


state 74

    (69) calculate -> STRING .

    PLUS            reduce using rule 69 (calculate -> STRING .)
    MINUS           reduce using rule 69 (calculate -> STRING .)
    MUL             reduce using rule 69 (calculate -> STRING .)
    DIV             reduce using rule 69 (calculate -> STRING .)
    SEMI            reduce using rule 69 (calculate -> STRING .)
    RSB             reduce using rule 69 (calculate -> STRING .)
    COMMA           reduce using rule 69 (calculate -> STRING .)
    LB              reduce using rule 69 (calculate -> STRING .)
    RB              reduce using rule 69 (calculate -> STRING .)
    EQUAL           reduce using rule 69 (calculate -> STRING .)


state 75

    (71) calculate -> LSB . calculate RSB
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    calculate                      shift and go to state 103

state 76

    (34) function_call -> IDENTIFIER LSB parameter . RSB
    (35) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 104
    COMMA           shift and go to state 105


state 77

    (36) parameter -> calculate .
    (62) calculate -> calculate . PLUS calculate
    (63) calculate -> calculate . MINUS calculate
    (65) calculate -> calculate . MUL calculate
    (66) calculate -> calculate . DIV calculate

    RSB             reduce using rule 36 (parameter -> calculate .)
    COMMA           reduce using rule 36 (parameter -> calculate .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    MUL             shift and go to state 100
    DIV             shift and go to state 101


state 78

    (37) parameter -> empty .

    RSB             reduce using rule 37 (parameter -> empty .)
    COMMA           reduce using rule 37 (parameter -> empty .)


state 79

    (42) if_statement_2 -> if_statement_1 if_statement_head_2 if_statement_body .

    ELSE            reduce using rule 42 (if_statement_2 -> if_statement_1 if_statement_head_2 if_statement_body .)
    VAR             reduce using rule 42 (if_statement_2 -> if_statement_1 if_statement_head_2 if_statement_body .)
    IDENTIFIER      reduce using rule 42 (if_statement_2 -> if_statement_1 if_statement_head_2 if_statement_body .)
    USE             reduce using rule 42 (if_statement_2 -> if_statement_1 if_statement_head_2 if_statement_body .)
    FUNCTION        reduce using rule 42 (if_statement_2 -> if_statement_1 if_statement_head_2 if_statement_body .)
    REPEAT          reduce using rule 42 (if_statement_2 -> if_statement_1 if_statement_head_2 if_statement_body .)
    FOR             reduce using rule 42 (if_statement_2 -> if_statement_1 if_statement_head_2 if_statement_body .)
    WHILE           reduce using rule 42 (if_statement_2 -> if_statement_1 if_statement_head_2 if_statement_body .)
    IF              reduce using rule 42 (if_statement_2 -> if_statement_1 if_statement_head_2 if_statement_body .)
    $end            reduce using rule 42 (if_statement_2 -> if_statement_1 if_statement_head_2 if_statement_body .)
    RMB             reduce using rule 42 (if_statement_2 -> if_statement_1 if_statement_head_2 if_statement_body .)


state 80

    (45) if_statement_3 -> if_statement_1 if_statement_head_3 if_statement_body .

    VAR             reduce using rule 45 (if_statement_3 -> if_statement_1 if_statement_head_3 if_statement_body .)
    IDENTIFIER      reduce using rule 45 (if_statement_3 -> if_statement_1 if_statement_head_3 if_statement_body .)
    USE             reduce using rule 45 (if_statement_3 -> if_statement_1 if_statement_head_3 if_statement_body .)
    FUNCTION        reduce using rule 45 (if_statement_3 -> if_statement_1 if_statement_head_3 if_statement_body .)
    REPEAT          reduce using rule 45 (if_statement_3 -> if_statement_1 if_statement_head_3 if_statement_body .)
    FOR             reduce using rule 45 (if_statement_3 -> if_statement_1 if_statement_head_3 if_statement_body .)
    WHILE           reduce using rule 45 (if_statement_3 -> if_statement_1 if_statement_head_3 if_statement_body .)
    IF              reduce using rule 45 (if_statement_3 -> if_statement_1 if_statement_head_3 if_statement_body .)
    $end            reduce using rule 45 (if_statement_3 -> if_statement_1 if_statement_head_3 if_statement_body .)
    RMB             reduce using rule 45 (if_statement_3 -> if_statement_1 if_statement_head_3 if_statement_body .)


state 81

    (47) if_statement_head_2 -> ELSE IF . LSB condition RSB

    LSB             shift and go to state 106


state 82

    (48) if_statement_head_3 -> ELSE LSB . condition RSB
    (50) condition -> . condition LB calculate
    (51) condition -> . condition RB calculate
    (52) condition -> . condition LB EQUAL calculate
    (53) condition -> . condition RB EQUAL calculate
    (54) condition -> . condition EQUAL calculate
    (55) condition -> . calculate
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    condition                      shift and go to state 107
    calculate                      shift and go to state 94

state 83

    (43) if_statement_2 -> if_statement_2 if_statement_head_2 if_statement_body .

    ELSE            reduce using rule 43 (if_statement_2 -> if_statement_2 if_statement_head_2 if_statement_body .)
    VAR             reduce using rule 43 (if_statement_2 -> if_statement_2 if_statement_head_2 if_statement_body .)
    IDENTIFIER      reduce using rule 43 (if_statement_2 -> if_statement_2 if_statement_head_2 if_statement_body .)
    USE             reduce using rule 43 (if_statement_2 -> if_statement_2 if_statement_head_2 if_statement_body .)
    FUNCTION        reduce using rule 43 (if_statement_2 -> if_statement_2 if_statement_head_2 if_statement_body .)
    REPEAT          reduce using rule 43 (if_statement_2 -> if_statement_2 if_statement_head_2 if_statement_body .)
    FOR             reduce using rule 43 (if_statement_2 -> if_statement_2 if_statement_head_2 if_statement_body .)
    WHILE           reduce using rule 43 (if_statement_2 -> if_statement_2 if_statement_head_2 if_statement_body .)
    IF              reduce using rule 43 (if_statement_2 -> if_statement_2 if_statement_head_2 if_statement_body .)
    $end            reduce using rule 43 (if_statement_2 -> if_statement_2 if_statement_head_2 if_statement_body .)
    RMB             reduce using rule 43 (if_statement_2 -> if_statement_2 if_statement_head_2 if_statement_body .)


state 84

    (44) if_statement_3 -> if_statement_2 if_statement_head_3 if_statement_body .

    VAR             reduce using rule 44 (if_statement_3 -> if_statement_2 if_statement_head_3 if_statement_body .)
    IDENTIFIER      reduce using rule 44 (if_statement_3 -> if_statement_2 if_statement_head_3 if_statement_body .)
    USE             reduce using rule 44 (if_statement_3 -> if_statement_2 if_statement_head_3 if_statement_body .)
    FUNCTION        reduce using rule 44 (if_statement_3 -> if_statement_2 if_statement_head_3 if_statement_body .)
    REPEAT          reduce using rule 44 (if_statement_3 -> if_statement_2 if_statement_head_3 if_statement_body .)
    FOR             reduce using rule 44 (if_statement_3 -> if_statement_2 if_statement_head_3 if_statement_body .)
    WHILE           reduce using rule 44 (if_statement_3 -> if_statement_2 if_statement_head_3 if_statement_body .)
    IF              reduce using rule 44 (if_statement_3 -> if_statement_2 if_statement_head_3 if_statement_body .)
    $end            reduce using rule 44 (if_statement_3 -> if_statement_2 if_statement_head_3 if_statement_body .)
    RMB             reduce using rule 44 (if_statement_3 -> if_statement_2 if_statement_head_3 if_statement_body .)


state 85

    (33) function_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (59) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (60) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER
    (57) variable_value_change -> . IDENTIFIER EQUAL LIST
    (58) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1
    (39) if_statement -> . if_statement_2
    (40) if_statement -> . if_statement_3
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (56) use -> . USE IDENTIFIER
    (41) if_statement_1 -> . if_statement_head_1 if_statement_body
    (42) if_statement_2 -> . if_statement_1 if_statement_head_2 if_statement_body
    (43) if_statement_2 -> . if_statement_2 if_statement_head_2 if_statement_body
    (44) if_statement_3 -> . if_statement_2 if_statement_head_3 if_statement_body
    (45) if_statement_3 -> . if_statement_1 if_statement_head_3 if_statement_body
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB
    (46) if_statement_head_1 -> . IF LSB condition RSB

    RMB             shift and go to state 108
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 22
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28

    variable_declaration           shift and go to state 29
    variable_value_change          shift and go to state 30
    if_statement                   shift and go to state 31
    function                       shift and go to state 32
    function_call                  shift and go to state 33
    repeat                         shift and go to state 34
    for                            shift and go to state 35
    while                          shift and go to state 36
    use                            shift and go to state 37
    if_statement_1                 shift and go to state 15
    if_statement_2                 shift and go to state 16
    if_statement_3                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    if_statement_head_1            shift and go to state 23

state 86

    (29) repeat_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (59) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (60) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER
    (57) variable_value_change -> . IDENTIFIER EQUAL LIST
    (58) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1
    (39) if_statement -> . if_statement_2
    (40) if_statement -> . if_statement_3
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (56) use -> . USE IDENTIFIER
    (41) if_statement_1 -> . if_statement_head_1 if_statement_body
    (42) if_statement_2 -> . if_statement_1 if_statement_head_2 if_statement_body
    (43) if_statement_2 -> . if_statement_2 if_statement_head_2 if_statement_body
    (44) if_statement_3 -> . if_statement_2 if_statement_head_3 if_statement_body
    (45) if_statement_3 -> . if_statement_1 if_statement_head_3 if_statement_body
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB
    (46) if_statement_head_1 -> . IF LSB condition RSB

    RMB             shift and go to state 109
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 22
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28

    variable_declaration           shift and go to state 29
    variable_value_change          shift and go to state 30
    if_statement                   shift and go to state 31
    function                       shift and go to state 32
    function_call                  shift and go to state 33
    repeat                         shift and go to state 34
    for                            shift and go to state 35
    while                          shift and go to state 36
    use                            shift and go to state 37
    if_statement_1                 shift and go to state 15
    if_statement_2                 shift and go to state 16
    if_statement_3                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    if_statement_head_1            shift and go to state 23

state 87

    (23) for_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (59) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (60) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER
    (57) variable_value_change -> . IDENTIFIER EQUAL LIST
    (58) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1
    (39) if_statement -> . if_statement_2
    (40) if_statement -> . if_statement_3
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (56) use -> . USE IDENTIFIER
    (41) if_statement_1 -> . if_statement_head_1 if_statement_body
    (42) if_statement_2 -> . if_statement_1 if_statement_head_2 if_statement_body
    (43) if_statement_2 -> . if_statement_2 if_statement_head_2 if_statement_body
    (44) if_statement_3 -> . if_statement_2 if_statement_head_3 if_statement_body
    (45) if_statement_3 -> . if_statement_1 if_statement_head_3 if_statement_body
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB
    (46) if_statement_head_1 -> . IF LSB condition RSB

    RMB             shift and go to state 110
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 22
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28

    variable_declaration           shift and go to state 29
    variable_value_change          shift and go to state 30
    if_statement                   shift and go to state 31
    function                       shift and go to state 32
    function_call                  shift and go to state 33
    repeat                         shift and go to state 34
    for                            shift and go to state 35
    while                          shift and go to state 36
    use                            shift and go to state 37
    if_statement_1                 shift and go to state 15
    if_statement_2                 shift and go to state 16
    if_statement_3                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    if_statement_head_1            shift and go to state 23

state 88

    (26) while_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (59) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (60) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER
    (57) variable_value_change -> . IDENTIFIER EQUAL LIST
    (58) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1
    (39) if_statement -> . if_statement_2
    (40) if_statement -> . if_statement_3
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (56) use -> . USE IDENTIFIER
    (41) if_statement_1 -> . if_statement_head_1 if_statement_body
    (42) if_statement_2 -> . if_statement_1 if_statement_head_2 if_statement_body
    (43) if_statement_2 -> . if_statement_2 if_statement_head_2 if_statement_body
    (44) if_statement_3 -> . if_statement_2 if_statement_head_3 if_statement_body
    (45) if_statement_3 -> . if_statement_1 if_statement_head_3 if_statement_body
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB
    (46) if_statement_head_1 -> . IF LSB condition RSB

    RMB             shift and go to state 111
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 22
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28

    variable_declaration           shift and go to state 29
    variable_value_change          shift and go to state 30
    if_statement                   shift and go to state 31
    function                       shift and go to state 32
    function_call                  shift and go to state 33
    repeat                         shift and go to state 34
    for                            shift and go to state 35
    while                          shift and go to state 36
    use                            shift and go to state 37
    if_statement_1                 shift and go to state 15
    if_statement_2                 shift and go to state 16
    if_statement_3                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    if_statement_head_1            shift and go to state 23

state 89

    (49) if_statement_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (59) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (60) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER
    (57) variable_value_change -> . IDENTIFIER EQUAL LIST
    (58) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_1
    (39) if_statement -> . if_statement_2
    (40) if_statement -> . if_statement_3
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (56) use -> . USE IDENTIFIER
    (41) if_statement_1 -> . if_statement_head_1 if_statement_body
    (42) if_statement_2 -> . if_statement_1 if_statement_head_2 if_statement_body
    (43) if_statement_2 -> . if_statement_2 if_statement_head_2 if_statement_body
    (44) if_statement_3 -> . if_statement_2 if_statement_head_3 if_statement_body
    (45) if_statement_3 -> . if_statement_1 if_statement_head_3 if_statement_body
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB
    (46) if_statement_head_1 -> . IF LSB condition RSB

    RMB             shift and go to state 112
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 22
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28

    variable_declaration           shift and go to state 29
    variable_value_change          shift and go to state 30
    if_statement                   shift and go to state 31
    function                       shift and go to state 32
    function_call                  shift and go to state 33
    repeat                         shift and go to state 34
    for                            shift and go to state 35
    while                          shift and go to state 36
    use                            shift and go to state 37
    if_statement_1                 shift and go to state 15
    if_statement_2                 shift and go to state 16
    if_statement_3                 shift and go to state 17
    function_head                  shift and go to state 18
    repeat_head                    shift and go to state 19
    for_head                       shift and go to state 20
    while_head                     shift and go to state 21
    if_statement_head_1            shift and go to state 23

state 90

    (31) function_head -> FUNCTION IDENTIFIER LSB . empty RSB
    (32) function_head -> FUNCTION IDENTIFIER LSB . parameter RSB
    (72) empty -> .
    (35) parameter -> . parameter COMMA calculate
    (36) parameter -> . calculate
    (37) parameter -> . empty
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    RSB             reduce using rule 72 (empty -> .)
    COMMA           reduce using rule 72 (empty -> .)
    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    empty                          shift and go to state 113
    parameter                      shift and go to state 114
    calculate                      shift and go to state 77

state 91

    (28) repeat_head -> REPEAT LSB calculate . RSB
    (62) calculate -> calculate . PLUS calculate
    (63) calculate -> calculate . MINUS calculate
    (65) calculate -> calculate . MUL calculate
    (66) calculate -> calculate . DIV calculate

    RSB             shift and go to state 115
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    MUL             shift and go to state 100
    DIV             shift and go to state 101


state 92

    (22) for_head -> FOR LSB IDENTIFIER . IN IDENTIFIER RSB

    IN              shift and go to state 116


state 93

    (25) while_head -> WHILE LSB condition . RSB
    (50) condition -> condition . LB calculate
    (51) condition -> condition . RB calculate
    (52) condition -> condition . LB EQUAL calculate
    (53) condition -> condition . RB EQUAL calculate
    (54) condition -> condition . EQUAL calculate

    RSB             shift and go to state 117
    LB              shift and go to state 118
    RB              shift and go to state 119
    EQUAL           shift and go to state 120


state 94

    (55) condition -> calculate .
    (62) calculate -> calculate . PLUS calculate
    (63) calculate -> calculate . MINUS calculate
    (65) calculate -> calculate . MUL calculate
    (66) calculate -> calculate . DIV calculate

    RSB             reduce using rule 55 (condition -> calculate .)
    LB              reduce using rule 55 (condition -> calculate .)
    RB              reduce using rule 55 (condition -> calculate .)
    EQUAL           reduce using rule 55 (condition -> calculate .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    MUL             shift and go to state 100
    DIV             shift and go to state 101


state 95

    (46) if_statement_head_1 -> IF LSB condition . RSB
    (50) condition -> condition . LB calculate
    (51) condition -> condition . RB calculate
    (52) condition -> condition . LB EQUAL calculate
    (53) condition -> condition . RB EQUAL calculate
    (54) condition -> condition . EQUAL calculate

    RSB             shift and go to state 121
    LB              shift and go to state 118
    RB              shift and go to state 119
    EQUAL           shift and go to state 120


state 96

    (59) variable_declaration -> VAR IDENTIFIER EQUAL LIST .

    SEMI            reduce using rule 59 (variable_declaration -> VAR IDENTIFIER EQUAL LIST .)


state 97

    (60) variable_declaration -> VAR IDENTIFIER EQUAL calculate .
    (62) calculate -> calculate . PLUS calculate
    (63) calculate -> calculate . MINUS calculate
    (65) calculate -> calculate . MUL calculate
    (66) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 60 (variable_declaration -> VAR IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    MUL             shift and go to state 100
    DIV             shift and go to state 101


state 98

    (62) calculate -> calculate PLUS . calculate
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    calculate                      shift and go to state 122

state 99

    (63) calculate -> calculate MINUS . calculate
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    calculate                      shift and go to state 123

state 100

    (65) calculate -> calculate MUL . calculate
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    calculate                      shift and go to state 124

state 101

    (66) calculate -> calculate DIV . calculate
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    calculate                      shift and go to state 125

state 102

    (64) calculate -> MINUS calculate .
    (62) calculate -> calculate . PLUS calculate
    (63) calculate -> calculate . MINUS calculate
    (65) calculate -> calculate . MUL calculate
    (66) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 64 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 64 (calculate -> MINUS calculate .)
    MUL             reduce using rule 64 (calculate -> MINUS calculate .)
    DIV             reduce using rule 64 (calculate -> MINUS calculate .)
    SEMI            reduce using rule 64 (calculate -> MINUS calculate .)
    RSB             reduce using rule 64 (calculate -> MINUS calculate .)
    COMMA           reduce using rule 64 (calculate -> MINUS calculate .)
    LB              reduce using rule 64 (calculate -> MINUS calculate .)
    RB              reduce using rule 64 (calculate -> MINUS calculate .)
    EQUAL           reduce using rule 64 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 98 ]
  ! MINUS           [ shift and go to state 99 ]
  ! MUL             [ shift and go to state 100 ]
  ! DIV             [ shift and go to state 101 ]


state 103

    (71) calculate -> LSB calculate . RSB
    (62) calculate -> calculate . PLUS calculate
    (63) calculate -> calculate . MINUS calculate
    (65) calculate -> calculate . MUL calculate
    (66) calculate -> calculate . DIV calculate

    RSB             shift and go to state 126
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    MUL             shift and go to state 100
    DIV             shift and go to state 101


state 104

    (34) function_call -> IDENTIFIER LSB parameter RSB .

    VAR             reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    IDENTIFIER      reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    USE             reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    FUNCTION        reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    REPEAT          reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    FOR             reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    WHILE           reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    IF              reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    $end            reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    SEMI            reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    RMB             reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)


state 105

    (35) parameter -> parameter COMMA . calculate
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    calculate                      shift and go to state 127

state 106

    (47) if_statement_head_2 -> ELSE IF LSB . condition RSB
    (50) condition -> . condition LB calculate
    (51) condition -> . condition RB calculate
    (52) condition -> . condition LB EQUAL calculate
    (53) condition -> . condition RB EQUAL calculate
    (54) condition -> . condition EQUAL calculate
    (55) condition -> . calculate
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    condition                      shift and go to state 128
    calculate                      shift and go to state 94

state 107

    (48) if_statement_head_3 -> ELSE LSB condition . RSB
    (50) condition -> condition . LB calculate
    (51) condition -> condition . RB calculate
    (52) condition -> condition . LB EQUAL calculate
    (53) condition -> condition . RB EQUAL calculate
    (54) condition -> condition . EQUAL calculate

    RSB             shift and go to state 129
    LB              shift and go to state 118
    RB              shift and go to state 119
    EQUAL           shift and go to state 120


state 108

    (33) function_body -> LMB expression RMB .

    VAR             reduce using rule 33 (function_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 33 (function_body -> LMB expression RMB .)
    USE             reduce using rule 33 (function_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 33 (function_body -> LMB expression RMB .)
    REPEAT          reduce using rule 33 (function_body -> LMB expression RMB .)
    FOR             reduce using rule 33 (function_body -> LMB expression RMB .)
    WHILE           reduce using rule 33 (function_body -> LMB expression RMB .)
    IF              reduce using rule 33 (function_body -> LMB expression RMB .)
    $end            reduce using rule 33 (function_body -> LMB expression RMB .)
    RMB             reduce using rule 33 (function_body -> LMB expression RMB .)


state 109

    (29) repeat_body -> LMB expression RMB .

    VAR             reduce using rule 29 (repeat_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 29 (repeat_body -> LMB expression RMB .)
    USE             reduce using rule 29 (repeat_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 29 (repeat_body -> LMB expression RMB .)
    REPEAT          reduce using rule 29 (repeat_body -> LMB expression RMB .)
    FOR             reduce using rule 29 (repeat_body -> LMB expression RMB .)
    WHILE           reduce using rule 29 (repeat_body -> LMB expression RMB .)
    IF              reduce using rule 29 (repeat_body -> LMB expression RMB .)
    $end            reduce using rule 29 (repeat_body -> LMB expression RMB .)
    RMB             reduce using rule 29 (repeat_body -> LMB expression RMB .)


state 110

    (23) for_body -> LMB expression RMB .

    VAR             reduce using rule 23 (for_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 23 (for_body -> LMB expression RMB .)
    USE             reduce using rule 23 (for_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 23 (for_body -> LMB expression RMB .)
    REPEAT          reduce using rule 23 (for_body -> LMB expression RMB .)
    FOR             reduce using rule 23 (for_body -> LMB expression RMB .)
    WHILE           reduce using rule 23 (for_body -> LMB expression RMB .)
    IF              reduce using rule 23 (for_body -> LMB expression RMB .)
    $end            reduce using rule 23 (for_body -> LMB expression RMB .)
    RMB             reduce using rule 23 (for_body -> LMB expression RMB .)


state 111

    (26) while_body -> LMB expression RMB .

    VAR             reduce using rule 26 (while_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 26 (while_body -> LMB expression RMB .)
    USE             reduce using rule 26 (while_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 26 (while_body -> LMB expression RMB .)
    REPEAT          reduce using rule 26 (while_body -> LMB expression RMB .)
    FOR             reduce using rule 26 (while_body -> LMB expression RMB .)
    WHILE           reduce using rule 26 (while_body -> LMB expression RMB .)
    IF              reduce using rule 26 (while_body -> LMB expression RMB .)
    $end            reduce using rule 26 (while_body -> LMB expression RMB .)
    RMB             reduce using rule 26 (while_body -> LMB expression RMB .)


state 112

    (49) if_statement_body -> LMB expression RMB .

    ELSE            reduce using rule 49 (if_statement_body -> LMB expression RMB .)
    VAR             reduce using rule 49 (if_statement_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 49 (if_statement_body -> LMB expression RMB .)
    USE             reduce using rule 49 (if_statement_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 49 (if_statement_body -> LMB expression RMB .)
    REPEAT          reduce using rule 49 (if_statement_body -> LMB expression RMB .)
    FOR             reduce using rule 49 (if_statement_body -> LMB expression RMB .)
    WHILE           reduce using rule 49 (if_statement_body -> LMB expression RMB .)
    IF              reduce using rule 49 (if_statement_body -> LMB expression RMB .)
    $end            reduce using rule 49 (if_statement_body -> LMB expression RMB .)
    RMB             reduce using rule 49 (if_statement_body -> LMB expression RMB .)


state 113

    (31) function_head -> FUNCTION IDENTIFIER LSB empty . RSB
    (37) parameter -> empty .

  ! shift/reduce conflict for RSB resolved as shift
    RSB             shift and go to state 130
    COMMA           reduce using rule 37 (parameter -> empty .)

  ! RSB             [ reduce using rule 37 (parameter -> empty .) ]


state 114

    (32) function_head -> FUNCTION IDENTIFIER LSB parameter . RSB
    (35) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 131
    COMMA           shift and go to state 105


state 115

    (28) repeat_head -> REPEAT LSB calculate RSB .

    LMB             reduce using rule 28 (repeat_head -> REPEAT LSB calculate RSB .)


state 116

    (22) for_head -> FOR LSB IDENTIFIER IN . IDENTIFIER RSB

    IDENTIFIER      shift and go to state 132


state 117

    (25) while_head -> WHILE LSB condition RSB .

    LMB             reduce using rule 25 (while_head -> WHILE LSB condition RSB .)


state 118

    (50) condition -> condition LB . calculate
    (52) condition -> condition LB . EQUAL calculate
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 134
    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    calculate                      shift and go to state 133

state 119

    (51) condition -> condition RB . calculate
    (53) condition -> condition RB . EQUAL calculate
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 136
    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    calculate                      shift and go to state 135

state 120

    (54) condition -> condition EQUAL . calculate
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    calculate                      shift and go to state 137

state 121

    (46) if_statement_head_1 -> IF LSB condition RSB .

    LMB             reduce using rule 46 (if_statement_head_1 -> IF LSB condition RSB .)


state 122

    (62) calculate -> calculate PLUS calculate .
    (62) calculate -> calculate . PLUS calculate
    (63) calculate -> calculate . MINUS calculate
    (65) calculate -> calculate . MUL calculate
    (66) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 62 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 62 (calculate -> calculate PLUS calculate .)
    SEMI            reduce using rule 62 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 62 (calculate -> calculate PLUS calculate .)
    COMMA           reduce using rule 62 (calculate -> calculate PLUS calculate .)
    LB              reduce using rule 62 (calculate -> calculate PLUS calculate .)
    RB              reduce using rule 62 (calculate -> calculate PLUS calculate .)
    EQUAL           reduce using rule 62 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 100
    DIV             shift and go to state 101

  ! MUL             [ reduce using rule 62 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 62 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 98 ]
  ! MINUS           [ shift and go to state 99 ]


state 123

    (63) calculate -> calculate MINUS calculate .
    (62) calculate -> calculate . PLUS calculate
    (63) calculate -> calculate . MINUS calculate
    (65) calculate -> calculate . MUL calculate
    (66) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 63 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 63 (calculate -> calculate MINUS calculate .)
    SEMI            reduce using rule 63 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 63 (calculate -> calculate MINUS calculate .)
    COMMA           reduce using rule 63 (calculate -> calculate MINUS calculate .)
    LB              reduce using rule 63 (calculate -> calculate MINUS calculate .)
    RB              reduce using rule 63 (calculate -> calculate MINUS calculate .)
    EQUAL           reduce using rule 63 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 100
    DIV             shift and go to state 101

  ! MUL             [ reduce using rule 63 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 63 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 98 ]
  ! MINUS           [ shift and go to state 99 ]


state 124

    (65) calculate -> calculate MUL calculate .
    (62) calculate -> calculate . PLUS calculate
    (63) calculate -> calculate . MINUS calculate
    (65) calculate -> calculate . MUL calculate
    (66) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 65 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 65 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 65 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 65 (calculate -> calculate MUL calculate .)
    SEMI            reduce using rule 65 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 65 (calculate -> calculate MUL calculate .)
    COMMA           reduce using rule 65 (calculate -> calculate MUL calculate .)
    LB              reduce using rule 65 (calculate -> calculate MUL calculate .)
    RB              reduce using rule 65 (calculate -> calculate MUL calculate .)
    EQUAL           reduce using rule 65 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 98 ]
  ! MINUS           [ shift and go to state 99 ]
  ! MUL             [ shift and go to state 100 ]
  ! DIV             [ shift and go to state 101 ]


state 125

    (66) calculate -> calculate DIV calculate .
    (62) calculate -> calculate . PLUS calculate
    (63) calculate -> calculate . MINUS calculate
    (65) calculate -> calculate . MUL calculate
    (66) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 66 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 66 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 66 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 66 (calculate -> calculate DIV calculate .)
    SEMI            reduce using rule 66 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 66 (calculate -> calculate DIV calculate .)
    COMMA           reduce using rule 66 (calculate -> calculate DIV calculate .)
    LB              reduce using rule 66 (calculate -> calculate DIV calculate .)
    RB              reduce using rule 66 (calculate -> calculate DIV calculate .)
    EQUAL           reduce using rule 66 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 98 ]
  ! MINUS           [ shift and go to state 99 ]
  ! MUL             [ shift and go to state 100 ]
  ! DIV             [ shift and go to state 101 ]


state 126

    (71) calculate -> LSB calculate RSB .

    PLUS            reduce using rule 71 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 71 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 71 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 71 (calculate -> LSB calculate RSB .)
    SEMI            reduce using rule 71 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 71 (calculate -> LSB calculate RSB .)
    COMMA           reduce using rule 71 (calculate -> LSB calculate RSB .)
    LB              reduce using rule 71 (calculate -> LSB calculate RSB .)
    RB              reduce using rule 71 (calculate -> LSB calculate RSB .)
    EQUAL           reduce using rule 71 (calculate -> LSB calculate RSB .)


state 127

    (35) parameter -> parameter COMMA calculate .
    (62) calculate -> calculate . PLUS calculate
    (63) calculate -> calculate . MINUS calculate
    (65) calculate -> calculate . MUL calculate
    (66) calculate -> calculate . DIV calculate

    RSB             reduce using rule 35 (parameter -> parameter COMMA calculate .)
    COMMA           reduce using rule 35 (parameter -> parameter COMMA calculate .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    MUL             shift and go to state 100
    DIV             shift and go to state 101


state 128

    (47) if_statement_head_2 -> ELSE IF LSB condition . RSB
    (50) condition -> condition . LB calculate
    (51) condition -> condition . RB calculate
    (52) condition -> condition . LB EQUAL calculate
    (53) condition -> condition . RB EQUAL calculate
    (54) condition -> condition . EQUAL calculate

    RSB             shift and go to state 138
    LB              shift and go to state 118
    RB              shift and go to state 119
    EQUAL           shift and go to state 120


state 129

    (48) if_statement_head_3 -> ELSE LSB condition RSB .

    LMB             reduce using rule 48 (if_statement_head_3 -> ELSE LSB condition RSB .)


state 130

    (31) function_head -> FUNCTION IDENTIFIER LSB empty RSB .

    LMB             reduce using rule 31 (function_head -> FUNCTION IDENTIFIER LSB empty RSB .)


state 131

    (32) function_head -> FUNCTION IDENTIFIER LSB parameter RSB .

    LMB             reduce using rule 32 (function_head -> FUNCTION IDENTIFIER LSB parameter RSB .)


state 132

    (22) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER . RSB

    RSB             shift and go to state 139


state 133

    (50) condition -> condition LB calculate .
    (62) calculate -> calculate . PLUS calculate
    (63) calculate -> calculate . MINUS calculate
    (65) calculate -> calculate . MUL calculate
    (66) calculate -> calculate . DIV calculate

    RSB             reduce using rule 50 (condition -> condition LB calculate .)
    LB              reduce using rule 50 (condition -> condition LB calculate .)
    RB              reduce using rule 50 (condition -> condition LB calculate .)
    EQUAL           reduce using rule 50 (condition -> condition LB calculate .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    MUL             shift and go to state 100
    DIV             shift and go to state 101


state 134

    (52) condition -> condition LB EQUAL . calculate
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    calculate                      shift and go to state 140

state 135

    (51) condition -> condition RB calculate .
    (62) calculate -> calculate . PLUS calculate
    (63) calculate -> calculate . MINUS calculate
    (65) calculate -> calculate . MUL calculate
    (66) calculate -> calculate . DIV calculate

    RSB             reduce using rule 51 (condition -> condition RB calculate .)
    LB              reduce using rule 51 (condition -> condition RB calculate .)
    RB              reduce using rule 51 (condition -> condition RB calculate .)
    EQUAL           reduce using rule 51 (condition -> condition RB calculate .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    MUL             shift and go to state 100
    DIV             shift and go to state 101


state 136

    (53) condition -> condition RB EQUAL . calculate
    (62) calculate -> . calculate PLUS calculate
    (63) calculate -> . calculate MINUS calculate
    (64) calculate -> . MINUS calculate
    (65) calculate -> . calculate MUL calculate
    (66) calculate -> . calculate DIV calculate
    (67) calculate -> . INT
    (68) calculate -> . FLOAT
    (69) calculate -> . STRING
    (70) calculate -> . IDENTIFIER
    (71) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 71
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    STRING          shift and go to state 74
    IDENTIFIER      shift and go to state 68
    LSB             shift and go to state 75

    calculate                      shift and go to state 141

state 137

    (54) condition -> condition EQUAL calculate .
    (62) calculate -> calculate . PLUS calculate
    (63) calculate -> calculate . MINUS calculate
    (65) calculate -> calculate . MUL calculate
    (66) calculate -> calculate . DIV calculate

    RSB             reduce using rule 54 (condition -> condition EQUAL calculate .)
    LB              reduce using rule 54 (condition -> condition EQUAL calculate .)
    RB              reduce using rule 54 (condition -> condition EQUAL calculate .)
    EQUAL           reduce using rule 54 (condition -> condition EQUAL calculate .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    MUL             shift and go to state 100
    DIV             shift and go to state 101


state 138

    (47) if_statement_head_2 -> ELSE IF LSB condition RSB .

    LMB             reduce using rule 47 (if_statement_head_2 -> ELSE IF LSB condition RSB .)


state 139

    (22) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .

    LMB             reduce using rule 22 (for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .)


state 140

    (52) condition -> condition LB EQUAL calculate .
    (62) calculate -> calculate . PLUS calculate
    (63) calculate -> calculate . MINUS calculate
    (65) calculate -> calculate . MUL calculate
    (66) calculate -> calculate . DIV calculate

    RSB             reduce using rule 52 (condition -> condition LB EQUAL calculate .)
    LB              reduce using rule 52 (condition -> condition LB EQUAL calculate .)
    RB              reduce using rule 52 (condition -> condition LB EQUAL calculate .)
    EQUAL           reduce using rule 52 (condition -> condition LB EQUAL calculate .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    MUL             shift and go to state 100
    DIV             shift and go to state 101


state 141

    (53) condition -> condition RB EQUAL calculate .
    (62) calculate -> calculate . PLUS calculate
    (63) calculate -> calculate . MINUS calculate
    (65) calculate -> calculate . MUL calculate
    (66) calculate -> calculate . DIV calculate

    RSB             reduce using rule 53 (condition -> condition RB EQUAL calculate .)
    LB              reduce using rule 53 (condition -> condition RB EQUAL calculate .)
    RB              reduce using rule 53 (condition -> condition RB EQUAL calculate .)
    EQUAL           reduce using rule 53 (condition -> condition RB EQUAL calculate .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    MUL             shift and go to state 100
    DIV             shift and go to state 101

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for USE in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 49 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 49 resolved as shift
WARNING: shift/reduce conflict for USE in state 49 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 49 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 49 resolved as shift
WARNING: shift/reduce conflict for FOR in state 49 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 49 resolved as shift
WARNING: shift/reduce conflict for IF in state 49 resolved as shift
WARNING: shift/reduce conflict for VAR in state 51 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 51 resolved as shift
WARNING: shift/reduce conflict for USE in state 51 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 51 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 51 resolved as shift
WARNING: shift/reduce conflict for FOR in state 51 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 51 resolved as shift
WARNING: shift/reduce conflict for IF in state 51 resolved as shift
WARNING: shift/reduce conflict for VAR in state 53 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 53 resolved as shift
WARNING: shift/reduce conflict for USE in state 53 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 53 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 53 resolved as shift
WARNING: shift/reduce conflict for FOR in state 53 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 53 resolved as shift
WARNING: shift/reduce conflict for IF in state 53 resolved as shift
WARNING: shift/reduce conflict for VAR in state 55 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 55 resolved as shift
WARNING: shift/reduce conflict for USE in state 55 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 55 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 55 resolved as shift
WARNING: shift/reduce conflict for FOR in state 55 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 55 resolved as shift
WARNING: shift/reduce conflict for IF in state 55 resolved as shift
WARNING: shift/reduce conflict for VAR in state 58 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 58 resolved as shift
WARNING: shift/reduce conflict for USE in state 58 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 58 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 58 resolved as shift
WARNING: shift/reduce conflict for FOR in state 58 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 58 resolved as shift
WARNING: shift/reduce conflict for IF in state 58 resolved as shift
WARNING: shift/reduce conflict for RSB in state 113 resolved as shift
