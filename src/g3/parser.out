Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CATCH
    CLASS
    COLON
    DEBUG
    DO
    DOT
    END
    FOR
    GLOBAL
    IN
    LBB
    LIST
    PYTHON
    RBB
    REPEAT
    STRING
    TRY
    USE

Grammar

Rule 0     S' -> program
Rule 1     program -> root
Rule 2     root -> root statement
Rule 3     root -> statement
Rule 4     statement -> expression
Rule 5     statement -> if_statement
Rule 6     statement -> while_statement
Rule 7     statement -> variable_declaration
Rule 8     statement -> function_declaration
Rule 9     statement -> empty
Rule 10    expression -> calculate
Rule 11    variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI
Rule 12    function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
Rule 13    function_parameter -> function_parameter COMMA IDENTIFIER
Rule 14    function_parameter -> IDENTIFIER
Rule 15    function_parameter -> empty
Rule 16    while_statement -> WHILE LSB compare_expression RSB LMB statement RMB
Rule 17    if_statement -> IF LSB compare_expression RSB LMB statement RMB
Rule 18    if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
Rule 19    if_statement -> if_statement ELSE LMB statement RMB
Rule 20    compare_expression -> compare_expression compare_operator calculate
Rule 21    compare_expression -> calculate
Rule 22    compare_operator -> LB
Rule 23    compare_operator -> RB
Rule 24    compare_operator -> LB EQUAL
Rule 25    compare_operator -> RB EQUAL
Rule 26    compare_operator -> EQUAL EQUAL
Rule 27    compare_operator -> NOTEQUAL EQUAL
Rule 28    calculate -> calculate baseoperator INT
Rule 29    calculate -> calculate baseoperator FLOAT
Rule 30    calculate -> calculate baseoperator IDENTIFIER
Rule 31    calculate -> INT
Rule 32    calculate -> FLOAT
Rule 33    calculate -> IDENTIFIER
Rule 34    baseoperator -> PLUS
Rule 35    baseoperator -> MINUS
Rule 36    baseoperator -> MUL
Rule 37    baseoperator -> DIV
Rule 38    empty -> <empty>

Terminals, with rules where they appear

CATCH                : 
CLASS                : 
COLON                : 
COMMA                : 13
DEBUG                : 
DIV                  : 37
DO                   : 
DOT                  : 
ELSE                 : 18 19
END                  : 
EQUAL                : 11 24 25 26 26 27
FLOAT                : 29 32
FOR                  : 
FUNCTION             : 12
GLOBAL               : 
IDENTIFIER           : 11 12 13 14 30 33
IF                   : 17 18
IN                   : 
INT                  : 28 31
LB                   : 22 24
LBB                  : 
LIST                 : 
LMB                  : 12 16 17 18 19
LSB                  : 12 16 17 18
MINUS                : 35
MUL                  : 36
NOTEQUAL             : 27
PLUS                 : 34
PYTHON               : 
RB                   : 23 25
RBB                  : 
REPEAT               : 
RMB                  : 12 16 17 18 19
RSB                  : 12 16 17 18
SEMI                 : 11
STRING               : 
TRY                  : 
USE                  : 
VAR                  : 11
WHILE                : 16
error                : 

Nonterminals, with rules where they appear

baseoperator         : 28 29 30
calculate            : 10 20 21 28 29 30
compare_expression   : 16 17 18 20
compare_operator     : 20
empty                : 9 15
expression           : 4 11
function_declaration : 8
function_parameter   : 12 13
if_statement         : 5 18 19
program              : 0
root                 : 1 2
statement            : 2 3 12 16 17 18 19
variable_declaration : 7
while_statement      : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . root
    (2) root -> . root statement
    (3) root -> . statement
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) expression -> . calculate
    (17) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (18) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (19) if_statement -> . if_statement ELSE LMB statement RMB
    (16) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (11) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (12) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (38) empty -> .
    (28) calculate -> . calculate baseoperator INT
    (29) calculate -> . calculate baseoperator FLOAT
    (30) calculate -> . calculate baseoperator IDENTIFIER
    (31) calculate -> . INT
    (32) calculate -> . FLOAT
    (33) calculate -> . IDENTIFIER

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    VAR             shift and go to state 13
    FUNCTION        shift and go to state 15
    $end            reduce using rule 38 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    IDENTIFIER      shift and go to state 14

  ! IF              [ reduce using rule 38 (empty -> .) ]
  ! WHILE           [ reduce using rule 38 (empty -> .) ]
  ! VAR             [ reduce using rule 38 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 38 (empty -> .) ]
  ! INT             [ reduce using rule 38 (empty -> .) ]
  ! FLOAT           [ reduce using rule 38 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 38 (empty -> .) ]

    program                        shift and go to state 1
    root                           shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    calculate                      shift and go to state 10

state 1

    (0) S' -> program .



state 2

    (1) program -> root .
    (2) root -> root . statement
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) expression -> . calculate
    (17) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (18) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (19) if_statement -> . if_statement ELSE LMB statement RMB
    (16) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (11) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (12) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (38) empty -> .
    (28) calculate -> . calculate baseoperator INT
    (29) calculate -> . calculate baseoperator FLOAT
    (30) calculate -> . calculate baseoperator IDENTIFIER
    (31) calculate -> . INT
    (32) calculate -> . FLOAT
    (33) calculate -> . IDENTIFIER

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (program -> root .)
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    $end            reduce using rule 1 (program -> root .)
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    VAR             shift and go to state 13
    FUNCTION        shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    IDENTIFIER      shift and go to state 14

  ! IF              [ reduce using rule 38 (empty -> .) ]
  ! WHILE           [ reduce using rule 38 (empty -> .) ]
  ! VAR             [ reduce using rule 38 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 38 (empty -> .) ]
  ! INT             [ reduce using rule 38 (empty -> .) ]
  ! FLOAT           [ reduce using rule 38 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 38 (empty -> .) ]
  ! $end            [ reduce using rule 38 (empty -> .) ]

    statement                      shift and go to state 18
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    calculate                      shift and go to state 10

state 3

    (3) root -> statement .

    IF              reduce using rule 3 (root -> statement .)
    WHILE           reduce using rule 3 (root -> statement .)
    VAR             reduce using rule 3 (root -> statement .)
    FUNCTION        reduce using rule 3 (root -> statement .)
    INT             reduce using rule 3 (root -> statement .)
    FLOAT           reduce using rule 3 (root -> statement .)
    IDENTIFIER      reduce using rule 3 (root -> statement .)
    $end            reduce using rule 3 (root -> statement .)


state 4

    (4) statement -> expression .

    IF              reduce using rule 4 (statement -> expression .)
    WHILE           reduce using rule 4 (statement -> expression .)
    VAR             reduce using rule 4 (statement -> expression .)
    FUNCTION        reduce using rule 4 (statement -> expression .)
    INT             reduce using rule 4 (statement -> expression .)
    FLOAT           reduce using rule 4 (statement -> expression .)
    IDENTIFIER      reduce using rule 4 (statement -> expression .)
    $end            reduce using rule 4 (statement -> expression .)
    RMB             reduce using rule 4 (statement -> expression .)


state 5

    (5) statement -> if_statement .
    (18) if_statement -> if_statement . ELSE IF LSB compare_expression RSB LMB statement RMB
    (19) if_statement -> if_statement . ELSE LMB statement RMB

    IF              reduce using rule 5 (statement -> if_statement .)
    WHILE           reduce using rule 5 (statement -> if_statement .)
    VAR             reduce using rule 5 (statement -> if_statement .)
    FUNCTION        reduce using rule 5 (statement -> if_statement .)
    INT             reduce using rule 5 (statement -> if_statement .)
    FLOAT           reduce using rule 5 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 5 (statement -> if_statement .)
    $end            reduce using rule 5 (statement -> if_statement .)
    RMB             reduce using rule 5 (statement -> if_statement .)
    ELSE            shift and go to state 19


state 6

    (6) statement -> while_statement .

    IF              reduce using rule 6 (statement -> while_statement .)
    WHILE           reduce using rule 6 (statement -> while_statement .)
    VAR             reduce using rule 6 (statement -> while_statement .)
    FUNCTION        reduce using rule 6 (statement -> while_statement .)
    INT             reduce using rule 6 (statement -> while_statement .)
    FLOAT           reduce using rule 6 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 6 (statement -> while_statement .)
    $end            reduce using rule 6 (statement -> while_statement .)
    RMB             reduce using rule 6 (statement -> while_statement .)


state 7

    (7) statement -> variable_declaration .

    IF              reduce using rule 7 (statement -> variable_declaration .)
    WHILE           reduce using rule 7 (statement -> variable_declaration .)
    VAR             reduce using rule 7 (statement -> variable_declaration .)
    FUNCTION        reduce using rule 7 (statement -> variable_declaration .)
    INT             reduce using rule 7 (statement -> variable_declaration .)
    FLOAT           reduce using rule 7 (statement -> variable_declaration .)
    IDENTIFIER      reduce using rule 7 (statement -> variable_declaration .)
    $end            reduce using rule 7 (statement -> variable_declaration .)
    RMB             reduce using rule 7 (statement -> variable_declaration .)


state 8

    (8) statement -> function_declaration .

    IF              reduce using rule 8 (statement -> function_declaration .)
    WHILE           reduce using rule 8 (statement -> function_declaration .)
    VAR             reduce using rule 8 (statement -> function_declaration .)
    FUNCTION        reduce using rule 8 (statement -> function_declaration .)
    INT             reduce using rule 8 (statement -> function_declaration .)
    FLOAT           reduce using rule 8 (statement -> function_declaration .)
    IDENTIFIER      reduce using rule 8 (statement -> function_declaration .)
    $end            reduce using rule 8 (statement -> function_declaration .)
    RMB             reduce using rule 8 (statement -> function_declaration .)


state 9

    (9) statement -> empty .

    IF              reduce using rule 9 (statement -> empty .)
    WHILE           reduce using rule 9 (statement -> empty .)
    VAR             reduce using rule 9 (statement -> empty .)
    FUNCTION        reduce using rule 9 (statement -> empty .)
    INT             reduce using rule 9 (statement -> empty .)
    FLOAT           reduce using rule 9 (statement -> empty .)
    IDENTIFIER      reduce using rule 9 (statement -> empty .)
    $end            reduce using rule 9 (statement -> empty .)
    RMB             reduce using rule 9 (statement -> empty .)


state 10

    (10) expression -> calculate .
    (28) calculate -> calculate . baseoperator INT
    (29) calculate -> calculate . baseoperator FLOAT
    (30) calculate -> calculate . baseoperator IDENTIFIER
    (34) baseoperator -> . PLUS
    (35) baseoperator -> . MINUS
    (36) baseoperator -> . MUL
    (37) baseoperator -> . DIV

    IF              reduce using rule 10 (expression -> calculate .)
    WHILE           reduce using rule 10 (expression -> calculate .)
    VAR             reduce using rule 10 (expression -> calculate .)
    FUNCTION        reduce using rule 10 (expression -> calculate .)
    INT             reduce using rule 10 (expression -> calculate .)
    FLOAT           reduce using rule 10 (expression -> calculate .)
    IDENTIFIER      reduce using rule 10 (expression -> calculate .)
    $end            reduce using rule 10 (expression -> calculate .)
    RMB             reduce using rule 10 (expression -> calculate .)
    SEMI            reduce using rule 10 (expression -> calculate .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    MUL             shift and go to state 23
    DIV             shift and go to state 24

    baseoperator                   shift and go to state 20

state 11

    (17) if_statement -> IF . LSB compare_expression RSB LMB statement RMB

    LSB             shift and go to state 25


state 12

    (16) while_statement -> WHILE . LSB compare_expression RSB LMB statement RMB

    LSB             shift and go to state 26


state 13

    (11) variable_declaration -> VAR . IDENTIFIER EQUAL expression SEMI

    IDENTIFIER      shift and go to state 27


state 14

    (33) calculate -> IDENTIFIER .

    PLUS            reduce using rule 33 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 33 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 33 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 33 (calculate -> IDENTIFIER .)
    IF              reduce using rule 33 (calculate -> IDENTIFIER .)
    WHILE           reduce using rule 33 (calculate -> IDENTIFIER .)
    VAR             reduce using rule 33 (calculate -> IDENTIFIER .)
    FUNCTION        reduce using rule 33 (calculate -> IDENTIFIER .)
    INT             reduce using rule 33 (calculate -> IDENTIFIER .)
    FLOAT           reduce using rule 33 (calculate -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 33 (calculate -> IDENTIFIER .)
    $end            reduce using rule 33 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 33 (calculate -> IDENTIFIER .)
    LB              reduce using rule 33 (calculate -> IDENTIFIER .)
    RB              reduce using rule 33 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 33 (calculate -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 33 (calculate -> IDENTIFIER .)
    RMB             reduce using rule 33 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 33 (calculate -> IDENTIFIER .)


state 15

    (12) function_declaration -> FUNCTION . IDENTIFIER LSB function_parameter RSB LMB statement RMB

    IDENTIFIER      shift and go to state 28


state 16

    (31) calculate -> INT .

    PLUS            reduce using rule 31 (calculate -> INT .)
    MINUS           reduce using rule 31 (calculate -> INT .)
    MUL             reduce using rule 31 (calculate -> INT .)
    DIV             reduce using rule 31 (calculate -> INT .)
    IF              reduce using rule 31 (calculate -> INT .)
    WHILE           reduce using rule 31 (calculate -> INT .)
    VAR             reduce using rule 31 (calculate -> INT .)
    FUNCTION        reduce using rule 31 (calculate -> INT .)
    INT             reduce using rule 31 (calculate -> INT .)
    FLOAT           reduce using rule 31 (calculate -> INT .)
    IDENTIFIER      reduce using rule 31 (calculate -> INT .)
    $end            reduce using rule 31 (calculate -> INT .)
    RSB             reduce using rule 31 (calculate -> INT .)
    LB              reduce using rule 31 (calculate -> INT .)
    RB              reduce using rule 31 (calculate -> INT .)
    EQUAL           reduce using rule 31 (calculate -> INT .)
    NOTEQUAL        reduce using rule 31 (calculate -> INT .)
    RMB             reduce using rule 31 (calculate -> INT .)
    SEMI            reduce using rule 31 (calculate -> INT .)


state 17

    (32) calculate -> FLOAT .

    PLUS            reduce using rule 32 (calculate -> FLOAT .)
    MINUS           reduce using rule 32 (calculate -> FLOAT .)
    MUL             reduce using rule 32 (calculate -> FLOAT .)
    DIV             reduce using rule 32 (calculate -> FLOAT .)
    IF              reduce using rule 32 (calculate -> FLOAT .)
    WHILE           reduce using rule 32 (calculate -> FLOAT .)
    VAR             reduce using rule 32 (calculate -> FLOAT .)
    FUNCTION        reduce using rule 32 (calculate -> FLOAT .)
    INT             reduce using rule 32 (calculate -> FLOAT .)
    FLOAT           reduce using rule 32 (calculate -> FLOAT .)
    IDENTIFIER      reduce using rule 32 (calculate -> FLOAT .)
    $end            reduce using rule 32 (calculate -> FLOAT .)
    RSB             reduce using rule 32 (calculate -> FLOAT .)
    LB              reduce using rule 32 (calculate -> FLOAT .)
    RB              reduce using rule 32 (calculate -> FLOAT .)
    EQUAL           reduce using rule 32 (calculate -> FLOAT .)
    NOTEQUAL        reduce using rule 32 (calculate -> FLOAT .)
    RMB             reduce using rule 32 (calculate -> FLOAT .)
    SEMI            reduce using rule 32 (calculate -> FLOAT .)


state 18

    (2) root -> root statement .

    IF              reduce using rule 2 (root -> root statement .)
    WHILE           reduce using rule 2 (root -> root statement .)
    VAR             reduce using rule 2 (root -> root statement .)
    FUNCTION        reduce using rule 2 (root -> root statement .)
    INT             reduce using rule 2 (root -> root statement .)
    FLOAT           reduce using rule 2 (root -> root statement .)
    IDENTIFIER      reduce using rule 2 (root -> root statement .)
    $end            reduce using rule 2 (root -> root statement .)


state 19

    (18) if_statement -> if_statement ELSE . IF LSB compare_expression RSB LMB statement RMB
    (19) if_statement -> if_statement ELSE . LMB statement RMB

    IF              shift and go to state 29
    LMB             shift and go to state 30


state 20

    (28) calculate -> calculate baseoperator . INT
    (29) calculate -> calculate baseoperator . FLOAT
    (30) calculate -> calculate baseoperator . IDENTIFIER

    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    IDENTIFIER      shift and go to state 33


state 21

    (34) baseoperator -> PLUS .

    INT             reduce using rule 34 (baseoperator -> PLUS .)
    FLOAT           reduce using rule 34 (baseoperator -> PLUS .)
    IDENTIFIER      reduce using rule 34 (baseoperator -> PLUS .)


state 22

    (35) baseoperator -> MINUS .

    INT             reduce using rule 35 (baseoperator -> MINUS .)
    FLOAT           reduce using rule 35 (baseoperator -> MINUS .)
    IDENTIFIER      reduce using rule 35 (baseoperator -> MINUS .)


state 23

    (36) baseoperator -> MUL .

    INT             reduce using rule 36 (baseoperator -> MUL .)
    FLOAT           reduce using rule 36 (baseoperator -> MUL .)
    IDENTIFIER      reduce using rule 36 (baseoperator -> MUL .)


state 24

    (37) baseoperator -> DIV .

    INT             reduce using rule 37 (baseoperator -> DIV .)
    FLOAT           reduce using rule 37 (baseoperator -> DIV .)
    IDENTIFIER      reduce using rule 37 (baseoperator -> DIV .)


state 25

    (17) if_statement -> IF LSB . compare_expression RSB LMB statement RMB
    (20) compare_expression -> . compare_expression compare_operator calculate
    (21) compare_expression -> . calculate
    (28) calculate -> . calculate baseoperator INT
    (29) calculate -> . calculate baseoperator FLOAT
    (30) calculate -> . calculate baseoperator IDENTIFIER
    (31) calculate -> . INT
    (32) calculate -> . FLOAT
    (33) calculate -> . IDENTIFIER

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    IDENTIFIER      shift and go to state 14

    compare_expression             shift and go to state 34
    calculate                      shift and go to state 35

state 26

    (16) while_statement -> WHILE LSB . compare_expression RSB LMB statement RMB
    (20) compare_expression -> . compare_expression compare_operator calculate
    (21) compare_expression -> . calculate
    (28) calculate -> . calculate baseoperator INT
    (29) calculate -> . calculate baseoperator FLOAT
    (30) calculate -> . calculate baseoperator IDENTIFIER
    (31) calculate -> . INT
    (32) calculate -> . FLOAT
    (33) calculate -> . IDENTIFIER

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    IDENTIFIER      shift and go to state 14

    compare_expression             shift and go to state 36
    calculate                      shift and go to state 35

state 27

    (11) variable_declaration -> VAR IDENTIFIER . EQUAL expression SEMI

    EQUAL           shift and go to state 37


state 28

    (12) function_declaration -> FUNCTION IDENTIFIER . LSB function_parameter RSB LMB statement RMB

    LSB             shift and go to state 38


state 29

    (18) if_statement -> if_statement ELSE IF . LSB compare_expression RSB LMB statement RMB

    LSB             shift and go to state 39


state 30

    (19) if_statement -> if_statement ELSE LMB . statement RMB
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) expression -> . calculate
    (17) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (18) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (19) if_statement -> . if_statement ELSE LMB statement RMB
    (16) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (11) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (12) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (38) empty -> .
    (28) calculate -> . calculate baseoperator INT
    (29) calculate -> . calculate baseoperator FLOAT
    (30) calculate -> . calculate baseoperator IDENTIFIER
    (31) calculate -> . INT
    (32) calculate -> . FLOAT
    (33) calculate -> . IDENTIFIER

    IF              shift and go to state 11
    WHILE           shift and go to state 12
    VAR             shift and go to state 13
    FUNCTION        shift and go to state 15
    RMB             reduce using rule 38 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    IDENTIFIER      shift and go to state 14

    if_statement                   shift and go to state 5
    statement                      shift and go to state 40
    expression                     shift and go to state 4
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    calculate                      shift and go to state 10

state 31

    (28) calculate -> calculate baseoperator INT .

    PLUS            reduce using rule 28 (calculate -> calculate baseoperator INT .)
    MINUS           reduce using rule 28 (calculate -> calculate baseoperator INT .)
    MUL             reduce using rule 28 (calculate -> calculate baseoperator INT .)
    DIV             reduce using rule 28 (calculate -> calculate baseoperator INT .)
    IF              reduce using rule 28 (calculate -> calculate baseoperator INT .)
    WHILE           reduce using rule 28 (calculate -> calculate baseoperator INT .)
    VAR             reduce using rule 28 (calculate -> calculate baseoperator INT .)
    FUNCTION        reduce using rule 28 (calculate -> calculate baseoperator INT .)
    INT             reduce using rule 28 (calculate -> calculate baseoperator INT .)
    FLOAT           reduce using rule 28 (calculate -> calculate baseoperator INT .)
    IDENTIFIER      reduce using rule 28 (calculate -> calculate baseoperator INT .)
    $end            reduce using rule 28 (calculate -> calculate baseoperator INT .)
    RSB             reduce using rule 28 (calculate -> calculate baseoperator INT .)
    LB              reduce using rule 28 (calculate -> calculate baseoperator INT .)
    RB              reduce using rule 28 (calculate -> calculate baseoperator INT .)
    EQUAL           reduce using rule 28 (calculate -> calculate baseoperator INT .)
    NOTEQUAL        reduce using rule 28 (calculate -> calculate baseoperator INT .)
    RMB             reduce using rule 28 (calculate -> calculate baseoperator INT .)
    SEMI            reduce using rule 28 (calculate -> calculate baseoperator INT .)


state 32

    (29) calculate -> calculate baseoperator FLOAT .

    PLUS            reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)
    MINUS           reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)
    MUL             reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)
    DIV             reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)
    IF              reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)
    WHILE           reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)
    VAR             reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)
    FUNCTION        reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)
    INT             reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)
    FLOAT           reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)
    IDENTIFIER      reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)
    $end            reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)
    RSB             reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)
    LB              reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)
    RB              reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)
    EQUAL           reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)
    NOTEQUAL        reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)
    RMB             reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)
    SEMI            reduce using rule 29 (calculate -> calculate baseoperator FLOAT .)


state 33

    (30) calculate -> calculate baseoperator IDENTIFIER .

    PLUS            reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)
    MINUS           reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)
    MUL             reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)
    DIV             reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)
    IF              reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)
    WHILE           reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)
    VAR             reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)
    FUNCTION        reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)
    INT             reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)
    FLOAT           reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)
    IDENTIFIER      reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)
    $end            reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)
    RSB             reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)
    LB              reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)
    RB              reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)
    EQUAL           reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)
    NOTEQUAL        reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)
    RMB             reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)
    SEMI            reduce using rule 30 (calculate -> calculate baseoperator IDENTIFIER .)


state 34

    (17) if_statement -> IF LSB compare_expression . RSB LMB statement RMB
    (20) compare_expression -> compare_expression . compare_operator calculate
    (22) compare_operator -> . LB
    (23) compare_operator -> . RB
    (24) compare_operator -> . LB EQUAL
    (25) compare_operator -> . RB EQUAL
    (26) compare_operator -> . EQUAL EQUAL
    (27) compare_operator -> . NOTEQUAL EQUAL

    RSB             shift and go to state 41
    LB              shift and go to state 43
    RB              shift and go to state 44
    EQUAL           shift and go to state 45
    NOTEQUAL        shift and go to state 46

    compare_operator               shift and go to state 42

state 35

    (21) compare_expression -> calculate .
    (28) calculate -> calculate . baseoperator INT
    (29) calculate -> calculate . baseoperator FLOAT
    (30) calculate -> calculate . baseoperator IDENTIFIER
    (34) baseoperator -> . PLUS
    (35) baseoperator -> . MINUS
    (36) baseoperator -> . MUL
    (37) baseoperator -> . DIV

    RSB             reduce using rule 21 (compare_expression -> calculate .)
    LB              reduce using rule 21 (compare_expression -> calculate .)
    RB              reduce using rule 21 (compare_expression -> calculate .)
    EQUAL           reduce using rule 21 (compare_expression -> calculate .)
    NOTEQUAL        reduce using rule 21 (compare_expression -> calculate .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    MUL             shift and go to state 23
    DIV             shift and go to state 24

    baseoperator                   shift and go to state 20

state 36

    (16) while_statement -> WHILE LSB compare_expression . RSB LMB statement RMB
    (20) compare_expression -> compare_expression . compare_operator calculate
    (22) compare_operator -> . LB
    (23) compare_operator -> . RB
    (24) compare_operator -> . LB EQUAL
    (25) compare_operator -> . RB EQUAL
    (26) compare_operator -> . EQUAL EQUAL
    (27) compare_operator -> . NOTEQUAL EQUAL

    RSB             shift and go to state 47
    LB              shift and go to state 43
    RB              shift and go to state 44
    EQUAL           shift and go to state 45
    NOTEQUAL        shift and go to state 46

    compare_operator               shift and go to state 42

state 37

    (11) variable_declaration -> VAR IDENTIFIER EQUAL . expression SEMI
    (10) expression -> . calculate
    (28) calculate -> . calculate baseoperator INT
    (29) calculate -> . calculate baseoperator FLOAT
    (30) calculate -> . calculate baseoperator IDENTIFIER
    (31) calculate -> . INT
    (32) calculate -> . FLOAT
    (33) calculate -> . IDENTIFIER

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 48
    calculate                      shift and go to state 10

state 38

    (12) function_declaration -> FUNCTION IDENTIFIER LSB . function_parameter RSB LMB statement RMB
    (13) function_parameter -> . function_parameter COMMA IDENTIFIER
    (14) function_parameter -> . IDENTIFIER
    (15) function_parameter -> . empty
    (38) empty -> .

    IDENTIFIER      shift and go to state 49
    RSB             reduce using rule 38 (empty -> .)
    COMMA           reduce using rule 38 (empty -> .)

    function_parameter             shift and go to state 50
    empty                          shift and go to state 51

state 39

    (18) if_statement -> if_statement ELSE IF LSB . compare_expression RSB LMB statement RMB
    (20) compare_expression -> . compare_expression compare_operator calculate
    (21) compare_expression -> . calculate
    (28) calculate -> . calculate baseoperator INT
    (29) calculate -> . calculate baseoperator FLOAT
    (30) calculate -> . calculate baseoperator IDENTIFIER
    (31) calculate -> . INT
    (32) calculate -> . FLOAT
    (33) calculate -> . IDENTIFIER

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    IDENTIFIER      shift and go to state 14

    compare_expression             shift and go to state 52
    calculate                      shift and go to state 35

state 40

    (19) if_statement -> if_statement ELSE LMB statement . RMB

    RMB             shift and go to state 53


state 41

    (17) if_statement -> IF LSB compare_expression RSB . LMB statement RMB

    LMB             shift and go to state 54


state 42

    (20) compare_expression -> compare_expression compare_operator . calculate
    (28) calculate -> . calculate baseoperator INT
    (29) calculate -> . calculate baseoperator FLOAT
    (30) calculate -> . calculate baseoperator IDENTIFIER
    (31) calculate -> . INT
    (32) calculate -> . FLOAT
    (33) calculate -> . IDENTIFIER

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    IDENTIFIER      shift and go to state 14

    calculate                      shift and go to state 55

state 43

    (22) compare_operator -> LB .
    (24) compare_operator -> LB . EQUAL

    INT             reduce using rule 22 (compare_operator -> LB .)
    FLOAT           reduce using rule 22 (compare_operator -> LB .)
    IDENTIFIER      reduce using rule 22 (compare_operator -> LB .)
    EQUAL           shift and go to state 56


state 44

    (23) compare_operator -> RB .
    (25) compare_operator -> RB . EQUAL

    INT             reduce using rule 23 (compare_operator -> RB .)
    FLOAT           reduce using rule 23 (compare_operator -> RB .)
    IDENTIFIER      reduce using rule 23 (compare_operator -> RB .)
    EQUAL           shift and go to state 57


state 45

    (26) compare_operator -> EQUAL . EQUAL

    EQUAL           shift and go to state 58


state 46

    (27) compare_operator -> NOTEQUAL . EQUAL

    EQUAL           shift and go to state 59


state 47

    (16) while_statement -> WHILE LSB compare_expression RSB . LMB statement RMB

    LMB             shift and go to state 60


state 48

    (11) variable_declaration -> VAR IDENTIFIER EQUAL expression . SEMI

    SEMI            shift and go to state 61


state 49

    (14) function_parameter -> IDENTIFIER .

    RSB             reduce using rule 14 (function_parameter -> IDENTIFIER .)
    COMMA           reduce using rule 14 (function_parameter -> IDENTIFIER .)


state 50

    (12) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter . RSB LMB statement RMB
    (13) function_parameter -> function_parameter . COMMA IDENTIFIER

    RSB             shift and go to state 62
    COMMA           shift and go to state 63


state 51

    (15) function_parameter -> empty .

    RSB             reduce using rule 15 (function_parameter -> empty .)
    COMMA           reduce using rule 15 (function_parameter -> empty .)


state 52

    (18) if_statement -> if_statement ELSE IF LSB compare_expression . RSB LMB statement RMB
    (20) compare_expression -> compare_expression . compare_operator calculate
    (22) compare_operator -> . LB
    (23) compare_operator -> . RB
    (24) compare_operator -> . LB EQUAL
    (25) compare_operator -> . RB EQUAL
    (26) compare_operator -> . EQUAL EQUAL
    (27) compare_operator -> . NOTEQUAL EQUAL

    RSB             shift and go to state 64
    LB              shift and go to state 43
    RB              shift and go to state 44
    EQUAL           shift and go to state 45
    NOTEQUAL        shift and go to state 46

    compare_operator               shift and go to state 42

state 53

    (19) if_statement -> if_statement ELSE LMB statement RMB .

    ELSE            reduce using rule 19 (if_statement -> if_statement ELSE LMB statement RMB .)
    IF              reduce using rule 19 (if_statement -> if_statement ELSE LMB statement RMB .)
    WHILE           reduce using rule 19 (if_statement -> if_statement ELSE LMB statement RMB .)
    VAR             reduce using rule 19 (if_statement -> if_statement ELSE LMB statement RMB .)
    FUNCTION        reduce using rule 19 (if_statement -> if_statement ELSE LMB statement RMB .)
    INT             reduce using rule 19 (if_statement -> if_statement ELSE LMB statement RMB .)
    FLOAT           reduce using rule 19 (if_statement -> if_statement ELSE LMB statement RMB .)
    IDENTIFIER      reduce using rule 19 (if_statement -> if_statement ELSE LMB statement RMB .)
    $end            reduce using rule 19 (if_statement -> if_statement ELSE LMB statement RMB .)
    RMB             reduce using rule 19 (if_statement -> if_statement ELSE LMB statement RMB .)


state 54

    (17) if_statement -> IF LSB compare_expression RSB LMB . statement RMB
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) expression -> . calculate
    (17) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (18) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (19) if_statement -> . if_statement ELSE LMB statement RMB
    (16) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (11) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (12) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (38) empty -> .
    (28) calculate -> . calculate baseoperator INT
    (29) calculate -> . calculate baseoperator FLOAT
    (30) calculate -> . calculate baseoperator IDENTIFIER
    (31) calculate -> . INT
    (32) calculate -> . FLOAT
    (33) calculate -> . IDENTIFIER

    IF              shift and go to state 11
    WHILE           shift and go to state 12
    VAR             shift and go to state 13
    FUNCTION        shift and go to state 15
    RMB             reduce using rule 38 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    IDENTIFIER      shift and go to state 14

    statement                      shift and go to state 65
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    calculate                      shift and go to state 10

state 55

    (20) compare_expression -> compare_expression compare_operator calculate .
    (28) calculate -> calculate . baseoperator INT
    (29) calculate -> calculate . baseoperator FLOAT
    (30) calculate -> calculate . baseoperator IDENTIFIER
    (34) baseoperator -> . PLUS
    (35) baseoperator -> . MINUS
    (36) baseoperator -> . MUL
    (37) baseoperator -> . DIV

    RSB             reduce using rule 20 (compare_expression -> compare_expression compare_operator calculate .)
    LB              reduce using rule 20 (compare_expression -> compare_expression compare_operator calculate .)
    RB              reduce using rule 20 (compare_expression -> compare_expression compare_operator calculate .)
    EQUAL           reduce using rule 20 (compare_expression -> compare_expression compare_operator calculate .)
    NOTEQUAL        reduce using rule 20 (compare_expression -> compare_expression compare_operator calculate .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    MUL             shift and go to state 23
    DIV             shift and go to state 24

    baseoperator                   shift and go to state 20

state 56

    (24) compare_operator -> LB EQUAL .

    INT             reduce using rule 24 (compare_operator -> LB EQUAL .)
    FLOAT           reduce using rule 24 (compare_operator -> LB EQUAL .)
    IDENTIFIER      reduce using rule 24 (compare_operator -> LB EQUAL .)


state 57

    (25) compare_operator -> RB EQUAL .

    INT             reduce using rule 25 (compare_operator -> RB EQUAL .)
    FLOAT           reduce using rule 25 (compare_operator -> RB EQUAL .)
    IDENTIFIER      reduce using rule 25 (compare_operator -> RB EQUAL .)


state 58

    (26) compare_operator -> EQUAL EQUAL .

    INT             reduce using rule 26 (compare_operator -> EQUAL EQUAL .)
    FLOAT           reduce using rule 26 (compare_operator -> EQUAL EQUAL .)
    IDENTIFIER      reduce using rule 26 (compare_operator -> EQUAL EQUAL .)


state 59

    (27) compare_operator -> NOTEQUAL EQUAL .

    INT             reduce using rule 27 (compare_operator -> NOTEQUAL EQUAL .)
    FLOAT           reduce using rule 27 (compare_operator -> NOTEQUAL EQUAL .)
    IDENTIFIER      reduce using rule 27 (compare_operator -> NOTEQUAL EQUAL .)


state 60

    (16) while_statement -> WHILE LSB compare_expression RSB LMB . statement RMB
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) expression -> . calculate
    (17) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (18) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (19) if_statement -> . if_statement ELSE LMB statement RMB
    (16) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (11) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (12) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (38) empty -> .
    (28) calculate -> . calculate baseoperator INT
    (29) calculate -> . calculate baseoperator FLOAT
    (30) calculate -> . calculate baseoperator IDENTIFIER
    (31) calculate -> . INT
    (32) calculate -> . FLOAT
    (33) calculate -> . IDENTIFIER

    IF              shift and go to state 11
    WHILE           shift and go to state 12
    VAR             shift and go to state 13
    FUNCTION        shift and go to state 15
    RMB             reduce using rule 38 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    IDENTIFIER      shift and go to state 14

    statement                      shift and go to state 66
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    calculate                      shift and go to state 10

state 61

    (11) variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .

    IF              reduce using rule 11 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    WHILE           reduce using rule 11 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    VAR             reduce using rule 11 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    FUNCTION        reduce using rule 11 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    INT             reduce using rule 11 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    FLOAT           reduce using rule 11 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    IDENTIFIER      reduce using rule 11 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    $end            reduce using rule 11 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)
    RMB             reduce using rule 11 (variable_declaration -> VAR IDENTIFIER EQUAL expression SEMI .)


state 62

    (12) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB . LMB statement RMB

    LMB             shift and go to state 67


state 63

    (13) function_parameter -> function_parameter COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 68


state 64

    (18) if_statement -> if_statement ELSE IF LSB compare_expression RSB . LMB statement RMB

    LMB             shift and go to state 69


state 65

    (17) if_statement -> IF LSB compare_expression RSB LMB statement . RMB

    RMB             shift and go to state 70


state 66

    (16) while_statement -> WHILE LSB compare_expression RSB LMB statement . RMB

    RMB             shift and go to state 71


state 67

    (12) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB . statement RMB
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) expression -> . calculate
    (17) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (18) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (19) if_statement -> . if_statement ELSE LMB statement RMB
    (16) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (11) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (12) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (38) empty -> .
    (28) calculate -> . calculate baseoperator INT
    (29) calculate -> . calculate baseoperator FLOAT
    (30) calculate -> . calculate baseoperator IDENTIFIER
    (31) calculate -> . INT
    (32) calculate -> . FLOAT
    (33) calculate -> . IDENTIFIER

    IF              shift and go to state 11
    WHILE           shift and go to state 12
    VAR             shift and go to state 13
    FUNCTION        shift and go to state 15
    RMB             reduce using rule 38 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    IDENTIFIER      shift and go to state 14

    statement                      shift and go to state 72
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    calculate                      shift and go to state 10

state 68

    (13) function_parameter -> function_parameter COMMA IDENTIFIER .

    RSB             reduce using rule 13 (function_parameter -> function_parameter COMMA IDENTIFIER .)
    COMMA           reduce using rule 13 (function_parameter -> function_parameter COMMA IDENTIFIER .)


state 69

    (18) if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB . statement RMB
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . variable_declaration
    (8) statement -> . function_declaration
    (9) statement -> . empty
    (10) expression -> . calculate
    (17) if_statement -> . IF LSB compare_expression RSB LMB statement RMB
    (18) if_statement -> . if_statement ELSE IF LSB compare_expression RSB LMB statement RMB
    (19) if_statement -> . if_statement ELSE LMB statement RMB
    (16) while_statement -> . WHILE LSB compare_expression RSB LMB statement RMB
    (11) variable_declaration -> . VAR IDENTIFIER EQUAL expression SEMI
    (12) function_declaration -> . FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB
    (38) empty -> .
    (28) calculate -> . calculate baseoperator INT
    (29) calculate -> . calculate baseoperator FLOAT
    (30) calculate -> . calculate baseoperator IDENTIFIER
    (31) calculate -> . INT
    (32) calculate -> . FLOAT
    (33) calculate -> . IDENTIFIER

    IF              shift and go to state 11
    WHILE           shift and go to state 12
    VAR             shift and go to state 13
    FUNCTION        shift and go to state 15
    RMB             reduce using rule 38 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    IDENTIFIER      shift and go to state 14

    if_statement                   shift and go to state 5
    statement                      shift and go to state 73
    expression                     shift and go to state 4
    while_statement                shift and go to state 6
    variable_declaration           shift and go to state 7
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9
    calculate                      shift and go to state 10

state 70

    (17) if_statement -> IF LSB compare_expression RSB LMB statement RMB .

    ELSE            reduce using rule 17 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    IF              reduce using rule 17 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    WHILE           reduce using rule 17 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    VAR             reduce using rule 17 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    FUNCTION        reduce using rule 17 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    INT             reduce using rule 17 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    FLOAT           reduce using rule 17 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    IDENTIFIER      reduce using rule 17 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    $end            reduce using rule 17 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)
    RMB             reduce using rule 17 (if_statement -> IF LSB compare_expression RSB LMB statement RMB .)


state 71

    (16) while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .

    IF              reduce using rule 16 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    WHILE           reduce using rule 16 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    VAR             reduce using rule 16 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    FUNCTION        reduce using rule 16 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    INT             reduce using rule 16 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    FLOAT           reduce using rule 16 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    IDENTIFIER      reduce using rule 16 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    $end            reduce using rule 16 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)
    RMB             reduce using rule 16 (while_statement -> WHILE LSB compare_expression RSB LMB statement RMB .)


state 72

    (12) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement . RMB

    RMB             shift and go to state 74


state 73

    (18) if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement . RMB

    RMB             shift and go to state 75


state 74

    (12) function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .

    IF              reduce using rule 12 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    WHILE           reduce using rule 12 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    VAR             reduce using rule 12 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    FUNCTION        reduce using rule 12 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    INT             reduce using rule 12 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    FLOAT           reduce using rule 12 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    IDENTIFIER      reduce using rule 12 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    $end            reduce using rule 12 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)
    RMB             reduce using rule 12 (function_declaration -> FUNCTION IDENTIFIER LSB function_parameter RSB LMB statement RMB .)


state 75

    (18) if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .

    ELSE            reduce using rule 18 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    IF              reduce using rule 18 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    WHILE           reduce using rule 18 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    VAR             reduce using rule 18 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    FUNCTION        reduce using rule 18 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    INT             reduce using rule 18 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    FLOAT           reduce using rule 18 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    IDENTIFIER      reduce using rule 18 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    $end            reduce using rule 18 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)
    RMB             reduce using rule 18 (if_statement -> if_statement ELSE IF LSB compare_expression RSB LMB statement RMB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for INT in state 2 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 2 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 2 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (program -> root)
WARNING: rejected rule (empty -> <empty>) in state 2
