
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULDIVCATCH CLASS COLON COMMA DEBUG DIV DOT ELSE EQUAL FLOAT FOR FUNCTION GLOBAL IDENTIFIER IF IN INT LB LIST LMB LSB MINUS MUL PLUS PYTHON RB REPEAT RMB RSB SEMI STRING TRY USE VAR WHILEroot : statementstatement : expressionexpression : calculate\n    calculate : calculate baseoperator INT\n        | calculate baseoperator FLOAT\n        | INT\n        | FLOAT\n    \n    baseoperator : PLUS\n        | MINUS\n        | MUL\n        | DIV\n    empty : '
    
_lr_action_items = {'INT':([0,7,8,9,10,11,],[5,12,-8,-9,-10,-11,]),'FLOAT':([0,7,8,9,10,11,],[6,13,-8,-9,-10,-11,]),'$end':([1,2,3,4,5,6,12,13,],[0,-1,-2,-3,-6,-7,-4,-5,]),'PLUS':([4,5,6,12,13,],[8,-6,-7,-4,-5,]),'MINUS':([4,5,6,12,13,],[9,-6,-7,-4,-5,]),'MUL':([4,5,6,12,13,],[10,-6,-7,-4,-5,]),'DIV':([4,5,6,12,13,],[11,-6,-7,-4,-5,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'root':([0,],[1,]),'statement':([0,],[2,]),'expression':([0,],[3,]),'calculate':([0,],[4,]),'baseoperator':([4,],[7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> root","S'",1,None,None,None),
  ('root -> statement','root',1,'p_root','main.py',1059),
  ('statement -> expression','statement',1,'p_statement','main.py',1063),
  ('expression -> calculate','expression',1,'p_expression','main.py',1067),
  ('calculate -> calculate baseoperator INT','calculate',3,'p_calculate','main.py',1072),
  ('calculate -> calculate baseoperator FLOAT','calculate',3,'p_calculate','main.py',1073),
  ('calculate -> INT','calculate',1,'p_calculate','main.py',1074),
  ('calculate -> FLOAT','calculate',1,'p_calculate','main.py',1075),
  ('baseoperator -> PLUS','baseoperator',1,'p_baseOperator','main.py',1081),
  ('baseoperator -> MINUS','baseoperator',1,'p_baseOperator','main.py',1082),
  ('baseoperator -> MUL','baseoperator',1,'p_baseOperator','main.py',1083),
  ('baseoperator -> DIV','baseoperator',1,'p_baseOperator','main.py',1084),
  ('empty -> <empty>','empty',0,'p_empty','main.py',1091),
]
