Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    ELSE

Grammar

Rule 0     S' -> root
Rule 1     root -> expression
Rule 2     expression -> expression variable_declaration SEMI
Rule 3     expression -> expression variable_value_change SEMI
Rule 4     expression -> expression if_statement
Rule 5     expression -> expression function
Rule 6     expression -> expression function_call SEMI
Rule 7     expression -> expression repeat
Rule 8     expression -> expression for
Rule 9     expression -> expression while
Rule 10    expression -> expression use
Rule 11    expression -> variable_declaration SEMI
Rule 12    expression -> variable_value_change SEMI
Rule 13    expression -> if_statement
Rule 14    expression -> function
Rule 15    expression -> function_call
Rule 16    expression -> repeat
Rule 17    expression -> for
Rule 18    expression -> while
Rule 19    expression -> use
Rule 20    expression -> empty
Rule 21    for -> for_head for_body
Rule 22    for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB
Rule 23    for_body -> LMB expression RMB
Rule 24    while -> while_head while_body
Rule 25    while_head -> WHILE LSB condition RSB
Rule 26    while_body -> LMB expression RMB
Rule 27    repeat -> repeat_head repeat_body
Rule 28    repeat_head -> REPEAT LSB calculate RSB
Rule 29    repeat_body -> LMB expression RMB
Rule 30    function -> function_head function_body
Rule 31    function_head -> FUNCTION IDENTIFIER LSB empty RSB
Rule 32    function_head -> FUNCTION IDENTIFIER LSB parameter RSB
Rule 33    function_body -> LMB expression RMB
Rule 34    function_call -> IDENTIFIER LSB parameter RSB
Rule 35    parameter -> parameter COMMA calculate
Rule 36    parameter -> calculate
Rule 37    parameter -> empty
Rule 38    if_statement -> if_statement_head if_statement_body
Rule 39    if_statement_head -> IF LSB condition RSB
Rule 40    if_statement_body -> LMB expression RMB
Rule 41    condition -> condition LB calculate
Rule 42    condition -> condition RB calculate
Rule 43    condition -> condition LB EQUAL calculate
Rule 44    condition -> condition RB EQUAL calculate
Rule 45    condition -> condition EQUAL calculate
Rule 46    condition -> calculate
Rule 47    use -> USE IDENTIFIER
Rule 48    variable_value_change -> IDENTIFIER EQUAL LIST
Rule 49    variable_value_change -> IDENTIFIER EQUAL calculate
Rule 50    variable_declaration -> VAR IDENTIFIER EQUAL LIST
Rule 51    variable_declaration -> VAR IDENTIFIER EQUAL calculate
Rule 52    variable_declaration -> VAR IDENTIFIER
Rule 53    calculate -> calculate PLUS calculate
Rule 54    calculate -> calculate MINUS calculate
Rule 55    calculate -> MINUS calculate
Rule 56    calculate -> calculate MUL calculate
Rule 57    calculate -> calculate DIV calculate
Rule 58    calculate -> INT
Rule 59    calculate -> FLOAT
Rule 60    calculate -> STRING
Rule 61    calculate -> IDENTIFIER
Rule 62    calculate -> LSB calculate RSB
Rule 63    empty -> <empty>

Terminals, with rules where they appear

COLON                : 
COMMA                : 35
DIV                  : 57
ELSE                 : 
EQUAL                : 43 44 45 48 49 50 51
FLOAT                : 59
FOR                  : 22
FUNCTION             : 31 32
IDENTIFIER           : 22 22 31 32 34 47 48 49 50 51 52 61
IF                   : 39
IN                   : 22
INT                  : 58
LB                   : 41 43
LIST                 : 48 50
LMB                  : 23 26 29 33 40
LSB                  : 22 25 28 31 32 34 39 62
MINUS                : 54 55
MUL                  : 56
PLUS                 : 53
RB                   : 42 44
REPEAT               : 28
RMB                  : 23 26 29 33 40
RSB                  : 22 25 28 31 32 34 39 62
SEMI                 : 2 3 6 11 12
STRING               : 60
USE                  : 47
VAR                  : 50 51 52
WHILE                : 25
error                : 

Nonterminals, with rules where they appear

calculate            : 28 35 36 41 42 43 44 45 46 49 51 53 53 54 54 55 56 56 57 57 62
condition            : 25 39 41 42 43 44 45
empty                : 20 31 37
expression           : 1 2 3 4 5 6 7 8 9 10 23 26 29 33 40
for                  : 8 17
for_body             : 21
for_head             : 21
function             : 5 14
function_body        : 30
function_call        : 6 15
function_head        : 30
if_statement         : 4 13
if_statement_body    : 38
if_statement_head    : 38
parameter            : 32 34 35
repeat               : 7 16
repeat_body          : 27
repeat_head          : 27
root                 : 0
use                  : 10 19
variable_declaration : 2 11
variable_value_change : 3 12
while                : 9 18
while_body           : 24
while_head           : 24

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . expression
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (50) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (51) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (52) variable_declaration -> . VAR IDENTIFIER
    (48) variable_value_change -> . IDENTIFIER EQUAL LIST
    (49) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_head if_statement_body
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (47) use -> . USE IDENTIFIER
    (63) empty -> .
    (39) if_statement_head -> . IF LSB condition RSB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    $end            reduce using rule 63 (empty -> .)
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

  ! VAR             [ reduce using rule 63 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 63 (empty -> .) ]
  ! USE             [ reduce using rule 63 (empty -> .) ]
  ! IF              [ reduce using rule 63 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 63 (empty -> .) ]
  ! REPEAT          [ reduce using rule 63 (empty -> .) ]
  ! FOR             [ reduce using rule 63 (empty -> .) ]
  ! WHILE           [ reduce using rule 63 (empty -> .) ]

    root                           shift and go to state 1
    expression                     shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_head              shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 1

    (0) S' -> root .



state 2

    (1) root -> expression .
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (50) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (51) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (52) variable_declaration -> . VAR IDENTIFIER
    (48) variable_value_change -> . IDENTIFIER EQUAL LIST
    (49) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_head if_statement_body
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (47) use -> . USE IDENTIFIER
    (39) if_statement_head -> . IF LSB condition RSB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

    $end            reduce using rule 1 (root -> expression .)
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

    variable_declaration           shift and go to state 26
    variable_value_change          shift and go to state 27
    if_statement                   shift and go to state 28
    function                       shift and go to state 29
    function_call                  shift and go to state 30
    repeat                         shift and go to state 31
    for                            shift and go to state 32
    while                          shift and go to state 33
    use                            shift and go to state 34
    if_statement_head              shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 3

    (11) expression -> variable_declaration . SEMI

    SEMI            shift and go to state 35


state 4

    (12) expression -> variable_value_change . SEMI

    SEMI            shift and go to state 36


state 5

    (13) expression -> if_statement .

    VAR             reduce using rule 13 (expression -> if_statement .)
    IDENTIFIER      reduce using rule 13 (expression -> if_statement .)
    USE             reduce using rule 13 (expression -> if_statement .)
    IF              reduce using rule 13 (expression -> if_statement .)
    FUNCTION        reduce using rule 13 (expression -> if_statement .)
    REPEAT          reduce using rule 13 (expression -> if_statement .)
    FOR             reduce using rule 13 (expression -> if_statement .)
    WHILE           reduce using rule 13 (expression -> if_statement .)
    $end            reduce using rule 13 (expression -> if_statement .)
    RMB             reduce using rule 13 (expression -> if_statement .)


state 6

    (14) expression -> function .

    VAR             reduce using rule 14 (expression -> function .)
    IDENTIFIER      reduce using rule 14 (expression -> function .)
    USE             reduce using rule 14 (expression -> function .)
    IF              reduce using rule 14 (expression -> function .)
    FUNCTION        reduce using rule 14 (expression -> function .)
    REPEAT          reduce using rule 14 (expression -> function .)
    FOR             reduce using rule 14 (expression -> function .)
    WHILE           reduce using rule 14 (expression -> function .)
    $end            reduce using rule 14 (expression -> function .)
    RMB             reduce using rule 14 (expression -> function .)


state 7

    (15) expression -> function_call .

    VAR             reduce using rule 15 (expression -> function_call .)
    IDENTIFIER      reduce using rule 15 (expression -> function_call .)
    USE             reduce using rule 15 (expression -> function_call .)
    IF              reduce using rule 15 (expression -> function_call .)
    FUNCTION        reduce using rule 15 (expression -> function_call .)
    REPEAT          reduce using rule 15 (expression -> function_call .)
    FOR             reduce using rule 15 (expression -> function_call .)
    WHILE           reduce using rule 15 (expression -> function_call .)
    $end            reduce using rule 15 (expression -> function_call .)
    RMB             reduce using rule 15 (expression -> function_call .)


state 8

    (16) expression -> repeat .

    VAR             reduce using rule 16 (expression -> repeat .)
    IDENTIFIER      reduce using rule 16 (expression -> repeat .)
    USE             reduce using rule 16 (expression -> repeat .)
    IF              reduce using rule 16 (expression -> repeat .)
    FUNCTION        reduce using rule 16 (expression -> repeat .)
    REPEAT          reduce using rule 16 (expression -> repeat .)
    FOR             reduce using rule 16 (expression -> repeat .)
    WHILE           reduce using rule 16 (expression -> repeat .)
    $end            reduce using rule 16 (expression -> repeat .)
    RMB             reduce using rule 16 (expression -> repeat .)


state 9

    (17) expression -> for .

    VAR             reduce using rule 17 (expression -> for .)
    IDENTIFIER      reduce using rule 17 (expression -> for .)
    USE             reduce using rule 17 (expression -> for .)
    IF              reduce using rule 17 (expression -> for .)
    FUNCTION        reduce using rule 17 (expression -> for .)
    REPEAT          reduce using rule 17 (expression -> for .)
    FOR             reduce using rule 17 (expression -> for .)
    WHILE           reduce using rule 17 (expression -> for .)
    $end            reduce using rule 17 (expression -> for .)
    RMB             reduce using rule 17 (expression -> for .)


state 10

    (18) expression -> while .

    VAR             reduce using rule 18 (expression -> while .)
    IDENTIFIER      reduce using rule 18 (expression -> while .)
    USE             reduce using rule 18 (expression -> while .)
    IF              reduce using rule 18 (expression -> while .)
    FUNCTION        reduce using rule 18 (expression -> while .)
    REPEAT          reduce using rule 18 (expression -> while .)
    FOR             reduce using rule 18 (expression -> while .)
    WHILE           reduce using rule 18 (expression -> while .)
    $end            reduce using rule 18 (expression -> while .)
    RMB             reduce using rule 18 (expression -> while .)


state 11

    (19) expression -> use .

    VAR             reduce using rule 19 (expression -> use .)
    IDENTIFIER      reduce using rule 19 (expression -> use .)
    USE             reduce using rule 19 (expression -> use .)
    IF              reduce using rule 19 (expression -> use .)
    FUNCTION        reduce using rule 19 (expression -> use .)
    REPEAT          reduce using rule 19 (expression -> use .)
    FOR             reduce using rule 19 (expression -> use .)
    WHILE           reduce using rule 19 (expression -> use .)
    $end            reduce using rule 19 (expression -> use .)
    RMB             reduce using rule 19 (expression -> use .)


state 12

    (20) expression -> empty .

    VAR             reduce using rule 20 (expression -> empty .)
    IDENTIFIER      reduce using rule 20 (expression -> empty .)
    USE             reduce using rule 20 (expression -> empty .)
    IF              reduce using rule 20 (expression -> empty .)
    FUNCTION        reduce using rule 20 (expression -> empty .)
    REPEAT          reduce using rule 20 (expression -> empty .)
    FOR             reduce using rule 20 (expression -> empty .)
    WHILE           reduce using rule 20 (expression -> empty .)
    $end            reduce using rule 20 (expression -> empty .)
    RMB             reduce using rule 20 (expression -> empty .)


state 13

    (50) variable_declaration -> VAR . IDENTIFIER EQUAL LIST
    (51) variable_declaration -> VAR . IDENTIFIER EQUAL calculate
    (52) variable_declaration -> VAR . IDENTIFIER

    IDENTIFIER      shift and go to state 37


state 14

    (48) variable_value_change -> IDENTIFIER . EQUAL LIST
    (49) variable_value_change -> IDENTIFIER . EQUAL calculate
    (34) function_call -> IDENTIFIER . LSB parameter RSB

    EQUAL           shift and go to state 38
    LSB             shift and go to state 39


state 15

    (38) if_statement -> if_statement_head . if_statement_body
    (40) if_statement_body -> . LMB expression RMB

    LMB             shift and go to state 41

    if_statement_body              shift and go to state 40

state 16

    (30) function -> function_head . function_body
    (33) function_body -> . LMB expression RMB

    LMB             shift and go to state 43

    function_body                  shift and go to state 42

state 17

    (27) repeat -> repeat_head . repeat_body
    (29) repeat_body -> . LMB expression RMB

    LMB             shift and go to state 45

    repeat_body                    shift and go to state 44

state 18

    (21) for -> for_head . for_body
    (23) for_body -> . LMB expression RMB

    LMB             shift and go to state 47

    for_body                       shift and go to state 46

state 19

    (24) while -> while_head . while_body
    (26) while_body -> . LMB expression RMB

    LMB             shift and go to state 49

    while_body                     shift and go to state 48

state 20

    (47) use -> USE . IDENTIFIER

    IDENTIFIER      shift and go to state 50


state 21

    (39) if_statement_head -> IF . LSB condition RSB

    LSB             shift and go to state 51


state 22

    (31) function_head -> FUNCTION . IDENTIFIER LSB empty RSB
    (32) function_head -> FUNCTION . IDENTIFIER LSB parameter RSB

    IDENTIFIER      shift and go to state 52


state 23

    (28) repeat_head -> REPEAT . LSB calculate RSB

    LSB             shift and go to state 53


state 24

    (22) for_head -> FOR . LSB IDENTIFIER IN IDENTIFIER RSB

    LSB             shift and go to state 54


state 25

    (25) while_head -> WHILE . LSB condition RSB

    LSB             shift and go to state 55


state 26

    (2) expression -> expression variable_declaration . SEMI

    SEMI            shift and go to state 56


state 27

    (3) expression -> expression variable_value_change . SEMI

    SEMI            shift and go to state 57


state 28

    (4) expression -> expression if_statement .

    VAR             reduce using rule 4 (expression -> expression if_statement .)
    IDENTIFIER      reduce using rule 4 (expression -> expression if_statement .)
    USE             reduce using rule 4 (expression -> expression if_statement .)
    IF              reduce using rule 4 (expression -> expression if_statement .)
    FUNCTION        reduce using rule 4 (expression -> expression if_statement .)
    REPEAT          reduce using rule 4 (expression -> expression if_statement .)
    FOR             reduce using rule 4 (expression -> expression if_statement .)
    WHILE           reduce using rule 4 (expression -> expression if_statement .)
    $end            reduce using rule 4 (expression -> expression if_statement .)
    RMB             reduce using rule 4 (expression -> expression if_statement .)


state 29

    (5) expression -> expression function .

    VAR             reduce using rule 5 (expression -> expression function .)
    IDENTIFIER      reduce using rule 5 (expression -> expression function .)
    USE             reduce using rule 5 (expression -> expression function .)
    IF              reduce using rule 5 (expression -> expression function .)
    FUNCTION        reduce using rule 5 (expression -> expression function .)
    REPEAT          reduce using rule 5 (expression -> expression function .)
    FOR             reduce using rule 5 (expression -> expression function .)
    WHILE           reduce using rule 5 (expression -> expression function .)
    $end            reduce using rule 5 (expression -> expression function .)
    RMB             reduce using rule 5 (expression -> expression function .)


state 30

    (6) expression -> expression function_call . SEMI

    SEMI            shift and go to state 58


state 31

    (7) expression -> expression repeat .

    VAR             reduce using rule 7 (expression -> expression repeat .)
    IDENTIFIER      reduce using rule 7 (expression -> expression repeat .)
    USE             reduce using rule 7 (expression -> expression repeat .)
    IF              reduce using rule 7 (expression -> expression repeat .)
    FUNCTION        reduce using rule 7 (expression -> expression repeat .)
    REPEAT          reduce using rule 7 (expression -> expression repeat .)
    FOR             reduce using rule 7 (expression -> expression repeat .)
    WHILE           reduce using rule 7 (expression -> expression repeat .)
    $end            reduce using rule 7 (expression -> expression repeat .)
    RMB             reduce using rule 7 (expression -> expression repeat .)


state 32

    (8) expression -> expression for .

    VAR             reduce using rule 8 (expression -> expression for .)
    IDENTIFIER      reduce using rule 8 (expression -> expression for .)
    USE             reduce using rule 8 (expression -> expression for .)
    IF              reduce using rule 8 (expression -> expression for .)
    FUNCTION        reduce using rule 8 (expression -> expression for .)
    REPEAT          reduce using rule 8 (expression -> expression for .)
    FOR             reduce using rule 8 (expression -> expression for .)
    WHILE           reduce using rule 8 (expression -> expression for .)
    $end            reduce using rule 8 (expression -> expression for .)
    RMB             reduce using rule 8 (expression -> expression for .)


state 33

    (9) expression -> expression while .

    VAR             reduce using rule 9 (expression -> expression while .)
    IDENTIFIER      reduce using rule 9 (expression -> expression while .)
    USE             reduce using rule 9 (expression -> expression while .)
    IF              reduce using rule 9 (expression -> expression while .)
    FUNCTION        reduce using rule 9 (expression -> expression while .)
    REPEAT          reduce using rule 9 (expression -> expression while .)
    FOR             reduce using rule 9 (expression -> expression while .)
    WHILE           reduce using rule 9 (expression -> expression while .)
    $end            reduce using rule 9 (expression -> expression while .)
    RMB             reduce using rule 9 (expression -> expression while .)


state 34

    (10) expression -> expression use .

    VAR             reduce using rule 10 (expression -> expression use .)
    IDENTIFIER      reduce using rule 10 (expression -> expression use .)
    USE             reduce using rule 10 (expression -> expression use .)
    IF              reduce using rule 10 (expression -> expression use .)
    FUNCTION        reduce using rule 10 (expression -> expression use .)
    REPEAT          reduce using rule 10 (expression -> expression use .)
    FOR             reduce using rule 10 (expression -> expression use .)
    WHILE           reduce using rule 10 (expression -> expression use .)
    $end            reduce using rule 10 (expression -> expression use .)
    RMB             reduce using rule 10 (expression -> expression use .)


state 35

    (11) expression -> variable_declaration SEMI .

    VAR             reduce using rule 11 (expression -> variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 11 (expression -> variable_declaration SEMI .)
    USE             reduce using rule 11 (expression -> variable_declaration SEMI .)
    IF              reduce using rule 11 (expression -> variable_declaration SEMI .)
    FUNCTION        reduce using rule 11 (expression -> variable_declaration SEMI .)
    REPEAT          reduce using rule 11 (expression -> variable_declaration SEMI .)
    FOR             reduce using rule 11 (expression -> variable_declaration SEMI .)
    WHILE           reduce using rule 11 (expression -> variable_declaration SEMI .)
    $end            reduce using rule 11 (expression -> variable_declaration SEMI .)
    RMB             reduce using rule 11 (expression -> variable_declaration SEMI .)


state 36

    (12) expression -> variable_value_change SEMI .

    VAR             reduce using rule 12 (expression -> variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 12 (expression -> variable_value_change SEMI .)
    USE             reduce using rule 12 (expression -> variable_value_change SEMI .)
    IF              reduce using rule 12 (expression -> variable_value_change SEMI .)
    FUNCTION        reduce using rule 12 (expression -> variable_value_change SEMI .)
    REPEAT          reduce using rule 12 (expression -> variable_value_change SEMI .)
    FOR             reduce using rule 12 (expression -> variable_value_change SEMI .)
    WHILE           reduce using rule 12 (expression -> variable_value_change SEMI .)
    $end            reduce using rule 12 (expression -> variable_value_change SEMI .)
    RMB             reduce using rule 12 (expression -> variable_value_change SEMI .)


state 37

    (50) variable_declaration -> VAR IDENTIFIER . EQUAL LIST
    (51) variable_declaration -> VAR IDENTIFIER . EQUAL calculate
    (52) variable_declaration -> VAR IDENTIFIER .

    EQUAL           shift and go to state 59
    SEMI            reduce using rule 52 (variable_declaration -> VAR IDENTIFIER .)


state 38

    (48) variable_value_change -> IDENTIFIER EQUAL . LIST
    (49) variable_value_change -> IDENTIFIER EQUAL . calculate
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB

    LIST            shift and go to state 61
    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67

    calculate                      shift and go to state 62

state 39

    (34) function_call -> IDENTIFIER LSB . parameter RSB
    (35) parameter -> . parameter COMMA calculate
    (36) parameter -> . calculate
    (37) parameter -> . empty
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB
    (63) empty -> .

    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67
    RSB             reduce using rule 63 (empty -> .)
    COMMA           reduce using rule 63 (empty -> .)

    parameter                      shift and go to state 68
    calculate                      shift and go to state 69
    empty                          shift and go to state 70

state 40

    (38) if_statement -> if_statement_head if_statement_body .

    VAR             reduce using rule 38 (if_statement -> if_statement_head if_statement_body .)
    IDENTIFIER      reduce using rule 38 (if_statement -> if_statement_head if_statement_body .)
    USE             reduce using rule 38 (if_statement -> if_statement_head if_statement_body .)
    IF              reduce using rule 38 (if_statement -> if_statement_head if_statement_body .)
    FUNCTION        reduce using rule 38 (if_statement -> if_statement_head if_statement_body .)
    REPEAT          reduce using rule 38 (if_statement -> if_statement_head if_statement_body .)
    FOR             reduce using rule 38 (if_statement -> if_statement_head if_statement_body .)
    WHILE           reduce using rule 38 (if_statement -> if_statement_head if_statement_body .)
    $end            reduce using rule 38 (if_statement -> if_statement_head if_statement_body .)
    RMB             reduce using rule 38 (if_statement -> if_statement_head if_statement_body .)


state 41

    (40) if_statement_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (50) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (51) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (52) variable_declaration -> . VAR IDENTIFIER
    (48) variable_value_change -> . IDENTIFIER EQUAL LIST
    (49) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_head if_statement_body
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (47) use -> . USE IDENTIFIER
    (63) empty -> .
    (39) if_statement_head -> . IF LSB condition RSB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    RMB             reduce using rule 63 (empty -> .)
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

  ! VAR             [ reduce using rule 63 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 63 (empty -> .) ]
  ! USE             [ reduce using rule 63 (empty -> .) ]
  ! IF              [ reduce using rule 63 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 63 (empty -> .) ]
  ! REPEAT          [ reduce using rule 63 (empty -> .) ]
  ! FOR             [ reduce using rule 63 (empty -> .) ]
  ! WHILE           [ reduce using rule 63 (empty -> .) ]

    expression                     shift and go to state 71
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_head              shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 42

    (30) function -> function_head function_body .

    VAR             reduce using rule 30 (function -> function_head function_body .)
    IDENTIFIER      reduce using rule 30 (function -> function_head function_body .)
    USE             reduce using rule 30 (function -> function_head function_body .)
    IF              reduce using rule 30 (function -> function_head function_body .)
    FUNCTION        reduce using rule 30 (function -> function_head function_body .)
    REPEAT          reduce using rule 30 (function -> function_head function_body .)
    FOR             reduce using rule 30 (function -> function_head function_body .)
    WHILE           reduce using rule 30 (function -> function_head function_body .)
    $end            reduce using rule 30 (function -> function_head function_body .)
    RMB             reduce using rule 30 (function -> function_head function_body .)


state 43

    (33) function_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (50) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (51) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (52) variable_declaration -> . VAR IDENTIFIER
    (48) variable_value_change -> . IDENTIFIER EQUAL LIST
    (49) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_head if_statement_body
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (47) use -> . USE IDENTIFIER
    (63) empty -> .
    (39) if_statement_head -> . IF LSB condition RSB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    RMB             reduce using rule 63 (empty -> .)
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

  ! VAR             [ reduce using rule 63 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 63 (empty -> .) ]
  ! USE             [ reduce using rule 63 (empty -> .) ]
  ! IF              [ reduce using rule 63 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 63 (empty -> .) ]
  ! REPEAT          [ reduce using rule 63 (empty -> .) ]
  ! FOR             [ reduce using rule 63 (empty -> .) ]
  ! WHILE           [ reduce using rule 63 (empty -> .) ]

    expression                     shift and go to state 72
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_head              shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 44

    (27) repeat -> repeat_head repeat_body .

    VAR             reduce using rule 27 (repeat -> repeat_head repeat_body .)
    IDENTIFIER      reduce using rule 27 (repeat -> repeat_head repeat_body .)
    USE             reduce using rule 27 (repeat -> repeat_head repeat_body .)
    IF              reduce using rule 27 (repeat -> repeat_head repeat_body .)
    FUNCTION        reduce using rule 27 (repeat -> repeat_head repeat_body .)
    REPEAT          reduce using rule 27 (repeat -> repeat_head repeat_body .)
    FOR             reduce using rule 27 (repeat -> repeat_head repeat_body .)
    WHILE           reduce using rule 27 (repeat -> repeat_head repeat_body .)
    $end            reduce using rule 27 (repeat -> repeat_head repeat_body .)
    RMB             reduce using rule 27 (repeat -> repeat_head repeat_body .)


state 45

    (29) repeat_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (50) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (51) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (52) variable_declaration -> . VAR IDENTIFIER
    (48) variable_value_change -> . IDENTIFIER EQUAL LIST
    (49) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_head if_statement_body
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (47) use -> . USE IDENTIFIER
    (63) empty -> .
    (39) if_statement_head -> . IF LSB condition RSB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    RMB             reduce using rule 63 (empty -> .)
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

  ! VAR             [ reduce using rule 63 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 63 (empty -> .) ]
  ! USE             [ reduce using rule 63 (empty -> .) ]
  ! IF              [ reduce using rule 63 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 63 (empty -> .) ]
  ! REPEAT          [ reduce using rule 63 (empty -> .) ]
  ! FOR             [ reduce using rule 63 (empty -> .) ]
  ! WHILE           [ reduce using rule 63 (empty -> .) ]

    expression                     shift and go to state 73
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_head              shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 46

    (21) for -> for_head for_body .

    VAR             reduce using rule 21 (for -> for_head for_body .)
    IDENTIFIER      reduce using rule 21 (for -> for_head for_body .)
    USE             reduce using rule 21 (for -> for_head for_body .)
    IF              reduce using rule 21 (for -> for_head for_body .)
    FUNCTION        reduce using rule 21 (for -> for_head for_body .)
    REPEAT          reduce using rule 21 (for -> for_head for_body .)
    FOR             reduce using rule 21 (for -> for_head for_body .)
    WHILE           reduce using rule 21 (for -> for_head for_body .)
    $end            reduce using rule 21 (for -> for_head for_body .)
    RMB             reduce using rule 21 (for -> for_head for_body .)


state 47

    (23) for_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (50) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (51) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (52) variable_declaration -> . VAR IDENTIFIER
    (48) variable_value_change -> . IDENTIFIER EQUAL LIST
    (49) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_head if_statement_body
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (47) use -> . USE IDENTIFIER
    (63) empty -> .
    (39) if_statement_head -> . IF LSB condition RSB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    RMB             reduce using rule 63 (empty -> .)
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

  ! VAR             [ reduce using rule 63 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 63 (empty -> .) ]
  ! USE             [ reduce using rule 63 (empty -> .) ]
  ! IF              [ reduce using rule 63 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 63 (empty -> .) ]
  ! REPEAT          [ reduce using rule 63 (empty -> .) ]
  ! FOR             [ reduce using rule 63 (empty -> .) ]
  ! WHILE           [ reduce using rule 63 (empty -> .) ]

    expression                     shift and go to state 74
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_head              shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 48

    (24) while -> while_head while_body .

    VAR             reduce using rule 24 (while -> while_head while_body .)
    IDENTIFIER      reduce using rule 24 (while -> while_head while_body .)
    USE             reduce using rule 24 (while -> while_head while_body .)
    IF              reduce using rule 24 (while -> while_head while_body .)
    FUNCTION        reduce using rule 24 (while -> while_head while_body .)
    REPEAT          reduce using rule 24 (while -> while_head while_body .)
    FOR             reduce using rule 24 (while -> while_head while_body .)
    WHILE           reduce using rule 24 (while -> while_head while_body .)
    $end            reduce using rule 24 (while -> while_head while_body .)
    RMB             reduce using rule 24 (while -> while_head while_body .)


state 49

    (26) while_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . variable_declaration SEMI
    (12) expression -> . variable_value_change SEMI
    (13) expression -> . if_statement
    (14) expression -> . function
    (15) expression -> . function_call
    (16) expression -> . repeat
    (17) expression -> . for
    (18) expression -> . while
    (19) expression -> . use
    (20) expression -> . empty
    (50) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (51) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (52) variable_declaration -> . VAR IDENTIFIER
    (48) variable_value_change -> . IDENTIFIER EQUAL LIST
    (49) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_head if_statement_body
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (47) use -> . USE IDENTIFIER
    (63) empty -> .
    (39) if_statement_head -> . IF LSB condition RSB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    RMB             reduce using rule 63 (empty -> .)
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

  ! VAR             [ reduce using rule 63 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 63 (empty -> .) ]
  ! USE             [ reduce using rule 63 (empty -> .) ]
  ! IF              [ reduce using rule 63 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 63 (empty -> .) ]
  ! REPEAT          [ reduce using rule 63 (empty -> .) ]
  ! FOR             [ reduce using rule 63 (empty -> .) ]
  ! WHILE           [ reduce using rule 63 (empty -> .) ]

    expression                     shift and go to state 75
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    empty                          shift and go to state 12
    if_statement_head              shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 50

    (47) use -> USE IDENTIFIER .

    VAR             reduce using rule 47 (use -> USE IDENTIFIER .)
    IDENTIFIER      reduce using rule 47 (use -> USE IDENTIFIER .)
    USE             reduce using rule 47 (use -> USE IDENTIFIER .)
    IF              reduce using rule 47 (use -> USE IDENTIFIER .)
    FUNCTION        reduce using rule 47 (use -> USE IDENTIFIER .)
    REPEAT          reduce using rule 47 (use -> USE IDENTIFIER .)
    FOR             reduce using rule 47 (use -> USE IDENTIFIER .)
    WHILE           reduce using rule 47 (use -> USE IDENTIFIER .)
    $end            reduce using rule 47 (use -> USE IDENTIFIER .)
    RMB             reduce using rule 47 (use -> USE IDENTIFIER .)


state 51

    (39) if_statement_head -> IF LSB . condition RSB
    (41) condition -> . condition LB calculate
    (42) condition -> . condition RB calculate
    (43) condition -> . condition LB EQUAL calculate
    (44) condition -> . condition RB EQUAL calculate
    (45) condition -> . condition EQUAL calculate
    (46) condition -> . calculate
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67

    condition                      shift and go to state 76
    calculate                      shift and go to state 77

state 52

    (31) function_head -> FUNCTION IDENTIFIER . LSB empty RSB
    (32) function_head -> FUNCTION IDENTIFIER . LSB parameter RSB

    LSB             shift and go to state 78


state 53

    (28) repeat_head -> REPEAT LSB . calculate RSB
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67

    calculate                      shift and go to state 79

state 54

    (22) for_head -> FOR LSB . IDENTIFIER IN IDENTIFIER RSB

    IDENTIFIER      shift and go to state 80


state 55

    (25) while_head -> WHILE LSB . condition RSB
    (41) condition -> . condition LB calculate
    (42) condition -> . condition RB calculate
    (43) condition -> . condition LB EQUAL calculate
    (44) condition -> . condition RB EQUAL calculate
    (45) condition -> . condition EQUAL calculate
    (46) condition -> . calculate
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67

    condition                      shift and go to state 81
    calculate                      shift and go to state 77

state 56

    (2) expression -> expression variable_declaration SEMI .

    VAR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    USE             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IF              reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FUNCTION        reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    REPEAT          reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FOR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    WHILE           reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    $end            reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    RMB             reduce using rule 2 (expression -> expression variable_declaration SEMI .)


state 57

    (3) expression -> expression variable_value_change SEMI .

    VAR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    USE             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IF              reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FUNCTION        reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    REPEAT          reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FOR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    WHILE           reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    $end            reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    RMB             reduce using rule 3 (expression -> expression variable_value_change SEMI .)


state 58

    (6) expression -> expression function_call SEMI .

    VAR             reduce using rule 6 (expression -> expression function_call SEMI .)
    IDENTIFIER      reduce using rule 6 (expression -> expression function_call SEMI .)
    USE             reduce using rule 6 (expression -> expression function_call SEMI .)
    IF              reduce using rule 6 (expression -> expression function_call SEMI .)
    FUNCTION        reduce using rule 6 (expression -> expression function_call SEMI .)
    REPEAT          reduce using rule 6 (expression -> expression function_call SEMI .)
    FOR             reduce using rule 6 (expression -> expression function_call SEMI .)
    WHILE           reduce using rule 6 (expression -> expression function_call SEMI .)
    $end            reduce using rule 6 (expression -> expression function_call SEMI .)
    RMB             reduce using rule 6 (expression -> expression function_call SEMI .)


state 59

    (50) variable_declaration -> VAR IDENTIFIER EQUAL . LIST
    (51) variable_declaration -> VAR IDENTIFIER EQUAL . calculate
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB

    LIST            shift and go to state 82
    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67

    calculate                      shift and go to state 83

state 60

    (61) calculate -> IDENTIFIER .

    PLUS            reduce using rule 61 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 61 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 61 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 61 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 61 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 61 (calculate -> IDENTIFIER .)
    COMMA           reduce using rule 61 (calculate -> IDENTIFIER .)
    LB              reduce using rule 61 (calculate -> IDENTIFIER .)
    RB              reduce using rule 61 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 61 (calculate -> IDENTIFIER .)


state 61

    (48) variable_value_change -> IDENTIFIER EQUAL LIST .

    SEMI            reduce using rule 48 (variable_value_change -> IDENTIFIER EQUAL LIST .)


state 62

    (49) variable_value_change -> IDENTIFIER EQUAL calculate .
    (53) calculate -> calculate . PLUS calculate
    (54) calculate -> calculate . MINUS calculate
    (56) calculate -> calculate . MUL calculate
    (57) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 49 (variable_value_change -> IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 63

    (55) calculate -> MINUS . calculate
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67

    calculate                      shift and go to state 88

state 64

    (58) calculate -> INT .

    PLUS            reduce using rule 58 (calculate -> INT .)
    MINUS           reduce using rule 58 (calculate -> INT .)
    MUL             reduce using rule 58 (calculate -> INT .)
    DIV             reduce using rule 58 (calculate -> INT .)
    SEMI            reduce using rule 58 (calculate -> INT .)
    RSB             reduce using rule 58 (calculate -> INT .)
    COMMA           reduce using rule 58 (calculate -> INT .)
    LB              reduce using rule 58 (calculate -> INT .)
    RB              reduce using rule 58 (calculate -> INT .)
    EQUAL           reduce using rule 58 (calculate -> INT .)


state 65

    (59) calculate -> FLOAT .

    PLUS            reduce using rule 59 (calculate -> FLOAT .)
    MINUS           reduce using rule 59 (calculate -> FLOAT .)
    MUL             reduce using rule 59 (calculate -> FLOAT .)
    DIV             reduce using rule 59 (calculate -> FLOAT .)
    SEMI            reduce using rule 59 (calculate -> FLOAT .)
    RSB             reduce using rule 59 (calculate -> FLOAT .)
    COMMA           reduce using rule 59 (calculate -> FLOAT .)
    LB              reduce using rule 59 (calculate -> FLOAT .)
    RB              reduce using rule 59 (calculate -> FLOAT .)
    EQUAL           reduce using rule 59 (calculate -> FLOAT .)


state 66

    (60) calculate -> STRING .

    PLUS            reduce using rule 60 (calculate -> STRING .)
    MINUS           reduce using rule 60 (calculate -> STRING .)
    MUL             reduce using rule 60 (calculate -> STRING .)
    DIV             reduce using rule 60 (calculate -> STRING .)
    SEMI            reduce using rule 60 (calculate -> STRING .)
    RSB             reduce using rule 60 (calculate -> STRING .)
    COMMA           reduce using rule 60 (calculate -> STRING .)
    LB              reduce using rule 60 (calculate -> STRING .)
    RB              reduce using rule 60 (calculate -> STRING .)
    EQUAL           reduce using rule 60 (calculate -> STRING .)


state 67

    (62) calculate -> LSB . calculate RSB
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67

    calculate                      shift and go to state 89

state 68

    (34) function_call -> IDENTIFIER LSB parameter . RSB
    (35) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 90
    COMMA           shift and go to state 91


state 69

    (36) parameter -> calculate .
    (53) calculate -> calculate . PLUS calculate
    (54) calculate -> calculate . MINUS calculate
    (56) calculate -> calculate . MUL calculate
    (57) calculate -> calculate . DIV calculate

    RSB             reduce using rule 36 (parameter -> calculate .)
    COMMA           reduce using rule 36 (parameter -> calculate .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 70

    (37) parameter -> empty .

    RSB             reduce using rule 37 (parameter -> empty .)
    COMMA           reduce using rule 37 (parameter -> empty .)


state 71

    (40) if_statement_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (50) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (51) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (52) variable_declaration -> . VAR IDENTIFIER
    (48) variable_value_change -> . IDENTIFIER EQUAL LIST
    (49) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_head if_statement_body
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (47) use -> . USE IDENTIFIER
    (39) if_statement_head -> . IF LSB condition RSB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

    RMB             shift and go to state 92
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

    variable_declaration           shift and go to state 26
    variable_value_change          shift and go to state 27
    if_statement                   shift and go to state 28
    function                       shift and go to state 29
    function_call                  shift and go to state 30
    repeat                         shift and go to state 31
    for                            shift and go to state 32
    while                          shift and go to state 33
    use                            shift and go to state 34
    if_statement_head              shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 72

    (33) function_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (50) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (51) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (52) variable_declaration -> . VAR IDENTIFIER
    (48) variable_value_change -> . IDENTIFIER EQUAL LIST
    (49) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_head if_statement_body
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (47) use -> . USE IDENTIFIER
    (39) if_statement_head -> . IF LSB condition RSB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

    RMB             shift and go to state 93
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

    variable_declaration           shift and go to state 26
    variable_value_change          shift and go to state 27
    if_statement                   shift and go to state 28
    function                       shift and go to state 29
    function_call                  shift and go to state 30
    repeat                         shift and go to state 31
    for                            shift and go to state 32
    while                          shift and go to state 33
    use                            shift and go to state 34
    if_statement_head              shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 73

    (29) repeat_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (50) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (51) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (52) variable_declaration -> . VAR IDENTIFIER
    (48) variable_value_change -> . IDENTIFIER EQUAL LIST
    (49) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_head if_statement_body
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (47) use -> . USE IDENTIFIER
    (39) if_statement_head -> . IF LSB condition RSB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

    RMB             shift and go to state 94
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

    variable_declaration           shift and go to state 26
    variable_value_change          shift and go to state 27
    if_statement                   shift and go to state 28
    function                       shift and go to state 29
    function_call                  shift and go to state 30
    repeat                         shift and go to state 31
    for                            shift and go to state 32
    while                          shift and go to state 33
    use                            shift and go to state 34
    if_statement_head              shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 74

    (23) for_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (50) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (51) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (52) variable_declaration -> . VAR IDENTIFIER
    (48) variable_value_change -> . IDENTIFIER EQUAL LIST
    (49) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_head if_statement_body
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (47) use -> . USE IDENTIFIER
    (39) if_statement_head -> . IF LSB condition RSB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

    RMB             shift and go to state 95
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

    variable_declaration           shift and go to state 26
    variable_value_change          shift and go to state 27
    if_statement                   shift and go to state 28
    function                       shift and go to state 29
    function_call                  shift and go to state 30
    repeat                         shift and go to state 31
    for                            shift and go to state 32
    while                          shift and go to state 33
    use                            shift and go to state 34
    if_statement_head              shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 75

    (26) while_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (50) variable_declaration -> . VAR IDENTIFIER EQUAL LIST
    (51) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (52) variable_declaration -> . VAR IDENTIFIER
    (48) variable_value_change -> . IDENTIFIER EQUAL LIST
    (49) variable_value_change -> . IDENTIFIER EQUAL calculate
    (38) if_statement -> . if_statement_head if_statement_body
    (30) function -> . function_head function_body
    (34) function_call -> . IDENTIFIER LSB parameter RSB
    (27) repeat -> . repeat_head repeat_body
    (21) for -> . for_head for_body
    (24) while -> . while_head while_body
    (47) use -> . USE IDENTIFIER
    (39) if_statement_head -> . IF LSB condition RSB
    (31) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (32) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (28) repeat_head -> . REPEAT LSB calculate RSB
    (22) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (25) while_head -> . WHILE LSB condition RSB

    RMB             shift and go to state 96
    VAR             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    USE             shift and go to state 20
    IF              shift and go to state 21
    FUNCTION        shift and go to state 22
    REPEAT          shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

    variable_declaration           shift and go to state 26
    variable_value_change          shift and go to state 27
    if_statement                   shift and go to state 28
    function                       shift and go to state 29
    function_call                  shift and go to state 30
    repeat                         shift and go to state 31
    for                            shift and go to state 32
    while                          shift and go to state 33
    use                            shift and go to state 34
    if_statement_head              shift and go to state 15
    function_head                  shift and go to state 16
    repeat_head                    shift and go to state 17
    for_head                       shift and go to state 18
    while_head                     shift and go to state 19

state 76

    (39) if_statement_head -> IF LSB condition . RSB
    (41) condition -> condition . LB calculate
    (42) condition -> condition . RB calculate
    (43) condition -> condition . LB EQUAL calculate
    (44) condition -> condition . RB EQUAL calculate
    (45) condition -> condition . EQUAL calculate

    RSB             shift and go to state 97
    LB              shift and go to state 98
    RB              shift and go to state 99
    EQUAL           shift and go to state 100


state 77

    (46) condition -> calculate .
    (53) calculate -> calculate . PLUS calculate
    (54) calculate -> calculate . MINUS calculate
    (56) calculate -> calculate . MUL calculate
    (57) calculate -> calculate . DIV calculate

    RSB             reduce using rule 46 (condition -> calculate .)
    LB              reduce using rule 46 (condition -> calculate .)
    RB              reduce using rule 46 (condition -> calculate .)
    EQUAL           reduce using rule 46 (condition -> calculate .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 78

    (31) function_head -> FUNCTION IDENTIFIER LSB . empty RSB
    (32) function_head -> FUNCTION IDENTIFIER LSB . parameter RSB
    (63) empty -> .
    (35) parameter -> . parameter COMMA calculate
    (36) parameter -> . calculate
    (37) parameter -> . empty
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB

    RSB             reduce using rule 63 (empty -> .)
    COMMA           reduce using rule 63 (empty -> .)
    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67

    empty                          shift and go to state 101
    parameter                      shift and go to state 102
    calculate                      shift and go to state 69

state 79

    (28) repeat_head -> REPEAT LSB calculate . RSB
    (53) calculate -> calculate . PLUS calculate
    (54) calculate -> calculate . MINUS calculate
    (56) calculate -> calculate . MUL calculate
    (57) calculate -> calculate . DIV calculate

    RSB             shift and go to state 103
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 80

    (22) for_head -> FOR LSB IDENTIFIER . IN IDENTIFIER RSB

    IN              shift and go to state 104


state 81

    (25) while_head -> WHILE LSB condition . RSB
    (41) condition -> condition . LB calculate
    (42) condition -> condition . RB calculate
    (43) condition -> condition . LB EQUAL calculate
    (44) condition -> condition . RB EQUAL calculate
    (45) condition -> condition . EQUAL calculate

    RSB             shift and go to state 105
    LB              shift and go to state 98
    RB              shift and go to state 99
    EQUAL           shift and go to state 100


state 82

    (50) variable_declaration -> VAR IDENTIFIER EQUAL LIST .

    SEMI            reduce using rule 50 (variable_declaration -> VAR IDENTIFIER EQUAL LIST .)


state 83

    (51) variable_declaration -> VAR IDENTIFIER EQUAL calculate .
    (53) calculate -> calculate . PLUS calculate
    (54) calculate -> calculate . MINUS calculate
    (56) calculate -> calculate . MUL calculate
    (57) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 51 (variable_declaration -> VAR IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 84

    (53) calculate -> calculate PLUS . calculate
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67

    calculate                      shift and go to state 106

state 85

    (54) calculate -> calculate MINUS . calculate
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67

    calculate                      shift and go to state 107

state 86

    (56) calculate -> calculate MUL . calculate
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67

    calculate                      shift and go to state 108

state 87

    (57) calculate -> calculate DIV . calculate
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67

    calculate                      shift and go to state 109

state 88

    (55) calculate -> MINUS calculate .
    (53) calculate -> calculate . PLUS calculate
    (54) calculate -> calculate . MINUS calculate
    (56) calculate -> calculate . MUL calculate
    (57) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 55 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 55 (calculate -> MINUS calculate .)
    MUL             reduce using rule 55 (calculate -> MINUS calculate .)
    DIV             reduce using rule 55 (calculate -> MINUS calculate .)
    SEMI            reduce using rule 55 (calculate -> MINUS calculate .)
    RSB             reduce using rule 55 (calculate -> MINUS calculate .)
    COMMA           reduce using rule 55 (calculate -> MINUS calculate .)
    LB              reduce using rule 55 (calculate -> MINUS calculate .)
    RB              reduce using rule 55 (calculate -> MINUS calculate .)
    EQUAL           reduce using rule 55 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 85 ]
  ! MUL             [ shift and go to state 86 ]
  ! DIV             [ shift and go to state 87 ]


state 89

    (62) calculate -> LSB calculate . RSB
    (53) calculate -> calculate . PLUS calculate
    (54) calculate -> calculate . MINUS calculate
    (56) calculate -> calculate . MUL calculate
    (57) calculate -> calculate . DIV calculate

    RSB             shift and go to state 110
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 90

    (34) function_call -> IDENTIFIER LSB parameter RSB .

    VAR             reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    IDENTIFIER      reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    USE             reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    IF              reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    FUNCTION        reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    REPEAT          reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    FOR             reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    WHILE           reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    $end            reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    SEMI            reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)
    RMB             reduce using rule 34 (function_call -> IDENTIFIER LSB parameter RSB .)


state 91

    (35) parameter -> parameter COMMA . calculate
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67

    calculate                      shift and go to state 111

state 92

    (40) if_statement_body -> LMB expression RMB .

    VAR             reduce using rule 40 (if_statement_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 40 (if_statement_body -> LMB expression RMB .)
    USE             reduce using rule 40 (if_statement_body -> LMB expression RMB .)
    IF              reduce using rule 40 (if_statement_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 40 (if_statement_body -> LMB expression RMB .)
    REPEAT          reduce using rule 40 (if_statement_body -> LMB expression RMB .)
    FOR             reduce using rule 40 (if_statement_body -> LMB expression RMB .)
    WHILE           reduce using rule 40 (if_statement_body -> LMB expression RMB .)
    $end            reduce using rule 40 (if_statement_body -> LMB expression RMB .)
    RMB             reduce using rule 40 (if_statement_body -> LMB expression RMB .)


state 93

    (33) function_body -> LMB expression RMB .

    VAR             reduce using rule 33 (function_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 33 (function_body -> LMB expression RMB .)
    USE             reduce using rule 33 (function_body -> LMB expression RMB .)
    IF              reduce using rule 33 (function_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 33 (function_body -> LMB expression RMB .)
    REPEAT          reduce using rule 33 (function_body -> LMB expression RMB .)
    FOR             reduce using rule 33 (function_body -> LMB expression RMB .)
    WHILE           reduce using rule 33 (function_body -> LMB expression RMB .)
    $end            reduce using rule 33 (function_body -> LMB expression RMB .)
    RMB             reduce using rule 33 (function_body -> LMB expression RMB .)


state 94

    (29) repeat_body -> LMB expression RMB .

    VAR             reduce using rule 29 (repeat_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 29 (repeat_body -> LMB expression RMB .)
    USE             reduce using rule 29 (repeat_body -> LMB expression RMB .)
    IF              reduce using rule 29 (repeat_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 29 (repeat_body -> LMB expression RMB .)
    REPEAT          reduce using rule 29 (repeat_body -> LMB expression RMB .)
    FOR             reduce using rule 29 (repeat_body -> LMB expression RMB .)
    WHILE           reduce using rule 29 (repeat_body -> LMB expression RMB .)
    $end            reduce using rule 29 (repeat_body -> LMB expression RMB .)
    RMB             reduce using rule 29 (repeat_body -> LMB expression RMB .)


state 95

    (23) for_body -> LMB expression RMB .

    VAR             reduce using rule 23 (for_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 23 (for_body -> LMB expression RMB .)
    USE             reduce using rule 23 (for_body -> LMB expression RMB .)
    IF              reduce using rule 23 (for_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 23 (for_body -> LMB expression RMB .)
    REPEAT          reduce using rule 23 (for_body -> LMB expression RMB .)
    FOR             reduce using rule 23 (for_body -> LMB expression RMB .)
    WHILE           reduce using rule 23 (for_body -> LMB expression RMB .)
    $end            reduce using rule 23 (for_body -> LMB expression RMB .)
    RMB             reduce using rule 23 (for_body -> LMB expression RMB .)


state 96

    (26) while_body -> LMB expression RMB .

    VAR             reduce using rule 26 (while_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 26 (while_body -> LMB expression RMB .)
    USE             reduce using rule 26 (while_body -> LMB expression RMB .)
    IF              reduce using rule 26 (while_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 26 (while_body -> LMB expression RMB .)
    REPEAT          reduce using rule 26 (while_body -> LMB expression RMB .)
    FOR             reduce using rule 26 (while_body -> LMB expression RMB .)
    WHILE           reduce using rule 26 (while_body -> LMB expression RMB .)
    $end            reduce using rule 26 (while_body -> LMB expression RMB .)
    RMB             reduce using rule 26 (while_body -> LMB expression RMB .)


state 97

    (39) if_statement_head -> IF LSB condition RSB .

    LMB             reduce using rule 39 (if_statement_head -> IF LSB condition RSB .)


state 98

    (41) condition -> condition LB . calculate
    (43) condition -> condition LB . EQUAL calculate
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 113
    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67

    calculate                      shift and go to state 112

state 99

    (42) condition -> condition RB . calculate
    (44) condition -> condition RB . EQUAL calculate
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 115
    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67

    calculate                      shift and go to state 114

state 100

    (45) condition -> condition EQUAL . calculate
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67

    calculate                      shift and go to state 116

state 101

    (31) function_head -> FUNCTION IDENTIFIER LSB empty . RSB
    (37) parameter -> empty .

  ! shift/reduce conflict for RSB resolved as shift
    RSB             shift and go to state 117
    COMMA           reduce using rule 37 (parameter -> empty .)

  ! RSB             [ reduce using rule 37 (parameter -> empty .) ]


state 102

    (32) function_head -> FUNCTION IDENTIFIER LSB parameter . RSB
    (35) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 118
    COMMA           shift and go to state 91


state 103

    (28) repeat_head -> REPEAT LSB calculate RSB .

    LMB             reduce using rule 28 (repeat_head -> REPEAT LSB calculate RSB .)


state 104

    (22) for_head -> FOR LSB IDENTIFIER IN . IDENTIFIER RSB

    IDENTIFIER      shift and go to state 119


state 105

    (25) while_head -> WHILE LSB condition RSB .

    LMB             reduce using rule 25 (while_head -> WHILE LSB condition RSB .)


state 106

    (53) calculate -> calculate PLUS calculate .
    (53) calculate -> calculate . PLUS calculate
    (54) calculate -> calculate . MINUS calculate
    (56) calculate -> calculate . MUL calculate
    (57) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 53 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 53 (calculate -> calculate PLUS calculate .)
    SEMI            reduce using rule 53 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 53 (calculate -> calculate PLUS calculate .)
    COMMA           reduce using rule 53 (calculate -> calculate PLUS calculate .)
    LB              reduce using rule 53 (calculate -> calculate PLUS calculate .)
    RB              reduce using rule 53 (calculate -> calculate PLUS calculate .)
    EQUAL           reduce using rule 53 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 86
    DIV             shift and go to state 87

  ! MUL             [ reduce using rule 53 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 53 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 85 ]


state 107

    (54) calculate -> calculate MINUS calculate .
    (53) calculate -> calculate . PLUS calculate
    (54) calculate -> calculate . MINUS calculate
    (56) calculate -> calculate . MUL calculate
    (57) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 54 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 54 (calculate -> calculate MINUS calculate .)
    SEMI            reduce using rule 54 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 54 (calculate -> calculate MINUS calculate .)
    COMMA           reduce using rule 54 (calculate -> calculate MINUS calculate .)
    LB              reduce using rule 54 (calculate -> calculate MINUS calculate .)
    RB              reduce using rule 54 (calculate -> calculate MINUS calculate .)
    EQUAL           reduce using rule 54 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 86
    DIV             shift and go to state 87

  ! MUL             [ reduce using rule 54 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 54 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 85 ]


state 108

    (56) calculate -> calculate MUL calculate .
    (53) calculate -> calculate . PLUS calculate
    (54) calculate -> calculate . MINUS calculate
    (56) calculate -> calculate . MUL calculate
    (57) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 56 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 56 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 56 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 56 (calculate -> calculate MUL calculate .)
    SEMI            reduce using rule 56 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 56 (calculate -> calculate MUL calculate .)
    COMMA           reduce using rule 56 (calculate -> calculate MUL calculate .)
    LB              reduce using rule 56 (calculate -> calculate MUL calculate .)
    RB              reduce using rule 56 (calculate -> calculate MUL calculate .)
    EQUAL           reduce using rule 56 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 85 ]
  ! MUL             [ shift and go to state 86 ]
  ! DIV             [ shift and go to state 87 ]


state 109

    (57) calculate -> calculate DIV calculate .
    (53) calculate -> calculate . PLUS calculate
    (54) calculate -> calculate . MINUS calculate
    (56) calculate -> calculate . MUL calculate
    (57) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 57 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 57 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 57 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 57 (calculate -> calculate DIV calculate .)
    SEMI            reduce using rule 57 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 57 (calculate -> calculate DIV calculate .)
    COMMA           reduce using rule 57 (calculate -> calculate DIV calculate .)
    LB              reduce using rule 57 (calculate -> calculate DIV calculate .)
    RB              reduce using rule 57 (calculate -> calculate DIV calculate .)
    EQUAL           reduce using rule 57 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 85 ]
  ! MUL             [ shift and go to state 86 ]
  ! DIV             [ shift and go to state 87 ]


state 110

    (62) calculate -> LSB calculate RSB .

    PLUS            reduce using rule 62 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 62 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 62 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 62 (calculate -> LSB calculate RSB .)
    SEMI            reduce using rule 62 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 62 (calculate -> LSB calculate RSB .)
    COMMA           reduce using rule 62 (calculate -> LSB calculate RSB .)
    LB              reduce using rule 62 (calculate -> LSB calculate RSB .)
    RB              reduce using rule 62 (calculate -> LSB calculate RSB .)
    EQUAL           reduce using rule 62 (calculate -> LSB calculate RSB .)


state 111

    (35) parameter -> parameter COMMA calculate .
    (53) calculate -> calculate . PLUS calculate
    (54) calculate -> calculate . MINUS calculate
    (56) calculate -> calculate . MUL calculate
    (57) calculate -> calculate . DIV calculate

    RSB             reduce using rule 35 (parameter -> parameter COMMA calculate .)
    COMMA           reduce using rule 35 (parameter -> parameter COMMA calculate .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 112

    (41) condition -> condition LB calculate .
    (53) calculate -> calculate . PLUS calculate
    (54) calculate -> calculate . MINUS calculate
    (56) calculate -> calculate . MUL calculate
    (57) calculate -> calculate . DIV calculate

    RSB             reduce using rule 41 (condition -> condition LB calculate .)
    LB              reduce using rule 41 (condition -> condition LB calculate .)
    RB              reduce using rule 41 (condition -> condition LB calculate .)
    EQUAL           reduce using rule 41 (condition -> condition LB calculate .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 113

    (43) condition -> condition LB EQUAL . calculate
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67

    calculate                      shift and go to state 120

state 114

    (42) condition -> condition RB calculate .
    (53) calculate -> calculate . PLUS calculate
    (54) calculate -> calculate . MINUS calculate
    (56) calculate -> calculate . MUL calculate
    (57) calculate -> calculate . DIV calculate

    RSB             reduce using rule 42 (condition -> condition RB calculate .)
    LB              reduce using rule 42 (condition -> condition RB calculate .)
    RB              reduce using rule 42 (condition -> condition RB calculate .)
    EQUAL           reduce using rule 42 (condition -> condition RB calculate .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 115

    (44) condition -> condition RB EQUAL . calculate
    (53) calculate -> . calculate PLUS calculate
    (54) calculate -> . calculate MINUS calculate
    (55) calculate -> . MINUS calculate
    (56) calculate -> . calculate MUL calculate
    (57) calculate -> . calculate DIV calculate
    (58) calculate -> . INT
    (59) calculate -> . FLOAT
    (60) calculate -> . STRING
    (61) calculate -> . IDENTIFIER
    (62) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 63
    INT             shift and go to state 64
    FLOAT           shift and go to state 65
    STRING          shift and go to state 66
    IDENTIFIER      shift and go to state 60
    LSB             shift and go to state 67

    calculate                      shift and go to state 121

state 116

    (45) condition -> condition EQUAL calculate .
    (53) calculate -> calculate . PLUS calculate
    (54) calculate -> calculate . MINUS calculate
    (56) calculate -> calculate . MUL calculate
    (57) calculate -> calculate . DIV calculate

    RSB             reduce using rule 45 (condition -> condition EQUAL calculate .)
    LB              reduce using rule 45 (condition -> condition EQUAL calculate .)
    RB              reduce using rule 45 (condition -> condition EQUAL calculate .)
    EQUAL           reduce using rule 45 (condition -> condition EQUAL calculate .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 117

    (31) function_head -> FUNCTION IDENTIFIER LSB empty RSB .

    LMB             reduce using rule 31 (function_head -> FUNCTION IDENTIFIER LSB empty RSB .)


state 118

    (32) function_head -> FUNCTION IDENTIFIER LSB parameter RSB .

    LMB             reduce using rule 32 (function_head -> FUNCTION IDENTIFIER LSB parameter RSB .)


state 119

    (22) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER . RSB

    RSB             shift and go to state 122


state 120

    (43) condition -> condition LB EQUAL calculate .
    (53) calculate -> calculate . PLUS calculate
    (54) calculate -> calculate . MINUS calculate
    (56) calculate -> calculate . MUL calculate
    (57) calculate -> calculate . DIV calculate

    RSB             reduce using rule 43 (condition -> condition LB EQUAL calculate .)
    LB              reduce using rule 43 (condition -> condition LB EQUAL calculate .)
    RB              reduce using rule 43 (condition -> condition LB EQUAL calculate .)
    EQUAL           reduce using rule 43 (condition -> condition LB EQUAL calculate .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 121

    (44) condition -> condition RB EQUAL calculate .
    (53) calculate -> calculate . PLUS calculate
    (54) calculate -> calculate . MINUS calculate
    (56) calculate -> calculate . MUL calculate
    (57) calculate -> calculate . DIV calculate

    RSB             reduce using rule 44 (condition -> condition RB EQUAL calculate .)
    LB              reduce using rule 44 (condition -> condition RB EQUAL calculate .)
    RB              reduce using rule 44 (condition -> condition RB EQUAL calculate .)
    EQUAL           reduce using rule 44 (condition -> condition RB EQUAL calculate .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 122

    (22) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .

    LMB             reduce using rule 22 (for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for USE in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 41 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 41 resolved as shift
WARNING: shift/reduce conflict for USE in state 41 resolved as shift
WARNING: shift/reduce conflict for IF in state 41 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 41 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 41 resolved as shift
WARNING: shift/reduce conflict for FOR in state 41 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 41 resolved as shift
WARNING: shift/reduce conflict for VAR in state 43 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 43 resolved as shift
WARNING: shift/reduce conflict for USE in state 43 resolved as shift
WARNING: shift/reduce conflict for IF in state 43 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 43 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 43 resolved as shift
WARNING: shift/reduce conflict for FOR in state 43 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 43 resolved as shift
WARNING: shift/reduce conflict for VAR in state 45 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 45 resolved as shift
WARNING: shift/reduce conflict for USE in state 45 resolved as shift
WARNING: shift/reduce conflict for IF in state 45 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 45 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 45 resolved as shift
WARNING: shift/reduce conflict for FOR in state 45 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 45 resolved as shift
WARNING: shift/reduce conflict for VAR in state 47 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 47 resolved as shift
WARNING: shift/reduce conflict for USE in state 47 resolved as shift
WARNING: shift/reduce conflict for IF in state 47 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 47 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 47 resolved as shift
WARNING: shift/reduce conflict for FOR in state 47 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 47 resolved as shift
WARNING: shift/reduce conflict for VAR in state 49 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 49 resolved as shift
WARNING: shift/reduce conflict for USE in state 49 resolved as shift
WARNING: shift/reduce conflict for IF in state 49 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 49 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 49 resolved as shift
WARNING: shift/reduce conflict for FOR in state 49 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 49 resolved as shift
WARNING: shift/reduce conflict for RSB in state 101 resolved as shift
