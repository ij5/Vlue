Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    INPUT
    PRINT
    PYTHON
    SLICE

Grammar

Rule 0     S' -> root
Rule 1     root -> expression
Rule 2     expression -> expression variable_declaration SEMI
Rule 3     expression -> expression variable_value_change SEMI
Rule 4     expression -> expression if_statement
Rule 5     expression -> expression function
Rule 6     expression -> expression function_call SEMI
Rule 7     expression -> expression repeat
Rule 8     expression -> expression for
Rule 9     expression -> expression while
Rule 10    expression -> expression use SEMI
Rule 11    expression -> expression error_handling
Rule 12    expression -> expression variable_alone SEMI
Rule 13    expression -> expression global_variable SEMI
Rule 14    expression -> expression class_def
Rule 15    expression -> expression debug SEMI
Rule 16    expression -> expression function_class SEMI
Rule 17    expression -> expression inside_root SEMI
Rule 18    expression -> variable_declaration SEMI
Rule 19    expression -> variable_value_change SEMI
Rule 20    expression -> if_statement
Rule 21    expression -> function
Rule 22    expression -> function_call SEMI
Rule 23    expression -> repeat
Rule 24    expression -> for
Rule 25    expression -> while
Rule 26    expression -> use SEMI
Rule 27    expression -> error_handling
Rule 28    expression -> variable_alone SEMI
Rule 29    expression -> global_variable SEMI
Rule 30    expression -> class_def
Rule 31    expression -> debug SEMI
Rule 32    expression -> function_class SEMI
Rule 33    expression -> inside_root SEMI
Rule 34    expression -> empty
Rule 35    error_handling -> try catch
Rule 36    try -> TRY LMB expression RMB
Rule 37    catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB
Rule 38    for -> for_head for_body
Rule 39    for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB
Rule 40    for_body -> LMB expression RMB
Rule 41    while -> while_head while_body
Rule 42    while_head -> WHILE LSB condition RSB
Rule 43    while_body -> LMB expression RMB
Rule 44    repeat -> repeat_head repeat_body
Rule 45    repeat_head -> REPEAT LSB calculate RSB
Rule 46    repeat_body -> LMB expression RMB
Rule 47    inside_root -> inside
Rule 48    inside_root -> inside DOT IDENTIFIER LSB parameter RSB
Rule 49    inside -> DOT IDENTIFIER LSB empty RSB
Rule 50    inside -> inside DOT IDENTIFIER
Rule 51    inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
Rule 52    inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
Rule 53    inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
Rule 54    inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
Rule 55    inside -> IDENTIFIER DOT IDENTIFIER LSB parameter RSB
Rule 56    inside -> IDENTIFIER DOT IDENTIFIER LSB empty RSB
Rule 57    inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER
Rule 58    inside -> IDENTIFIER DOT IDENTIFIER
Rule 59    function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
Rule 60    function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
Rule 61    function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
Rule 62    function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
Rule 63    class_def -> CLASS IDENTIFIER LMB expression RMB
Rule 64    function -> function_head function_body
Rule 65    function_head -> FUNCTION IDENTIFIER LSB parameter RSB
Rule 66    function_head -> FUNCTION IDENTIFIER LSB empty RSB
Rule 67    function_body -> LMB expression RMB
Rule 68    function_call -> IDENTIFIER LSB parameter RSB
Rule 69    function_call -> IDENTIFIER LSB empty RSB
Rule 70    parameter -> parameter COMMA calculate
Rule 71    parameter -> calculate
Rule 72    debug -> USE DEBUG
Rule 73    if_statement -> if_statement_1 if_statement_2 if_statement_3
Rule 74    if_statement -> if_statement_1 if_statement_2
Rule 75    if_statement -> if_statement_1 if_statement_3
Rule 76    if_statement -> if_statement_1
Rule 77    if_statement_1 -> IF LSB condition RSB LMB expression RMB
Rule 78    if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB
Rule 79    if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
Rule 80    if_statement_3 -> ELSE LMB expression RMB
Rule 81    condition -> condition LB calculate
Rule 82    condition -> condition RB calculate
Rule 83    condition -> condition LB EQUAL calculate
Rule 84    condition -> condition RB EQUAL calculate
Rule 85    condition -> condition EQUAL calculate
Rule 86    condition -> calculate
Rule 87    use -> USE use_params
Rule 88    use_params -> IDENTIFIER
Rule 89    global_variable -> GLOBAL IDENTIFIER
Rule 90    variable_alone -> IDENTIFIER
Rule 91    variable_value_change -> IDENTIFIER EQUAL LIST
Rule 92    variable_value_change -> IDENTIFIER EQUAL calculate
Rule 93    variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate
Rule 94    variable_declaration -> VAR IDENTIFIER EQUAL calculate
Rule 95    variable_declaration -> VAR IDENTIFIER
Rule 96    calculate -> calculate PLUS calculate
Rule 97    calculate -> calculate MINUS calculate
Rule 98    calculate -> MINUS calculate
Rule 99    calculate -> calculate MUL calculate
Rule 100   calculate -> calculate DIV calculate
Rule 101   calculate -> INT
Rule 102   calculate -> FLOAT
Rule 103   calculate -> STRING
Rule 104   calculate -> IDENTIFIER
Rule 105   calculate -> IDENTIFIER LIST
Rule 106   calculate -> LIST
Rule 107   calculate -> LSB calculate RSB
Rule 108   empty -> <empty>

Terminals, with rules where they appear

CATCH                : 37
CLASS                : 63
COLON                : 
COMMA                : 70
DEBUG                : 72
DIV                  : 100
DOT                  : 48 49 50 51 52 53 54 55 56 57 58
ELSE                 : 78 79 80
EQUAL                : 59 60 61 62 83 84 85 91 92 93 94
FLOAT                : 102
FOR                  : 39
FUNCTION             : 65 66
GLOBAL               : 89
IDENTIFIER           : 37 39 39 48 49 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 65 66 68 69 88 89 90 91 92 93 94 95 104 105
IF                   : 77 78 79
IN                   : 39
INPUT                : 
INT                  : 101
LB                   : 81 83
LIST                 : 91 93 105 106
LMB                  : 36 37 40 43 46 63 67 77 78 79 80
LSB                  : 37 39 42 45 48 49 51 51 52 52 53 53 54 54 55 56 57 59 60 61 62 65 66 68 69 77 78 79 107
MINUS                : 97 98
MUL                  : 99
PLUS                 : 96
PRINT                : 
PYTHON               : 
RB                   : 82 84
REPEAT               : 45
RMB                  : 36 37 40 43 46 63 67 77 78 79 80
RSB                  : 37 39 42 45 48 49 51 51 52 52 53 53 54 54 55 56 57 59 60 61 62 65 66 68 69 77 78 79 107
SEMI                 : 2 3 6 10 12 13 15 16 17 18 19 22 26 28 29 31 32 33
SLICE                : 
STRING               : 103
TRY                  : 36
USE                  : 72 87
VAR                  : 59 60 93 94 95
WHILE                : 42
error                : 

Nonterminals, with rules where they appear

calculate            : 45 70 71 81 82 83 84 85 86 92 93 94 96 96 97 97 98 99 99 100 100 107
catch                : 35
class_def            : 14 30
condition            : 42 77 78 79 81 82 83 84 85
debug                : 15 31
empty                : 34 49 52 52 53 54 56 60 62 66 69
error_handling       : 11 27
expression           : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 36 37 40 43 46 63 67 77 78 79 80
for                  : 8 24
for_body             : 38
for_head             : 38
function             : 5 21
function_body        : 64
function_call        : 6 22
function_class       : 16 32
function_head        : 64
global_variable      : 13 29
if_statement         : 4 20
if_statement_1       : 73 74 75 76
if_statement_2       : 73 74 79
if_statement_3       : 73 75
inside               : 47 48 50
inside_root          : 17 33
parameter            : 48 51 51 53 54 55 57 59 61 65 68 70
repeat               : 7 23
repeat_body          : 44
repeat_head          : 44
root                 : 0
try                  : 35
use                  : 10 26
use_params           : 87
variable_alone       : 12 28
variable_declaration : 2 18
variable_value_change : 3 19
while                : 9 25
while_body           : 41
while_head           : 41

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . expression
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside_root SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside_root SEMI
    (34) expression -> . empty
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (108) empty -> .
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    $end            reduce using rule 108 (empty -> .)
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

  ! VAR             [ reduce using rule 108 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 108 (empty -> .) ]
  ! USE             [ reduce using rule 108 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 108 (empty -> .) ]
  ! CLASS           [ reduce using rule 108 (empty -> .) ]
  ! IF              [ reduce using rule 108 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 108 (empty -> .) ]
  ! REPEAT          [ reduce using rule 108 (empty -> .) ]
  ! FOR             [ reduce using rule 108 (empty -> .) ]
  ! WHILE           [ reduce using rule 108 (empty -> .) ]
  ! TRY             [ reduce using rule 108 (empty -> .) ]
  ! DOT             [ reduce using rule 108 (empty -> .) ]

    root                           shift and go to state 1
    expression                     shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside_root                    shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 1

    (0) S' -> root .



state 2

    (1) root -> expression .
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside_root SEMI
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

    $end            reduce using rule 1 (root -> expression .)
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

    variable_declaration           shift and go to state 39
    variable_value_change          shift and go to state 40
    if_statement                   shift and go to state 41
    function                       shift and go to state 42
    function_call                  shift and go to state 43
    repeat                         shift and go to state 44
    for                            shift and go to state 45
    while                          shift and go to state 46
    use                            shift and go to state 47
    error_handling                 shift and go to state 48
    variable_alone                 shift and go to state 49
    global_variable                shift and go to state 50
    class_def                      shift and go to state 51
    debug                          shift and go to state 52
    function_class                 shift and go to state 53
    inside_root                    shift and go to state 54
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 3

    (18) expression -> variable_declaration . SEMI

    SEMI            shift and go to state 55


state 4

    (19) expression -> variable_value_change . SEMI

    SEMI            shift and go to state 56


state 5

    (20) expression -> if_statement .

    VAR             reduce using rule 20 (expression -> if_statement .)
    IDENTIFIER      reduce using rule 20 (expression -> if_statement .)
    USE             reduce using rule 20 (expression -> if_statement .)
    GLOBAL          reduce using rule 20 (expression -> if_statement .)
    CLASS           reduce using rule 20 (expression -> if_statement .)
    IF              reduce using rule 20 (expression -> if_statement .)
    FUNCTION        reduce using rule 20 (expression -> if_statement .)
    REPEAT          reduce using rule 20 (expression -> if_statement .)
    FOR             reduce using rule 20 (expression -> if_statement .)
    WHILE           reduce using rule 20 (expression -> if_statement .)
    TRY             reduce using rule 20 (expression -> if_statement .)
    DOT             reduce using rule 20 (expression -> if_statement .)
    $end            reduce using rule 20 (expression -> if_statement .)
    RMB             reduce using rule 20 (expression -> if_statement .)


state 6

    (21) expression -> function .

    VAR             reduce using rule 21 (expression -> function .)
    IDENTIFIER      reduce using rule 21 (expression -> function .)
    USE             reduce using rule 21 (expression -> function .)
    GLOBAL          reduce using rule 21 (expression -> function .)
    CLASS           reduce using rule 21 (expression -> function .)
    IF              reduce using rule 21 (expression -> function .)
    FUNCTION        reduce using rule 21 (expression -> function .)
    REPEAT          reduce using rule 21 (expression -> function .)
    FOR             reduce using rule 21 (expression -> function .)
    WHILE           reduce using rule 21 (expression -> function .)
    TRY             reduce using rule 21 (expression -> function .)
    DOT             reduce using rule 21 (expression -> function .)
    $end            reduce using rule 21 (expression -> function .)
    RMB             reduce using rule 21 (expression -> function .)


state 7

    (22) expression -> function_call . SEMI

    SEMI            shift and go to state 57


state 8

    (23) expression -> repeat .

    VAR             reduce using rule 23 (expression -> repeat .)
    IDENTIFIER      reduce using rule 23 (expression -> repeat .)
    USE             reduce using rule 23 (expression -> repeat .)
    GLOBAL          reduce using rule 23 (expression -> repeat .)
    CLASS           reduce using rule 23 (expression -> repeat .)
    IF              reduce using rule 23 (expression -> repeat .)
    FUNCTION        reduce using rule 23 (expression -> repeat .)
    REPEAT          reduce using rule 23 (expression -> repeat .)
    FOR             reduce using rule 23 (expression -> repeat .)
    WHILE           reduce using rule 23 (expression -> repeat .)
    TRY             reduce using rule 23 (expression -> repeat .)
    DOT             reduce using rule 23 (expression -> repeat .)
    $end            reduce using rule 23 (expression -> repeat .)
    RMB             reduce using rule 23 (expression -> repeat .)


state 9

    (24) expression -> for .

    VAR             reduce using rule 24 (expression -> for .)
    IDENTIFIER      reduce using rule 24 (expression -> for .)
    USE             reduce using rule 24 (expression -> for .)
    GLOBAL          reduce using rule 24 (expression -> for .)
    CLASS           reduce using rule 24 (expression -> for .)
    IF              reduce using rule 24 (expression -> for .)
    FUNCTION        reduce using rule 24 (expression -> for .)
    REPEAT          reduce using rule 24 (expression -> for .)
    FOR             reduce using rule 24 (expression -> for .)
    WHILE           reduce using rule 24 (expression -> for .)
    TRY             reduce using rule 24 (expression -> for .)
    DOT             reduce using rule 24 (expression -> for .)
    $end            reduce using rule 24 (expression -> for .)
    RMB             reduce using rule 24 (expression -> for .)


state 10

    (25) expression -> while .

    VAR             reduce using rule 25 (expression -> while .)
    IDENTIFIER      reduce using rule 25 (expression -> while .)
    USE             reduce using rule 25 (expression -> while .)
    GLOBAL          reduce using rule 25 (expression -> while .)
    CLASS           reduce using rule 25 (expression -> while .)
    IF              reduce using rule 25 (expression -> while .)
    FUNCTION        reduce using rule 25 (expression -> while .)
    REPEAT          reduce using rule 25 (expression -> while .)
    FOR             reduce using rule 25 (expression -> while .)
    WHILE           reduce using rule 25 (expression -> while .)
    TRY             reduce using rule 25 (expression -> while .)
    DOT             reduce using rule 25 (expression -> while .)
    $end            reduce using rule 25 (expression -> while .)
    RMB             reduce using rule 25 (expression -> while .)


state 11

    (26) expression -> use . SEMI

    SEMI            shift and go to state 58


state 12

    (27) expression -> error_handling .

    VAR             reduce using rule 27 (expression -> error_handling .)
    IDENTIFIER      reduce using rule 27 (expression -> error_handling .)
    USE             reduce using rule 27 (expression -> error_handling .)
    GLOBAL          reduce using rule 27 (expression -> error_handling .)
    CLASS           reduce using rule 27 (expression -> error_handling .)
    IF              reduce using rule 27 (expression -> error_handling .)
    FUNCTION        reduce using rule 27 (expression -> error_handling .)
    REPEAT          reduce using rule 27 (expression -> error_handling .)
    FOR             reduce using rule 27 (expression -> error_handling .)
    WHILE           reduce using rule 27 (expression -> error_handling .)
    TRY             reduce using rule 27 (expression -> error_handling .)
    DOT             reduce using rule 27 (expression -> error_handling .)
    $end            reduce using rule 27 (expression -> error_handling .)
    RMB             reduce using rule 27 (expression -> error_handling .)


state 13

    (28) expression -> variable_alone . SEMI

    SEMI            shift and go to state 59


state 14

    (29) expression -> global_variable . SEMI

    SEMI            shift and go to state 60


state 15

    (30) expression -> class_def .

    VAR             reduce using rule 30 (expression -> class_def .)
    IDENTIFIER      reduce using rule 30 (expression -> class_def .)
    USE             reduce using rule 30 (expression -> class_def .)
    GLOBAL          reduce using rule 30 (expression -> class_def .)
    CLASS           reduce using rule 30 (expression -> class_def .)
    IF              reduce using rule 30 (expression -> class_def .)
    FUNCTION        reduce using rule 30 (expression -> class_def .)
    REPEAT          reduce using rule 30 (expression -> class_def .)
    FOR             reduce using rule 30 (expression -> class_def .)
    WHILE           reduce using rule 30 (expression -> class_def .)
    TRY             reduce using rule 30 (expression -> class_def .)
    DOT             reduce using rule 30 (expression -> class_def .)
    $end            reduce using rule 30 (expression -> class_def .)
    RMB             reduce using rule 30 (expression -> class_def .)


state 16

    (31) expression -> debug . SEMI

    SEMI            shift and go to state 61


state 17

    (32) expression -> function_class . SEMI

    SEMI            shift and go to state 62


state 18

    (33) expression -> inside_root . SEMI

    SEMI            shift and go to state 63


state 19

    (34) expression -> empty .

    VAR             reduce using rule 34 (expression -> empty .)
    IDENTIFIER      reduce using rule 34 (expression -> empty .)
    USE             reduce using rule 34 (expression -> empty .)
    GLOBAL          reduce using rule 34 (expression -> empty .)
    CLASS           reduce using rule 34 (expression -> empty .)
    IF              reduce using rule 34 (expression -> empty .)
    FUNCTION        reduce using rule 34 (expression -> empty .)
    REPEAT          reduce using rule 34 (expression -> empty .)
    FOR             reduce using rule 34 (expression -> empty .)
    WHILE           reduce using rule 34 (expression -> empty .)
    TRY             reduce using rule 34 (expression -> empty .)
    DOT             reduce using rule 34 (expression -> empty .)
    $end            reduce using rule 34 (expression -> empty .)
    RMB             reduce using rule 34 (expression -> empty .)


state 20

    (93) variable_declaration -> VAR . IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> VAR . IDENTIFIER EQUAL calculate
    (95) variable_declaration -> VAR . IDENTIFIER
    (59) function_class -> VAR . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> VAR . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB

    IDENTIFIER      shift and go to state 64


state 21

    (91) variable_value_change -> IDENTIFIER . EQUAL LIST
    (92) variable_value_change -> IDENTIFIER . EQUAL calculate
    (68) function_call -> IDENTIFIER . LSB parameter RSB
    (69) function_call -> IDENTIFIER . LSB empty RSB
    (90) variable_alone -> IDENTIFIER .
    (61) function_class -> IDENTIFIER . EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> IDENTIFIER . EQUAL IDENTIFIER LSB empty RSB
    (51) inside -> IDENTIFIER . LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> IDENTIFIER . LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> IDENTIFIER . LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> IDENTIFIER . LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> IDENTIFIER . DOT IDENTIFIER LSB parameter RSB
    (56) inside -> IDENTIFIER . DOT IDENTIFIER LSB empty RSB
    (57) inside -> IDENTIFIER . LSB parameter RSB DOT IDENTIFIER
    (58) inside -> IDENTIFIER . DOT IDENTIFIER

    EQUAL           shift and go to state 65
    LSB             shift and go to state 66
    SEMI            reduce using rule 90 (variable_alone -> IDENTIFIER .)
    DOT             shift and go to state 67


state 22

    (73) if_statement -> if_statement_1 . if_statement_2 if_statement_3
    (74) if_statement -> if_statement_1 . if_statement_2
    (75) if_statement -> if_statement_1 . if_statement_3
    (76) if_statement -> if_statement_1 .
    (78) if_statement_2 -> . ELSE IF LSB condition RSB LMB expression RMB
    (79) if_statement_2 -> . if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
    (80) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 76 (if_statement -> if_statement_1 .)
    IDENTIFIER      reduce using rule 76 (if_statement -> if_statement_1 .)
    USE             reduce using rule 76 (if_statement -> if_statement_1 .)
    GLOBAL          reduce using rule 76 (if_statement -> if_statement_1 .)
    CLASS           reduce using rule 76 (if_statement -> if_statement_1 .)
    IF              reduce using rule 76 (if_statement -> if_statement_1 .)
    FUNCTION        reduce using rule 76 (if_statement -> if_statement_1 .)
    REPEAT          reduce using rule 76 (if_statement -> if_statement_1 .)
    FOR             reduce using rule 76 (if_statement -> if_statement_1 .)
    WHILE           reduce using rule 76 (if_statement -> if_statement_1 .)
    TRY             reduce using rule 76 (if_statement -> if_statement_1 .)
    DOT             reduce using rule 76 (if_statement -> if_statement_1 .)
    $end            reduce using rule 76 (if_statement -> if_statement_1 .)
    RMB             reduce using rule 76 (if_statement -> if_statement_1 .)
    ELSE            shift and go to state 70

    if_statement_2                 shift and go to state 68
    if_statement_3                 shift and go to state 69

state 23

    (64) function -> function_head . function_body
    (67) function_body -> . LMB expression RMB

    LMB             shift and go to state 72

    function_body                  shift and go to state 71

state 24

    (44) repeat -> repeat_head . repeat_body
    (46) repeat_body -> . LMB expression RMB

    LMB             shift and go to state 74

    repeat_body                    shift and go to state 73

state 25

    (38) for -> for_head . for_body
    (40) for_body -> . LMB expression RMB

    LMB             shift and go to state 76

    for_body                       shift and go to state 75

state 26

    (41) while -> while_head . while_body
    (43) while_body -> . LMB expression RMB

    LMB             shift and go to state 78

    while_body                     shift and go to state 77

state 27

    (87) use -> USE . use_params
    (72) debug -> USE . DEBUG
    (88) use_params -> . IDENTIFIER

    DEBUG           shift and go to state 80
    IDENTIFIER      shift and go to state 81

    use_params                     shift and go to state 79

state 28

    (35) error_handling -> try . catch
    (37) catch -> . CATCH LSB IDENTIFIER RSB LMB expression RMB

    CATCH           shift and go to state 83

    catch                          shift and go to state 82

state 29

    (89) global_variable -> GLOBAL . IDENTIFIER

    IDENTIFIER      shift and go to state 84


state 30

    (63) class_def -> CLASS . IDENTIFIER LMB expression RMB

    IDENTIFIER      shift and go to state 85


state 31

    (47) inside_root -> inside .
    (48) inside_root -> inside . DOT IDENTIFIER LSB parameter RSB
    (50) inside -> inside . DOT IDENTIFIER

    SEMI            reduce using rule 47 (inside_root -> inside .)
    DOT             shift and go to state 86


state 32

    (49) inside -> DOT . IDENTIFIER LSB empty RSB

    IDENTIFIER      shift and go to state 87


state 33

    (77) if_statement_1 -> IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 88


state 34

    (65) function_head -> FUNCTION . IDENTIFIER LSB parameter RSB
    (66) function_head -> FUNCTION . IDENTIFIER LSB empty RSB

    IDENTIFIER      shift and go to state 89


state 35

    (45) repeat_head -> REPEAT . LSB calculate RSB

    LSB             shift and go to state 90


state 36

    (39) for_head -> FOR . LSB IDENTIFIER IN IDENTIFIER RSB

    LSB             shift and go to state 91


state 37

    (42) while_head -> WHILE . LSB condition RSB

    LSB             shift and go to state 92


state 38

    (36) try -> TRY . LMB expression RMB

    LMB             shift and go to state 93


state 39

    (2) expression -> expression variable_declaration . SEMI

    SEMI            shift and go to state 94


state 40

    (3) expression -> expression variable_value_change . SEMI

    SEMI            shift and go to state 95


state 41

    (4) expression -> expression if_statement .

    VAR             reduce using rule 4 (expression -> expression if_statement .)
    IDENTIFIER      reduce using rule 4 (expression -> expression if_statement .)
    USE             reduce using rule 4 (expression -> expression if_statement .)
    GLOBAL          reduce using rule 4 (expression -> expression if_statement .)
    CLASS           reduce using rule 4 (expression -> expression if_statement .)
    IF              reduce using rule 4 (expression -> expression if_statement .)
    FUNCTION        reduce using rule 4 (expression -> expression if_statement .)
    REPEAT          reduce using rule 4 (expression -> expression if_statement .)
    FOR             reduce using rule 4 (expression -> expression if_statement .)
    WHILE           reduce using rule 4 (expression -> expression if_statement .)
    TRY             reduce using rule 4 (expression -> expression if_statement .)
    DOT             reduce using rule 4 (expression -> expression if_statement .)
    $end            reduce using rule 4 (expression -> expression if_statement .)
    RMB             reduce using rule 4 (expression -> expression if_statement .)


state 42

    (5) expression -> expression function .

    VAR             reduce using rule 5 (expression -> expression function .)
    IDENTIFIER      reduce using rule 5 (expression -> expression function .)
    USE             reduce using rule 5 (expression -> expression function .)
    GLOBAL          reduce using rule 5 (expression -> expression function .)
    CLASS           reduce using rule 5 (expression -> expression function .)
    IF              reduce using rule 5 (expression -> expression function .)
    FUNCTION        reduce using rule 5 (expression -> expression function .)
    REPEAT          reduce using rule 5 (expression -> expression function .)
    FOR             reduce using rule 5 (expression -> expression function .)
    WHILE           reduce using rule 5 (expression -> expression function .)
    TRY             reduce using rule 5 (expression -> expression function .)
    DOT             reduce using rule 5 (expression -> expression function .)
    $end            reduce using rule 5 (expression -> expression function .)
    RMB             reduce using rule 5 (expression -> expression function .)


state 43

    (6) expression -> expression function_call . SEMI

    SEMI            shift and go to state 96


state 44

    (7) expression -> expression repeat .

    VAR             reduce using rule 7 (expression -> expression repeat .)
    IDENTIFIER      reduce using rule 7 (expression -> expression repeat .)
    USE             reduce using rule 7 (expression -> expression repeat .)
    GLOBAL          reduce using rule 7 (expression -> expression repeat .)
    CLASS           reduce using rule 7 (expression -> expression repeat .)
    IF              reduce using rule 7 (expression -> expression repeat .)
    FUNCTION        reduce using rule 7 (expression -> expression repeat .)
    REPEAT          reduce using rule 7 (expression -> expression repeat .)
    FOR             reduce using rule 7 (expression -> expression repeat .)
    WHILE           reduce using rule 7 (expression -> expression repeat .)
    TRY             reduce using rule 7 (expression -> expression repeat .)
    DOT             reduce using rule 7 (expression -> expression repeat .)
    $end            reduce using rule 7 (expression -> expression repeat .)
    RMB             reduce using rule 7 (expression -> expression repeat .)


state 45

    (8) expression -> expression for .

    VAR             reduce using rule 8 (expression -> expression for .)
    IDENTIFIER      reduce using rule 8 (expression -> expression for .)
    USE             reduce using rule 8 (expression -> expression for .)
    GLOBAL          reduce using rule 8 (expression -> expression for .)
    CLASS           reduce using rule 8 (expression -> expression for .)
    IF              reduce using rule 8 (expression -> expression for .)
    FUNCTION        reduce using rule 8 (expression -> expression for .)
    REPEAT          reduce using rule 8 (expression -> expression for .)
    FOR             reduce using rule 8 (expression -> expression for .)
    WHILE           reduce using rule 8 (expression -> expression for .)
    TRY             reduce using rule 8 (expression -> expression for .)
    DOT             reduce using rule 8 (expression -> expression for .)
    $end            reduce using rule 8 (expression -> expression for .)
    RMB             reduce using rule 8 (expression -> expression for .)


state 46

    (9) expression -> expression while .

    VAR             reduce using rule 9 (expression -> expression while .)
    IDENTIFIER      reduce using rule 9 (expression -> expression while .)
    USE             reduce using rule 9 (expression -> expression while .)
    GLOBAL          reduce using rule 9 (expression -> expression while .)
    CLASS           reduce using rule 9 (expression -> expression while .)
    IF              reduce using rule 9 (expression -> expression while .)
    FUNCTION        reduce using rule 9 (expression -> expression while .)
    REPEAT          reduce using rule 9 (expression -> expression while .)
    FOR             reduce using rule 9 (expression -> expression while .)
    WHILE           reduce using rule 9 (expression -> expression while .)
    TRY             reduce using rule 9 (expression -> expression while .)
    DOT             reduce using rule 9 (expression -> expression while .)
    $end            reduce using rule 9 (expression -> expression while .)
    RMB             reduce using rule 9 (expression -> expression while .)


state 47

    (10) expression -> expression use . SEMI

    SEMI            shift and go to state 97


state 48

    (11) expression -> expression error_handling .

    VAR             reduce using rule 11 (expression -> expression error_handling .)
    IDENTIFIER      reduce using rule 11 (expression -> expression error_handling .)
    USE             reduce using rule 11 (expression -> expression error_handling .)
    GLOBAL          reduce using rule 11 (expression -> expression error_handling .)
    CLASS           reduce using rule 11 (expression -> expression error_handling .)
    IF              reduce using rule 11 (expression -> expression error_handling .)
    FUNCTION        reduce using rule 11 (expression -> expression error_handling .)
    REPEAT          reduce using rule 11 (expression -> expression error_handling .)
    FOR             reduce using rule 11 (expression -> expression error_handling .)
    WHILE           reduce using rule 11 (expression -> expression error_handling .)
    TRY             reduce using rule 11 (expression -> expression error_handling .)
    DOT             reduce using rule 11 (expression -> expression error_handling .)
    $end            reduce using rule 11 (expression -> expression error_handling .)
    RMB             reduce using rule 11 (expression -> expression error_handling .)


state 49

    (12) expression -> expression variable_alone . SEMI

    SEMI            shift and go to state 98


state 50

    (13) expression -> expression global_variable . SEMI

    SEMI            shift and go to state 99


state 51

    (14) expression -> expression class_def .

    VAR             reduce using rule 14 (expression -> expression class_def .)
    IDENTIFIER      reduce using rule 14 (expression -> expression class_def .)
    USE             reduce using rule 14 (expression -> expression class_def .)
    GLOBAL          reduce using rule 14 (expression -> expression class_def .)
    CLASS           reduce using rule 14 (expression -> expression class_def .)
    IF              reduce using rule 14 (expression -> expression class_def .)
    FUNCTION        reduce using rule 14 (expression -> expression class_def .)
    REPEAT          reduce using rule 14 (expression -> expression class_def .)
    FOR             reduce using rule 14 (expression -> expression class_def .)
    WHILE           reduce using rule 14 (expression -> expression class_def .)
    TRY             reduce using rule 14 (expression -> expression class_def .)
    DOT             reduce using rule 14 (expression -> expression class_def .)
    $end            reduce using rule 14 (expression -> expression class_def .)
    RMB             reduce using rule 14 (expression -> expression class_def .)


state 52

    (15) expression -> expression debug . SEMI

    SEMI            shift and go to state 100


state 53

    (16) expression -> expression function_class . SEMI

    SEMI            shift and go to state 101


state 54

    (17) expression -> expression inside_root . SEMI

    SEMI            shift and go to state 102


state 55

    (18) expression -> variable_declaration SEMI .

    VAR             reduce using rule 18 (expression -> variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 18 (expression -> variable_declaration SEMI .)
    USE             reduce using rule 18 (expression -> variable_declaration SEMI .)
    GLOBAL          reduce using rule 18 (expression -> variable_declaration SEMI .)
    CLASS           reduce using rule 18 (expression -> variable_declaration SEMI .)
    IF              reduce using rule 18 (expression -> variable_declaration SEMI .)
    FUNCTION        reduce using rule 18 (expression -> variable_declaration SEMI .)
    REPEAT          reduce using rule 18 (expression -> variable_declaration SEMI .)
    FOR             reduce using rule 18 (expression -> variable_declaration SEMI .)
    WHILE           reduce using rule 18 (expression -> variable_declaration SEMI .)
    TRY             reduce using rule 18 (expression -> variable_declaration SEMI .)
    DOT             reduce using rule 18 (expression -> variable_declaration SEMI .)
    $end            reduce using rule 18 (expression -> variable_declaration SEMI .)
    RMB             reduce using rule 18 (expression -> variable_declaration SEMI .)


state 56

    (19) expression -> variable_value_change SEMI .

    VAR             reduce using rule 19 (expression -> variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 19 (expression -> variable_value_change SEMI .)
    USE             reduce using rule 19 (expression -> variable_value_change SEMI .)
    GLOBAL          reduce using rule 19 (expression -> variable_value_change SEMI .)
    CLASS           reduce using rule 19 (expression -> variable_value_change SEMI .)
    IF              reduce using rule 19 (expression -> variable_value_change SEMI .)
    FUNCTION        reduce using rule 19 (expression -> variable_value_change SEMI .)
    REPEAT          reduce using rule 19 (expression -> variable_value_change SEMI .)
    FOR             reduce using rule 19 (expression -> variable_value_change SEMI .)
    WHILE           reduce using rule 19 (expression -> variable_value_change SEMI .)
    TRY             reduce using rule 19 (expression -> variable_value_change SEMI .)
    DOT             reduce using rule 19 (expression -> variable_value_change SEMI .)
    $end            reduce using rule 19 (expression -> variable_value_change SEMI .)
    RMB             reduce using rule 19 (expression -> variable_value_change SEMI .)


state 57

    (22) expression -> function_call SEMI .

    VAR             reduce using rule 22 (expression -> function_call SEMI .)
    IDENTIFIER      reduce using rule 22 (expression -> function_call SEMI .)
    USE             reduce using rule 22 (expression -> function_call SEMI .)
    GLOBAL          reduce using rule 22 (expression -> function_call SEMI .)
    CLASS           reduce using rule 22 (expression -> function_call SEMI .)
    IF              reduce using rule 22 (expression -> function_call SEMI .)
    FUNCTION        reduce using rule 22 (expression -> function_call SEMI .)
    REPEAT          reduce using rule 22 (expression -> function_call SEMI .)
    FOR             reduce using rule 22 (expression -> function_call SEMI .)
    WHILE           reduce using rule 22 (expression -> function_call SEMI .)
    TRY             reduce using rule 22 (expression -> function_call SEMI .)
    DOT             reduce using rule 22 (expression -> function_call SEMI .)
    $end            reduce using rule 22 (expression -> function_call SEMI .)
    RMB             reduce using rule 22 (expression -> function_call SEMI .)


state 58

    (26) expression -> use SEMI .

    VAR             reduce using rule 26 (expression -> use SEMI .)
    IDENTIFIER      reduce using rule 26 (expression -> use SEMI .)
    USE             reduce using rule 26 (expression -> use SEMI .)
    GLOBAL          reduce using rule 26 (expression -> use SEMI .)
    CLASS           reduce using rule 26 (expression -> use SEMI .)
    IF              reduce using rule 26 (expression -> use SEMI .)
    FUNCTION        reduce using rule 26 (expression -> use SEMI .)
    REPEAT          reduce using rule 26 (expression -> use SEMI .)
    FOR             reduce using rule 26 (expression -> use SEMI .)
    WHILE           reduce using rule 26 (expression -> use SEMI .)
    TRY             reduce using rule 26 (expression -> use SEMI .)
    DOT             reduce using rule 26 (expression -> use SEMI .)
    $end            reduce using rule 26 (expression -> use SEMI .)
    RMB             reduce using rule 26 (expression -> use SEMI .)


state 59

    (28) expression -> variable_alone SEMI .

    VAR             reduce using rule 28 (expression -> variable_alone SEMI .)
    IDENTIFIER      reduce using rule 28 (expression -> variable_alone SEMI .)
    USE             reduce using rule 28 (expression -> variable_alone SEMI .)
    GLOBAL          reduce using rule 28 (expression -> variable_alone SEMI .)
    CLASS           reduce using rule 28 (expression -> variable_alone SEMI .)
    IF              reduce using rule 28 (expression -> variable_alone SEMI .)
    FUNCTION        reduce using rule 28 (expression -> variable_alone SEMI .)
    REPEAT          reduce using rule 28 (expression -> variable_alone SEMI .)
    FOR             reduce using rule 28 (expression -> variable_alone SEMI .)
    WHILE           reduce using rule 28 (expression -> variable_alone SEMI .)
    TRY             reduce using rule 28 (expression -> variable_alone SEMI .)
    DOT             reduce using rule 28 (expression -> variable_alone SEMI .)
    $end            reduce using rule 28 (expression -> variable_alone SEMI .)
    RMB             reduce using rule 28 (expression -> variable_alone SEMI .)


state 60

    (29) expression -> global_variable SEMI .

    VAR             reduce using rule 29 (expression -> global_variable SEMI .)
    IDENTIFIER      reduce using rule 29 (expression -> global_variable SEMI .)
    USE             reduce using rule 29 (expression -> global_variable SEMI .)
    GLOBAL          reduce using rule 29 (expression -> global_variable SEMI .)
    CLASS           reduce using rule 29 (expression -> global_variable SEMI .)
    IF              reduce using rule 29 (expression -> global_variable SEMI .)
    FUNCTION        reduce using rule 29 (expression -> global_variable SEMI .)
    REPEAT          reduce using rule 29 (expression -> global_variable SEMI .)
    FOR             reduce using rule 29 (expression -> global_variable SEMI .)
    WHILE           reduce using rule 29 (expression -> global_variable SEMI .)
    TRY             reduce using rule 29 (expression -> global_variable SEMI .)
    DOT             reduce using rule 29 (expression -> global_variable SEMI .)
    $end            reduce using rule 29 (expression -> global_variable SEMI .)
    RMB             reduce using rule 29 (expression -> global_variable SEMI .)


state 61

    (31) expression -> debug SEMI .

    VAR             reduce using rule 31 (expression -> debug SEMI .)
    IDENTIFIER      reduce using rule 31 (expression -> debug SEMI .)
    USE             reduce using rule 31 (expression -> debug SEMI .)
    GLOBAL          reduce using rule 31 (expression -> debug SEMI .)
    CLASS           reduce using rule 31 (expression -> debug SEMI .)
    IF              reduce using rule 31 (expression -> debug SEMI .)
    FUNCTION        reduce using rule 31 (expression -> debug SEMI .)
    REPEAT          reduce using rule 31 (expression -> debug SEMI .)
    FOR             reduce using rule 31 (expression -> debug SEMI .)
    WHILE           reduce using rule 31 (expression -> debug SEMI .)
    TRY             reduce using rule 31 (expression -> debug SEMI .)
    DOT             reduce using rule 31 (expression -> debug SEMI .)
    $end            reduce using rule 31 (expression -> debug SEMI .)
    RMB             reduce using rule 31 (expression -> debug SEMI .)


state 62

    (32) expression -> function_class SEMI .

    VAR             reduce using rule 32 (expression -> function_class SEMI .)
    IDENTIFIER      reduce using rule 32 (expression -> function_class SEMI .)
    USE             reduce using rule 32 (expression -> function_class SEMI .)
    GLOBAL          reduce using rule 32 (expression -> function_class SEMI .)
    CLASS           reduce using rule 32 (expression -> function_class SEMI .)
    IF              reduce using rule 32 (expression -> function_class SEMI .)
    FUNCTION        reduce using rule 32 (expression -> function_class SEMI .)
    REPEAT          reduce using rule 32 (expression -> function_class SEMI .)
    FOR             reduce using rule 32 (expression -> function_class SEMI .)
    WHILE           reduce using rule 32 (expression -> function_class SEMI .)
    TRY             reduce using rule 32 (expression -> function_class SEMI .)
    DOT             reduce using rule 32 (expression -> function_class SEMI .)
    $end            reduce using rule 32 (expression -> function_class SEMI .)
    RMB             reduce using rule 32 (expression -> function_class SEMI .)


state 63

    (33) expression -> inside_root SEMI .

    VAR             reduce using rule 33 (expression -> inside_root SEMI .)
    IDENTIFIER      reduce using rule 33 (expression -> inside_root SEMI .)
    USE             reduce using rule 33 (expression -> inside_root SEMI .)
    GLOBAL          reduce using rule 33 (expression -> inside_root SEMI .)
    CLASS           reduce using rule 33 (expression -> inside_root SEMI .)
    IF              reduce using rule 33 (expression -> inside_root SEMI .)
    FUNCTION        reduce using rule 33 (expression -> inside_root SEMI .)
    REPEAT          reduce using rule 33 (expression -> inside_root SEMI .)
    FOR             reduce using rule 33 (expression -> inside_root SEMI .)
    WHILE           reduce using rule 33 (expression -> inside_root SEMI .)
    TRY             reduce using rule 33 (expression -> inside_root SEMI .)
    DOT             reduce using rule 33 (expression -> inside_root SEMI .)
    $end            reduce using rule 33 (expression -> inside_root SEMI .)
    RMB             reduce using rule 33 (expression -> inside_root SEMI .)


state 64

    (93) variable_declaration -> VAR IDENTIFIER . LIST EQUAL calculate
    (94) variable_declaration -> VAR IDENTIFIER . EQUAL calculate
    (95) variable_declaration -> VAR IDENTIFIER .
    (59) function_class -> VAR IDENTIFIER . EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> VAR IDENTIFIER . EQUAL IDENTIFIER LSB empty RSB

    LIST            shift and go to state 103
    EQUAL           shift and go to state 104
    SEMI            reduce using rule 95 (variable_declaration -> VAR IDENTIFIER .)


state 65

    (91) variable_value_change -> IDENTIFIER EQUAL . LIST
    (92) variable_value_change -> IDENTIFIER EQUAL . calculate
    (61) function_class -> IDENTIFIER EQUAL . IDENTIFIER LSB parameter RSB
    (62) function_class -> IDENTIFIER EQUAL . IDENTIFIER LSB empty RSB
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    LIST            shift and go to state 106
    IDENTIFIER      shift and go to state 105
    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    LSB             shift and go to state 108

    calculate                      shift and go to state 107

state 66

    (68) function_call -> IDENTIFIER LSB . parameter RSB
    (69) function_call -> IDENTIFIER LSB . empty RSB
    (51) inside -> IDENTIFIER LSB . parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> IDENTIFIER LSB . empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> IDENTIFIER LSB . parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> IDENTIFIER LSB . empty RSB DOT IDENTIFIER LSB parameter RSB
    (57) inside -> IDENTIFIER LSB . parameter RSB DOT IDENTIFIER
    (70) parameter -> . parameter COMMA calculate
    (71) parameter -> . calculate
    (108) empty -> .
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    RSB             reduce using rule 108 (empty -> .)
    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    parameter                      shift and go to state 114
    empty                          shift and go to state 115
    calculate                      shift and go to state 116

state 67

    (55) inside -> IDENTIFIER DOT . IDENTIFIER LSB parameter RSB
    (56) inside -> IDENTIFIER DOT . IDENTIFIER LSB empty RSB
    (58) inside -> IDENTIFIER DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 118


state 68

    (73) if_statement -> if_statement_1 if_statement_2 . if_statement_3
    (74) if_statement -> if_statement_1 if_statement_2 .
    (79) if_statement_2 -> if_statement_2 . ELSE IF LSB condition RSB LMB expression RMB
    (80) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 74 (if_statement -> if_statement_1 if_statement_2 .)
    IDENTIFIER      reduce using rule 74 (if_statement -> if_statement_1 if_statement_2 .)
    USE             reduce using rule 74 (if_statement -> if_statement_1 if_statement_2 .)
    GLOBAL          reduce using rule 74 (if_statement -> if_statement_1 if_statement_2 .)
    CLASS           reduce using rule 74 (if_statement -> if_statement_1 if_statement_2 .)
    IF              reduce using rule 74 (if_statement -> if_statement_1 if_statement_2 .)
    FUNCTION        reduce using rule 74 (if_statement -> if_statement_1 if_statement_2 .)
    REPEAT          reduce using rule 74 (if_statement -> if_statement_1 if_statement_2 .)
    FOR             reduce using rule 74 (if_statement -> if_statement_1 if_statement_2 .)
    WHILE           reduce using rule 74 (if_statement -> if_statement_1 if_statement_2 .)
    TRY             reduce using rule 74 (if_statement -> if_statement_1 if_statement_2 .)
    DOT             reduce using rule 74 (if_statement -> if_statement_1 if_statement_2 .)
    $end            reduce using rule 74 (if_statement -> if_statement_1 if_statement_2 .)
    RMB             reduce using rule 74 (if_statement -> if_statement_1 if_statement_2 .)
    ELSE            shift and go to state 120

    if_statement_3                 shift and go to state 119

state 69

    (75) if_statement -> if_statement_1 if_statement_3 .

    VAR             reduce using rule 75 (if_statement -> if_statement_1 if_statement_3 .)
    IDENTIFIER      reduce using rule 75 (if_statement -> if_statement_1 if_statement_3 .)
    USE             reduce using rule 75 (if_statement -> if_statement_1 if_statement_3 .)
    GLOBAL          reduce using rule 75 (if_statement -> if_statement_1 if_statement_3 .)
    CLASS           reduce using rule 75 (if_statement -> if_statement_1 if_statement_3 .)
    IF              reduce using rule 75 (if_statement -> if_statement_1 if_statement_3 .)
    FUNCTION        reduce using rule 75 (if_statement -> if_statement_1 if_statement_3 .)
    REPEAT          reduce using rule 75 (if_statement -> if_statement_1 if_statement_3 .)
    FOR             reduce using rule 75 (if_statement -> if_statement_1 if_statement_3 .)
    WHILE           reduce using rule 75 (if_statement -> if_statement_1 if_statement_3 .)
    TRY             reduce using rule 75 (if_statement -> if_statement_1 if_statement_3 .)
    DOT             reduce using rule 75 (if_statement -> if_statement_1 if_statement_3 .)
    $end            reduce using rule 75 (if_statement -> if_statement_1 if_statement_3 .)
    RMB             reduce using rule 75 (if_statement -> if_statement_1 if_statement_3 .)


state 70

    (78) if_statement_2 -> ELSE . IF LSB condition RSB LMB expression RMB
    (80) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 121
    LMB             shift and go to state 122


state 71

    (64) function -> function_head function_body .

    VAR             reduce using rule 64 (function -> function_head function_body .)
    IDENTIFIER      reduce using rule 64 (function -> function_head function_body .)
    USE             reduce using rule 64 (function -> function_head function_body .)
    GLOBAL          reduce using rule 64 (function -> function_head function_body .)
    CLASS           reduce using rule 64 (function -> function_head function_body .)
    IF              reduce using rule 64 (function -> function_head function_body .)
    FUNCTION        reduce using rule 64 (function -> function_head function_body .)
    REPEAT          reduce using rule 64 (function -> function_head function_body .)
    FOR             reduce using rule 64 (function -> function_head function_body .)
    WHILE           reduce using rule 64 (function -> function_head function_body .)
    TRY             reduce using rule 64 (function -> function_head function_body .)
    DOT             reduce using rule 64 (function -> function_head function_body .)
    $end            reduce using rule 64 (function -> function_head function_body .)
    RMB             reduce using rule 64 (function -> function_head function_body .)


state 72

    (67) function_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside_root SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside_root SEMI
    (34) expression -> . empty
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (108) empty -> .
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 108 (empty -> .)
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

  ! VAR             [ reduce using rule 108 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 108 (empty -> .) ]
  ! USE             [ reduce using rule 108 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 108 (empty -> .) ]
  ! CLASS           [ reduce using rule 108 (empty -> .) ]
  ! IF              [ reduce using rule 108 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 108 (empty -> .) ]
  ! REPEAT          [ reduce using rule 108 (empty -> .) ]
  ! FOR             [ reduce using rule 108 (empty -> .) ]
  ! WHILE           [ reduce using rule 108 (empty -> .) ]
  ! TRY             [ reduce using rule 108 (empty -> .) ]
  ! DOT             [ reduce using rule 108 (empty -> .) ]

    expression                     shift and go to state 123
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside_root                    shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 73

    (44) repeat -> repeat_head repeat_body .

    VAR             reduce using rule 44 (repeat -> repeat_head repeat_body .)
    IDENTIFIER      reduce using rule 44 (repeat -> repeat_head repeat_body .)
    USE             reduce using rule 44 (repeat -> repeat_head repeat_body .)
    GLOBAL          reduce using rule 44 (repeat -> repeat_head repeat_body .)
    CLASS           reduce using rule 44 (repeat -> repeat_head repeat_body .)
    IF              reduce using rule 44 (repeat -> repeat_head repeat_body .)
    FUNCTION        reduce using rule 44 (repeat -> repeat_head repeat_body .)
    REPEAT          reduce using rule 44 (repeat -> repeat_head repeat_body .)
    FOR             reduce using rule 44 (repeat -> repeat_head repeat_body .)
    WHILE           reduce using rule 44 (repeat -> repeat_head repeat_body .)
    TRY             reduce using rule 44 (repeat -> repeat_head repeat_body .)
    DOT             reduce using rule 44 (repeat -> repeat_head repeat_body .)
    $end            reduce using rule 44 (repeat -> repeat_head repeat_body .)
    RMB             reduce using rule 44 (repeat -> repeat_head repeat_body .)


state 74

    (46) repeat_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside_root SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside_root SEMI
    (34) expression -> . empty
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (108) empty -> .
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 108 (empty -> .)
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

  ! VAR             [ reduce using rule 108 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 108 (empty -> .) ]
  ! USE             [ reduce using rule 108 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 108 (empty -> .) ]
  ! CLASS           [ reduce using rule 108 (empty -> .) ]
  ! IF              [ reduce using rule 108 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 108 (empty -> .) ]
  ! REPEAT          [ reduce using rule 108 (empty -> .) ]
  ! FOR             [ reduce using rule 108 (empty -> .) ]
  ! WHILE           [ reduce using rule 108 (empty -> .) ]
  ! TRY             [ reduce using rule 108 (empty -> .) ]
  ! DOT             [ reduce using rule 108 (empty -> .) ]

    expression                     shift and go to state 124
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside_root                    shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 75

    (38) for -> for_head for_body .

    VAR             reduce using rule 38 (for -> for_head for_body .)
    IDENTIFIER      reduce using rule 38 (for -> for_head for_body .)
    USE             reduce using rule 38 (for -> for_head for_body .)
    GLOBAL          reduce using rule 38 (for -> for_head for_body .)
    CLASS           reduce using rule 38 (for -> for_head for_body .)
    IF              reduce using rule 38 (for -> for_head for_body .)
    FUNCTION        reduce using rule 38 (for -> for_head for_body .)
    REPEAT          reduce using rule 38 (for -> for_head for_body .)
    FOR             reduce using rule 38 (for -> for_head for_body .)
    WHILE           reduce using rule 38 (for -> for_head for_body .)
    TRY             reduce using rule 38 (for -> for_head for_body .)
    DOT             reduce using rule 38 (for -> for_head for_body .)
    $end            reduce using rule 38 (for -> for_head for_body .)
    RMB             reduce using rule 38 (for -> for_head for_body .)


state 76

    (40) for_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside_root SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside_root SEMI
    (34) expression -> . empty
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (108) empty -> .
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 108 (empty -> .)
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

  ! VAR             [ reduce using rule 108 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 108 (empty -> .) ]
  ! USE             [ reduce using rule 108 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 108 (empty -> .) ]
  ! CLASS           [ reduce using rule 108 (empty -> .) ]
  ! IF              [ reduce using rule 108 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 108 (empty -> .) ]
  ! REPEAT          [ reduce using rule 108 (empty -> .) ]
  ! FOR             [ reduce using rule 108 (empty -> .) ]
  ! WHILE           [ reduce using rule 108 (empty -> .) ]
  ! TRY             [ reduce using rule 108 (empty -> .) ]
  ! DOT             [ reduce using rule 108 (empty -> .) ]

    expression                     shift and go to state 125
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside_root                    shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 77

    (41) while -> while_head while_body .

    VAR             reduce using rule 41 (while -> while_head while_body .)
    IDENTIFIER      reduce using rule 41 (while -> while_head while_body .)
    USE             reduce using rule 41 (while -> while_head while_body .)
    GLOBAL          reduce using rule 41 (while -> while_head while_body .)
    CLASS           reduce using rule 41 (while -> while_head while_body .)
    IF              reduce using rule 41 (while -> while_head while_body .)
    FUNCTION        reduce using rule 41 (while -> while_head while_body .)
    REPEAT          reduce using rule 41 (while -> while_head while_body .)
    FOR             reduce using rule 41 (while -> while_head while_body .)
    WHILE           reduce using rule 41 (while -> while_head while_body .)
    TRY             reduce using rule 41 (while -> while_head while_body .)
    DOT             reduce using rule 41 (while -> while_head while_body .)
    $end            reduce using rule 41 (while -> while_head while_body .)
    RMB             reduce using rule 41 (while -> while_head while_body .)


state 78

    (43) while_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside_root SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside_root SEMI
    (34) expression -> . empty
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (108) empty -> .
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 108 (empty -> .)
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

  ! VAR             [ reduce using rule 108 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 108 (empty -> .) ]
  ! USE             [ reduce using rule 108 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 108 (empty -> .) ]
  ! CLASS           [ reduce using rule 108 (empty -> .) ]
  ! IF              [ reduce using rule 108 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 108 (empty -> .) ]
  ! REPEAT          [ reduce using rule 108 (empty -> .) ]
  ! FOR             [ reduce using rule 108 (empty -> .) ]
  ! WHILE           [ reduce using rule 108 (empty -> .) ]
  ! TRY             [ reduce using rule 108 (empty -> .) ]
  ! DOT             [ reduce using rule 108 (empty -> .) ]

    expression                     shift and go to state 126
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside_root                    shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 79

    (87) use -> USE use_params .

    SEMI            reduce using rule 87 (use -> USE use_params .)


state 80

    (72) debug -> USE DEBUG .

    SEMI            reduce using rule 72 (debug -> USE DEBUG .)


state 81

    (88) use_params -> IDENTIFIER .

    SEMI            reduce using rule 88 (use_params -> IDENTIFIER .)


state 82

    (35) error_handling -> try catch .

    VAR             reduce using rule 35 (error_handling -> try catch .)
    IDENTIFIER      reduce using rule 35 (error_handling -> try catch .)
    USE             reduce using rule 35 (error_handling -> try catch .)
    GLOBAL          reduce using rule 35 (error_handling -> try catch .)
    CLASS           reduce using rule 35 (error_handling -> try catch .)
    IF              reduce using rule 35 (error_handling -> try catch .)
    FUNCTION        reduce using rule 35 (error_handling -> try catch .)
    REPEAT          reduce using rule 35 (error_handling -> try catch .)
    FOR             reduce using rule 35 (error_handling -> try catch .)
    WHILE           reduce using rule 35 (error_handling -> try catch .)
    TRY             reduce using rule 35 (error_handling -> try catch .)
    DOT             reduce using rule 35 (error_handling -> try catch .)
    $end            reduce using rule 35 (error_handling -> try catch .)
    RMB             reduce using rule 35 (error_handling -> try catch .)


state 83

    (37) catch -> CATCH . LSB IDENTIFIER RSB LMB expression RMB

    LSB             shift and go to state 127


state 84

    (89) global_variable -> GLOBAL IDENTIFIER .

    SEMI            reduce using rule 89 (global_variable -> GLOBAL IDENTIFIER .)


state 85

    (63) class_def -> CLASS IDENTIFIER . LMB expression RMB

    LMB             shift and go to state 128


state 86

    (48) inside_root -> inside DOT . IDENTIFIER LSB parameter RSB
    (50) inside -> inside DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 129


state 87

    (49) inside -> DOT IDENTIFIER . LSB empty RSB

    LSB             shift and go to state 130


state 88

    (77) if_statement_1 -> IF LSB . condition RSB LMB expression RMB
    (81) condition -> . condition LB calculate
    (82) condition -> . condition RB calculate
    (83) condition -> . condition LB EQUAL calculate
    (84) condition -> . condition RB EQUAL calculate
    (85) condition -> . condition EQUAL calculate
    (86) condition -> . calculate
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    condition                      shift and go to state 131
    calculate                      shift and go to state 132

state 89

    (65) function_head -> FUNCTION IDENTIFIER . LSB parameter RSB
    (66) function_head -> FUNCTION IDENTIFIER . LSB empty RSB

    LSB             shift and go to state 133


state 90

    (45) repeat_head -> REPEAT LSB . calculate RSB
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    calculate                      shift and go to state 134

state 91

    (39) for_head -> FOR LSB . IDENTIFIER IN IDENTIFIER RSB

    IDENTIFIER      shift and go to state 135


state 92

    (42) while_head -> WHILE LSB . condition RSB
    (81) condition -> . condition LB calculate
    (82) condition -> . condition RB calculate
    (83) condition -> . condition LB EQUAL calculate
    (84) condition -> . condition RB EQUAL calculate
    (85) condition -> . condition EQUAL calculate
    (86) condition -> . calculate
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    condition                      shift and go to state 136
    calculate                      shift and go to state 132

state 93

    (36) try -> TRY LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside_root SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside_root SEMI
    (34) expression -> . empty
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (108) empty -> .
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 108 (empty -> .)
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

  ! VAR             [ reduce using rule 108 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 108 (empty -> .) ]
  ! USE             [ reduce using rule 108 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 108 (empty -> .) ]
  ! CLASS           [ reduce using rule 108 (empty -> .) ]
  ! IF              [ reduce using rule 108 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 108 (empty -> .) ]
  ! REPEAT          [ reduce using rule 108 (empty -> .) ]
  ! FOR             [ reduce using rule 108 (empty -> .) ]
  ! WHILE           [ reduce using rule 108 (empty -> .) ]
  ! TRY             [ reduce using rule 108 (empty -> .) ]
  ! DOT             [ reduce using rule 108 (empty -> .) ]

    expression                     shift and go to state 137
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside_root                    shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 94

    (2) expression -> expression variable_declaration SEMI .

    VAR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    USE             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    GLOBAL          reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    CLASS           reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IF              reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FUNCTION        reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    REPEAT          reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FOR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    WHILE           reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    TRY             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    DOT             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    $end            reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    RMB             reduce using rule 2 (expression -> expression variable_declaration SEMI .)


state 95

    (3) expression -> expression variable_value_change SEMI .

    VAR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    USE             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    GLOBAL          reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    CLASS           reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IF              reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FUNCTION        reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    REPEAT          reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FOR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    WHILE           reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    TRY             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    DOT             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    $end            reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    RMB             reduce using rule 3 (expression -> expression variable_value_change SEMI .)


state 96

    (6) expression -> expression function_call SEMI .

    VAR             reduce using rule 6 (expression -> expression function_call SEMI .)
    IDENTIFIER      reduce using rule 6 (expression -> expression function_call SEMI .)
    USE             reduce using rule 6 (expression -> expression function_call SEMI .)
    GLOBAL          reduce using rule 6 (expression -> expression function_call SEMI .)
    CLASS           reduce using rule 6 (expression -> expression function_call SEMI .)
    IF              reduce using rule 6 (expression -> expression function_call SEMI .)
    FUNCTION        reduce using rule 6 (expression -> expression function_call SEMI .)
    REPEAT          reduce using rule 6 (expression -> expression function_call SEMI .)
    FOR             reduce using rule 6 (expression -> expression function_call SEMI .)
    WHILE           reduce using rule 6 (expression -> expression function_call SEMI .)
    TRY             reduce using rule 6 (expression -> expression function_call SEMI .)
    DOT             reduce using rule 6 (expression -> expression function_call SEMI .)
    $end            reduce using rule 6 (expression -> expression function_call SEMI .)
    RMB             reduce using rule 6 (expression -> expression function_call SEMI .)


state 97

    (10) expression -> expression use SEMI .

    VAR             reduce using rule 10 (expression -> expression use SEMI .)
    IDENTIFIER      reduce using rule 10 (expression -> expression use SEMI .)
    USE             reduce using rule 10 (expression -> expression use SEMI .)
    GLOBAL          reduce using rule 10 (expression -> expression use SEMI .)
    CLASS           reduce using rule 10 (expression -> expression use SEMI .)
    IF              reduce using rule 10 (expression -> expression use SEMI .)
    FUNCTION        reduce using rule 10 (expression -> expression use SEMI .)
    REPEAT          reduce using rule 10 (expression -> expression use SEMI .)
    FOR             reduce using rule 10 (expression -> expression use SEMI .)
    WHILE           reduce using rule 10 (expression -> expression use SEMI .)
    TRY             reduce using rule 10 (expression -> expression use SEMI .)
    DOT             reduce using rule 10 (expression -> expression use SEMI .)
    $end            reduce using rule 10 (expression -> expression use SEMI .)
    RMB             reduce using rule 10 (expression -> expression use SEMI .)


state 98

    (12) expression -> expression variable_alone SEMI .

    VAR             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    IDENTIFIER      reduce using rule 12 (expression -> expression variable_alone SEMI .)
    USE             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    GLOBAL          reduce using rule 12 (expression -> expression variable_alone SEMI .)
    CLASS           reduce using rule 12 (expression -> expression variable_alone SEMI .)
    IF              reduce using rule 12 (expression -> expression variable_alone SEMI .)
    FUNCTION        reduce using rule 12 (expression -> expression variable_alone SEMI .)
    REPEAT          reduce using rule 12 (expression -> expression variable_alone SEMI .)
    FOR             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    WHILE           reduce using rule 12 (expression -> expression variable_alone SEMI .)
    TRY             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    DOT             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    $end            reduce using rule 12 (expression -> expression variable_alone SEMI .)
    RMB             reduce using rule 12 (expression -> expression variable_alone SEMI .)


state 99

    (13) expression -> expression global_variable SEMI .

    VAR             reduce using rule 13 (expression -> expression global_variable SEMI .)
    IDENTIFIER      reduce using rule 13 (expression -> expression global_variable SEMI .)
    USE             reduce using rule 13 (expression -> expression global_variable SEMI .)
    GLOBAL          reduce using rule 13 (expression -> expression global_variable SEMI .)
    CLASS           reduce using rule 13 (expression -> expression global_variable SEMI .)
    IF              reduce using rule 13 (expression -> expression global_variable SEMI .)
    FUNCTION        reduce using rule 13 (expression -> expression global_variable SEMI .)
    REPEAT          reduce using rule 13 (expression -> expression global_variable SEMI .)
    FOR             reduce using rule 13 (expression -> expression global_variable SEMI .)
    WHILE           reduce using rule 13 (expression -> expression global_variable SEMI .)
    TRY             reduce using rule 13 (expression -> expression global_variable SEMI .)
    DOT             reduce using rule 13 (expression -> expression global_variable SEMI .)
    $end            reduce using rule 13 (expression -> expression global_variable SEMI .)
    RMB             reduce using rule 13 (expression -> expression global_variable SEMI .)


state 100

    (15) expression -> expression debug SEMI .

    VAR             reduce using rule 15 (expression -> expression debug SEMI .)
    IDENTIFIER      reduce using rule 15 (expression -> expression debug SEMI .)
    USE             reduce using rule 15 (expression -> expression debug SEMI .)
    GLOBAL          reduce using rule 15 (expression -> expression debug SEMI .)
    CLASS           reduce using rule 15 (expression -> expression debug SEMI .)
    IF              reduce using rule 15 (expression -> expression debug SEMI .)
    FUNCTION        reduce using rule 15 (expression -> expression debug SEMI .)
    REPEAT          reduce using rule 15 (expression -> expression debug SEMI .)
    FOR             reduce using rule 15 (expression -> expression debug SEMI .)
    WHILE           reduce using rule 15 (expression -> expression debug SEMI .)
    TRY             reduce using rule 15 (expression -> expression debug SEMI .)
    DOT             reduce using rule 15 (expression -> expression debug SEMI .)
    $end            reduce using rule 15 (expression -> expression debug SEMI .)
    RMB             reduce using rule 15 (expression -> expression debug SEMI .)


state 101

    (16) expression -> expression function_class SEMI .

    VAR             reduce using rule 16 (expression -> expression function_class SEMI .)
    IDENTIFIER      reduce using rule 16 (expression -> expression function_class SEMI .)
    USE             reduce using rule 16 (expression -> expression function_class SEMI .)
    GLOBAL          reduce using rule 16 (expression -> expression function_class SEMI .)
    CLASS           reduce using rule 16 (expression -> expression function_class SEMI .)
    IF              reduce using rule 16 (expression -> expression function_class SEMI .)
    FUNCTION        reduce using rule 16 (expression -> expression function_class SEMI .)
    REPEAT          reduce using rule 16 (expression -> expression function_class SEMI .)
    FOR             reduce using rule 16 (expression -> expression function_class SEMI .)
    WHILE           reduce using rule 16 (expression -> expression function_class SEMI .)
    TRY             reduce using rule 16 (expression -> expression function_class SEMI .)
    DOT             reduce using rule 16 (expression -> expression function_class SEMI .)
    $end            reduce using rule 16 (expression -> expression function_class SEMI .)
    RMB             reduce using rule 16 (expression -> expression function_class SEMI .)


state 102

    (17) expression -> expression inside_root SEMI .

    VAR             reduce using rule 17 (expression -> expression inside_root SEMI .)
    IDENTIFIER      reduce using rule 17 (expression -> expression inside_root SEMI .)
    USE             reduce using rule 17 (expression -> expression inside_root SEMI .)
    GLOBAL          reduce using rule 17 (expression -> expression inside_root SEMI .)
    CLASS           reduce using rule 17 (expression -> expression inside_root SEMI .)
    IF              reduce using rule 17 (expression -> expression inside_root SEMI .)
    FUNCTION        reduce using rule 17 (expression -> expression inside_root SEMI .)
    REPEAT          reduce using rule 17 (expression -> expression inside_root SEMI .)
    FOR             reduce using rule 17 (expression -> expression inside_root SEMI .)
    WHILE           reduce using rule 17 (expression -> expression inside_root SEMI .)
    TRY             reduce using rule 17 (expression -> expression inside_root SEMI .)
    DOT             reduce using rule 17 (expression -> expression inside_root SEMI .)
    $end            reduce using rule 17 (expression -> expression inside_root SEMI .)
    RMB             reduce using rule 17 (expression -> expression inside_root SEMI .)


state 103

    (93) variable_declaration -> VAR IDENTIFIER LIST . EQUAL calculate

    EQUAL           shift and go to state 138


state 104

    (94) variable_declaration -> VAR IDENTIFIER EQUAL . calculate
    (59) function_class -> VAR IDENTIFIER EQUAL . IDENTIFIER LSB parameter RSB
    (60) function_class -> VAR IDENTIFIER EQUAL . IDENTIFIER LSB empty RSB
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    IDENTIFIER      shift and go to state 139
    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    calculate                      shift and go to state 140

state 105

    (61) function_class -> IDENTIFIER EQUAL IDENTIFIER . LSB parameter RSB
    (62) function_class -> IDENTIFIER EQUAL IDENTIFIER . LSB empty RSB
    (104) calculate -> IDENTIFIER .
    (105) calculate -> IDENTIFIER . LIST

    LSB             shift and go to state 141
    PLUS            reduce using rule 104 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 104 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 104 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 104 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 104 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 142


state 106

    (91) variable_value_change -> IDENTIFIER EQUAL LIST .
    (106) calculate -> LIST .

  ! reduce/reduce conflict for SEMI resolved using rule 91 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    SEMI            reduce using rule 91 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    PLUS            reduce using rule 106 (calculate -> LIST .)
    MINUS           reduce using rule 106 (calculate -> LIST .)
    MUL             reduce using rule 106 (calculate -> LIST .)
    DIV             reduce using rule 106 (calculate -> LIST .)

  ! SEMI            [ reduce using rule 106 (calculate -> LIST .) ]


state 107

    (92) variable_value_change -> IDENTIFIER EQUAL calculate .
    (96) calculate -> calculate . PLUS calculate
    (97) calculate -> calculate . MINUS calculate
    (99) calculate -> calculate . MUL calculate
    (100) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 92 (variable_value_change -> IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144
    MUL             shift and go to state 145
    DIV             shift and go to state 146


state 108

    (107) calculate -> LSB . calculate RSB
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    calculate                      shift and go to state 147

state 109

    (98) calculate -> MINUS . calculate
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    calculate                      shift and go to state 148

state 110

    (101) calculate -> INT .

    PLUS            reduce using rule 101 (calculate -> INT .)
    MINUS           reduce using rule 101 (calculate -> INT .)
    MUL             reduce using rule 101 (calculate -> INT .)
    DIV             reduce using rule 101 (calculate -> INT .)
    SEMI            reduce using rule 101 (calculate -> INT .)
    RSB             reduce using rule 101 (calculate -> INT .)
    COMMA           reduce using rule 101 (calculate -> INT .)
    LB              reduce using rule 101 (calculate -> INT .)
    RB              reduce using rule 101 (calculate -> INT .)
    EQUAL           reduce using rule 101 (calculate -> INT .)


state 111

    (102) calculate -> FLOAT .

    PLUS            reduce using rule 102 (calculate -> FLOAT .)
    MINUS           reduce using rule 102 (calculate -> FLOAT .)
    MUL             reduce using rule 102 (calculate -> FLOAT .)
    DIV             reduce using rule 102 (calculate -> FLOAT .)
    SEMI            reduce using rule 102 (calculate -> FLOAT .)
    RSB             reduce using rule 102 (calculate -> FLOAT .)
    COMMA           reduce using rule 102 (calculate -> FLOAT .)
    LB              reduce using rule 102 (calculate -> FLOAT .)
    RB              reduce using rule 102 (calculate -> FLOAT .)
    EQUAL           reduce using rule 102 (calculate -> FLOAT .)


state 112

    (103) calculate -> STRING .

    PLUS            reduce using rule 103 (calculate -> STRING .)
    MINUS           reduce using rule 103 (calculate -> STRING .)
    MUL             reduce using rule 103 (calculate -> STRING .)
    DIV             reduce using rule 103 (calculate -> STRING .)
    SEMI            reduce using rule 103 (calculate -> STRING .)
    RSB             reduce using rule 103 (calculate -> STRING .)
    COMMA           reduce using rule 103 (calculate -> STRING .)
    LB              reduce using rule 103 (calculate -> STRING .)
    RB              reduce using rule 103 (calculate -> STRING .)
    EQUAL           reduce using rule 103 (calculate -> STRING .)


state 113

    (104) calculate -> IDENTIFIER .
    (105) calculate -> IDENTIFIER . LIST

    PLUS            reduce using rule 104 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 104 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 104 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 104 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 104 (calculate -> IDENTIFIER .)
    COMMA           reduce using rule 104 (calculate -> IDENTIFIER .)
    LB              reduce using rule 104 (calculate -> IDENTIFIER .)
    RB              reduce using rule 104 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 104 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 104 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 142


state 114

    (68) function_call -> IDENTIFIER LSB parameter . RSB
    (51) inside -> IDENTIFIER LSB parameter . RSB DOT IDENTIFIER LSB parameter RSB
    (53) inside -> IDENTIFIER LSB parameter . RSB DOT IDENTIFIER LSB empty RSB
    (57) inside -> IDENTIFIER LSB parameter . RSB DOT IDENTIFIER
    (70) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 149
    COMMA           shift and go to state 150


state 115

    (69) function_call -> IDENTIFIER LSB empty . RSB
    (52) inside -> IDENTIFIER LSB empty . RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> IDENTIFIER LSB empty . RSB DOT IDENTIFIER LSB parameter RSB

    RSB             shift and go to state 151


state 116

    (71) parameter -> calculate .
    (96) calculate -> calculate . PLUS calculate
    (97) calculate -> calculate . MINUS calculate
    (99) calculate -> calculate . MUL calculate
    (100) calculate -> calculate . DIV calculate

    RSB             reduce using rule 71 (parameter -> calculate .)
    COMMA           reduce using rule 71 (parameter -> calculate .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144
    MUL             shift and go to state 145
    DIV             shift and go to state 146


state 117

    (106) calculate -> LIST .

    PLUS            reduce using rule 106 (calculate -> LIST .)
    MINUS           reduce using rule 106 (calculate -> LIST .)
    MUL             reduce using rule 106 (calculate -> LIST .)
    DIV             reduce using rule 106 (calculate -> LIST .)
    RSB             reduce using rule 106 (calculate -> LIST .)
    COMMA           reduce using rule 106 (calculate -> LIST .)
    LB              reduce using rule 106 (calculate -> LIST .)
    RB              reduce using rule 106 (calculate -> LIST .)
    EQUAL           reduce using rule 106 (calculate -> LIST .)
    SEMI            reduce using rule 106 (calculate -> LIST .)


state 118

    (55) inside -> IDENTIFIER DOT IDENTIFIER . LSB parameter RSB
    (56) inside -> IDENTIFIER DOT IDENTIFIER . LSB empty RSB
    (58) inside -> IDENTIFIER DOT IDENTIFIER .

    LSB             shift and go to state 152
    DOT             reduce using rule 58 (inside -> IDENTIFIER DOT IDENTIFIER .)
    SEMI            reduce using rule 58 (inside -> IDENTIFIER DOT IDENTIFIER .)


state 119

    (73) if_statement -> if_statement_1 if_statement_2 if_statement_3 .

    VAR             reduce using rule 73 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IDENTIFIER      reduce using rule 73 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    USE             reduce using rule 73 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    GLOBAL          reduce using rule 73 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    CLASS           reduce using rule 73 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IF              reduce using rule 73 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FUNCTION        reduce using rule 73 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    REPEAT          reduce using rule 73 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FOR             reduce using rule 73 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    WHILE           reduce using rule 73 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    TRY             reduce using rule 73 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    DOT             reduce using rule 73 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    $end            reduce using rule 73 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    RMB             reduce using rule 73 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)


state 120

    (79) if_statement_2 -> if_statement_2 ELSE . IF LSB condition RSB LMB expression RMB
    (80) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 153
    LMB             shift and go to state 122


state 121

    (78) if_statement_2 -> ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 154


state 122

    (80) if_statement_3 -> ELSE LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside_root SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside_root SEMI
    (34) expression -> . empty
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (108) empty -> .
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 108 (empty -> .)
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

  ! VAR             [ reduce using rule 108 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 108 (empty -> .) ]
  ! USE             [ reduce using rule 108 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 108 (empty -> .) ]
  ! CLASS           [ reduce using rule 108 (empty -> .) ]
  ! IF              [ reduce using rule 108 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 108 (empty -> .) ]
  ! REPEAT          [ reduce using rule 108 (empty -> .) ]
  ! FOR             [ reduce using rule 108 (empty -> .) ]
  ! WHILE           [ reduce using rule 108 (empty -> .) ]
  ! TRY             [ reduce using rule 108 (empty -> .) ]
  ! DOT             [ reduce using rule 108 (empty -> .) ]

    expression                     shift and go to state 155
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside_root                    shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 123

    (67) function_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside_root SEMI
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 156
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

    variable_declaration           shift and go to state 39
    variable_value_change          shift and go to state 40
    if_statement                   shift and go to state 41
    function                       shift and go to state 42
    function_call                  shift and go to state 43
    repeat                         shift and go to state 44
    for                            shift and go to state 45
    while                          shift and go to state 46
    use                            shift and go to state 47
    error_handling                 shift and go to state 48
    variable_alone                 shift and go to state 49
    global_variable                shift and go to state 50
    class_def                      shift and go to state 51
    debug                          shift and go to state 52
    function_class                 shift and go to state 53
    inside_root                    shift and go to state 54
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 124

    (46) repeat_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside_root SEMI
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 157
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

    variable_declaration           shift and go to state 39
    variable_value_change          shift and go to state 40
    if_statement                   shift and go to state 41
    function                       shift and go to state 42
    function_call                  shift and go to state 43
    repeat                         shift and go to state 44
    for                            shift and go to state 45
    while                          shift and go to state 46
    use                            shift and go to state 47
    error_handling                 shift and go to state 48
    variable_alone                 shift and go to state 49
    global_variable                shift and go to state 50
    class_def                      shift and go to state 51
    debug                          shift and go to state 52
    function_class                 shift and go to state 53
    inside_root                    shift and go to state 54
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 125

    (40) for_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside_root SEMI
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 158
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

    variable_declaration           shift and go to state 39
    variable_value_change          shift and go to state 40
    if_statement                   shift and go to state 41
    function                       shift and go to state 42
    function_call                  shift and go to state 43
    repeat                         shift and go to state 44
    for                            shift and go to state 45
    while                          shift and go to state 46
    use                            shift and go to state 47
    error_handling                 shift and go to state 48
    variable_alone                 shift and go to state 49
    global_variable                shift and go to state 50
    class_def                      shift and go to state 51
    debug                          shift and go to state 52
    function_class                 shift and go to state 53
    inside_root                    shift and go to state 54
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 126

    (43) while_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside_root SEMI
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 159
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

    variable_declaration           shift and go to state 39
    variable_value_change          shift and go to state 40
    if_statement                   shift and go to state 41
    function                       shift and go to state 42
    function_call                  shift and go to state 43
    repeat                         shift and go to state 44
    for                            shift and go to state 45
    while                          shift and go to state 46
    use                            shift and go to state 47
    error_handling                 shift and go to state 48
    variable_alone                 shift and go to state 49
    global_variable                shift and go to state 50
    class_def                      shift and go to state 51
    debug                          shift and go to state 52
    function_class                 shift and go to state 53
    inside_root                    shift and go to state 54
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 127

    (37) catch -> CATCH LSB . IDENTIFIER RSB LMB expression RMB

    IDENTIFIER      shift and go to state 160


state 128

    (63) class_def -> CLASS IDENTIFIER LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside_root SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside_root SEMI
    (34) expression -> . empty
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (108) empty -> .
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 108 (empty -> .)
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

  ! VAR             [ reduce using rule 108 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 108 (empty -> .) ]
  ! USE             [ reduce using rule 108 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 108 (empty -> .) ]
  ! CLASS           [ reduce using rule 108 (empty -> .) ]
  ! IF              [ reduce using rule 108 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 108 (empty -> .) ]
  ! REPEAT          [ reduce using rule 108 (empty -> .) ]
  ! FOR             [ reduce using rule 108 (empty -> .) ]
  ! WHILE           [ reduce using rule 108 (empty -> .) ]
  ! TRY             [ reduce using rule 108 (empty -> .) ]
  ! DOT             [ reduce using rule 108 (empty -> .) ]

    expression                     shift and go to state 161
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside_root                    shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 129

    (48) inside_root -> inside DOT IDENTIFIER . LSB parameter RSB
    (50) inside -> inside DOT IDENTIFIER .

    LSB             shift and go to state 162
    DOT             reduce using rule 50 (inside -> inside DOT IDENTIFIER .)
    SEMI            reduce using rule 50 (inside -> inside DOT IDENTIFIER .)


state 130

    (49) inside -> DOT IDENTIFIER LSB . empty RSB
    (108) empty -> .

    RSB             reduce using rule 108 (empty -> .)

    empty                          shift and go to state 163

state 131

    (77) if_statement_1 -> IF LSB condition . RSB LMB expression RMB
    (81) condition -> condition . LB calculate
    (82) condition -> condition . RB calculate
    (83) condition -> condition . LB EQUAL calculate
    (84) condition -> condition . RB EQUAL calculate
    (85) condition -> condition . EQUAL calculate

    RSB             shift and go to state 164
    LB              shift and go to state 165
    RB              shift and go to state 166
    EQUAL           shift and go to state 167


state 132

    (86) condition -> calculate .
    (96) calculate -> calculate . PLUS calculate
    (97) calculate -> calculate . MINUS calculate
    (99) calculate -> calculate . MUL calculate
    (100) calculate -> calculate . DIV calculate

    RSB             reduce using rule 86 (condition -> calculate .)
    LB              reduce using rule 86 (condition -> calculate .)
    RB              reduce using rule 86 (condition -> calculate .)
    EQUAL           reduce using rule 86 (condition -> calculate .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144
    MUL             shift and go to state 145
    DIV             shift and go to state 146


state 133

    (65) function_head -> FUNCTION IDENTIFIER LSB . parameter RSB
    (66) function_head -> FUNCTION IDENTIFIER LSB . empty RSB
    (70) parameter -> . parameter COMMA calculate
    (71) parameter -> . calculate
    (108) empty -> .
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    RSB             reduce using rule 108 (empty -> .)
    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    parameter                      shift and go to state 168
    empty                          shift and go to state 169
    calculate                      shift and go to state 116

state 134

    (45) repeat_head -> REPEAT LSB calculate . RSB
    (96) calculate -> calculate . PLUS calculate
    (97) calculate -> calculate . MINUS calculate
    (99) calculate -> calculate . MUL calculate
    (100) calculate -> calculate . DIV calculate

    RSB             shift and go to state 170
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144
    MUL             shift and go to state 145
    DIV             shift and go to state 146


state 135

    (39) for_head -> FOR LSB IDENTIFIER . IN IDENTIFIER RSB

    IN              shift and go to state 171


state 136

    (42) while_head -> WHILE LSB condition . RSB
    (81) condition -> condition . LB calculate
    (82) condition -> condition . RB calculate
    (83) condition -> condition . LB EQUAL calculate
    (84) condition -> condition . RB EQUAL calculate
    (85) condition -> condition . EQUAL calculate

    RSB             shift and go to state 172
    LB              shift and go to state 165
    RB              shift and go to state 166
    EQUAL           shift and go to state 167


state 137

    (36) try -> TRY LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside_root SEMI
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 173
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

    variable_declaration           shift and go to state 39
    variable_value_change          shift and go to state 40
    if_statement                   shift and go to state 41
    function                       shift and go to state 42
    function_call                  shift and go to state 43
    repeat                         shift and go to state 44
    for                            shift and go to state 45
    while                          shift and go to state 46
    use                            shift and go to state 47
    error_handling                 shift and go to state 48
    variable_alone                 shift and go to state 49
    global_variable                shift and go to state 50
    class_def                      shift and go to state 51
    debug                          shift and go to state 52
    function_class                 shift and go to state 53
    inside_root                    shift and go to state 54
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 138

    (93) variable_declaration -> VAR IDENTIFIER LIST EQUAL . calculate
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    calculate                      shift and go to state 174

state 139

    (59) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER . LSB parameter RSB
    (60) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER . LSB empty RSB
    (104) calculate -> IDENTIFIER .
    (105) calculate -> IDENTIFIER . LIST

    LSB             shift and go to state 175
    PLUS            reduce using rule 104 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 104 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 104 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 104 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 104 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 142


state 140

    (94) variable_declaration -> VAR IDENTIFIER EQUAL calculate .
    (96) calculate -> calculate . PLUS calculate
    (97) calculate -> calculate . MINUS calculate
    (99) calculate -> calculate . MUL calculate
    (100) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 94 (variable_declaration -> VAR IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144
    MUL             shift and go to state 145
    DIV             shift and go to state 146


state 141

    (61) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB . parameter RSB
    (62) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB . empty RSB
    (70) parameter -> . parameter COMMA calculate
    (71) parameter -> . calculate
    (108) empty -> .
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    RSB             reduce using rule 108 (empty -> .)
    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    parameter                      shift and go to state 176
    empty                          shift and go to state 177
    calculate                      shift and go to state 116

state 142

    (105) calculate -> IDENTIFIER LIST .

    PLUS            reduce using rule 105 (calculate -> IDENTIFIER LIST .)
    MINUS           reduce using rule 105 (calculate -> IDENTIFIER LIST .)
    MUL             reduce using rule 105 (calculate -> IDENTIFIER LIST .)
    DIV             reduce using rule 105 (calculate -> IDENTIFIER LIST .)
    SEMI            reduce using rule 105 (calculate -> IDENTIFIER LIST .)
    RSB             reduce using rule 105 (calculate -> IDENTIFIER LIST .)
    COMMA           reduce using rule 105 (calculate -> IDENTIFIER LIST .)
    LB              reduce using rule 105 (calculate -> IDENTIFIER LIST .)
    RB              reduce using rule 105 (calculate -> IDENTIFIER LIST .)
    EQUAL           reduce using rule 105 (calculate -> IDENTIFIER LIST .)


state 143

    (96) calculate -> calculate PLUS . calculate
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    calculate                      shift and go to state 178

state 144

    (97) calculate -> calculate MINUS . calculate
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    calculate                      shift and go to state 179

state 145

    (99) calculate -> calculate MUL . calculate
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    calculate                      shift and go to state 180

state 146

    (100) calculate -> calculate DIV . calculate
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    calculate                      shift and go to state 181

state 147

    (107) calculate -> LSB calculate . RSB
    (96) calculate -> calculate . PLUS calculate
    (97) calculate -> calculate . MINUS calculate
    (99) calculate -> calculate . MUL calculate
    (100) calculate -> calculate . DIV calculate

    RSB             shift and go to state 182
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144
    MUL             shift and go to state 145
    DIV             shift and go to state 146


state 148

    (98) calculate -> MINUS calculate .
    (96) calculate -> calculate . PLUS calculate
    (97) calculate -> calculate . MINUS calculate
    (99) calculate -> calculate . MUL calculate
    (100) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 98 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 98 (calculate -> MINUS calculate .)
    MUL             reduce using rule 98 (calculate -> MINUS calculate .)
    DIV             reduce using rule 98 (calculate -> MINUS calculate .)
    SEMI            reduce using rule 98 (calculate -> MINUS calculate .)
    RSB             reduce using rule 98 (calculate -> MINUS calculate .)
    COMMA           reduce using rule 98 (calculate -> MINUS calculate .)
    LB              reduce using rule 98 (calculate -> MINUS calculate .)
    RB              reduce using rule 98 (calculate -> MINUS calculate .)
    EQUAL           reduce using rule 98 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 143 ]
  ! MINUS           [ shift and go to state 144 ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]


state 149

    (68) function_call -> IDENTIFIER LSB parameter RSB .
    (51) inside -> IDENTIFIER LSB parameter RSB . DOT IDENTIFIER LSB parameter RSB
    (53) inside -> IDENTIFIER LSB parameter RSB . DOT IDENTIFIER LSB empty RSB
    (57) inside -> IDENTIFIER LSB parameter RSB . DOT IDENTIFIER

    SEMI            reduce using rule 68 (function_call -> IDENTIFIER LSB parameter RSB .)
    DOT             shift and go to state 183


state 150

    (70) parameter -> parameter COMMA . calculate
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    calculate                      shift and go to state 184

state 151

    (69) function_call -> IDENTIFIER LSB empty RSB .
    (52) inside -> IDENTIFIER LSB empty RSB . DOT IDENTIFIER LSB empty RSB
    (54) inside -> IDENTIFIER LSB empty RSB . DOT IDENTIFIER LSB parameter RSB

    SEMI            reduce using rule 69 (function_call -> IDENTIFIER LSB empty RSB .)
    DOT             shift and go to state 185


state 152

    (55) inside -> IDENTIFIER DOT IDENTIFIER LSB . parameter RSB
    (56) inside -> IDENTIFIER DOT IDENTIFIER LSB . empty RSB
    (70) parameter -> . parameter COMMA calculate
    (71) parameter -> . calculate
    (108) empty -> .
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    RSB             reduce using rule 108 (empty -> .)
    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    parameter                      shift and go to state 186
    empty                          shift and go to state 187
    calculate                      shift and go to state 116

state 153

    (79) if_statement_2 -> if_statement_2 ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 188


state 154

    (78) if_statement_2 -> ELSE IF LSB . condition RSB LMB expression RMB
    (81) condition -> . condition LB calculate
    (82) condition -> . condition RB calculate
    (83) condition -> . condition LB EQUAL calculate
    (84) condition -> . condition RB EQUAL calculate
    (85) condition -> . condition EQUAL calculate
    (86) condition -> . calculate
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    condition                      shift and go to state 189
    calculate                      shift and go to state 132

state 155

    (80) if_statement_3 -> ELSE LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside_root SEMI
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 190
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

    variable_declaration           shift and go to state 39
    variable_value_change          shift and go to state 40
    if_statement                   shift and go to state 41
    function                       shift and go to state 42
    function_call                  shift and go to state 43
    repeat                         shift and go to state 44
    for                            shift and go to state 45
    while                          shift and go to state 46
    use                            shift and go to state 47
    error_handling                 shift and go to state 48
    variable_alone                 shift and go to state 49
    global_variable                shift and go to state 50
    class_def                      shift and go to state 51
    debug                          shift and go to state 52
    function_class                 shift and go to state 53
    inside_root                    shift and go to state 54
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 156

    (67) function_body -> LMB expression RMB .

    VAR             reduce using rule 67 (function_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 67 (function_body -> LMB expression RMB .)
    USE             reduce using rule 67 (function_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 67 (function_body -> LMB expression RMB .)
    CLASS           reduce using rule 67 (function_body -> LMB expression RMB .)
    IF              reduce using rule 67 (function_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 67 (function_body -> LMB expression RMB .)
    REPEAT          reduce using rule 67 (function_body -> LMB expression RMB .)
    FOR             reduce using rule 67 (function_body -> LMB expression RMB .)
    WHILE           reduce using rule 67 (function_body -> LMB expression RMB .)
    TRY             reduce using rule 67 (function_body -> LMB expression RMB .)
    DOT             reduce using rule 67 (function_body -> LMB expression RMB .)
    $end            reduce using rule 67 (function_body -> LMB expression RMB .)
    RMB             reduce using rule 67 (function_body -> LMB expression RMB .)


state 157

    (46) repeat_body -> LMB expression RMB .

    VAR             reduce using rule 46 (repeat_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 46 (repeat_body -> LMB expression RMB .)
    USE             reduce using rule 46 (repeat_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 46 (repeat_body -> LMB expression RMB .)
    CLASS           reduce using rule 46 (repeat_body -> LMB expression RMB .)
    IF              reduce using rule 46 (repeat_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 46 (repeat_body -> LMB expression RMB .)
    REPEAT          reduce using rule 46 (repeat_body -> LMB expression RMB .)
    FOR             reduce using rule 46 (repeat_body -> LMB expression RMB .)
    WHILE           reduce using rule 46 (repeat_body -> LMB expression RMB .)
    TRY             reduce using rule 46 (repeat_body -> LMB expression RMB .)
    DOT             reduce using rule 46 (repeat_body -> LMB expression RMB .)
    $end            reduce using rule 46 (repeat_body -> LMB expression RMB .)
    RMB             reduce using rule 46 (repeat_body -> LMB expression RMB .)


state 158

    (40) for_body -> LMB expression RMB .

    VAR             reduce using rule 40 (for_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 40 (for_body -> LMB expression RMB .)
    USE             reduce using rule 40 (for_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 40 (for_body -> LMB expression RMB .)
    CLASS           reduce using rule 40 (for_body -> LMB expression RMB .)
    IF              reduce using rule 40 (for_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 40 (for_body -> LMB expression RMB .)
    REPEAT          reduce using rule 40 (for_body -> LMB expression RMB .)
    FOR             reduce using rule 40 (for_body -> LMB expression RMB .)
    WHILE           reduce using rule 40 (for_body -> LMB expression RMB .)
    TRY             reduce using rule 40 (for_body -> LMB expression RMB .)
    DOT             reduce using rule 40 (for_body -> LMB expression RMB .)
    $end            reduce using rule 40 (for_body -> LMB expression RMB .)
    RMB             reduce using rule 40 (for_body -> LMB expression RMB .)


state 159

    (43) while_body -> LMB expression RMB .

    VAR             reduce using rule 43 (while_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 43 (while_body -> LMB expression RMB .)
    USE             reduce using rule 43 (while_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 43 (while_body -> LMB expression RMB .)
    CLASS           reduce using rule 43 (while_body -> LMB expression RMB .)
    IF              reduce using rule 43 (while_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 43 (while_body -> LMB expression RMB .)
    REPEAT          reduce using rule 43 (while_body -> LMB expression RMB .)
    FOR             reduce using rule 43 (while_body -> LMB expression RMB .)
    WHILE           reduce using rule 43 (while_body -> LMB expression RMB .)
    TRY             reduce using rule 43 (while_body -> LMB expression RMB .)
    DOT             reduce using rule 43 (while_body -> LMB expression RMB .)
    $end            reduce using rule 43 (while_body -> LMB expression RMB .)
    RMB             reduce using rule 43 (while_body -> LMB expression RMB .)


state 160

    (37) catch -> CATCH LSB IDENTIFIER . RSB LMB expression RMB

    RSB             shift and go to state 191


state 161

    (63) class_def -> CLASS IDENTIFIER LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside_root SEMI
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 192
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

    variable_declaration           shift and go to state 39
    variable_value_change          shift and go to state 40
    if_statement                   shift and go to state 41
    function                       shift and go to state 42
    function_call                  shift and go to state 43
    repeat                         shift and go to state 44
    for                            shift and go to state 45
    while                          shift and go to state 46
    use                            shift and go to state 47
    error_handling                 shift and go to state 48
    variable_alone                 shift and go to state 49
    global_variable                shift and go to state 50
    class_def                      shift and go to state 51
    debug                          shift and go to state 52
    function_class                 shift and go to state 53
    inside_root                    shift and go to state 54
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 162

    (48) inside_root -> inside DOT IDENTIFIER LSB . parameter RSB
    (70) parameter -> . parameter COMMA calculate
    (71) parameter -> . calculate
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    parameter                      shift and go to state 193
    calculate                      shift and go to state 116

state 163

    (49) inside -> DOT IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 194


state 164

    (77) if_statement_1 -> IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 195


state 165

    (81) condition -> condition LB . calculate
    (83) condition -> condition LB . EQUAL calculate
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 197
    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    calculate                      shift and go to state 196

state 166

    (82) condition -> condition RB . calculate
    (84) condition -> condition RB . EQUAL calculate
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 199
    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    calculate                      shift and go to state 198

state 167

    (85) condition -> condition EQUAL . calculate
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    calculate                      shift and go to state 200

state 168

    (65) function_head -> FUNCTION IDENTIFIER LSB parameter . RSB
    (70) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 201
    COMMA           shift and go to state 150


state 169

    (66) function_head -> FUNCTION IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 202


state 170

    (45) repeat_head -> REPEAT LSB calculate RSB .

    LMB             reduce using rule 45 (repeat_head -> REPEAT LSB calculate RSB .)


state 171

    (39) for_head -> FOR LSB IDENTIFIER IN . IDENTIFIER RSB

    IDENTIFIER      shift and go to state 203


state 172

    (42) while_head -> WHILE LSB condition RSB .

    LMB             reduce using rule 42 (while_head -> WHILE LSB condition RSB .)


state 173

    (36) try -> TRY LMB expression RMB .

    CATCH           reduce using rule 36 (try -> TRY LMB expression RMB .)


state 174

    (93) variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .
    (96) calculate -> calculate . PLUS calculate
    (97) calculate -> calculate . MINUS calculate
    (99) calculate -> calculate . MUL calculate
    (100) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 93 (variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144
    MUL             shift and go to state 145
    DIV             shift and go to state 146


state 175

    (59) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB . parameter RSB
    (60) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB . empty RSB
    (70) parameter -> . parameter COMMA calculate
    (71) parameter -> . calculate
    (108) empty -> .
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    RSB             reduce using rule 108 (empty -> .)
    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    parameter                      shift and go to state 204
    empty                          shift and go to state 205
    calculate                      shift and go to state 116

state 176

    (61) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter . RSB
    (70) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 206
    COMMA           shift and go to state 150


state 177

    (62) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 207


state 178

    (96) calculate -> calculate PLUS calculate .
    (96) calculate -> calculate . PLUS calculate
    (97) calculate -> calculate . MINUS calculate
    (99) calculate -> calculate . MUL calculate
    (100) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 96 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 96 (calculate -> calculate PLUS calculate .)
    SEMI            reduce using rule 96 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 96 (calculate -> calculate PLUS calculate .)
    COMMA           reduce using rule 96 (calculate -> calculate PLUS calculate .)
    LB              reduce using rule 96 (calculate -> calculate PLUS calculate .)
    RB              reduce using rule 96 (calculate -> calculate PLUS calculate .)
    EQUAL           reduce using rule 96 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 145
    DIV             shift and go to state 146

  ! MUL             [ reduce using rule 96 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 96 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 143 ]
  ! MINUS           [ shift and go to state 144 ]


state 179

    (97) calculate -> calculate MINUS calculate .
    (96) calculate -> calculate . PLUS calculate
    (97) calculate -> calculate . MINUS calculate
    (99) calculate -> calculate . MUL calculate
    (100) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 97 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 97 (calculate -> calculate MINUS calculate .)
    SEMI            reduce using rule 97 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 97 (calculate -> calculate MINUS calculate .)
    COMMA           reduce using rule 97 (calculate -> calculate MINUS calculate .)
    LB              reduce using rule 97 (calculate -> calculate MINUS calculate .)
    RB              reduce using rule 97 (calculate -> calculate MINUS calculate .)
    EQUAL           reduce using rule 97 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 145
    DIV             shift and go to state 146

  ! MUL             [ reduce using rule 97 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 97 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 143 ]
  ! MINUS           [ shift and go to state 144 ]


state 180

    (99) calculate -> calculate MUL calculate .
    (96) calculate -> calculate . PLUS calculate
    (97) calculate -> calculate . MINUS calculate
    (99) calculate -> calculate . MUL calculate
    (100) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 99 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 99 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 99 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 99 (calculate -> calculate MUL calculate .)
    SEMI            reduce using rule 99 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 99 (calculate -> calculate MUL calculate .)
    COMMA           reduce using rule 99 (calculate -> calculate MUL calculate .)
    LB              reduce using rule 99 (calculate -> calculate MUL calculate .)
    RB              reduce using rule 99 (calculate -> calculate MUL calculate .)
    EQUAL           reduce using rule 99 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 143 ]
  ! MINUS           [ shift and go to state 144 ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]


state 181

    (100) calculate -> calculate DIV calculate .
    (96) calculate -> calculate . PLUS calculate
    (97) calculate -> calculate . MINUS calculate
    (99) calculate -> calculate . MUL calculate
    (100) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 100 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 100 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 100 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 100 (calculate -> calculate DIV calculate .)
    SEMI            reduce using rule 100 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 100 (calculate -> calculate DIV calculate .)
    COMMA           reduce using rule 100 (calculate -> calculate DIV calculate .)
    LB              reduce using rule 100 (calculate -> calculate DIV calculate .)
    RB              reduce using rule 100 (calculate -> calculate DIV calculate .)
    EQUAL           reduce using rule 100 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 143 ]
  ! MINUS           [ shift and go to state 144 ]
  ! MUL             [ shift and go to state 145 ]
  ! DIV             [ shift and go to state 146 ]


state 182

    (107) calculate -> LSB calculate RSB .

    PLUS            reduce using rule 107 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 107 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 107 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 107 (calculate -> LSB calculate RSB .)
    SEMI            reduce using rule 107 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 107 (calculate -> LSB calculate RSB .)
    COMMA           reduce using rule 107 (calculate -> LSB calculate RSB .)
    LB              reduce using rule 107 (calculate -> LSB calculate RSB .)
    RB              reduce using rule 107 (calculate -> LSB calculate RSB .)
    EQUAL           reduce using rule 107 (calculate -> LSB calculate RSB .)


state 183

    (51) inside -> IDENTIFIER LSB parameter RSB DOT . IDENTIFIER LSB parameter RSB
    (53) inside -> IDENTIFIER LSB parameter RSB DOT . IDENTIFIER LSB empty RSB
    (57) inside -> IDENTIFIER LSB parameter RSB DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 208


state 184

    (70) parameter -> parameter COMMA calculate .
    (96) calculate -> calculate . PLUS calculate
    (97) calculate -> calculate . MINUS calculate
    (99) calculate -> calculate . MUL calculate
    (100) calculate -> calculate . DIV calculate

    RSB             reduce using rule 70 (parameter -> parameter COMMA calculate .)
    COMMA           reduce using rule 70 (parameter -> parameter COMMA calculate .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144
    MUL             shift and go to state 145
    DIV             shift and go to state 146


state 185

    (52) inside -> IDENTIFIER LSB empty RSB DOT . IDENTIFIER LSB empty RSB
    (54) inside -> IDENTIFIER LSB empty RSB DOT . IDENTIFIER LSB parameter RSB

    IDENTIFIER      shift and go to state 209


state 186

    (55) inside -> IDENTIFIER DOT IDENTIFIER LSB parameter . RSB
    (70) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 210
    COMMA           shift and go to state 150


state 187

    (56) inside -> IDENTIFIER DOT IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 211


state 188

    (79) if_statement_2 -> if_statement_2 ELSE IF LSB . condition RSB LMB expression RMB
    (81) condition -> . condition LB calculate
    (82) condition -> . condition RB calculate
    (83) condition -> . condition LB EQUAL calculate
    (84) condition -> . condition RB EQUAL calculate
    (85) condition -> . condition EQUAL calculate
    (86) condition -> . calculate
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    condition                      shift and go to state 212
    calculate                      shift and go to state 132

state 189

    (78) if_statement_2 -> ELSE IF LSB condition . RSB LMB expression RMB
    (81) condition -> condition . LB calculate
    (82) condition -> condition . RB calculate
    (83) condition -> condition . LB EQUAL calculate
    (84) condition -> condition . RB EQUAL calculate
    (85) condition -> condition . EQUAL calculate

    RSB             shift and go to state 213
    LB              shift and go to state 165
    RB              shift and go to state 166
    EQUAL           shift and go to state 167


state 190

    (80) if_statement_3 -> ELSE LMB expression RMB .

    VAR             reduce using rule 80 (if_statement_3 -> ELSE LMB expression RMB .)
    IDENTIFIER      reduce using rule 80 (if_statement_3 -> ELSE LMB expression RMB .)
    USE             reduce using rule 80 (if_statement_3 -> ELSE LMB expression RMB .)
    GLOBAL          reduce using rule 80 (if_statement_3 -> ELSE LMB expression RMB .)
    CLASS           reduce using rule 80 (if_statement_3 -> ELSE LMB expression RMB .)
    IF              reduce using rule 80 (if_statement_3 -> ELSE LMB expression RMB .)
    FUNCTION        reduce using rule 80 (if_statement_3 -> ELSE LMB expression RMB .)
    REPEAT          reduce using rule 80 (if_statement_3 -> ELSE LMB expression RMB .)
    FOR             reduce using rule 80 (if_statement_3 -> ELSE LMB expression RMB .)
    WHILE           reduce using rule 80 (if_statement_3 -> ELSE LMB expression RMB .)
    TRY             reduce using rule 80 (if_statement_3 -> ELSE LMB expression RMB .)
    DOT             reduce using rule 80 (if_statement_3 -> ELSE LMB expression RMB .)
    $end            reduce using rule 80 (if_statement_3 -> ELSE LMB expression RMB .)
    RMB             reduce using rule 80 (if_statement_3 -> ELSE LMB expression RMB .)


state 191

    (37) catch -> CATCH LSB IDENTIFIER RSB . LMB expression RMB

    LMB             shift and go to state 214


state 192

    (63) class_def -> CLASS IDENTIFIER LMB expression RMB .

    VAR             reduce using rule 63 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    IDENTIFIER      reduce using rule 63 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    USE             reduce using rule 63 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    GLOBAL          reduce using rule 63 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    CLASS           reduce using rule 63 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    IF              reduce using rule 63 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    FUNCTION        reduce using rule 63 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    REPEAT          reduce using rule 63 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    FOR             reduce using rule 63 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    WHILE           reduce using rule 63 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    TRY             reduce using rule 63 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    DOT             reduce using rule 63 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    $end            reduce using rule 63 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    RMB             reduce using rule 63 (class_def -> CLASS IDENTIFIER LMB expression RMB .)


state 193

    (48) inside_root -> inside DOT IDENTIFIER LSB parameter . RSB
    (70) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 215
    COMMA           shift and go to state 150


state 194

    (49) inside -> DOT IDENTIFIER LSB empty RSB .

    DOT             reduce using rule 49 (inside -> DOT IDENTIFIER LSB empty RSB .)
    SEMI            reduce using rule 49 (inside -> DOT IDENTIFIER LSB empty RSB .)


state 195

    (77) if_statement_1 -> IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside_root SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside_root SEMI
    (34) expression -> . empty
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (108) empty -> .
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 108 (empty -> .)
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

  ! VAR             [ reduce using rule 108 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 108 (empty -> .) ]
  ! USE             [ reduce using rule 108 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 108 (empty -> .) ]
  ! CLASS           [ reduce using rule 108 (empty -> .) ]
  ! IF              [ reduce using rule 108 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 108 (empty -> .) ]
  ! REPEAT          [ reduce using rule 108 (empty -> .) ]
  ! FOR             [ reduce using rule 108 (empty -> .) ]
  ! WHILE           [ reduce using rule 108 (empty -> .) ]
  ! TRY             [ reduce using rule 108 (empty -> .) ]
  ! DOT             [ reduce using rule 108 (empty -> .) ]

    expression                     shift and go to state 216
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside_root                    shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 196

    (81) condition -> condition LB calculate .
    (96) calculate -> calculate . PLUS calculate
    (97) calculate -> calculate . MINUS calculate
    (99) calculate -> calculate . MUL calculate
    (100) calculate -> calculate . DIV calculate

    RSB             reduce using rule 81 (condition -> condition LB calculate .)
    LB              reduce using rule 81 (condition -> condition LB calculate .)
    RB              reduce using rule 81 (condition -> condition LB calculate .)
    EQUAL           reduce using rule 81 (condition -> condition LB calculate .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144
    MUL             shift and go to state 145
    DIV             shift and go to state 146


state 197

    (83) condition -> condition LB EQUAL . calculate
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    calculate                      shift and go to state 217

state 198

    (82) condition -> condition RB calculate .
    (96) calculate -> calculate . PLUS calculate
    (97) calculate -> calculate . MINUS calculate
    (99) calculate -> calculate . MUL calculate
    (100) calculate -> calculate . DIV calculate

    RSB             reduce using rule 82 (condition -> condition RB calculate .)
    LB              reduce using rule 82 (condition -> condition RB calculate .)
    RB              reduce using rule 82 (condition -> condition RB calculate .)
    EQUAL           reduce using rule 82 (condition -> condition RB calculate .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144
    MUL             shift and go to state 145
    DIV             shift and go to state 146


state 199

    (84) condition -> condition RB EQUAL . calculate
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    calculate                      shift and go to state 218

state 200

    (85) condition -> condition EQUAL calculate .
    (96) calculate -> calculate . PLUS calculate
    (97) calculate -> calculate . MINUS calculate
    (99) calculate -> calculate . MUL calculate
    (100) calculate -> calculate . DIV calculate

    RSB             reduce using rule 85 (condition -> condition EQUAL calculate .)
    LB              reduce using rule 85 (condition -> condition EQUAL calculate .)
    RB              reduce using rule 85 (condition -> condition EQUAL calculate .)
    EQUAL           reduce using rule 85 (condition -> condition EQUAL calculate .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144
    MUL             shift and go to state 145
    DIV             shift and go to state 146


state 201

    (65) function_head -> FUNCTION IDENTIFIER LSB parameter RSB .

    LMB             reduce using rule 65 (function_head -> FUNCTION IDENTIFIER LSB parameter RSB .)


state 202

    (66) function_head -> FUNCTION IDENTIFIER LSB empty RSB .

    LMB             reduce using rule 66 (function_head -> FUNCTION IDENTIFIER LSB empty RSB .)


state 203

    (39) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER . RSB

    RSB             shift and go to state 219


state 204

    (59) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter . RSB
    (70) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 220
    COMMA           shift and go to state 150


state 205

    (60) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 221


state 206

    (61) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .

    SEMI            reduce using rule 61 (function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .)


state 207

    (62) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .

    SEMI            reduce using rule 62 (function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .)


state 208

    (51) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER . LSB parameter RSB
    (53) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER . LSB empty RSB
    (57) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER .

    LSB             shift and go to state 222
    DOT             reduce using rule 57 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER .)
    SEMI            reduce using rule 57 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER .)


state 209

    (52) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER . LSB empty RSB
    (54) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER . LSB parameter RSB

    LSB             shift and go to state 223


state 210

    (55) inside -> IDENTIFIER DOT IDENTIFIER LSB parameter RSB .

    DOT             reduce using rule 55 (inside -> IDENTIFIER DOT IDENTIFIER LSB parameter RSB .)
    SEMI            reduce using rule 55 (inside -> IDENTIFIER DOT IDENTIFIER LSB parameter RSB .)


state 211

    (56) inside -> IDENTIFIER DOT IDENTIFIER LSB empty RSB .

    DOT             reduce using rule 56 (inside -> IDENTIFIER DOT IDENTIFIER LSB empty RSB .)
    SEMI            reduce using rule 56 (inside -> IDENTIFIER DOT IDENTIFIER LSB empty RSB .)


state 212

    (79) if_statement_2 -> if_statement_2 ELSE IF LSB condition . RSB LMB expression RMB
    (81) condition -> condition . LB calculate
    (82) condition -> condition . RB calculate
    (83) condition -> condition . LB EQUAL calculate
    (84) condition -> condition . RB EQUAL calculate
    (85) condition -> condition . EQUAL calculate

    RSB             shift and go to state 224
    LB              shift and go to state 165
    RB              shift and go to state 166
    EQUAL           shift and go to state 167


state 213

    (78) if_statement_2 -> ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 225


state 214

    (37) catch -> CATCH LSB IDENTIFIER RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside_root SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside_root SEMI
    (34) expression -> . empty
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (108) empty -> .
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 108 (empty -> .)
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

  ! VAR             [ reduce using rule 108 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 108 (empty -> .) ]
  ! USE             [ reduce using rule 108 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 108 (empty -> .) ]
  ! CLASS           [ reduce using rule 108 (empty -> .) ]
  ! IF              [ reduce using rule 108 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 108 (empty -> .) ]
  ! REPEAT          [ reduce using rule 108 (empty -> .) ]
  ! FOR             [ reduce using rule 108 (empty -> .) ]
  ! WHILE           [ reduce using rule 108 (empty -> .) ]
  ! TRY             [ reduce using rule 108 (empty -> .) ]
  ! DOT             [ reduce using rule 108 (empty -> .) ]

    expression                     shift and go to state 226
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside_root                    shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 215

    (48) inside_root -> inside DOT IDENTIFIER LSB parameter RSB .

    SEMI            reduce using rule 48 (inside_root -> inside DOT IDENTIFIER LSB parameter RSB .)


state 216

    (77) if_statement_1 -> IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside_root SEMI
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 227
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

    variable_declaration           shift and go to state 39
    variable_value_change          shift and go to state 40
    if_statement                   shift and go to state 41
    function                       shift and go to state 42
    function_call                  shift and go to state 43
    repeat                         shift and go to state 44
    for                            shift and go to state 45
    while                          shift and go to state 46
    use                            shift and go to state 47
    error_handling                 shift and go to state 48
    variable_alone                 shift and go to state 49
    global_variable                shift and go to state 50
    class_def                      shift and go to state 51
    debug                          shift and go to state 52
    function_class                 shift and go to state 53
    inside_root                    shift and go to state 54
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 217

    (83) condition -> condition LB EQUAL calculate .
    (96) calculate -> calculate . PLUS calculate
    (97) calculate -> calculate . MINUS calculate
    (99) calculate -> calculate . MUL calculate
    (100) calculate -> calculate . DIV calculate

    RSB             reduce using rule 83 (condition -> condition LB EQUAL calculate .)
    LB              reduce using rule 83 (condition -> condition LB EQUAL calculate .)
    RB              reduce using rule 83 (condition -> condition LB EQUAL calculate .)
    EQUAL           reduce using rule 83 (condition -> condition LB EQUAL calculate .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144
    MUL             shift and go to state 145
    DIV             shift and go to state 146


state 218

    (84) condition -> condition RB EQUAL calculate .
    (96) calculate -> calculate . PLUS calculate
    (97) calculate -> calculate . MINUS calculate
    (99) calculate -> calculate . MUL calculate
    (100) calculate -> calculate . DIV calculate

    RSB             reduce using rule 84 (condition -> condition RB EQUAL calculate .)
    LB              reduce using rule 84 (condition -> condition RB EQUAL calculate .)
    RB              reduce using rule 84 (condition -> condition RB EQUAL calculate .)
    EQUAL           reduce using rule 84 (condition -> condition RB EQUAL calculate .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144
    MUL             shift and go to state 145
    DIV             shift and go to state 146


state 219

    (39) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .

    LMB             reduce using rule 39 (for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .)


state 220

    (59) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .

    SEMI            reduce using rule 59 (function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .)


state 221

    (60) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .

    SEMI            reduce using rule 60 (function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .)


state 222

    (51) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB . parameter RSB
    (53) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB . empty RSB
    (70) parameter -> . parameter COMMA calculate
    (71) parameter -> . calculate
    (108) empty -> .
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    RSB             reduce using rule 108 (empty -> .)
    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    parameter                      shift and go to state 228
    empty                          shift and go to state 229
    calculate                      shift and go to state 116

state 223

    (52) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB . empty RSB
    (54) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB . parameter RSB
    (108) empty -> .
    (70) parameter -> . parameter COMMA calculate
    (71) parameter -> . calculate
    (96) calculate -> . calculate PLUS calculate
    (97) calculate -> . calculate MINUS calculate
    (98) calculate -> . MINUS calculate
    (99) calculate -> . calculate MUL calculate
    (100) calculate -> . calculate DIV calculate
    (101) calculate -> . INT
    (102) calculate -> . FLOAT
    (103) calculate -> . STRING
    (104) calculate -> . IDENTIFIER
    (105) calculate -> . IDENTIFIER LIST
    (106) calculate -> . LIST
    (107) calculate -> . LSB calculate RSB

    RSB             reduce using rule 108 (empty -> .)
    MINUS           shift and go to state 109
    INT             shift and go to state 110
    FLOAT           shift and go to state 111
    STRING          shift and go to state 112
    IDENTIFIER      shift and go to state 113
    LIST            shift and go to state 117
    LSB             shift and go to state 108

    empty                          shift and go to state 230
    parameter                      shift and go to state 231
    calculate                      shift and go to state 116

state 224

    (79) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 232


state 225

    (78) if_statement_2 -> ELSE IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside_root SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside_root SEMI
    (34) expression -> . empty
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (108) empty -> .
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 108 (empty -> .)
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

  ! VAR             [ reduce using rule 108 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 108 (empty -> .) ]
  ! USE             [ reduce using rule 108 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 108 (empty -> .) ]
  ! CLASS           [ reduce using rule 108 (empty -> .) ]
  ! IF              [ reduce using rule 108 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 108 (empty -> .) ]
  ! REPEAT          [ reduce using rule 108 (empty -> .) ]
  ! FOR             [ reduce using rule 108 (empty -> .) ]
  ! WHILE           [ reduce using rule 108 (empty -> .) ]
  ! TRY             [ reduce using rule 108 (empty -> .) ]
  ! DOT             [ reduce using rule 108 (empty -> .) ]

    expression                     shift and go to state 233
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside_root                    shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 226

    (37) catch -> CATCH LSB IDENTIFIER RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside_root SEMI
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 234
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

    variable_declaration           shift and go to state 39
    variable_value_change          shift and go to state 40
    if_statement                   shift and go to state 41
    function                       shift and go to state 42
    function_call                  shift and go to state 43
    repeat                         shift and go to state 44
    for                            shift and go to state 45
    while                          shift and go to state 46
    use                            shift and go to state 47
    error_handling                 shift and go to state 48
    variable_alone                 shift and go to state 49
    global_variable                shift and go to state 50
    class_def                      shift and go to state 51
    debug                          shift and go to state 52
    function_class                 shift and go to state 53
    inside_root                    shift and go to state 54
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 227

    (77) if_statement_1 -> IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 77 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 77 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 77 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 77 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 77 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 77 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 77 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 77 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 77 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 77 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 77 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 77 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    DOT             reduce using rule 77 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 77 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 77 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)


state 228

    (51) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter . RSB
    (70) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 235
    COMMA           shift and go to state 150


state 229

    (53) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 236


state 230

    (52) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 237


state 231

    (54) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter . RSB
    (70) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 238
    COMMA           shift and go to state 150


state 232

    (79) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside_root SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside_root SEMI
    (34) expression -> . empty
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (108) empty -> .
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 108 (empty -> .)
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

  ! VAR             [ reduce using rule 108 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 108 (empty -> .) ]
  ! USE             [ reduce using rule 108 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 108 (empty -> .) ]
  ! CLASS           [ reduce using rule 108 (empty -> .) ]
  ! IF              [ reduce using rule 108 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 108 (empty -> .) ]
  ! REPEAT          [ reduce using rule 108 (empty -> .) ]
  ! FOR             [ reduce using rule 108 (empty -> .) ]
  ! WHILE           [ reduce using rule 108 (empty -> .) ]
  ! TRY             [ reduce using rule 108 (empty -> .) ]
  ! DOT             [ reduce using rule 108 (empty -> .) ]

    expression                     shift and go to state 239
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside_root                    shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 233

    (78) if_statement_2 -> ELSE IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside_root SEMI
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 240
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

    variable_declaration           shift and go to state 39
    variable_value_change          shift and go to state 40
    if_statement                   shift and go to state 41
    function                       shift and go to state 42
    function_call                  shift and go to state 43
    repeat                         shift and go to state 44
    for                            shift and go to state 45
    while                          shift and go to state 46
    use                            shift and go to state 47
    error_handling                 shift and go to state 48
    variable_alone                 shift and go to state 49
    global_variable                shift and go to state 50
    class_def                      shift and go to state 51
    debug                          shift and go to state 52
    function_class                 shift and go to state 53
    inside_root                    shift and go to state 54
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 234

    (37) catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .

    VAR             reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    USE             reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    GLOBAL          reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    CLASS           reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IF              reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FUNCTION        reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    REPEAT          reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FOR             reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    WHILE           reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    TRY             reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    DOT             reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    $end            reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    RMB             reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)


state 235

    (51) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB .

    DOT             reduce using rule 51 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB .)
    SEMI            reduce using rule 51 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB .)


state 236

    (53) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB .

    DOT             reduce using rule 53 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB .)
    SEMI            reduce using rule 53 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB .)


state 237

    (52) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB .

    DOT             reduce using rule 52 (inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB .)
    SEMI            reduce using rule 52 (inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB .)


state 238

    (54) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB .

    DOT             reduce using rule 54 (inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB .)
    SEMI            reduce using rule 54 (inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB .)


state 239

    (79) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside_root SEMI
    (93) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (94) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (95) variable_declaration -> . VAR IDENTIFIER
    (91) variable_value_change -> . IDENTIFIER EQUAL LIST
    (92) variable_value_change -> . IDENTIFIER EQUAL calculate
    (73) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (74) if_statement -> . if_statement_1 if_statement_2
    (75) if_statement -> . if_statement_1 if_statement_3
    (76) if_statement -> . if_statement_1
    (64) function -> . function_head function_body
    (68) function_call -> . IDENTIFIER LSB parameter RSB
    (69) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (87) use -> . USE use_params
    (35) error_handling -> . try catch
    (90) variable_alone -> . IDENTIFIER
    (89) global_variable -> . GLOBAL IDENTIFIER
    (63) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (72) debug -> . USE DEBUG
    (59) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (60) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (61) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (62) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside_root -> . inside
    (48) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (77) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (65) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (66) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB
    (49) inside -> . DOT IDENTIFIER LSB empty RSB
    (50) inside -> . inside DOT IDENTIFIER
    (51) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (52) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (53) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (54) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (55) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (56) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (57) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (58) inside -> . IDENTIFIER DOT IDENTIFIER

    RMB             shift and go to state 241
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 33
    FUNCTION        shift and go to state 34
    REPEAT          shift and go to state 35
    FOR             shift and go to state 36
    WHILE           shift and go to state 37
    TRY             shift and go to state 38
    DOT             shift and go to state 32

    variable_declaration           shift and go to state 39
    variable_value_change          shift and go to state 40
    if_statement                   shift and go to state 41
    function                       shift and go to state 42
    function_call                  shift and go to state 43
    repeat                         shift and go to state 44
    for                            shift and go to state 45
    while                          shift and go to state 46
    use                            shift and go to state 47
    error_handling                 shift and go to state 48
    variable_alone                 shift and go to state 49
    global_variable                shift and go to state 50
    class_def                      shift and go to state 51
    debug                          shift and go to state 52
    function_class                 shift and go to state 53
    inside_root                    shift and go to state 54
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28
    inside                         shift and go to state 31

state 240

    (78) if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 78 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 78 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 78 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 78 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 78 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 78 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 78 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 78 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 78 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 78 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 78 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 78 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    DOT             reduce using rule 78 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 78 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 78 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)


state 241

    (79) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 79 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 79 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 79 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 79 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 79 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 79 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 79 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 79 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 79 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 79 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 79 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 79 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    DOT             reduce using rule 79 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 79 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 79 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for USE in state 0 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for DOT in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 72 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 72 resolved as shift
WARNING: shift/reduce conflict for USE in state 72 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 72 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 72 resolved as shift
WARNING: shift/reduce conflict for IF in state 72 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 72 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 72 resolved as shift
WARNING: shift/reduce conflict for FOR in state 72 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 72 resolved as shift
WARNING: shift/reduce conflict for TRY in state 72 resolved as shift
WARNING: shift/reduce conflict for DOT in state 72 resolved as shift
WARNING: shift/reduce conflict for VAR in state 74 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 74 resolved as shift
WARNING: shift/reduce conflict for USE in state 74 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 74 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 74 resolved as shift
WARNING: shift/reduce conflict for IF in state 74 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 74 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 74 resolved as shift
WARNING: shift/reduce conflict for FOR in state 74 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 74 resolved as shift
WARNING: shift/reduce conflict for TRY in state 74 resolved as shift
WARNING: shift/reduce conflict for DOT in state 74 resolved as shift
WARNING: shift/reduce conflict for VAR in state 76 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 76 resolved as shift
WARNING: shift/reduce conflict for USE in state 76 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 76 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 76 resolved as shift
WARNING: shift/reduce conflict for IF in state 76 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 76 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 76 resolved as shift
WARNING: shift/reduce conflict for FOR in state 76 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 76 resolved as shift
WARNING: shift/reduce conflict for TRY in state 76 resolved as shift
WARNING: shift/reduce conflict for DOT in state 76 resolved as shift
WARNING: shift/reduce conflict for VAR in state 78 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 78 resolved as shift
WARNING: shift/reduce conflict for USE in state 78 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 78 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 78 resolved as shift
WARNING: shift/reduce conflict for IF in state 78 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 78 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 78 resolved as shift
WARNING: shift/reduce conflict for FOR in state 78 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 78 resolved as shift
WARNING: shift/reduce conflict for TRY in state 78 resolved as shift
WARNING: shift/reduce conflict for DOT in state 78 resolved as shift
WARNING: shift/reduce conflict for VAR in state 93 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 93 resolved as shift
WARNING: shift/reduce conflict for USE in state 93 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 93 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 93 resolved as shift
WARNING: shift/reduce conflict for IF in state 93 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 93 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 93 resolved as shift
WARNING: shift/reduce conflict for FOR in state 93 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 93 resolved as shift
WARNING: shift/reduce conflict for TRY in state 93 resolved as shift
WARNING: shift/reduce conflict for DOT in state 93 resolved as shift
WARNING: shift/reduce conflict for VAR in state 122 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 122 resolved as shift
WARNING: shift/reduce conflict for USE in state 122 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 122 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 122 resolved as shift
WARNING: shift/reduce conflict for IF in state 122 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 122 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 122 resolved as shift
WARNING: shift/reduce conflict for FOR in state 122 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 122 resolved as shift
WARNING: shift/reduce conflict for TRY in state 122 resolved as shift
WARNING: shift/reduce conflict for DOT in state 122 resolved as shift
WARNING: shift/reduce conflict for VAR in state 128 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 128 resolved as shift
WARNING: shift/reduce conflict for USE in state 128 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 128 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 128 resolved as shift
WARNING: shift/reduce conflict for IF in state 128 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 128 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 128 resolved as shift
WARNING: shift/reduce conflict for FOR in state 128 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 128 resolved as shift
WARNING: shift/reduce conflict for TRY in state 128 resolved as shift
WARNING: shift/reduce conflict for DOT in state 128 resolved as shift
WARNING: shift/reduce conflict for VAR in state 195 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 195 resolved as shift
WARNING: shift/reduce conflict for USE in state 195 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 195 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 195 resolved as shift
WARNING: shift/reduce conflict for IF in state 195 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 195 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 195 resolved as shift
WARNING: shift/reduce conflict for FOR in state 195 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 195 resolved as shift
WARNING: shift/reduce conflict for TRY in state 195 resolved as shift
WARNING: shift/reduce conflict for DOT in state 195 resolved as shift
WARNING: shift/reduce conflict for VAR in state 214 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 214 resolved as shift
WARNING: shift/reduce conflict for USE in state 214 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 214 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 214 resolved as shift
WARNING: shift/reduce conflict for IF in state 214 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 214 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 214 resolved as shift
WARNING: shift/reduce conflict for FOR in state 214 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 214 resolved as shift
WARNING: shift/reduce conflict for TRY in state 214 resolved as shift
WARNING: shift/reduce conflict for DOT in state 214 resolved as shift
WARNING: shift/reduce conflict for VAR in state 225 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 225 resolved as shift
WARNING: shift/reduce conflict for USE in state 225 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 225 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 225 resolved as shift
WARNING: shift/reduce conflict for IF in state 225 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 225 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 225 resolved as shift
WARNING: shift/reduce conflict for FOR in state 225 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 225 resolved as shift
WARNING: shift/reduce conflict for TRY in state 225 resolved as shift
WARNING: shift/reduce conflict for DOT in state 225 resolved as shift
WARNING: shift/reduce conflict for VAR in state 232 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 232 resolved as shift
WARNING: shift/reduce conflict for USE in state 232 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 232 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 232 resolved as shift
WARNING: shift/reduce conflict for IF in state 232 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 232 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 232 resolved as shift
WARNING: shift/reduce conflict for FOR in state 232 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 232 resolved as shift
WARNING: shift/reduce conflict for TRY in state 232 resolved as shift
WARNING: shift/reduce conflict for DOT in state 232 resolved as shift
WARNING: reduce/reduce conflict in state 106 resolved using rule (variable_value_change -> IDENTIFIER EQUAL LIST)
WARNING: rejected rule (calculate -> LIST) in state 106
