Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    DOT
    PYTHON

Grammar

Rule 0     S' -> expression
Rule 1     expression -> print
Rule 2     expression -> expression print
Rule 3     print -> PRINT LSB STRING RSB SEMI
Rule 4     root -> expression
Rule 5     expression -> expression variable_declaration SEMI
Rule 6     expression -> expression variable_value_change SEMI
Rule 7     expression -> expression if_statement
Rule 8     expression -> expression function
Rule 9     expression -> expression function_call SEMI
Rule 10    expression -> expression repeat
Rule 11    expression -> expression for
Rule 12    expression -> expression while
Rule 13    expression -> expression use SEMI
Rule 14    expression -> expression error_handling
Rule 15    expression -> expression variable_alone SEMI
Rule 16    expression -> expression global_variable SEMI
Rule 17    expression -> expression class_def
Rule 18    expression -> expression debug SEMI
Rule 19    expression -> expression function_class SEMI
Rule 20    expression -> variable_declaration SEMI
Rule 21    expression -> variable_value_change SEMI
Rule 22    expression -> if_statement
Rule 23    expression -> function
Rule 24    expression -> function_call SEMI
Rule 25    expression -> repeat
Rule 26    expression -> for
Rule 27    expression -> while
Rule 28    expression -> use SEMI
Rule 29    expression -> error_handling
Rule 30    expression -> variable_alone SEMI
Rule 31    expression -> global_variable SEMI
Rule 32    expression -> class_def
Rule 33    expression -> debug SEMI
Rule 34    expression -> function_class SEMI
Rule 35    expression -> empty
Rule 36    error_handling -> try catch
Rule 37    try -> TRY LMB expression RMB
Rule 38    catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB
Rule 39    for -> for_head for_body
Rule 40    for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB
Rule 41    for_body -> LMB expression RMB
Rule 42    while -> while_head while_body
Rule 43    while_head -> WHILE LSB condition RSB
Rule 44    while_body -> LMB expression RMB
Rule 45    repeat -> repeat_head repeat_body
Rule 46    repeat_head -> REPEAT LSB calculate RSB
Rule 47    repeat_body -> LMB expression RMB
Rule 48    function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
Rule 49    function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
Rule 50    function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
Rule 51    function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
Rule 52    class_def -> CLASS IDENTIFIER LMB expression RMB
Rule 53    function -> function_head function_body
Rule 54    function_head -> FUNCTION IDENTIFIER LSB parameter RSB
Rule 55    function_head -> FUNCTION IDENTIFIER LSB empty RSB
Rule 56    function_body -> LMB expression RMB
Rule 57    function_call -> IDENTIFIER LSB parameter RSB
Rule 58    function_call -> IDENTIFIER LSB empty RSB
Rule 59    parameter -> parameter COMMA calculate
Rule 60    parameter -> calculate
Rule 61    debug -> USE DEBUG
Rule 62    if_statement -> if_statement_1 if_statement_2 if_statement_3
Rule 63    if_statement -> if_statement_1 if_statement_2
Rule 64    if_statement -> if_statement_1 if_statement_3
Rule 65    if_statement -> if_statement_1
Rule 66    if_statement_1 -> IF LSB condition RSB LMB expression RMB
Rule 67    if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB
Rule 68    if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
Rule 69    if_statement_3 -> ELSE LMB expression RMB
Rule 70    condition -> condition LB calculate
Rule 71    condition -> condition RB calculate
Rule 72    condition -> condition LB EQUAL calculate
Rule 73    condition -> condition RB EQUAL calculate
Rule 74    condition -> condition EQUAL calculate
Rule 75    condition -> calculate
Rule 76    use -> USE use_params
Rule 77    use_params -> IDENTIFIER
Rule 78    global_variable -> GLOBAL IDENTIFIER
Rule 79    variable_alone -> IDENTIFIER
Rule 80    variable_value_change -> IDENTIFIER EQUAL LIST
Rule 81    variable_value_change -> IDENTIFIER EQUAL calculate
Rule 82    variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate
Rule 83    variable_declaration -> VAR IDENTIFIER EQUAL calculate
Rule 84    variable_declaration -> VAR IDENTIFIER
Rule 85    calculate -> calculate PLUS calculate
Rule 86    calculate -> calculate MINUS calculate
Rule 87    calculate -> MINUS calculate
Rule 88    calculate -> calculate MUL calculate
Rule 89    calculate -> calculate DIV calculate
Rule 90    calculate -> INT
Rule 91    calculate -> FLOAT
Rule 92    calculate -> STRING
Rule 93    calculate -> IDENTIFIER
Rule 94    calculate -> IDENTIFIER LIST
Rule 95    calculate -> LIST
Rule 96    calculate -> LSB calculate RSB
Rule 97    empty -> <empty>

Terminals, with rules where they appear

CATCH                : 38
CLASS                : 52
COLON                : 
COMMA                : 59
DEBUG                : 61
DIV                  : 89
DOT                  : 
ELSE                 : 67 68 69
EQUAL                : 48 49 50 51 72 73 74 80 81 82 83
FLOAT                : 91
FOR                  : 40
FUNCTION             : 54 55
GLOBAL               : 78
IDENTIFIER           : 38 40 40 48 48 49 49 50 50 51 51 52 54 55 57 58 77 78 79 80 81 82 83 84 93 94
IF                   : 66 67 68
IN                   : 40
INT                  : 90
LB                   : 70 72
LIST                 : 80 82 94 95
LMB                  : 37 38 41 44 47 52 56 66 67 68 69
LSB                  : 3 38 40 43 46 48 49 50 51 54 55 57 58 66 67 68 96
MINUS                : 86 87
MUL                  : 88
PLUS                 : 85
PRINT                : 3
PYTHON               : 
RB                   : 71 73
REPEAT               : 46
RMB                  : 37 38 41 44 47 52 56 66 67 68 69
RSB                  : 3 38 40 43 46 48 49 50 51 54 55 57 58 66 67 68 96
SEMI                 : 3 5 6 9 13 15 16 18 19 20 21 24 28 30 31 33 34
STRING               : 3 92
TRY                  : 37
USE                  : 61 76
VAR                  : 48 49 82 83 84
WHILE                : 43
error                : 

Nonterminals, with rules where they appear

calculate            : 46 59 60 70 71 72 73 74 75 81 82 83 85 85 86 86 87 88 88 89 89 96
catch                : 36
class_def            : 17 32
condition            : 43 66 67 68 70 71 72 73 74
debug                : 18 33
empty                : 35 49 51 55 58
error_handling       : 14 29
expression           : 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 37 38 41 44 47 52 56 66 67 68 69 0
for                  : 11 26
for_body             : 39
for_head             : 39
function             : 8 23
function_body        : 53
function_call        : 9 24
function_class       : 19 34
function_head        : 53
global_variable      : 16 31
if_statement         : 7 22
if_statement_1       : 62 63 64 65
if_statement_2       : 62 63 68
if_statement_3       : 62 64
parameter            : 48 50 54 57 59
print                : 1 2
repeat               : 10 25
repeat_body          : 45
repeat_head          : 45
root                 : 
try                  : 36
use                  : 13 28
use_params           : 76
variable_alone       : 15 30
variable_declaration : 5 20
variable_value_change : 6 21
while                : 12 27
while_body           : 42
while_head           : 42

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . print
    (2) expression -> . expression print
    (5) expression -> . expression variable_declaration SEMI
    (6) expression -> . expression variable_value_change SEMI
    (7) expression -> . expression if_statement
    (8) expression -> . expression function
    (9) expression -> . expression function_call SEMI
    (10) expression -> . expression repeat
    (11) expression -> . expression for
    (12) expression -> . expression while
    (13) expression -> . expression use SEMI
    (14) expression -> . expression error_handling
    (15) expression -> . expression variable_alone SEMI
    (16) expression -> . expression global_variable SEMI
    (17) expression -> . expression class_def
    (18) expression -> . expression debug SEMI
    (19) expression -> . expression function_class SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . empty
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    $end            reduce using rule 97 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! PRINT           [ reduce using rule 97 (empty -> .) ]
  ! VAR             [ reduce using rule 97 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 97 (empty -> .) ]
  ! USE             [ reduce using rule 97 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 97 (empty -> .) ]
  ! CLASS           [ reduce using rule 97 (empty -> .) ]
  ! IF              [ reduce using rule 97 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 97 (empty -> .) ]
  ! REPEAT          [ reduce using rule 97 (empty -> .) ]
  ! FOR             [ reduce using rule 97 (empty -> .) ]
  ! WHILE           [ reduce using rule 97 (empty -> .) ]
  ! TRY             [ reduce using rule 97 (empty -> .) ]

    expression                     shift and go to state 1
    print                          shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 1

    (0) S' -> expression .
    (2) expression -> expression . print
    (5) expression -> expression . variable_declaration SEMI
    (6) expression -> expression . variable_value_change SEMI
    (7) expression -> expression . if_statement
    (8) expression -> expression . function
    (9) expression -> expression . function_call SEMI
    (10) expression -> expression . repeat
    (11) expression -> expression . for
    (12) expression -> expression . while
    (13) expression -> expression . use SEMI
    (14) expression -> expression . error_handling
    (15) expression -> expression . variable_alone SEMI
    (16) expression -> expression . global_variable SEMI
    (17) expression -> expression . class_def
    (18) expression -> expression . debug SEMI
    (19) expression -> expression . function_class SEMI
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    print                          shift and go to state 37
    variable_declaration           shift and go to state 38
    variable_value_change          shift and go to state 39
    if_statement                   shift and go to state 40
    function                       shift and go to state 41
    function_call                  shift and go to state 42
    repeat                         shift and go to state 43
    for                            shift and go to state 44
    while                          shift and go to state 45
    use                            shift and go to state 46
    error_handling                 shift and go to state 47
    variable_alone                 shift and go to state 48
    global_variable                shift and go to state 49
    class_def                      shift and go to state 50
    debug                          shift and go to state 51
    function_class                 shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 2

    (1) expression -> print .

    PRINT           reduce using rule 1 (expression -> print .)
    VAR             reduce using rule 1 (expression -> print .)
    IDENTIFIER      reduce using rule 1 (expression -> print .)
    USE             reduce using rule 1 (expression -> print .)
    GLOBAL          reduce using rule 1 (expression -> print .)
    CLASS           reduce using rule 1 (expression -> print .)
    IF              reduce using rule 1 (expression -> print .)
    FUNCTION        reduce using rule 1 (expression -> print .)
    REPEAT          reduce using rule 1 (expression -> print .)
    FOR             reduce using rule 1 (expression -> print .)
    WHILE           reduce using rule 1 (expression -> print .)
    TRY             reduce using rule 1 (expression -> print .)
    $end            reduce using rule 1 (expression -> print .)
    RMB             reduce using rule 1 (expression -> print .)


state 3

    (20) expression -> variable_declaration . SEMI

    SEMI            shift and go to state 53


state 4

    (21) expression -> variable_value_change . SEMI

    SEMI            shift and go to state 54


state 5

    (22) expression -> if_statement .

    PRINT           reduce using rule 22 (expression -> if_statement .)
    VAR             reduce using rule 22 (expression -> if_statement .)
    IDENTIFIER      reduce using rule 22 (expression -> if_statement .)
    USE             reduce using rule 22 (expression -> if_statement .)
    GLOBAL          reduce using rule 22 (expression -> if_statement .)
    CLASS           reduce using rule 22 (expression -> if_statement .)
    IF              reduce using rule 22 (expression -> if_statement .)
    FUNCTION        reduce using rule 22 (expression -> if_statement .)
    REPEAT          reduce using rule 22 (expression -> if_statement .)
    FOR             reduce using rule 22 (expression -> if_statement .)
    WHILE           reduce using rule 22 (expression -> if_statement .)
    TRY             reduce using rule 22 (expression -> if_statement .)
    $end            reduce using rule 22 (expression -> if_statement .)
    RMB             reduce using rule 22 (expression -> if_statement .)


state 6

    (23) expression -> function .

    PRINT           reduce using rule 23 (expression -> function .)
    VAR             reduce using rule 23 (expression -> function .)
    IDENTIFIER      reduce using rule 23 (expression -> function .)
    USE             reduce using rule 23 (expression -> function .)
    GLOBAL          reduce using rule 23 (expression -> function .)
    CLASS           reduce using rule 23 (expression -> function .)
    IF              reduce using rule 23 (expression -> function .)
    FUNCTION        reduce using rule 23 (expression -> function .)
    REPEAT          reduce using rule 23 (expression -> function .)
    FOR             reduce using rule 23 (expression -> function .)
    WHILE           reduce using rule 23 (expression -> function .)
    TRY             reduce using rule 23 (expression -> function .)
    $end            reduce using rule 23 (expression -> function .)
    RMB             reduce using rule 23 (expression -> function .)


state 7

    (24) expression -> function_call . SEMI

    SEMI            shift and go to state 55


state 8

    (25) expression -> repeat .

    PRINT           reduce using rule 25 (expression -> repeat .)
    VAR             reduce using rule 25 (expression -> repeat .)
    IDENTIFIER      reduce using rule 25 (expression -> repeat .)
    USE             reduce using rule 25 (expression -> repeat .)
    GLOBAL          reduce using rule 25 (expression -> repeat .)
    CLASS           reduce using rule 25 (expression -> repeat .)
    IF              reduce using rule 25 (expression -> repeat .)
    FUNCTION        reduce using rule 25 (expression -> repeat .)
    REPEAT          reduce using rule 25 (expression -> repeat .)
    FOR             reduce using rule 25 (expression -> repeat .)
    WHILE           reduce using rule 25 (expression -> repeat .)
    TRY             reduce using rule 25 (expression -> repeat .)
    $end            reduce using rule 25 (expression -> repeat .)
    RMB             reduce using rule 25 (expression -> repeat .)


state 9

    (26) expression -> for .

    PRINT           reduce using rule 26 (expression -> for .)
    VAR             reduce using rule 26 (expression -> for .)
    IDENTIFIER      reduce using rule 26 (expression -> for .)
    USE             reduce using rule 26 (expression -> for .)
    GLOBAL          reduce using rule 26 (expression -> for .)
    CLASS           reduce using rule 26 (expression -> for .)
    IF              reduce using rule 26 (expression -> for .)
    FUNCTION        reduce using rule 26 (expression -> for .)
    REPEAT          reduce using rule 26 (expression -> for .)
    FOR             reduce using rule 26 (expression -> for .)
    WHILE           reduce using rule 26 (expression -> for .)
    TRY             reduce using rule 26 (expression -> for .)
    $end            reduce using rule 26 (expression -> for .)
    RMB             reduce using rule 26 (expression -> for .)


state 10

    (27) expression -> while .

    PRINT           reduce using rule 27 (expression -> while .)
    VAR             reduce using rule 27 (expression -> while .)
    IDENTIFIER      reduce using rule 27 (expression -> while .)
    USE             reduce using rule 27 (expression -> while .)
    GLOBAL          reduce using rule 27 (expression -> while .)
    CLASS           reduce using rule 27 (expression -> while .)
    IF              reduce using rule 27 (expression -> while .)
    FUNCTION        reduce using rule 27 (expression -> while .)
    REPEAT          reduce using rule 27 (expression -> while .)
    FOR             reduce using rule 27 (expression -> while .)
    WHILE           reduce using rule 27 (expression -> while .)
    TRY             reduce using rule 27 (expression -> while .)
    $end            reduce using rule 27 (expression -> while .)
    RMB             reduce using rule 27 (expression -> while .)


state 11

    (28) expression -> use . SEMI

    SEMI            shift and go to state 56


state 12

    (29) expression -> error_handling .

    PRINT           reduce using rule 29 (expression -> error_handling .)
    VAR             reduce using rule 29 (expression -> error_handling .)
    IDENTIFIER      reduce using rule 29 (expression -> error_handling .)
    USE             reduce using rule 29 (expression -> error_handling .)
    GLOBAL          reduce using rule 29 (expression -> error_handling .)
    CLASS           reduce using rule 29 (expression -> error_handling .)
    IF              reduce using rule 29 (expression -> error_handling .)
    FUNCTION        reduce using rule 29 (expression -> error_handling .)
    REPEAT          reduce using rule 29 (expression -> error_handling .)
    FOR             reduce using rule 29 (expression -> error_handling .)
    WHILE           reduce using rule 29 (expression -> error_handling .)
    TRY             reduce using rule 29 (expression -> error_handling .)
    $end            reduce using rule 29 (expression -> error_handling .)
    RMB             reduce using rule 29 (expression -> error_handling .)


state 13

    (30) expression -> variable_alone . SEMI

    SEMI            shift and go to state 57


state 14

    (31) expression -> global_variable . SEMI

    SEMI            shift and go to state 58


state 15

    (32) expression -> class_def .

    PRINT           reduce using rule 32 (expression -> class_def .)
    VAR             reduce using rule 32 (expression -> class_def .)
    IDENTIFIER      reduce using rule 32 (expression -> class_def .)
    USE             reduce using rule 32 (expression -> class_def .)
    GLOBAL          reduce using rule 32 (expression -> class_def .)
    CLASS           reduce using rule 32 (expression -> class_def .)
    IF              reduce using rule 32 (expression -> class_def .)
    FUNCTION        reduce using rule 32 (expression -> class_def .)
    REPEAT          reduce using rule 32 (expression -> class_def .)
    FOR             reduce using rule 32 (expression -> class_def .)
    WHILE           reduce using rule 32 (expression -> class_def .)
    TRY             reduce using rule 32 (expression -> class_def .)
    $end            reduce using rule 32 (expression -> class_def .)
    RMB             reduce using rule 32 (expression -> class_def .)


state 16

    (33) expression -> debug . SEMI

    SEMI            shift and go to state 59


state 17

    (34) expression -> function_class . SEMI

    SEMI            shift and go to state 60


state 18

    (35) expression -> empty .

    PRINT           reduce using rule 35 (expression -> empty .)
    VAR             reduce using rule 35 (expression -> empty .)
    IDENTIFIER      reduce using rule 35 (expression -> empty .)
    USE             reduce using rule 35 (expression -> empty .)
    GLOBAL          reduce using rule 35 (expression -> empty .)
    CLASS           reduce using rule 35 (expression -> empty .)
    IF              reduce using rule 35 (expression -> empty .)
    FUNCTION        reduce using rule 35 (expression -> empty .)
    REPEAT          reduce using rule 35 (expression -> empty .)
    FOR             reduce using rule 35 (expression -> empty .)
    WHILE           reduce using rule 35 (expression -> empty .)
    TRY             reduce using rule 35 (expression -> empty .)
    $end            reduce using rule 35 (expression -> empty .)
    RMB             reduce using rule 35 (expression -> empty .)


state 19

    (3) print -> PRINT . LSB STRING RSB SEMI

    LSB             shift and go to state 61


state 20

    (82) variable_declaration -> VAR . IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> VAR . IDENTIFIER EQUAL calculate
    (84) variable_declaration -> VAR . IDENTIFIER
    (48) function_class -> VAR . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> VAR . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB

    IDENTIFIER      shift and go to state 62


state 21

    (80) variable_value_change -> IDENTIFIER . EQUAL LIST
    (81) variable_value_change -> IDENTIFIER . EQUAL calculate
    (57) function_call -> IDENTIFIER . LSB parameter RSB
    (58) function_call -> IDENTIFIER . LSB empty RSB
    (79) variable_alone -> IDENTIFIER .
    (50) function_class -> IDENTIFIER . EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> IDENTIFIER . EQUAL IDENTIFIER LSB empty RSB

    EQUAL           shift and go to state 63
    LSB             shift and go to state 64
    SEMI            reduce using rule 79 (variable_alone -> IDENTIFIER .)


state 22

    (62) if_statement -> if_statement_1 . if_statement_2 if_statement_3
    (63) if_statement -> if_statement_1 . if_statement_2
    (64) if_statement -> if_statement_1 . if_statement_3
    (65) if_statement -> if_statement_1 .
    (67) if_statement_2 -> . ELSE IF LSB condition RSB LMB expression RMB
    (68) if_statement_2 -> . if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
    (69) if_statement_3 -> . ELSE LMB expression RMB

    PRINT           reduce using rule 65 (if_statement -> if_statement_1 .)
    VAR             reduce using rule 65 (if_statement -> if_statement_1 .)
    IDENTIFIER      reduce using rule 65 (if_statement -> if_statement_1 .)
    USE             reduce using rule 65 (if_statement -> if_statement_1 .)
    GLOBAL          reduce using rule 65 (if_statement -> if_statement_1 .)
    CLASS           reduce using rule 65 (if_statement -> if_statement_1 .)
    IF              reduce using rule 65 (if_statement -> if_statement_1 .)
    FUNCTION        reduce using rule 65 (if_statement -> if_statement_1 .)
    REPEAT          reduce using rule 65 (if_statement -> if_statement_1 .)
    FOR             reduce using rule 65 (if_statement -> if_statement_1 .)
    WHILE           reduce using rule 65 (if_statement -> if_statement_1 .)
    TRY             reduce using rule 65 (if_statement -> if_statement_1 .)
    $end            reduce using rule 65 (if_statement -> if_statement_1 .)
    RMB             reduce using rule 65 (if_statement -> if_statement_1 .)
    ELSE            shift and go to state 67

    if_statement_2                 shift and go to state 65
    if_statement_3                 shift and go to state 66

state 23

    (53) function -> function_head . function_body
    (56) function_body -> . LMB expression RMB

    LMB             shift and go to state 69

    function_body                  shift and go to state 68

state 24

    (45) repeat -> repeat_head . repeat_body
    (47) repeat_body -> . LMB expression RMB

    LMB             shift and go to state 71

    repeat_body                    shift and go to state 70

state 25

    (39) for -> for_head . for_body
    (41) for_body -> . LMB expression RMB

    LMB             shift and go to state 73

    for_body                       shift and go to state 72

state 26

    (42) while -> while_head . while_body
    (44) while_body -> . LMB expression RMB

    LMB             shift and go to state 75

    while_body                     shift and go to state 74

state 27

    (76) use -> USE . use_params
    (61) debug -> USE . DEBUG
    (77) use_params -> . IDENTIFIER

    DEBUG           shift and go to state 77
    IDENTIFIER      shift and go to state 78

    use_params                     shift and go to state 76

state 28

    (36) error_handling -> try . catch
    (38) catch -> . CATCH LSB IDENTIFIER RSB LMB expression RMB

    CATCH           shift and go to state 80

    catch                          shift and go to state 79

state 29

    (78) global_variable -> GLOBAL . IDENTIFIER

    IDENTIFIER      shift and go to state 81


state 30

    (52) class_def -> CLASS . IDENTIFIER LMB expression RMB

    IDENTIFIER      shift and go to state 82


state 31

    (66) if_statement_1 -> IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 83


state 32

    (54) function_head -> FUNCTION . IDENTIFIER LSB parameter RSB
    (55) function_head -> FUNCTION . IDENTIFIER LSB empty RSB

    IDENTIFIER      shift and go to state 84


state 33

    (46) repeat_head -> REPEAT . LSB calculate RSB

    LSB             shift and go to state 85


state 34

    (40) for_head -> FOR . LSB IDENTIFIER IN IDENTIFIER RSB

    LSB             shift and go to state 86


state 35

    (43) while_head -> WHILE . LSB condition RSB

    LSB             shift and go to state 87


state 36

    (37) try -> TRY . LMB expression RMB

    LMB             shift and go to state 88


state 37

    (2) expression -> expression print .

    PRINT           reduce using rule 2 (expression -> expression print .)
    VAR             reduce using rule 2 (expression -> expression print .)
    IDENTIFIER      reduce using rule 2 (expression -> expression print .)
    USE             reduce using rule 2 (expression -> expression print .)
    GLOBAL          reduce using rule 2 (expression -> expression print .)
    CLASS           reduce using rule 2 (expression -> expression print .)
    IF              reduce using rule 2 (expression -> expression print .)
    FUNCTION        reduce using rule 2 (expression -> expression print .)
    REPEAT          reduce using rule 2 (expression -> expression print .)
    FOR             reduce using rule 2 (expression -> expression print .)
    WHILE           reduce using rule 2 (expression -> expression print .)
    TRY             reduce using rule 2 (expression -> expression print .)
    $end            reduce using rule 2 (expression -> expression print .)
    RMB             reduce using rule 2 (expression -> expression print .)


state 38

    (5) expression -> expression variable_declaration . SEMI

    SEMI            shift and go to state 89


state 39

    (6) expression -> expression variable_value_change . SEMI

    SEMI            shift and go to state 90


state 40

    (7) expression -> expression if_statement .

    PRINT           reduce using rule 7 (expression -> expression if_statement .)
    VAR             reduce using rule 7 (expression -> expression if_statement .)
    IDENTIFIER      reduce using rule 7 (expression -> expression if_statement .)
    USE             reduce using rule 7 (expression -> expression if_statement .)
    GLOBAL          reduce using rule 7 (expression -> expression if_statement .)
    CLASS           reduce using rule 7 (expression -> expression if_statement .)
    IF              reduce using rule 7 (expression -> expression if_statement .)
    FUNCTION        reduce using rule 7 (expression -> expression if_statement .)
    REPEAT          reduce using rule 7 (expression -> expression if_statement .)
    FOR             reduce using rule 7 (expression -> expression if_statement .)
    WHILE           reduce using rule 7 (expression -> expression if_statement .)
    TRY             reduce using rule 7 (expression -> expression if_statement .)
    $end            reduce using rule 7 (expression -> expression if_statement .)
    RMB             reduce using rule 7 (expression -> expression if_statement .)


state 41

    (8) expression -> expression function .

    PRINT           reduce using rule 8 (expression -> expression function .)
    VAR             reduce using rule 8 (expression -> expression function .)
    IDENTIFIER      reduce using rule 8 (expression -> expression function .)
    USE             reduce using rule 8 (expression -> expression function .)
    GLOBAL          reduce using rule 8 (expression -> expression function .)
    CLASS           reduce using rule 8 (expression -> expression function .)
    IF              reduce using rule 8 (expression -> expression function .)
    FUNCTION        reduce using rule 8 (expression -> expression function .)
    REPEAT          reduce using rule 8 (expression -> expression function .)
    FOR             reduce using rule 8 (expression -> expression function .)
    WHILE           reduce using rule 8 (expression -> expression function .)
    TRY             reduce using rule 8 (expression -> expression function .)
    $end            reduce using rule 8 (expression -> expression function .)
    RMB             reduce using rule 8 (expression -> expression function .)


state 42

    (9) expression -> expression function_call . SEMI

    SEMI            shift and go to state 91


state 43

    (10) expression -> expression repeat .

    PRINT           reduce using rule 10 (expression -> expression repeat .)
    VAR             reduce using rule 10 (expression -> expression repeat .)
    IDENTIFIER      reduce using rule 10 (expression -> expression repeat .)
    USE             reduce using rule 10 (expression -> expression repeat .)
    GLOBAL          reduce using rule 10 (expression -> expression repeat .)
    CLASS           reduce using rule 10 (expression -> expression repeat .)
    IF              reduce using rule 10 (expression -> expression repeat .)
    FUNCTION        reduce using rule 10 (expression -> expression repeat .)
    REPEAT          reduce using rule 10 (expression -> expression repeat .)
    FOR             reduce using rule 10 (expression -> expression repeat .)
    WHILE           reduce using rule 10 (expression -> expression repeat .)
    TRY             reduce using rule 10 (expression -> expression repeat .)
    $end            reduce using rule 10 (expression -> expression repeat .)
    RMB             reduce using rule 10 (expression -> expression repeat .)


state 44

    (11) expression -> expression for .

    PRINT           reduce using rule 11 (expression -> expression for .)
    VAR             reduce using rule 11 (expression -> expression for .)
    IDENTIFIER      reduce using rule 11 (expression -> expression for .)
    USE             reduce using rule 11 (expression -> expression for .)
    GLOBAL          reduce using rule 11 (expression -> expression for .)
    CLASS           reduce using rule 11 (expression -> expression for .)
    IF              reduce using rule 11 (expression -> expression for .)
    FUNCTION        reduce using rule 11 (expression -> expression for .)
    REPEAT          reduce using rule 11 (expression -> expression for .)
    FOR             reduce using rule 11 (expression -> expression for .)
    WHILE           reduce using rule 11 (expression -> expression for .)
    TRY             reduce using rule 11 (expression -> expression for .)
    $end            reduce using rule 11 (expression -> expression for .)
    RMB             reduce using rule 11 (expression -> expression for .)


state 45

    (12) expression -> expression while .

    PRINT           reduce using rule 12 (expression -> expression while .)
    VAR             reduce using rule 12 (expression -> expression while .)
    IDENTIFIER      reduce using rule 12 (expression -> expression while .)
    USE             reduce using rule 12 (expression -> expression while .)
    GLOBAL          reduce using rule 12 (expression -> expression while .)
    CLASS           reduce using rule 12 (expression -> expression while .)
    IF              reduce using rule 12 (expression -> expression while .)
    FUNCTION        reduce using rule 12 (expression -> expression while .)
    REPEAT          reduce using rule 12 (expression -> expression while .)
    FOR             reduce using rule 12 (expression -> expression while .)
    WHILE           reduce using rule 12 (expression -> expression while .)
    TRY             reduce using rule 12 (expression -> expression while .)
    $end            reduce using rule 12 (expression -> expression while .)
    RMB             reduce using rule 12 (expression -> expression while .)


state 46

    (13) expression -> expression use . SEMI

    SEMI            shift and go to state 92


state 47

    (14) expression -> expression error_handling .

    PRINT           reduce using rule 14 (expression -> expression error_handling .)
    VAR             reduce using rule 14 (expression -> expression error_handling .)
    IDENTIFIER      reduce using rule 14 (expression -> expression error_handling .)
    USE             reduce using rule 14 (expression -> expression error_handling .)
    GLOBAL          reduce using rule 14 (expression -> expression error_handling .)
    CLASS           reduce using rule 14 (expression -> expression error_handling .)
    IF              reduce using rule 14 (expression -> expression error_handling .)
    FUNCTION        reduce using rule 14 (expression -> expression error_handling .)
    REPEAT          reduce using rule 14 (expression -> expression error_handling .)
    FOR             reduce using rule 14 (expression -> expression error_handling .)
    WHILE           reduce using rule 14 (expression -> expression error_handling .)
    TRY             reduce using rule 14 (expression -> expression error_handling .)
    $end            reduce using rule 14 (expression -> expression error_handling .)
    RMB             reduce using rule 14 (expression -> expression error_handling .)


state 48

    (15) expression -> expression variable_alone . SEMI

    SEMI            shift and go to state 93


state 49

    (16) expression -> expression global_variable . SEMI

    SEMI            shift and go to state 94


state 50

    (17) expression -> expression class_def .

    PRINT           reduce using rule 17 (expression -> expression class_def .)
    VAR             reduce using rule 17 (expression -> expression class_def .)
    IDENTIFIER      reduce using rule 17 (expression -> expression class_def .)
    USE             reduce using rule 17 (expression -> expression class_def .)
    GLOBAL          reduce using rule 17 (expression -> expression class_def .)
    CLASS           reduce using rule 17 (expression -> expression class_def .)
    IF              reduce using rule 17 (expression -> expression class_def .)
    FUNCTION        reduce using rule 17 (expression -> expression class_def .)
    REPEAT          reduce using rule 17 (expression -> expression class_def .)
    FOR             reduce using rule 17 (expression -> expression class_def .)
    WHILE           reduce using rule 17 (expression -> expression class_def .)
    TRY             reduce using rule 17 (expression -> expression class_def .)
    $end            reduce using rule 17 (expression -> expression class_def .)
    RMB             reduce using rule 17 (expression -> expression class_def .)


state 51

    (18) expression -> expression debug . SEMI

    SEMI            shift and go to state 95


state 52

    (19) expression -> expression function_class . SEMI

    SEMI            shift and go to state 96


state 53

    (20) expression -> variable_declaration SEMI .

    PRINT           reduce using rule 20 (expression -> variable_declaration SEMI .)
    VAR             reduce using rule 20 (expression -> variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 20 (expression -> variable_declaration SEMI .)
    USE             reduce using rule 20 (expression -> variable_declaration SEMI .)
    GLOBAL          reduce using rule 20 (expression -> variable_declaration SEMI .)
    CLASS           reduce using rule 20 (expression -> variable_declaration SEMI .)
    IF              reduce using rule 20 (expression -> variable_declaration SEMI .)
    FUNCTION        reduce using rule 20 (expression -> variable_declaration SEMI .)
    REPEAT          reduce using rule 20 (expression -> variable_declaration SEMI .)
    FOR             reduce using rule 20 (expression -> variable_declaration SEMI .)
    WHILE           reduce using rule 20 (expression -> variable_declaration SEMI .)
    TRY             reduce using rule 20 (expression -> variable_declaration SEMI .)
    $end            reduce using rule 20 (expression -> variable_declaration SEMI .)
    RMB             reduce using rule 20 (expression -> variable_declaration SEMI .)


state 54

    (21) expression -> variable_value_change SEMI .

    PRINT           reduce using rule 21 (expression -> variable_value_change SEMI .)
    VAR             reduce using rule 21 (expression -> variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 21 (expression -> variable_value_change SEMI .)
    USE             reduce using rule 21 (expression -> variable_value_change SEMI .)
    GLOBAL          reduce using rule 21 (expression -> variable_value_change SEMI .)
    CLASS           reduce using rule 21 (expression -> variable_value_change SEMI .)
    IF              reduce using rule 21 (expression -> variable_value_change SEMI .)
    FUNCTION        reduce using rule 21 (expression -> variable_value_change SEMI .)
    REPEAT          reduce using rule 21 (expression -> variable_value_change SEMI .)
    FOR             reduce using rule 21 (expression -> variable_value_change SEMI .)
    WHILE           reduce using rule 21 (expression -> variable_value_change SEMI .)
    TRY             reduce using rule 21 (expression -> variable_value_change SEMI .)
    $end            reduce using rule 21 (expression -> variable_value_change SEMI .)
    RMB             reduce using rule 21 (expression -> variable_value_change SEMI .)


state 55

    (24) expression -> function_call SEMI .

    PRINT           reduce using rule 24 (expression -> function_call SEMI .)
    VAR             reduce using rule 24 (expression -> function_call SEMI .)
    IDENTIFIER      reduce using rule 24 (expression -> function_call SEMI .)
    USE             reduce using rule 24 (expression -> function_call SEMI .)
    GLOBAL          reduce using rule 24 (expression -> function_call SEMI .)
    CLASS           reduce using rule 24 (expression -> function_call SEMI .)
    IF              reduce using rule 24 (expression -> function_call SEMI .)
    FUNCTION        reduce using rule 24 (expression -> function_call SEMI .)
    REPEAT          reduce using rule 24 (expression -> function_call SEMI .)
    FOR             reduce using rule 24 (expression -> function_call SEMI .)
    WHILE           reduce using rule 24 (expression -> function_call SEMI .)
    TRY             reduce using rule 24 (expression -> function_call SEMI .)
    $end            reduce using rule 24 (expression -> function_call SEMI .)
    RMB             reduce using rule 24 (expression -> function_call SEMI .)


state 56

    (28) expression -> use SEMI .

    PRINT           reduce using rule 28 (expression -> use SEMI .)
    VAR             reduce using rule 28 (expression -> use SEMI .)
    IDENTIFIER      reduce using rule 28 (expression -> use SEMI .)
    USE             reduce using rule 28 (expression -> use SEMI .)
    GLOBAL          reduce using rule 28 (expression -> use SEMI .)
    CLASS           reduce using rule 28 (expression -> use SEMI .)
    IF              reduce using rule 28 (expression -> use SEMI .)
    FUNCTION        reduce using rule 28 (expression -> use SEMI .)
    REPEAT          reduce using rule 28 (expression -> use SEMI .)
    FOR             reduce using rule 28 (expression -> use SEMI .)
    WHILE           reduce using rule 28 (expression -> use SEMI .)
    TRY             reduce using rule 28 (expression -> use SEMI .)
    $end            reduce using rule 28 (expression -> use SEMI .)
    RMB             reduce using rule 28 (expression -> use SEMI .)


state 57

    (30) expression -> variable_alone SEMI .

    PRINT           reduce using rule 30 (expression -> variable_alone SEMI .)
    VAR             reduce using rule 30 (expression -> variable_alone SEMI .)
    IDENTIFIER      reduce using rule 30 (expression -> variable_alone SEMI .)
    USE             reduce using rule 30 (expression -> variable_alone SEMI .)
    GLOBAL          reduce using rule 30 (expression -> variable_alone SEMI .)
    CLASS           reduce using rule 30 (expression -> variable_alone SEMI .)
    IF              reduce using rule 30 (expression -> variable_alone SEMI .)
    FUNCTION        reduce using rule 30 (expression -> variable_alone SEMI .)
    REPEAT          reduce using rule 30 (expression -> variable_alone SEMI .)
    FOR             reduce using rule 30 (expression -> variable_alone SEMI .)
    WHILE           reduce using rule 30 (expression -> variable_alone SEMI .)
    TRY             reduce using rule 30 (expression -> variable_alone SEMI .)
    $end            reduce using rule 30 (expression -> variable_alone SEMI .)
    RMB             reduce using rule 30 (expression -> variable_alone SEMI .)


state 58

    (31) expression -> global_variable SEMI .

    PRINT           reduce using rule 31 (expression -> global_variable SEMI .)
    VAR             reduce using rule 31 (expression -> global_variable SEMI .)
    IDENTIFIER      reduce using rule 31 (expression -> global_variable SEMI .)
    USE             reduce using rule 31 (expression -> global_variable SEMI .)
    GLOBAL          reduce using rule 31 (expression -> global_variable SEMI .)
    CLASS           reduce using rule 31 (expression -> global_variable SEMI .)
    IF              reduce using rule 31 (expression -> global_variable SEMI .)
    FUNCTION        reduce using rule 31 (expression -> global_variable SEMI .)
    REPEAT          reduce using rule 31 (expression -> global_variable SEMI .)
    FOR             reduce using rule 31 (expression -> global_variable SEMI .)
    WHILE           reduce using rule 31 (expression -> global_variable SEMI .)
    TRY             reduce using rule 31 (expression -> global_variable SEMI .)
    $end            reduce using rule 31 (expression -> global_variable SEMI .)
    RMB             reduce using rule 31 (expression -> global_variable SEMI .)


state 59

    (33) expression -> debug SEMI .

    PRINT           reduce using rule 33 (expression -> debug SEMI .)
    VAR             reduce using rule 33 (expression -> debug SEMI .)
    IDENTIFIER      reduce using rule 33 (expression -> debug SEMI .)
    USE             reduce using rule 33 (expression -> debug SEMI .)
    GLOBAL          reduce using rule 33 (expression -> debug SEMI .)
    CLASS           reduce using rule 33 (expression -> debug SEMI .)
    IF              reduce using rule 33 (expression -> debug SEMI .)
    FUNCTION        reduce using rule 33 (expression -> debug SEMI .)
    REPEAT          reduce using rule 33 (expression -> debug SEMI .)
    FOR             reduce using rule 33 (expression -> debug SEMI .)
    WHILE           reduce using rule 33 (expression -> debug SEMI .)
    TRY             reduce using rule 33 (expression -> debug SEMI .)
    $end            reduce using rule 33 (expression -> debug SEMI .)
    RMB             reduce using rule 33 (expression -> debug SEMI .)


state 60

    (34) expression -> function_class SEMI .

    PRINT           reduce using rule 34 (expression -> function_class SEMI .)
    VAR             reduce using rule 34 (expression -> function_class SEMI .)
    IDENTIFIER      reduce using rule 34 (expression -> function_class SEMI .)
    USE             reduce using rule 34 (expression -> function_class SEMI .)
    GLOBAL          reduce using rule 34 (expression -> function_class SEMI .)
    CLASS           reduce using rule 34 (expression -> function_class SEMI .)
    IF              reduce using rule 34 (expression -> function_class SEMI .)
    FUNCTION        reduce using rule 34 (expression -> function_class SEMI .)
    REPEAT          reduce using rule 34 (expression -> function_class SEMI .)
    FOR             reduce using rule 34 (expression -> function_class SEMI .)
    WHILE           reduce using rule 34 (expression -> function_class SEMI .)
    TRY             reduce using rule 34 (expression -> function_class SEMI .)
    $end            reduce using rule 34 (expression -> function_class SEMI .)
    RMB             reduce using rule 34 (expression -> function_class SEMI .)


state 61

    (3) print -> PRINT LSB . STRING RSB SEMI

    STRING          shift and go to state 97


state 62

    (82) variable_declaration -> VAR IDENTIFIER . LIST EQUAL calculate
    (83) variable_declaration -> VAR IDENTIFIER . EQUAL calculate
    (84) variable_declaration -> VAR IDENTIFIER .
    (48) function_class -> VAR IDENTIFIER . EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> VAR IDENTIFIER . EQUAL IDENTIFIER LSB empty RSB

    LIST            shift and go to state 98
    EQUAL           shift and go to state 99
    SEMI            reduce using rule 84 (variable_declaration -> VAR IDENTIFIER .)


state 63

    (80) variable_value_change -> IDENTIFIER EQUAL . LIST
    (81) variable_value_change -> IDENTIFIER EQUAL . calculate
    (50) function_class -> IDENTIFIER EQUAL . IDENTIFIER LSB parameter RSB
    (51) function_class -> IDENTIFIER EQUAL . IDENTIFIER LSB empty RSB
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    LIST            shift and go to state 101
    IDENTIFIER      shift and go to state 100
    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    LSB             shift and go to state 103

    calculate                      shift and go to state 102

state 64

    (57) function_call -> IDENTIFIER LSB . parameter RSB
    (58) function_call -> IDENTIFIER LSB . empty RSB
    (59) parameter -> . parameter COMMA calculate
    (60) parameter -> . calculate
    (97) empty -> .
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    RSB             reduce using rule 97 (empty -> .)
    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    parameter                      shift and go to state 109
    empty                          shift and go to state 110
    calculate                      shift and go to state 111

state 65

    (62) if_statement -> if_statement_1 if_statement_2 . if_statement_3
    (63) if_statement -> if_statement_1 if_statement_2 .
    (68) if_statement_2 -> if_statement_2 . ELSE IF LSB condition RSB LMB expression RMB
    (69) if_statement_3 -> . ELSE LMB expression RMB

    PRINT           reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    VAR             reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    IDENTIFIER      reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    USE             reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    GLOBAL          reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    CLASS           reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    IF              reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    FUNCTION        reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    REPEAT          reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    FOR             reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    WHILE           reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    TRY             reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    $end            reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    RMB             reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    ELSE            shift and go to state 114

    if_statement_3                 shift and go to state 113

state 66

    (64) if_statement -> if_statement_1 if_statement_3 .

    PRINT           reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    VAR             reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    IDENTIFIER      reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    USE             reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    GLOBAL          reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    CLASS           reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    IF              reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    FUNCTION        reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    REPEAT          reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    FOR             reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    WHILE           reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    TRY             reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    $end            reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    RMB             reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)


state 67

    (67) if_statement_2 -> ELSE . IF LSB condition RSB LMB expression RMB
    (69) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 115
    LMB             shift and go to state 116


state 68

    (53) function -> function_head function_body .

    PRINT           reduce using rule 53 (function -> function_head function_body .)
    VAR             reduce using rule 53 (function -> function_head function_body .)
    IDENTIFIER      reduce using rule 53 (function -> function_head function_body .)
    USE             reduce using rule 53 (function -> function_head function_body .)
    GLOBAL          reduce using rule 53 (function -> function_head function_body .)
    CLASS           reduce using rule 53 (function -> function_head function_body .)
    IF              reduce using rule 53 (function -> function_head function_body .)
    FUNCTION        reduce using rule 53 (function -> function_head function_body .)
    REPEAT          reduce using rule 53 (function -> function_head function_body .)
    FOR             reduce using rule 53 (function -> function_head function_body .)
    WHILE           reduce using rule 53 (function -> function_head function_body .)
    TRY             reduce using rule 53 (function -> function_head function_body .)
    $end            reduce using rule 53 (function -> function_head function_body .)
    RMB             reduce using rule 53 (function -> function_head function_body .)


state 69

    (56) function_body -> LMB . expression RMB
    (1) expression -> . print
    (2) expression -> . expression print
    (5) expression -> . expression variable_declaration SEMI
    (6) expression -> . expression variable_value_change SEMI
    (7) expression -> . expression if_statement
    (8) expression -> . expression function
    (9) expression -> . expression function_call SEMI
    (10) expression -> . expression repeat
    (11) expression -> . expression for
    (12) expression -> . expression while
    (13) expression -> . expression use SEMI
    (14) expression -> . expression error_handling
    (15) expression -> . expression variable_alone SEMI
    (16) expression -> . expression global_variable SEMI
    (17) expression -> . expression class_def
    (18) expression -> . expression debug SEMI
    (19) expression -> . expression function_class SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . empty
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! PRINT           [ reduce using rule 97 (empty -> .) ]
  ! VAR             [ reduce using rule 97 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 97 (empty -> .) ]
  ! USE             [ reduce using rule 97 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 97 (empty -> .) ]
  ! CLASS           [ reduce using rule 97 (empty -> .) ]
  ! IF              [ reduce using rule 97 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 97 (empty -> .) ]
  ! REPEAT          [ reduce using rule 97 (empty -> .) ]
  ! FOR             [ reduce using rule 97 (empty -> .) ]
  ! WHILE           [ reduce using rule 97 (empty -> .) ]
  ! TRY             [ reduce using rule 97 (empty -> .) ]

    expression                     shift and go to state 117
    print                          shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 70

    (45) repeat -> repeat_head repeat_body .

    PRINT           reduce using rule 45 (repeat -> repeat_head repeat_body .)
    VAR             reduce using rule 45 (repeat -> repeat_head repeat_body .)
    IDENTIFIER      reduce using rule 45 (repeat -> repeat_head repeat_body .)
    USE             reduce using rule 45 (repeat -> repeat_head repeat_body .)
    GLOBAL          reduce using rule 45 (repeat -> repeat_head repeat_body .)
    CLASS           reduce using rule 45 (repeat -> repeat_head repeat_body .)
    IF              reduce using rule 45 (repeat -> repeat_head repeat_body .)
    FUNCTION        reduce using rule 45 (repeat -> repeat_head repeat_body .)
    REPEAT          reduce using rule 45 (repeat -> repeat_head repeat_body .)
    FOR             reduce using rule 45 (repeat -> repeat_head repeat_body .)
    WHILE           reduce using rule 45 (repeat -> repeat_head repeat_body .)
    TRY             reduce using rule 45 (repeat -> repeat_head repeat_body .)
    $end            reduce using rule 45 (repeat -> repeat_head repeat_body .)
    RMB             reduce using rule 45 (repeat -> repeat_head repeat_body .)


state 71

    (47) repeat_body -> LMB . expression RMB
    (1) expression -> . print
    (2) expression -> . expression print
    (5) expression -> . expression variable_declaration SEMI
    (6) expression -> . expression variable_value_change SEMI
    (7) expression -> . expression if_statement
    (8) expression -> . expression function
    (9) expression -> . expression function_call SEMI
    (10) expression -> . expression repeat
    (11) expression -> . expression for
    (12) expression -> . expression while
    (13) expression -> . expression use SEMI
    (14) expression -> . expression error_handling
    (15) expression -> . expression variable_alone SEMI
    (16) expression -> . expression global_variable SEMI
    (17) expression -> . expression class_def
    (18) expression -> . expression debug SEMI
    (19) expression -> . expression function_class SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . empty
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! PRINT           [ reduce using rule 97 (empty -> .) ]
  ! VAR             [ reduce using rule 97 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 97 (empty -> .) ]
  ! USE             [ reduce using rule 97 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 97 (empty -> .) ]
  ! CLASS           [ reduce using rule 97 (empty -> .) ]
  ! IF              [ reduce using rule 97 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 97 (empty -> .) ]
  ! REPEAT          [ reduce using rule 97 (empty -> .) ]
  ! FOR             [ reduce using rule 97 (empty -> .) ]
  ! WHILE           [ reduce using rule 97 (empty -> .) ]
  ! TRY             [ reduce using rule 97 (empty -> .) ]

    expression                     shift and go to state 118
    print                          shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 72

    (39) for -> for_head for_body .

    PRINT           reduce using rule 39 (for -> for_head for_body .)
    VAR             reduce using rule 39 (for -> for_head for_body .)
    IDENTIFIER      reduce using rule 39 (for -> for_head for_body .)
    USE             reduce using rule 39 (for -> for_head for_body .)
    GLOBAL          reduce using rule 39 (for -> for_head for_body .)
    CLASS           reduce using rule 39 (for -> for_head for_body .)
    IF              reduce using rule 39 (for -> for_head for_body .)
    FUNCTION        reduce using rule 39 (for -> for_head for_body .)
    REPEAT          reduce using rule 39 (for -> for_head for_body .)
    FOR             reduce using rule 39 (for -> for_head for_body .)
    WHILE           reduce using rule 39 (for -> for_head for_body .)
    TRY             reduce using rule 39 (for -> for_head for_body .)
    $end            reduce using rule 39 (for -> for_head for_body .)
    RMB             reduce using rule 39 (for -> for_head for_body .)


state 73

    (41) for_body -> LMB . expression RMB
    (1) expression -> . print
    (2) expression -> . expression print
    (5) expression -> . expression variable_declaration SEMI
    (6) expression -> . expression variable_value_change SEMI
    (7) expression -> . expression if_statement
    (8) expression -> . expression function
    (9) expression -> . expression function_call SEMI
    (10) expression -> . expression repeat
    (11) expression -> . expression for
    (12) expression -> . expression while
    (13) expression -> . expression use SEMI
    (14) expression -> . expression error_handling
    (15) expression -> . expression variable_alone SEMI
    (16) expression -> . expression global_variable SEMI
    (17) expression -> . expression class_def
    (18) expression -> . expression debug SEMI
    (19) expression -> . expression function_class SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . empty
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! PRINT           [ reduce using rule 97 (empty -> .) ]
  ! VAR             [ reduce using rule 97 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 97 (empty -> .) ]
  ! USE             [ reduce using rule 97 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 97 (empty -> .) ]
  ! CLASS           [ reduce using rule 97 (empty -> .) ]
  ! IF              [ reduce using rule 97 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 97 (empty -> .) ]
  ! REPEAT          [ reduce using rule 97 (empty -> .) ]
  ! FOR             [ reduce using rule 97 (empty -> .) ]
  ! WHILE           [ reduce using rule 97 (empty -> .) ]
  ! TRY             [ reduce using rule 97 (empty -> .) ]

    expression                     shift and go to state 119
    print                          shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 74

    (42) while -> while_head while_body .

    PRINT           reduce using rule 42 (while -> while_head while_body .)
    VAR             reduce using rule 42 (while -> while_head while_body .)
    IDENTIFIER      reduce using rule 42 (while -> while_head while_body .)
    USE             reduce using rule 42 (while -> while_head while_body .)
    GLOBAL          reduce using rule 42 (while -> while_head while_body .)
    CLASS           reduce using rule 42 (while -> while_head while_body .)
    IF              reduce using rule 42 (while -> while_head while_body .)
    FUNCTION        reduce using rule 42 (while -> while_head while_body .)
    REPEAT          reduce using rule 42 (while -> while_head while_body .)
    FOR             reduce using rule 42 (while -> while_head while_body .)
    WHILE           reduce using rule 42 (while -> while_head while_body .)
    TRY             reduce using rule 42 (while -> while_head while_body .)
    $end            reduce using rule 42 (while -> while_head while_body .)
    RMB             reduce using rule 42 (while -> while_head while_body .)


state 75

    (44) while_body -> LMB . expression RMB
    (1) expression -> . print
    (2) expression -> . expression print
    (5) expression -> . expression variable_declaration SEMI
    (6) expression -> . expression variable_value_change SEMI
    (7) expression -> . expression if_statement
    (8) expression -> . expression function
    (9) expression -> . expression function_call SEMI
    (10) expression -> . expression repeat
    (11) expression -> . expression for
    (12) expression -> . expression while
    (13) expression -> . expression use SEMI
    (14) expression -> . expression error_handling
    (15) expression -> . expression variable_alone SEMI
    (16) expression -> . expression global_variable SEMI
    (17) expression -> . expression class_def
    (18) expression -> . expression debug SEMI
    (19) expression -> . expression function_class SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . empty
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! PRINT           [ reduce using rule 97 (empty -> .) ]
  ! VAR             [ reduce using rule 97 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 97 (empty -> .) ]
  ! USE             [ reduce using rule 97 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 97 (empty -> .) ]
  ! CLASS           [ reduce using rule 97 (empty -> .) ]
  ! IF              [ reduce using rule 97 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 97 (empty -> .) ]
  ! REPEAT          [ reduce using rule 97 (empty -> .) ]
  ! FOR             [ reduce using rule 97 (empty -> .) ]
  ! WHILE           [ reduce using rule 97 (empty -> .) ]
  ! TRY             [ reduce using rule 97 (empty -> .) ]

    expression                     shift and go to state 120
    print                          shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 76

    (76) use -> USE use_params .

    SEMI            reduce using rule 76 (use -> USE use_params .)


state 77

    (61) debug -> USE DEBUG .

    SEMI            reduce using rule 61 (debug -> USE DEBUG .)


state 78

    (77) use_params -> IDENTIFIER .

    SEMI            reduce using rule 77 (use_params -> IDENTIFIER .)


state 79

    (36) error_handling -> try catch .

    PRINT           reduce using rule 36 (error_handling -> try catch .)
    VAR             reduce using rule 36 (error_handling -> try catch .)
    IDENTIFIER      reduce using rule 36 (error_handling -> try catch .)
    USE             reduce using rule 36 (error_handling -> try catch .)
    GLOBAL          reduce using rule 36 (error_handling -> try catch .)
    CLASS           reduce using rule 36 (error_handling -> try catch .)
    IF              reduce using rule 36 (error_handling -> try catch .)
    FUNCTION        reduce using rule 36 (error_handling -> try catch .)
    REPEAT          reduce using rule 36 (error_handling -> try catch .)
    FOR             reduce using rule 36 (error_handling -> try catch .)
    WHILE           reduce using rule 36 (error_handling -> try catch .)
    TRY             reduce using rule 36 (error_handling -> try catch .)
    $end            reduce using rule 36 (error_handling -> try catch .)
    RMB             reduce using rule 36 (error_handling -> try catch .)


state 80

    (38) catch -> CATCH . LSB IDENTIFIER RSB LMB expression RMB

    LSB             shift and go to state 121


state 81

    (78) global_variable -> GLOBAL IDENTIFIER .

    SEMI            reduce using rule 78 (global_variable -> GLOBAL IDENTIFIER .)


state 82

    (52) class_def -> CLASS IDENTIFIER . LMB expression RMB

    LMB             shift and go to state 122


state 83

    (66) if_statement_1 -> IF LSB . condition RSB LMB expression RMB
    (70) condition -> . condition LB calculate
    (71) condition -> . condition RB calculate
    (72) condition -> . condition LB EQUAL calculate
    (73) condition -> . condition RB EQUAL calculate
    (74) condition -> . condition EQUAL calculate
    (75) condition -> . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    condition                      shift and go to state 123
    calculate                      shift and go to state 124

state 84

    (54) function_head -> FUNCTION IDENTIFIER . LSB parameter RSB
    (55) function_head -> FUNCTION IDENTIFIER . LSB empty RSB

    LSB             shift and go to state 125


state 85

    (46) repeat_head -> REPEAT LSB . calculate RSB
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    calculate                      shift and go to state 126

state 86

    (40) for_head -> FOR LSB . IDENTIFIER IN IDENTIFIER RSB

    IDENTIFIER      shift and go to state 127


state 87

    (43) while_head -> WHILE LSB . condition RSB
    (70) condition -> . condition LB calculate
    (71) condition -> . condition RB calculate
    (72) condition -> . condition LB EQUAL calculate
    (73) condition -> . condition RB EQUAL calculate
    (74) condition -> . condition EQUAL calculate
    (75) condition -> . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    condition                      shift and go to state 128
    calculate                      shift and go to state 124

state 88

    (37) try -> TRY LMB . expression RMB
    (1) expression -> . print
    (2) expression -> . expression print
    (5) expression -> . expression variable_declaration SEMI
    (6) expression -> . expression variable_value_change SEMI
    (7) expression -> . expression if_statement
    (8) expression -> . expression function
    (9) expression -> . expression function_call SEMI
    (10) expression -> . expression repeat
    (11) expression -> . expression for
    (12) expression -> . expression while
    (13) expression -> . expression use SEMI
    (14) expression -> . expression error_handling
    (15) expression -> . expression variable_alone SEMI
    (16) expression -> . expression global_variable SEMI
    (17) expression -> . expression class_def
    (18) expression -> . expression debug SEMI
    (19) expression -> . expression function_class SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . empty
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! PRINT           [ reduce using rule 97 (empty -> .) ]
  ! VAR             [ reduce using rule 97 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 97 (empty -> .) ]
  ! USE             [ reduce using rule 97 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 97 (empty -> .) ]
  ! CLASS           [ reduce using rule 97 (empty -> .) ]
  ! IF              [ reduce using rule 97 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 97 (empty -> .) ]
  ! REPEAT          [ reduce using rule 97 (empty -> .) ]
  ! FOR             [ reduce using rule 97 (empty -> .) ]
  ! WHILE           [ reduce using rule 97 (empty -> .) ]
  ! TRY             [ reduce using rule 97 (empty -> .) ]

    expression                     shift and go to state 129
    print                          shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 89

    (5) expression -> expression variable_declaration SEMI .

    PRINT           reduce using rule 5 (expression -> expression variable_declaration SEMI .)
    VAR             reduce using rule 5 (expression -> expression variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 5 (expression -> expression variable_declaration SEMI .)
    USE             reduce using rule 5 (expression -> expression variable_declaration SEMI .)
    GLOBAL          reduce using rule 5 (expression -> expression variable_declaration SEMI .)
    CLASS           reduce using rule 5 (expression -> expression variable_declaration SEMI .)
    IF              reduce using rule 5 (expression -> expression variable_declaration SEMI .)
    FUNCTION        reduce using rule 5 (expression -> expression variable_declaration SEMI .)
    REPEAT          reduce using rule 5 (expression -> expression variable_declaration SEMI .)
    FOR             reduce using rule 5 (expression -> expression variable_declaration SEMI .)
    WHILE           reduce using rule 5 (expression -> expression variable_declaration SEMI .)
    TRY             reduce using rule 5 (expression -> expression variable_declaration SEMI .)
    $end            reduce using rule 5 (expression -> expression variable_declaration SEMI .)
    RMB             reduce using rule 5 (expression -> expression variable_declaration SEMI .)


state 90

    (6) expression -> expression variable_value_change SEMI .

    PRINT           reduce using rule 6 (expression -> expression variable_value_change SEMI .)
    VAR             reduce using rule 6 (expression -> expression variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 6 (expression -> expression variable_value_change SEMI .)
    USE             reduce using rule 6 (expression -> expression variable_value_change SEMI .)
    GLOBAL          reduce using rule 6 (expression -> expression variable_value_change SEMI .)
    CLASS           reduce using rule 6 (expression -> expression variable_value_change SEMI .)
    IF              reduce using rule 6 (expression -> expression variable_value_change SEMI .)
    FUNCTION        reduce using rule 6 (expression -> expression variable_value_change SEMI .)
    REPEAT          reduce using rule 6 (expression -> expression variable_value_change SEMI .)
    FOR             reduce using rule 6 (expression -> expression variable_value_change SEMI .)
    WHILE           reduce using rule 6 (expression -> expression variable_value_change SEMI .)
    TRY             reduce using rule 6 (expression -> expression variable_value_change SEMI .)
    $end            reduce using rule 6 (expression -> expression variable_value_change SEMI .)
    RMB             reduce using rule 6 (expression -> expression variable_value_change SEMI .)


state 91

    (9) expression -> expression function_call SEMI .

    PRINT           reduce using rule 9 (expression -> expression function_call SEMI .)
    VAR             reduce using rule 9 (expression -> expression function_call SEMI .)
    IDENTIFIER      reduce using rule 9 (expression -> expression function_call SEMI .)
    USE             reduce using rule 9 (expression -> expression function_call SEMI .)
    GLOBAL          reduce using rule 9 (expression -> expression function_call SEMI .)
    CLASS           reduce using rule 9 (expression -> expression function_call SEMI .)
    IF              reduce using rule 9 (expression -> expression function_call SEMI .)
    FUNCTION        reduce using rule 9 (expression -> expression function_call SEMI .)
    REPEAT          reduce using rule 9 (expression -> expression function_call SEMI .)
    FOR             reduce using rule 9 (expression -> expression function_call SEMI .)
    WHILE           reduce using rule 9 (expression -> expression function_call SEMI .)
    TRY             reduce using rule 9 (expression -> expression function_call SEMI .)
    $end            reduce using rule 9 (expression -> expression function_call SEMI .)
    RMB             reduce using rule 9 (expression -> expression function_call SEMI .)


state 92

    (13) expression -> expression use SEMI .

    PRINT           reduce using rule 13 (expression -> expression use SEMI .)
    VAR             reduce using rule 13 (expression -> expression use SEMI .)
    IDENTIFIER      reduce using rule 13 (expression -> expression use SEMI .)
    USE             reduce using rule 13 (expression -> expression use SEMI .)
    GLOBAL          reduce using rule 13 (expression -> expression use SEMI .)
    CLASS           reduce using rule 13 (expression -> expression use SEMI .)
    IF              reduce using rule 13 (expression -> expression use SEMI .)
    FUNCTION        reduce using rule 13 (expression -> expression use SEMI .)
    REPEAT          reduce using rule 13 (expression -> expression use SEMI .)
    FOR             reduce using rule 13 (expression -> expression use SEMI .)
    WHILE           reduce using rule 13 (expression -> expression use SEMI .)
    TRY             reduce using rule 13 (expression -> expression use SEMI .)
    $end            reduce using rule 13 (expression -> expression use SEMI .)
    RMB             reduce using rule 13 (expression -> expression use SEMI .)


state 93

    (15) expression -> expression variable_alone SEMI .

    PRINT           reduce using rule 15 (expression -> expression variable_alone SEMI .)
    VAR             reduce using rule 15 (expression -> expression variable_alone SEMI .)
    IDENTIFIER      reduce using rule 15 (expression -> expression variable_alone SEMI .)
    USE             reduce using rule 15 (expression -> expression variable_alone SEMI .)
    GLOBAL          reduce using rule 15 (expression -> expression variable_alone SEMI .)
    CLASS           reduce using rule 15 (expression -> expression variable_alone SEMI .)
    IF              reduce using rule 15 (expression -> expression variable_alone SEMI .)
    FUNCTION        reduce using rule 15 (expression -> expression variable_alone SEMI .)
    REPEAT          reduce using rule 15 (expression -> expression variable_alone SEMI .)
    FOR             reduce using rule 15 (expression -> expression variable_alone SEMI .)
    WHILE           reduce using rule 15 (expression -> expression variable_alone SEMI .)
    TRY             reduce using rule 15 (expression -> expression variable_alone SEMI .)
    $end            reduce using rule 15 (expression -> expression variable_alone SEMI .)
    RMB             reduce using rule 15 (expression -> expression variable_alone SEMI .)


state 94

    (16) expression -> expression global_variable SEMI .

    PRINT           reduce using rule 16 (expression -> expression global_variable SEMI .)
    VAR             reduce using rule 16 (expression -> expression global_variable SEMI .)
    IDENTIFIER      reduce using rule 16 (expression -> expression global_variable SEMI .)
    USE             reduce using rule 16 (expression -> expression global_variable SEMI .)
    GLOBAL          reduce using rule 16 (expression -> expression global_variable SEMI .)
    CLASS           reduce using rule 16 (expression -> expression global_variable SEMI .)
    IF              reduce using rule 16 (expression -> expression global_variable SEMI .)
    FUNCTION        reduce using rule 16 (expression -> expression global_variable SEMI .)
    REPEAT          reduce using rule 16 (expression -> expression global_variable SEMI .)
    FOR             reduce using rule 16 (expression -> expression global_variable SEMI .)
    WHILE           reduce using rule 16 (expression -> expression global_variable SEMI .)
    TRY             reduce using rule 16 (expression -> expression global_variable SEMI .)
    $end            reduce using rule 16 (expression -> expression global_variable SEMI .)
    RMB             reduce using rule 16 (expression -> expression global_variable SEMI .)


state 95

    (18) expression -> expression debug SEMI .

    PRINT           reduce using rule 18 (expression -> expression debug SEMI .)
    VAR             reduce using rule 18 (expression -> expression debug SEMI .)
    IDENTIFIER      reduce using rule 18 (expression -> expression debug SEMI .)
    USE             reduce using rule 18 (expression -> expression debug SEMI .)
    GLOBAL          reduce using rule 18 (expression -> expression debug SEMI .)
    CLASS           reduce using rule 18 (expression -> expression debug SEMI .)
    IF              reduce using rule 18 (expression -> expression debug SEMI .)
    FUNCTION        reduce using rule 18 (expression -> expression debug SEMI .)
    REPEAT          reduce using rule 18 (expression -> expression debug SEMI .)
    FOR             reduce using rule 18 (expression -> expression debug SEMI .)
    WHILE           reduce using rule 18 (expression -> expression debug SEMI .)
    TRY             reduce using rule 18 (expression -> expression debug SEMI .)
    $end            reduce using rule 18 (expression -> expression debug SEMI .)
    RMB             reduce using rule 18 (expression -> expression debug SEMI .)


state 96

    (19) expression -> expression function_class SEMI .

    PRINT           reduce using rule 19 (expression -> expression function_class SEMI .)
    VAR             reduce using rule 19 (expression -> expression function_class SEMI .)
    IDENTIFIER      reduce using rule 19 (expression -> expression function_class SEMI .)
    USE             reduce using rule 19 (expression -> expression function_class SEMI .)
    GLOBAL          reduce using rule 19 (expression -> expression function_class SEMI .)
    CLASS           reduce using rule 19 (expression -> expression function_class SEMI .)
    IF              reduce using rule 19 (expression -> expression function_class SEMI .)
    FUNCTION        reduce using rule 19 (expression -> expression function_class SEMI .)
    REPEAT          reduce using rule 19 (expression -> expression function_class SEMI .)
    FOR             reduce using rule 19 (expression -> expression function_class SEMI .)
    WHILE           reduce using rule 19 (expression -> expression function_class SEMI .)
    TRY             reduce using rule 19 (expression -> expression function_class SEMI .)
    $end            reduce using rule 19 (expression -> expression function_class SEMI .)
    RMB             reduce using rule 19 (expression -> expression function_class SEMI .)


state 97

    (3) print -> PRINT LSB STRING . RSB SEMI

    RSB             shift and go to state 130


state 98

    (82) variable_declaration -> VAR IDENTIFIER LIST . EQUAL calculate

    EQUAL           shift and go to state 131


state 99

    (83) variable_declaration -> VAR IDENTIFIER EQUAL . calculate
    (48) function_class -> VAR IDENTIFIER EQUAL . IDENTIFIER LSB parameter RSB
    (49) function_class -> VAR IDENTIFIER EQUAL . IDENTIFIER LSB empty RSB
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    IDENTIFIER      shift and go to state 132
    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    calculate                      shift and go to state 133

state 100

    (50) function_class -> IDENTIFIER EQUAL IDENTIFIER . LSB parameter RSB
    (51) function_class -> IDENTIFIER EQUAL IDENTIFIER . LSB empty RSB
    (93) calculate -> IDENTIFIER .
    (94) calculate -> IDENTIFIER . LIST

    LSB             shift and go to state 134
    PLUS            reduce using rule 93 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 93 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 93 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 93 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 93 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 135


state 101

    (80) variable_value_change -> IDENTIFIER EQUAL LIST .
    (95) calculate -> LIST .

  ! reduce/reduce conflict for SEMI resolved using rule 80 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    SEMI            reduce using rule 80 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    PLUS            reduce using rule 95 (calculate -> LIST .)
    MINUS           reduce using rule 95 (calculate -> LIST .)
    MUL             reduce using rule 95 (calculate -> LIST .)
    DIV             reduce using rule 95 (calculate -> LIST .)

  ! SEMI            [ reduce using rule 95 (calculate -> LIST .) ]


state 102

    (81) variable_value_change -> IDENTIFIER EQUAL calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 81 (variable_value_change -> IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MUL             shift and go to state 138
    DIV             shift and go to state 139


state 103

    (96) calculate -> LSB . calculate RSB
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    calculate                      shift and go to state 140

state 104

    (87) calculate -> MINUS . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    calculate                      shift and go to state 141

state 105

    (90) calculate -> INT .

    PLUS            reduce using rule 90 (calculate -> INT .)
    MINUS           reduce using rule 90 (calculate -> INT .)
    MUL             reduce using rule 90 (calculate -> INT .)
    DIV             reduce using rule 90 (calculate -> INT .)
    SEMI            reduce using rule 90 (calculate -> INT .)
    RSB             reduce using rule 90 (calculate -> INT .)
    COMMA           reduce using rule 90 (calculate -> INT .)
    LB              reduce using rule 90 (calculate -> INT .)
    RB              reduce using rule 90 (calculate -> INT .)
    EQUAL           reduce using rule 90 (calculate -> INT .)


state 106

    (91) calculate -> FLOAT .

    PLUS            reduce using rule 91 (calculate -> FLOAT .)
    MINUS           reduce using rule 91 (calculate -> FLOAT .)
    MUL             reduce using rule 91 (calculate -> FLOAT .)
    DIV             reduce using rule 91 (calculate -> FLOAT .)
    SEMI            reduce using rule 91 (calculate -> FLOAT .)
    RSB             reduce using rule 91 (calculate -> FLOAT .)
    COMMA           reduce using rule 91 (calculate -> FLOAT .)
    LB              reduce using rule 91 (calculate -> FLOAT .)
    RB              reduce using rule 91 (calculate -> FLOAT .)
    EQUAL           reduce using rule 91 (calculate -> FLOAT .)


state 107

    (92) calculate -> STRING .

    PLUS            reduce using rule 92 (calculate -> STRING .)
    MINUS           reduce using rule 92 (calculate -> STRING .)
    MUL             reduce using rule 92 (calculate -> STRING .)
    DIV             reduce using rule 92 (calculate -> STRING .)
    SEMI            reduce using rule 92 (calculate -> STRING .)
    RSB             reduce using rule 92 (calculate -> STRING .)
    COMMA           reduce using rule 92 (calculate -> STRING .)
    LB              reduce using rule 92 (calculate -> STRING .)
    RB              reduce using rule 92 (calculate -> STRING .)
    EQUAL           reduce using rule 92 (calculate -> STRING .)


state 108

    (93) calculate -> IDENTIFIER .
    (94) calculate -> IDENTIFIER . LIST

    PLUS            reduce using rule 93 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 93 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 93 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 93 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 93 (calculate -> IDENTIFIER .)
    COMMA           reduce using rule 93 (calculate -> IDENTIFIER .)
    LB              reduce using rule 93 (calculate -> IDENTIFIER .)
    RB              reduce using rule 93 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 93 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 93 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 135


state 109

    (57) function_call -> IDENTIFIER LSB parameter . RSB
    (59) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 142
    COMMA           shift and go to state 143


state 110

    (58) function_call -> IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 144


state 111

    (60) parameter -> calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             reduce using rule 60 (parameter -> calculate .)
    COMMA           reduce using rule 60 (parameter -> calculate .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MUL             shift and go to state 138
    DIV             shift and go to state 139


state 112

    (95) calculate -> LIST .

    PLUS            reduce using rule 95 (calculate -> LIST .)
    MINUS           reduce using rule 95 (calculate -> LIST .)
    MUL             reduce using rule 95 (calculate -> LIST .)
    DIV             reduce using rule 95 (calculate -> LIST .)
    RSB             reduce using rule 95 (calculate -> LIST .)
    COMMA           reduce using rule 95 (calculate -> LIST .)
    LB              reduce using rule 95 (calculate -> LIST .)
    RB              reduce using rule 95 (calculate -> LIST .)
    EQUAL           reduce using rule 95 (calculate -> LIST .)
    SEMI            reduce using rule 95 (calculate -> LIST .)


state 113

    (62) if_statement -> if_statement_1 if_statement_2 if_statement_3 .

    PRINT           reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    VAR             reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IDENTIFIER      reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    USE             reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    GLOBAL          reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    CLASS           reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IF              reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FUNCTION        reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    REPEAT          reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FOR             reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    WHILE           reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    TRY             reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    $end            reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    RMB             reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)


state 114

    (68) if_statement_2 -> if_statement_2 ELSE . IF LSB condition RSB LMB expression RMB
    (69) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 145
    LMB             shift and go to state 116


state 115

    (67) if_statement_2 -> ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 146


state 116

    (69) if_statement_3 -> ELSE LMB . expression RMB
    (1) expression -> . print
    (2) expression -> . expression print
    (5) expression -> . expression variable_declaration SEMI
    (6) expression -> . expression variable_value_change SEMI
    (7) expression -> . expression if_statement
    (8) expression -> . expression function
    (9) expression -> . expression function_call SEMI
    (10) expression -> . expression repeat
    (11) expression -> . expression for
    (12) expression -> . expression while
    (13) expression -> . expression use SEMI
    (14) expression -> . expression error_handling
    (15) expression -> . expression variable_alone SEMI
    (16) expression -> . expression global_variable SEMI
    (17) expression -> . expression class_def
    (18) expression -> . expression debug SEMI
    (19) expression -> . expression function_class SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . empty
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! PRINT           [ reduce using rule 97 (empty -> .) ]
  ! VAR             [ reduce using rule 97 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 97 (empty -> .) ]
  ! USE             [ reduce using rule 97 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 97 (empty -> .) ]
  ! CLASS           [ reduce using rule 97 (empty -> .) ]
  ! IF              [ reduce using rule 97 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 97 (empty -> .) ]
  ! REPEAT          [ reduce using rule 97 (empty -> .) ]
  ! FOR             [ reduce using rule 97 (empty -> .) ]
  ! WHILE           [ reduce using rule 97 (empty -> .) ]
  ! TRY             [ reduce using rule 97 (empty -> .) ]

    expression                     shift and go to state 147
    print                          shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 117

    (56) function_body -> LMB expression . RMB
    (2) expression -> expression . print
    (5) expression -> expression . variable_declaration SEMI
    (6) expression -> expression . variable_value_change SEMI
    (7) expression -> expression . if_statement
    (8) expression -> expression . function
    (9) expression -> expression . function_call SEMI
    (10) expression -> expression . repeat
    (11) expression -> expression . for
    (12) expression -> expression . while
    (13) expression -> expression . use SEMI
    (14) expression -> expression . error_handling
    (15) expression -> expression . variable_alone SEMI
    (16) expression -> expression . global_variable SEMI
    (17) expression -> expression . class_def
    (18) expression -> expression . debug SEMI
    (19) expression -> expression . function_class SEMI
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

    RMB             shift and go to state 148
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    print                          shift and go to state 37
    variable_declaration           shift and go to state 38
    variable_value_change          shift and go to state 39
    if_statement                   shift and go to state 40
    function                       shift and go to state 41
    function_call                  shift and go to state 42
    repeat                         shift and go to state 43
    for                            shift and go to state 44
    while                          shift and go to state 45
    use                            shift and go to state 46
    error_handling                 shift and go to state 47
    variable_alone                 shift and go to state 48
    global_variable                shift and go to state 49
    class_def                      shift and go to state 50
    debug                          shift and go to state 51
    function_class                 shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 118

    (47) repeat_body -> LMB expression . RMB
    (2) expression -> expression . print
    (5) expression -> expression . variable_declaration SEMI
    (6) expression -> expression . variable_value_change SEMI
    (7) expression -> expression . if_statement
    (8) expression -> expression . function
    (9) expression -> expression . function_call SEMI
    (10) expression -> expression . repeat
    (11) expression -> expression . for
    (12) expression -> expression . while
    (13) expression -> expression . use SEMI
    (14) expression -> expression . error_handling
    (15) expression -> expression . variable_alone SEMI
    (16) expression -> expression . global_variable SEMI
    (17) expression -> expression . class_def
    (18) expression -> expression . debug SEMI
    (19) expression -> expression . function_class SEMI
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

    RMB             shift and go to state 149
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    print                          shift and go to state 37
    variable_declaration           shift and go to state 38
    variable_value_change          shift and go to state 39
    if_statement                   shift and go to state 40
    function                       shift and go to state 41
    function_call                  shift and go to state 42
    repeat                         shift and go to state 43
    for                            shift and go to state 44
    while                          shift and go to state 45
    use                            shift and go to state 46
    error_handling                 shift and go to state 47
    variable_alone                 shift and go to state 48
    global_variable                shift and go to state 49
    class_def                      shift and go to state 50
    debug                          shift and go to state 51
    function_class                 shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 119

    (41) for_body -> LMB expression . RMB
    (2) expression -> expression . print
    (5) expression -> expression . variable_declaration SEMI
    (6) expression -> expression . variable_value_change SEMI
    (7) expression -> expression . if_statement
    (8) expression -> expression . function
    (9) expression -> expression . function_call SEMI
    (10) expression -> expression . repeat
    (11) expression -> expression . for
    (12) expression -> expression . while
    (13) expression -> expression . use SEMI
    (14) expression -> expression . error_handling
    (15) expression -> expression . variable_alone SEMI
    (16) expression -> expression . global_variable SEMI
    (17) expression -> expression . class_def
    (18) expression -> expression . debug SEMI
    (19) expression -> expression . function_class SEMI
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

    RMB             shift and go to state 150
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    print                          shift and go to state 37
    variable_declaration           shift and go to state 38
    variable_value_change          shift and go to state 39
    if_statement                   shift and go to state 40
    function                       shift and go to state 41
    function_call                  shift and go to state 42
    repeat                         shift and go to state 43
    for                            shift and go to state 44
    while                          shift and go to state 45
    use                            shift and go to state 46
    error_handling                 shift and go to state 47
    variable_alone                 shift and go to state 48
    global_variable                shift and go to state 49
    class_def                      shift and go to state 50
    debug                          shift and go to state 51
    function_class                 shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 120

    (44) while_body -> LMB expression . RMB
    (2) expression -> expression . print
    (5) expression -> expression . variable_declaration SEMI
    (6) expression -> expression . variable_value_change SEMI
    (7) expression -> expression . if_statement
    (8) expression -> expression . function
    (9) expression -> expression . function_call SEMI
    (10) expression -> expression . repeat
    (11) expression -> expression . for
    (12) expression -> expression . while
    (13) expression -> expression . use SEMI
    (14) expression -> expression . error_handling
    (15) expression -> expression . variable_alone SEMI
    (16) expression -> expression . global_variable SEMI
    (17) expression -> expression . class_def
    (18) expression -> expression . debug SEMI
    (19) expression -> expression . function_class SEMI
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

    RMB             shift and go to state 151
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    print                          shift and go to state 37
    variable_declaration           shift and go to state 38
    variable_value_change          shift and go to state 39
    if_statement                   shift and go to state 40
    function                       shift and go to state 41
    function_call                  shift and go to state 42
    repeat                         shift and go to state 43
    for                            shift and go to state 44
    while                          shift and go to state 45
    use                            shift and go to state 46
    error_handling                 shift and go to state 47
    variable_alone                 shift and go to state 48
    global_variable                shift and go to state 49
    class_def                      shift and go to state 50
    debug                          shift and go to state 51
    function_class                 shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 121

    (38) catch -> CATCH LSB . IDENTIFIER RSB LMB expression RMB

    IDENTIFIER      shift and go to state 152


state 122

    (52) class_def -> CLASS IDENTIFIER LMB . expression RMB
    (1) expression -> . print
    (2) expression -> . expression print
    (5) expression -> . expression variable_declaration SEMI
    (6) expression -> . expression variable_value_change SEMI
    (7) expression -> . expression if_statement
    (8) expression -> . expression function
    (9) expression -> . expression function_call SEMI
    (10) expression -> . expression repeat
    (11) expression -> . expression for
    (12) expression -> . expression while
    (13) expression -> . expression use SEMI
    (14) expression -> . expression error_handling
    (15) expression -> . expression variable_alone SEMI
    (16) expression -> . expression global_variable SEMI
    (17) expression -> . expression class_def
    (18) expression -> . expression debug SEMI
    (19) expression -> . expression function_class SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . empty
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! PRINT           [ reduce using rule 97 (empty -> .) ]
  ! VAR             [ reduce using rule 97 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 97 (empty -> .) ]
  ! USE             [ reduce using rule 97 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 97 (empty -> .) ]
  ! CLASS           [ reduce using rule 97 (empty -> .) ]
  ! IF              [ reduce using rule 97 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 97 (empty -> .) ]
  ! REPEAT          [ reduce using rule 97 (empty -> .) ]
  ! FOR             [ reduce using rule 97 (empty -> .) ]
  ! WHILE           [ reduce using rule 97 (empty -> .) ]
  ! TRY             [ reduce using rule 97 (empty -> .) ]

    expression                     shift and go to state 153
    print                          shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 123

    (66) if_statement_1 -> IF LSB condition . RSB LMB expression RMB
    (70) condition -> condition . LB calculate
    (71) condition -> condition . RB calculate
    (72) condition -> condition . LB EQUAL calculate
    (73) condition -> condition . RB EQUAL calculate
    (74) condition -> condition . EQUAL calculate

    RSB             shift and go to state 154
    LB              shift and go to state 155
    RB              shift and go to state 156
    EQUAL           shift and go to state 157


state 124

    (75) condition -> calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             reduce using rule 75 (condition -> calculate .)
    LB              reduce using rule 75 (condition -> calculate .)
    RB              reduce using rule 75 (condition -> calculate .)
    EQUAL           reduce using rule 75 (condition -> calculate .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MUL             shift and go to state 138
    DIV             shift and go to state 139


state 125

    (54) function_head -> FUNCTION IDENTIFIER LSB . parameter RSB
    (55) function_head -> FUNCTION IDENTIFIER LSB . empty RSB
    (59) parameter -> . parameter COMMA calculate
    (60) parameter -> . calculate
    (97) empty -> .
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    RSB             reduce using rule 97 (empty -> .)
    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    parameter                      shift and go to state 158
    empty                          shift and go to state 159
    calculate                      shift and go to state 111

state 126

    (46) repeat_head -> REPEAT LSB calculate . RSB
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             shift and go to state 160
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MUL             shift and go to state 138
    DIV             shift and go to state 139


state 127

    (40) for_head -> FOR LSB IDENTIFIER . IN IDENTIFIER RSB

    IN              shift and go to state 161


state 128

    (43) while_head -> WHILE LSB condition . RSB
    (70) condition -> condition . LB calculate
    (71) condition -> condition . RB calculate
    (72) condition -> condition . LB EQUAL calculate
    (73) condition -> condition . RB EQUAL calculate
    (74) condition -> condition . EQUAL calculate

    RSB             shift and go to state 162
    LB              shift and go to state 155
    RB              shift and go to state 156
    EQUAL           shift and go to state 157


state 129

    (37) try -> TRY LMB expression . RMB
    (2) expression -> expression . print
    (5) expression -> expression . variable_declaration SEMI
    (6) expression -> expression . variable_value_change SEMI
    (7) expression -> expression . if_statement
    (8) expression -> expression . function
    (9) expression -> expression . function_call SEMI
    (10) expression -> expression . repeat
    (11) expression -> expression . for
    (12) expression -> expression . while
    (13) expression -> expression . use SEMI
    (14) expression -> expression . error_handling
    (15) expression -> expression . variable_alone SEMI
    (16) expression -> expression . global_variable SEMI
    (17) expression -> expression . class_def
    (18) expression -> expression . debug SEMI
    (19) expression -> expression . function_class SEMI
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

    RMB             shift and go to state 163
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    print                          shift and go to state 37
    variable_declaration           shift and go to state 38
    variable_value_change          shift and go to state 39
    if_statement                   shift and go to state 40
    function                       shift and go to state 41
    function_call                  shift and go to state 42
    repeat                         shift and go to state 43
    for                            shift and go to state 44
    while                          shift and go to state 45
    use                            shift and go to state 46
    error_handling                 shift and go to state 47
    variable_alone                 shift and go to state 48
    global_variable                shift and go to state 49
    class_def                      shift and go to state 50
    debug                          shift and go to state 51
    function_class                 shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 130

    (3) print -> PRINT LSB STRING RSB . SEMI

    SEMI            shift and go to state 164


state 131

    (82) variable_declaration -> VAR IDENTIFIER LIST EQUAL . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    calculate                      shift and go to state 165

state 132

    (48) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER . LSB parameter RSB
    (49) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER . LSB empty RSB
    (93) calculate -> IDENTIFIER .
    (94) calculate -> IDENTIFIER . LIST

    LSB             shift and go to state 166
    PLUS            reduce using rule 93 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 93 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 93 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 93 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 93 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 135


state 133

    (83) variable_declaration -> VAR IDENTIFIER EQUAL calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 83 (variable_declaration -> VAR IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MUL             shift and go to state 138
    DIV             shift and go to state 139


state 134

    (50) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB . parameter RSB
    (51) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB . empty RSB
    (59) parameter -> . parameter COMMA calculate
    (60) parameter -> . calculate
    (97) empty -> .
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    RSB             reduce using rule 97 (empty -> .)
    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    parameter                      shift and go to state 167
    empty                          shift and go to state 168
    calculate                      shift and go to state 111

state 135

    (94) calculate -> IDENTIFIER LIST .

    PLUS            reduce using rule 94 (calculate -> IDENTIFIER LIST .)
    MINUS           reduce using rule 94 (calculate -> IDENTIFIER LIST .)
    MUL             reduce using rule 94 (calculate -> IDENTIFIER LIST .)
    DIV             reduce using rule 94 (calculate -> IDENTIFIER LIST .)
    SEMI            reduce using rule 94 (calculate -> IDENTIFIER LIST .)
    RSB             reduce using rule 94 (calculate -> IDENTIFIER LIST .)
    COMMA           reduce using rule 94 (calculate -> IDENTIFIER LIST .)
    LB              reduce using rule 94 (calculate -> IDENTIFIER LIST .)
    RB              reduce using rule 94 (calculate -> IDENTIFIER LIST .)
    EQUAL           reduce using rule 94 (calculate -> IDENTIFIER LIST .)


state 136

    (85) calculate -> calculate PLUS . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    calculate                      shift and go to state 169

state 137

    (86) calculate -> calculate MINUS . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    calculate                      shift and go to state 170

state 138

    (88) calculate -> calculate MUL . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    calculate                      shift and go to state 171

state 139

    (89) calculate -> calculate DIV . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    calculate                      shift and go to state 172

state 140

    (96) calculate -> LSB calculate . RSB
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             shift and go to state 173
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MUL             shift and go to state 138
    DIV             shift and go to state 139


state 141

    (87) calculate -> MINUS calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 87 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 87 (calculate -> MINUS calculate .)
    MUL             reduce using rule 87 (calculate -> MINUS calculate .)
    DIV             reduce using rule 87 (calculate -> MINUS calculate .)
    SEMI            reduce using rule 87 (calculate -> MINUS calculate .)
    RSB             reduce using rule 87 (calculate -> MINUS calculate .)
    COMMA           reduce using rule 87 (calculate -> MINUS calculate .)
    LB              reduce using rule 87 (calculate -> MINUS calculate .)
    RB              reduce using rule 87 (calculate -> MINUS calculate .)
    EQUAL           reduce using rule 87 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 136 ]
  ! MINUS           [ shift and go to state 137 ]
  ! MUL             [ shift and go to state 138 ]
  ! DIV             [ shift and go to state 139 ]


state 142

    (57) function_call -> IDENTIFIER LSB parameter RSB .

    SEMI            reduce using rule 57 (function_call -> IDENTIFIER LSB parameter RSB .)


state 143

    (59) parameter -> parameter COMMA . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    calculate                      shift and go to state 174

state 144

    (58) function_call -> IDENTIFIER LSB empty RSB .

    SEMI            reduce using rule 58 (function_call -> IDENTIFIER LSB empty RSB .)


state 145

    (68) if_statement_2 -> if_statement_2 ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 175


state 146

    (67) if_statement_2 -> ELSE IF LSB . condition RSB LMB expression RMB
    (70) condition -> . condition LB calculate
    (71) condition -> . condition RB calculate
    (72) condition -> . condition LB EQUAL calculate
    (73) condition -> . condition RB EQUAL calculate
    (74) condition -> . condition EQUAL calculate
    (75) condition -> . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    condition                      shift and go to state 176
    calculate                      shift and go to state 124

state 147

    (69) if_statement_3 -> ELSE LMB expression . RMB
    (2) expression -> expression . print
    (5) expression -> expression . variable_declaration SEMI
    (6) expression -> expression . variable_value_change SEMI
    (7) expression -> expression . if_statement
    (8) expression -> expression . function
    (9) expression -> expression . function_call SEMI
    (10) expression -> expression . repeat
    (11) expression -> expression . for
    (12) expression -> expression . while
    (13) expression -> expression . use SEMI
    (14) expression -> expression . error_handling
    (15) expression -> expression . variable_alone SEMI
    (16) expression -> expression . global_variable SEMI
    (17) expression -> expression . class_def
    (18) expression -> expression . debug SEMI
    (19) expression -> expression . function_class SEMI
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

    RMB             shift and go to state 177
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    print                          shift and go to state 37
    variable_declaration           shift and go to state 38
    variable_value_change          shift and go to state 39
    if_statement                   shift and go to state 40
    function                       shift and go to state 41
    function_call                  shift and go to state 42
    repeat                         shift and go to state 43
    for                            shift and go to state 44
    while                          shift and go to state 45
    use                            shift and go to state 46
    error_handling                 shift and go to state 47
    variable_alone                 shift and go to state 48
    global_variable                shift and go to state 49
    class_def                      shift and go to state 50
    debug                          shift and go to state 51
    function_class                 shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 148

    (56) function_body -> LMB expression RMB .

    PRINT           reduce using rule 56 (function_body -> LMB expression RMB .)
    VAR             reduce using rule 56 (function_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 56 (function_body -> LMB expression RMB .)
    USE             reduce using rule 56 (function_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 56 (function_body -> LMB expression RMB .)
    CLASS           reduce using rule 56 (function_body -> LMB expression RMB .)
    IF              reduce using rule 56 (function_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 56 (function_body -> LMB expression RMB .)
    REPEAT          reduce using rule 56 (function_body -> LMB expression RMB .)
    FOR             reduce using rule 56 (function_body -> LMB expression RMB .)
    WHILE           reduce using rule 56 (function_body -> LMB expression RMB .)
    TRY             reduce using rule 56 (function_body -> LMB expression RMB .)
    $end            reduce using rule 56 (function_body -> LMB expression RMB .)
    RMB             reduce using rule 56 (function_body -> LMB expression RMB .)


state 149

    (47) repeat_body -> LMB expression RMB .

    PRINT           reduce using rule 47 (repeat_body -> LMB expression RMB .)
    VAR             reduce using rule 47 (repeat_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 47 (repeat_body -> LMB expression RMB .)
    USE             reduce using rule 47 (repeat_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 47 (repeat_body -> LMB expression RMB .)
    CLASS           reduce using rule 47 (repeat_body -> LMB expression RMB .)
    IF              reduce using rule 47 (repeat_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 47 (repeat_body -> LMB expression RMB .)
    REPEAT          reduce using rule 47 (repeat_body -> LMB expression RMB .)
    FOR             reduce using rule 47 (repeat_body -> LMB expression RMB .)
    WHILE           reduce using rule 47 (repeat_body -> LMB expression RMB .)
    TRY             reduce using rule 47 (repeat_body -> LMB expression RMB .)
    $end            reduce using rule 47 (repeat_body -> LMB expression RMB .)
    RMB             reduce using rule 47 (repeat_body -> LMB expression RMB .)


state 150

    (41) for_body -> LMB expression RMB .

    PRINT           reduce using rule 41 (for_body -> LMB expression RMB .)
    VAR             reduce using rule 41 (for_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 41 (for_body -> LMB expression RMB .)
    USE             reduce using rule 41 (for_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 41 (for_body -> LMB expression RMB .)
    CLASS           reduce using rule 41 (for_body -> LMB expression RMB .)
    IF              reduce using rule 41 (for_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 41 (for_body -> LMB expression RMB .)
    REPEAT          reduce using rule 41 (for_body -> LMB expression RMB .)
    FOR             reduce using rule 41 (for_body -> LMB expression RMB .)
    WHILE           reduce using rule 41 (for_body -> LMB expression RMB .)
    TRY             reduce using rule 41 (for_body -> LMB expression RMB .)
    $end            reduce using rule 41 (for_body -> LMB expression RMB .)
    RMB             reduce using rule 41 (for_body -> LMB expression RMB .)


state 151

    (44) while_body -> LMB expression RMB .

    PRINT           reduce using rule 44 (while_body -> LMB expression RMB .)
    VAR             reduce using rule 44 (while_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 44 (while_body -> LMB expression RMB .)
    USE             reduce using rule 44 (while_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 44 (while_body -> LMB expression RMB .)
    CLASS           reduce using rule 44 (while_body -> LMB expression RMB .)
    IF              reduce using rule 44 (while_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 44 (while_body -> LMB expression RMB .)
    REPEAT          reduce using rule 44 (while_body -> LMB expression RMB .)
    FOR             reduce using rule 44 (while_body -> LMB expression RMB .)
    WHILE           reduce using rule 44 (while_body -> LMB expression RMB .)
    TRY             reduce using rule 44 (while_body -> LMB expression RMB .)
    $end            reduce using rule 44 (while_body -> LMB expression RMB .)
    RMB             reduce using rule 44 (while_body -> LMB expression RMB .)


state 152

    (38) catch -> CATCH LSB IDENTIFIER . RSB LMB expression RMB

    RSB             shift and go to state 178


state 153

    (52) class_def -> CLASS IDENTIFIER LMB expression . RMB
    (2) expression -> expression . print
    (5) expression -> expression . variable_declaration SEMI
    (6) expression -> expression . variable_value_change SEMI
    (7) expression -> expression . if_statement
    (8) expression -> expression . function
    (9) expression -> expression . function_call SEMI
    (10) expression -> expression . repeat
    (11) expression -> expression . for
    (12) expression -> expression . while
    (13) expression -> expression . use SEMI
    (14) expression -> expression . error_handling
    (15) expression -> expression . variable_alone SEMI
    (16) expression -> expression . global_variable SEMI
    (17) expression -> expression . class_def
    (18) expression -> expression . debug SEMI
    (19) expression -> expression . function_class SEMI
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

    RMB             shift and go to state 179
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    print                          shift and go to state 37
    variable_declaration           shift and go to state 38
    variable_value_change          shift and go to state 39
    if_statement                   shift and go to state 40
    function                       shift and go to state 41
    function_call                  shift and go to state 42
    repeat                         shift and go to state 43
    for                            shift and go to state 44
    while                          shift and go to state 45
    use                            shift and go to state 46
    error_handling                 shift and go to state 47
    variable_alone                 shift and go to state 48
    global_variable                shift and go to state 49
    class_def                      shift and go to state 50
    debug                          shift and go to state 51
    function_class                 shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 154

    (66) if_statement_1 -> IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 180


state 155

    (70) condition -> condition LB . calculate
    (72) condition -> condition LB . EQUAL calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 182
    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    calculate                      shift and go to state 181

state 156

    (71) condition -> condition RB . calculate
    (73) condition -> condition RB . EQUAL calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 184
    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    calculate                      shift and go to state 183

state 157

    (74) condition -> condition EQUAL . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    calculate                      shift and go to state 185

state 158

    (54) function_head -> FUNCTION IDENTIFIER LSB parameter . RSB
    (59) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 186
    COMMA           shift and go to state 143


state 159

    (55) function_head -> FUNCTION IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 187


state 160

    (46) repeat_head -> REPEAT LSB calculate RSB .

    LMB             reduce using rule 46 (repeat_head -> REPEAT LSB calculate RSB .)


state 161

    (40) for_head -> FOR LSB IDENTIFIER IN . IDENTIFIER RSB

    IDENTIFIER      shift and go to state 188


state 162

    (43) while_head -> WHILE LSB condition RSB .

    LMB             reduce using rule 43 (while_head -> WHILE LSB condition RSB .)


state 163

    (37) try -> TRY LMB expression RMB .

    CATCH           reduce using rule 37 (try -> TRY LMB expression RMB .)


state 164

    (3) print -> PRINT LSB STRING RSB SEMI .

    PRINT           reduce using rule 3 (print -> PRINT LSB STRING RSB SEMI .)
    VAR             reduce using rule 3 (print -> PRINT LSB STRING RSB SEMI .)
    IDENTIFIER      reduce using rule 3 (print -> PRINT LSB STRING RSB SEMI .)
    USE             reduce using rule 3 (print -> PRINT LSB STRING RSB SEMI .)
    GLOBAL          reduce using rule 3 (print -> PRINT LSB STRING RSB SEMI .)
    CLASS           reduce using rule 3 (print -> PRINT LSB STRING RSB SEMI .)
    IF              reduce using rule 3 (print -> PRINT LSB STRING RSB SEMI .)
    FUNCTION        reduce using rule 3 (print -> PRINT LSB STRING RSB SEMI .)
    REPEAT          reduce using rule 3 (print -> PRINT LSB STRING RSB SEMI .)
    FOR             reduce using rule 3 (print -> PRINT LSB STRING RSB SEMI .)
    WHILE           reduce using rule 3 (print -> PRINT LSB STRING RSB SEMI .)
    TRY             reduce using rule 3 (print -> PRINT LSB STRING RSB SEMI .)
    $end            reduce using rule 3 (print -> PRINT LSB STRING RSB SEMI .)
    RMB             reduce using rule 3 (print -> PRINT LSB STRING RSB SEMI .)


state 165

    (82) variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 82 (variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MUL             shift and go to state 138
    DIV             shift and go to state 139


state 166

    (48) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB . parameter RSB
    (49) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB . empty RSB
    (59) parameter -> . parameter COMMA calculate
    (60) parameter -> . calculate
    (97) empty -> .
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    RSB             reduce using rule 97 (empty -> .)
    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    parameter                      shift and go to state 189
    empty                          shift and go to state 190
    calculate                      shift and go to state 111

state 167

    (50) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter . RSB
    (59) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 191
    COMMA           shift and go to state 143


state 168

    (51) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 192


state 169

    (85) calculate -> calculate PLUS calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 85 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 85 (calculate -> calculate PLUS calculate .)
    SEMI            reduce using rule 85 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 85 (calculate -> calculate PLUS calculate .)
    COMMA           reduce using rule 85 (calculate -> calculate PLUS calculate .)
    LB              reduce using rule 85 (calculate -> calculate PLUS calculate .)
    RB              reduce using rule 85 (calculate -> calculate PLUS calculate .)
    EQUAL           reduce using rule 85 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 138
    DIV             shift and go to state 139

  ! MUL             [ reduce using rule 85 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 85 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 136 ]
  ! MINUS           [ shift and go to state 137 ]


state 170

    (86) calculate -> calculate MINUS calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 86 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 86 (calculate -> calculate MINUS calculate .)
    SEMI            reduce using rule 86 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 86 (calculate -> calculate MINUS calculate .)
    COMMA           reduce using rule 86 (calculate -> calculate MINUS calculate .)
    LB              reduce using rule 86 (calculate -> calculate MINUS calculate .)
    RB              reduce using rule 86 (calculate -> calculate MINUS calculate .)
    EQUAL           reduce using rule 86 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 138
    DIV             shift and go to state 139

  ! MUL             [ reduce using rule 86 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 86 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 136 ]
  ! MINUS           [ shift and go to state 137 ]


state 171

    (88) calculate -> calculate MUL calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 88 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 88 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 88 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 88 (calculate -> calculate MUL calculate .)
    SEMI            reduce using rule 88 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 88 (calculate -> calculate MUL calculate .)
    COMMA           reduce using rule 88 (calculate -> calculate MUL calculate .)
    LB              reduce using rule 88 (calculate -> calculate MUL calculate .)
    RB              reduce using rule 88 (calculate -> calculate MUL calculate .)
    EQUAL           reduce using rule 88 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 136 ]
  ! MINUS           [ shift and go to state 137 ]
  ! MUL             [ shift and go to state 138 ]
  ! DIV             [ shift and go to state 139 ]


state 172

    (89) calculate -> calculate DIV calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 89 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 89 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 89 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 89 (calculate -> calculate DIV calculate .)
    SEMI            reduce using rule 89 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 89 (calculate -> calculate DIV calculate .)
    COMMA           reduce using rule 89 (calculate -> calculate DIV calculate .)
    LB              reduce using rule 89 (calculate -> calculate DIV calculate .)
    RB              reduce using rule 89 (calculate -> calculate DIV calculate .)
    EQUAL           reduce using rule 89 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 136 ]
  ! MINUS           [ shift and go to state 137 ]
  ! MUL             [ shift and go to state 138 ]
  ! DIV             [ shift and go to state 139 ]


state 173

    (96) calculate -> LSB calculate RSB .

    PLUS            reduce using rule 96 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 96 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 96 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 96 (calculate -> LSB calculate RSB .)
    SEMI            reduce using rule 96 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 96 (calculate -> LSB calculate RSB .)
    COMMA           reduce using rule 96 (calculate -> LSB calculate RSB .)
    LB              reduce using rule 96 (calculate -> LSB calculate RSB .)
    RB              reduce using rule 96 (calculate -> LSB calculate RSB .)
    EQUAL           reduce using rule 96 (calculate -> LSB calculate RSB .)


state 174

    (59) parameter -> parameter COMMA calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             reduce using rule 59 (parameter -> parameter COMMA calculate .)
    COMMA           reduce using rule 59 (parameter -> parameter COMMA calculate .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MUL             shift and go to state 138
    DIV             shift and go to state 139


state 175

    (68) if_statement_2 -> if_statement_2 ELSE IF LSB . condition RSB LMB expression RMB
    (70) condition -> . condition LB calculate
    (71) condition -> . condition RB calculate
    (72) condition -> . condition LB EQUAL calculate
    (73) condition -> . condition RB EQUAL calculate
    (74) condition -> . condition EQUAL calculate
    (75) condition -> . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    condition                      shift and go to state 193
    calculate                      shift and go to state 124

state 176

    (67) if_statement_2 -> ELSE IF LSB condition . RSB LMB expression RMB
    (70) condition -> condition . LB calculate
    (71) condition -> condition . RB calculate
    (72) condition -> condition . LB EQUAL calculate
    (73) condition -> condition . RB EQUAL calculate
    (74) condition -> condition . EQUAL calculate

    RSB             shift and go to state 194
    LB              shift and go to state 155
    RB              shift and go to state 156
    EQUAL           shift and go to state 157


state 177

    (69) if_statement_3 -> ELSE LMB expression RMB .

    PRINT           reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    VAR             reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    IDENTIFIER      reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    USE             reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    GLOBAL          reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    CLASS           reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    IF              reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    FUNCTION        reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    REPEAT          reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    FOR             reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    WHILE           reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    TRY             reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    $end            reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    RMB             reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)


state 178

    (38) catch -> CATCH LSB IDENTIFIER RSB . LMB expression RMB

    LMB             shift and go to state 195


state 179

    (52) class_def -> CLASS IDENTIFIER LMB expression RMB .

    PRINT           reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    VAR             reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    IDENTIFIER      reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    USE             reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    GLOBAL          reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    CLASS           reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    IF              reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    FUNCTION        reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    REPEAT          reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    FOR             reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    WHILE           reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    TRY             reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    $end            reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    RMB             reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)


state 180

    (66) if_statement_1 -> IF LSB condition RSB LMB . expression RMB
    (1) expression -> . print
    (2) expression -> . expression print
    (5) expression -> . expression variable_declaration SEMI
    (6) expression -> . expression variable_value_change SEMI
    (7) expression -> . expression if_statement
    (8) expression -> . expression function
    (9) expression -> . expression function_call SEMI
    (10) expression -> . expression repeat
    (11) expression -> . expression for
    (12) expression -> . expression while
    (13) expression -> . expression use SEMI
    (14) expression -> . expression error_handling
    (15) expression -> . expression variable_alone SEMI
    (16) expression -> . expression global_variable SEMI
    (17) expression -> . expression class_def
    (18) expression -> . expression debug SEMI
    (19) expression -> . expression function_class SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . empty
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! PRINT           [ reduce using rule 97 (empty -> .) ]
  ! VAR             [ reduce using rule 97 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 97 (empty -> .) ]
  ! USE             [ reduce using rule 97 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 97 (empty -> .) ]
  ! CLASS           [ reduce using rule 97 (empty -> .) ]
  ! IF              [ reduce using rule 97 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 97 (empty -> .) ]
  ! REPEAT          [ reduce using rule 97 (empty -> .) ]
  ! FOR             [ reduce using rule 97 (empty -> .) ]
  ! WHILE           [ reduce using rule 97 (empty -> .) ]
  ! TRY             [ reduce using rule 97 (empty -> .) ]

    expression                     shift and go to state 196
    print                          shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 181

    (70) condition -> condition LB calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             reduce using rule 70 (condition -> condition LB calculate .)
    LB              reduce using rule 70 (condition -> condition LB calculate .)
    RB              reduce using rule 70 (condition -> condition LB calculate .)
    EQUAL           reduce using rule 70 (condition -> condition LB calculate .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MUL             shift and go to state 138
    DIV             shift and go to state 139


state 182

    (72) condition -> condition LB EQUAL . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    calculate                      shift and go to state 197

state 183

    (71) condition -> condition RB calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             reduce using rule 71 (condition -> condition RB calculate .)
    LB              reduce using rule 71 (condition -> condition RB calculate .)
    RB              reduce using rule 71 (condition -> condition RB calculate .)
    EQUAL           reduce using rule 71 (condition -> condition RB calculate .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MUL             shift and go to state 138
    DIV             shift and go to state 139


state 184

    (73) condition -> condition RB EQUAL . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 104
    INT             shift and go to state 105
    FLOAT           shift and go to state 106
    STRING          shift and go to state 107
    IDENTIFIER      shift and go to state 108
    LIST            shift and go to state 112
    LSB             shift and go to state 103

    calculate                      shift and go to state 198

state 185

    (74) condition -> condition EQUAL calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             reduce using rule 74 (condition -> condition EQUAL calculate .)
    LB              reduce using rule 74 (condition -> condition EQUAL calculate .)
    RB              reduce using rule 74 (condition -> condition EQUAL calculate .)
    EQUAL           reduce using rule 74 (condition -> condition EQUAL calculate .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MUL             shift and go to state 138
    DIV             shift and go to state 139


state 186

    (54) function_head -> FUNCTION IDENTIFIER LSB parameter RSB .

    LMB             reduce using rule 54 (function_head -> FUNCTION IDENTIFIER LSB parameter RSB .)


state 187

    (55) function_head -> FUNCTION IDENTIFIER LSB empty RSB .

    LMB             reduce using rule 55 (function_head -> FUNCTION IDENTIFIER LSB empty RSB .)


state 188

    (40) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER . RSB

    RSB             shift and go to state 199


state 189

    (48) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter . RSB
    (59) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 200
    COMMA           shift and go to state 143


state 190

    (49) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 201


state 191

    (50) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .

    SEMI            reduce using rule 50 (function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .)


state 192

    (51) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .

    SEMI            reduce using rule 51 (function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .)


state 193

    (68) if_statement_2 -> if_statement_2 ELSE IF LSB condition . RSB LMB expression RMB
    (70) condition -> condition . LB calculate
    (71) condition -> condition . RB calculate
    (72) condition -> condition . LB EQUAL calculate
    (73) condition -> condition . RB EQUAL calculate
    (74) condition -> condition . EQUAL calculate

    RSB             shift and go to state 202
    LB              shift and go to state 155
    RB              shift and go to state 156
    EQUAL           shift and go to state 157


state 194

    (67) if_statement_2 -> ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 203


state 195

    (38) catch -> CATCH LSB IDENTIFIER RSB LMB . expression RMB
    (1) expression -> . print
    (2) expression -> . expression print
    (5) expression -> . expression variable_declaration SEMI
    (6) expression -> . expression variable_value_change SEMI
    (7) expression -> . expression if_statement
    (8) expression -> . expression function
    (9) expression -> . expression function_call SEMI
    (10) expression -> . expression repeat
    (11) expression -> . expression for
    (12) expression -> . expression while
    (13) expression -> . expression use SEMI
    (14) expression -> . expression error_handling
    (15) expression -> . expression variable_alone SEMI
    (16) expression -> . expression global_variable SEMI
    (17) expression -> . expression class_def
    (18) expression -> . expression debug SEMI
    (19) expression -> . expression function_class SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . empty
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! PRINT           [ reduce using rule 97 (empty -> .) ]
  ! VAR             [ reduce using rule 97 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 97 (empty -> .) ]
  ! USE             [ reduce using rule 97 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 97 (empty -> .) ]
  ! CLASS           [ reduce using rule 97 (empty -> .) ]
  ! IF              [ reduce using rule 97 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 97 (empty -> .) ]
  ! REPEAT          [ reduce using rule 97 (empty -> .) ]
  ! FOR             [ reduce using rule 97 (empty -> .) ]
  ! WHILE           [ reduce using rule 97 (empty -> .) ]
  ! TRY             [ reduce using rule 97 (empty -> .) ]

    expression                     shift and go to state 204
    print                          shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 196

    (66) if_statement_1 -> IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . print
    (5) expression -> expression . variable_declaration SEMI
    (6) expression -> expression . variable_value_change SEMI
    (7) expression -> expression . if_statement
    (8) expression -> expression . function
    (9) expression -> expression . function_call SEMI
    (10) expression -> expression . repeat
    (11) expression -> expression . for
    (12) expression -> expression . while
    (13) expression -> expression . use SEMI
    (14) expression -> expression . error_handling
    (15) expression -> expression . variable_alone SEMI
    (16) expression -> expression . global_variable SEMI
    (17) expression -> expression . class_def
    (18) expression -> expression . debug SEMI
    (19) expression -> expression . function_class SEMI
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

    RMB             shift and go to state 205
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    print                          shift and go to state 37
    variable_declaration           shift and go to state 38
    variable_value_change          shift and go to state 39
    if_statement                   shift and go to state 40
    function                       shift and go to state 41
    function_call                  shift and go to state 42
    repeat                         shift and go to state 43
    for                            shift and go to state 44
    while                          shift and go to state 45
    use                            shift and go to state 46
    error_handling                 shift and go to state 47
    variable_alone                 shift and go to state 48
    global_variable                shift and go to state 49
    class_def                      shift and go to state 50
    debug                          shift and go to state 51
    function_class                 shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 197

    (72) condition -> condition LB EQUAL calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             reduce using rule 72 (condition -> condition LB EQUAL calculate .)
    LB              reduce using rule 72 (condition -> condition LB EQUAL calculate .)
    RB              reduce using rule 72 (condition -> condition LB EQUAL calculate .)
    EQUAL           reduce using rule 72 (condition -> condition LB EQUAL calculate .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MUL             shift and go to state 138
    DIV             shift and go to state 139


state 198

    (73) condition -> condition RB EQUAL calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             reduce using rule 73 (condition -> condition RB EQUAL calculate .)
    LB              reduce using rule 73 (condition -> condition RB EQUAL calculate .)
    RB              reduce using rule 73 (condition -> condition RB EQUAL calculate .)
    EQUAL           reduce using rule 73 (condition -> condition RB EQUAL calculate .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MUL             shift and go to state 138
    DIV             shift and go to state 139


state 199

    (40) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .

    LMB             reduce using rule 40 (for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .)


state 200

    (48) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .

    SEMI            reduce using rule 48 (function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .)


state 201

    (49) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .

    SEMI            reduce using rule 49 (function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .)


state 202

    (68) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 206


state 203

    (67) if_statement_2 -> ELSE IF LSB condition RSB LMB . expression RMB
    (1) expression -> . print
    (2) expression -> . expression print
    (5) expression -> . expression variable_declaration SEMI
    (6) expression -> . expression variable_value_change SEMI
    (7) expression -> . expression if_statement
    (8) expression -> . expression function
    (9) expression -> . expression function_call SEMI
    (10) expression -> . expression repeat
    (11) expression -> . expression for
    (12) expression -> . expression while
    (13) expression -> . expression use SEMI
    (14) expression -> . expression error_handling
    (15) expression -> . expression variable_alone SEMI
    (16) expression -> . expression global_variable SEMI
    (17) expression -> . expression class_def
    (18) expression -> . expression debug SEMI
    (19) expression -> . expression function_class SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . empty
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! PRINT           [ reduce using rule 97 (empty -> .) ]
  ! VAR             [ reduce using rule 97 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 97 (empty -> .) ]
  ! USE             [ reduce using rule 97 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 97 (empty -> .) ]
  ! CLASS           [ reduce using rule 97 (empty -> .) ]
  ! IF              [ reduce using rule 97 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 97 (empty -> .) ]
  ! REPEAT          [ reduce using rule 97 (empty -> .) ]
  ! FOR             [ reduce using rule 97 (empty -> .) ]
  ! WHILE           [ reduce using rule 97 (empty -> .) ]
  ! TRY             [ reduce using rule 97 (empty -> .) ]

    expression                     shift and go to state 207
    print                          shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 204

    (38) catch -> CATCH LSB IDENTIFIER RSB LMB expression . RMB
    (2) expression -> expression . print
    (5) expression -> expression . variable_declaration SEMI
    (6) expression -> expression . variable_value_change SEMI
    (7) expression -> expression . if_statement
    (8) expression -> expression . function
    (9) expression -> expression . function_call SEMI
    (10) expression -> expression . repeat
    (11) expression -> expression . for
    (12) expression -> expression . while
    (13) expression -> expression . use SEMI
    (14) expression -> expression . error_handling
    (15) expression -> expression . variable_alone SEMI
    (16) expression -> expression . global_variable SEMI
    (17) expression -> expression . class_def
    (18) expression -> expression . debug SEMI
    (19) expression -> expression . function_class SEMI
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

    RMB             shift and go to state 208
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    print                          shift and go to state 37
    variable_declaration           shift and go to state 38
    variable_value_change          shift and go to state 39
    if_statement                   shift and go to state 40
    function                       shift and go to state 41
    function_call                  shift and go to state 42
    repeat                         shift and go to state 43
    for                            shift and go to state 44
    while                          shift and go to state 45
    use                            shift and go to state 46
    error_handling                 shift and go to state 47
    variable_alone                 shift and go to state 48
    global_variable                shift and go to state 49
    class_def                      shift and go to state 50
    debug                          shift and go to state 51
    function_class                 shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 205

    (66) if_statement_1 -> IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    PRINT           reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)


state 206

    (68) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB . expression RMB
    (1) expression -> . print
    (2) expression -> . expression print
    (5) expression -> . expression variable_declaration SEMI
    (6) expression -> . expression variable_value_change SEMI
    (7) expression -> . expression if_statement
    (8) expression -> . expression function
    (9) expression -> . expression function_call SEMI
    (10) expression -> . expression repeat
    (11) expression -> . expression for
    (12) expression -> . expression while
    (13) expression -> . expression use SEMI
    (14) expression -> . expression error_handling
    (15) expression -> . expression variable_alone SEMI
    (16) expression -> . expression global_variable SEMI
    (17) expression -> . expression class_def
    (18) expression -> . expression debug SEMI
    (19) expression -> . expression function_class SEMI
    (20) expression -> . variable_declaration SEMI
    (21) expression -> . variable_value_change SEMI
    (22) expression -> . if_statement
    (23) expression -> . function
    (24) expression -> . function_call SEMI
    (25) expression -> . repeat
    (26) expression -> . for
    (27) expression -> . while
    (28) expression -> . use SEMI
    (29) expression -> . error_handling
    (30) expression -> . variable_alone SEMI
    (31) expression -> . global_variable SEMI
    (32) expression -> . class_def
    (33) expression -> . debug SEMI
    (34) expression -> . function_class SEMI
    (35) expression -> . empty
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! PRINT           [ reduce using rule 97 (empty -> .) ]
  ! VAR             [ reduce using rule 97 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 97 (empty -> .) ]
  ! USE             [ reduce using rule 97 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 97 (empty -> .) ]
  ! CLASS           [ reduce using rule 97 (empty -> .) ]
  ! IF              [ reduce using rule 97 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 97 (empty -> .) ]
  ! REPEAT          [ reduce using rule 97 (empty -> .) ]
  ! FOR             [ reduce using rule 97 (empty -> .) ]
  ! WHILE           [ reduce using rule 97 (empty -> .) ]
  ! TRY             [ reduce using rule 97 (empty -> .) ]

    expression                     shift and go to state 209
    print                          shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    empty                          shift and go to state 18
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 207

    (67) if_statement_2 -> ELSE IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . print
    (5) expression -> expression . variable_declaration SEMI
    (6) expression -> expression . variable_value_change SEMI
    (7) expression -> expression . if_statement
    (8) expression -> expression . function
    (9) expression -> expression . function_call SEMI
    (10) expression -> expression . repeat
    (11) expression -> expression . for
    (12) expression -> expression . while
    (13) expression -> expression . use SEMI
    (14) expression -> expression . error_handling
    (15) expression -> expression . variable_alone SEMI
    (16) expression -> expression . global_variable SEMI
    (17) expression -> expression . class_def
    (18) expression -> expression . debug SEMI
    (19) expression -> expression . function_class SEMI
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

    RMB             shift and go to state 210
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    print                          shift and go to state 37
    variable_declaration           shift and go to state 38
    variable_value_change          shift and go to state 39
    if_statement                   shift and go to state 40
    function                       shift and go to state 41
    function_call                  shift and go to state 42
    repeat                         shift and go to state 43
    for                            shift and go to state 44
    while                          shift and go to state 45
    use                            shift and go to state 46
    error_handling                 shift and go to state 47
    variable_alone                 shift and go to state 48
    global_variable                shift and go to state 49
    class_def                      shift and go to state 50
    debug                          shift and go to state 51
    function_class                 shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 208

    (38) catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .

    PRINT           reduce using rule 38 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    VAR             reduce using rule 38 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 38 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    USE             reduce using rule 38 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    GLOBAL          reduce using rule 38 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    CLASS           reduce using rule 38 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IF              reduce using rule 38 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FUNCTION        reduce using rule 38 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    REPEAT          reduce using rule 38 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FOR             reduce using rule 38 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    WHILE           reduce using rule 38 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    TRY             reduce using rule 38 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    $end            reduce using rule 38 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    RMB             reduce using rule 38 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)


state 209

    (68) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . print
    (5) expression -> expression . variable_declaration SEMI
    (6) expression -> expression . variable_value_change SEMI
    (7) expression -> expression . if_statement
    (8) expression -> expression . function
    (9) expression -> expression . function_call SEMI
    (10) expression -> expression . repeat
    (11) expression -> expression . for
    (12) expression -> expression . while
    (13) expression -> expression . use SEMI
    (14) expression -> expression . error_handling
    (15) expression -> expression . variable_alone SEMI
    (16) expression -> expression . global_variable SEMI
    (17) expression -> expression . class_def
    (18) expression -> expression . debug SEMI
    (19) expression -> expression . function_class SEMI
    (3) print -> . PRINT LSB STRING RSB SEMI
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (45) repeat -> . repeat_head repeat_body
    (39) for -> . for_head for_body
    (42) while -> . while_head while_body
    (76) use -> . USE use_params
    (36) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (46) repeat_head -> . REPEAT LSB calculate RSB
    (40) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (43) while_head -> . WHILE LSB condition RSB
    (37) try -> . TRY LMB expression RMB

    RMB             shift and go to state 211
    PRINT           shift and go to state 19
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    print                          shift and go to state 37
    variable_declaration           shift and go to state 38
    variable_value_change          shift and go to state 39
    if_statement                   shift and go to state 40
    function                       shift and go to state 41
    function_call                  shift and go to state 42
    repeat                         shift and go to state 43
    for                            shift and go to state 44
    while                          shift and go to state 45
    use                            shift and go to state 46
    error_handling                 shift and go to state 47
    variable_alone                 shift and go to state 48
    global_variable                shift and go to state 49
    class_def                      shift and go to state 50
    debug                          shift and go to state 51
    function_class                 shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 210

    (67) if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    PRINT           reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)


state 211

    (68) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    PRINT           reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for USE in state 0 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 69 resolved as shift
WARNING: shift/reduce conflict for VAR in state 69 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 69 resolved as shift
WARNING: shift/reduce conflict for USE in state 69 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 69 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 69 resolved as shift
WARNING: shift/reduce conflict for IF in state 69 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 69 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 69 resolved as shift
WARNING: shift/reduce conflict for FOR in state 69 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 69 resolved as shift
WARNING: shift/reduce conflict for TRY in state 69 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 71 resolved as shift
WARNING: shift/reduce conflict for VAR in state 71 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 71 resolved as shift
WARNING: shift/reduce conflict for USE in state 71 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 71 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 71 resolved as shift
WARNING: shift/reduce conflict for IF in state 71 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 71 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 71 resolved as shift
WARNING: shift/reduce conflict for FOR in state 71 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 71 resolved as shift
WARNING: shift/reduce conflict for TRY in state 71 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 73 resolved as shift
WARNING: shift/reduce conflict for VAR in state 73 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 73 resolved as shift
WARNING: shift/reduce conflict for USE in state 73 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 73 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 73 resolved as shift
WARNING: shift/reduce conflict for IF in state 73 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 73 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 73 resolved as shift
WARNING: shift/reduce conflict for FOR in state 73 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 73 resolved as shift
WARNING: shift/reduce conflict for TRY in state 73 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 75 resolved as shift
WARNING: shift/reduce conflict for VAR in state 75 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 75 resolved as shift
WARNING: shift/reduce conflict for USE in state 75 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 75 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 75 resolved as shift
WARNING: shift/reduce conflict for IF in state 75 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 75 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 75 resolved as shift
WARNING: shift/reduce conflict for FOR in state 75 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 75 resolved as shift
WARNING: shift/reduce conflict for TRY in state 75 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 88 resolved as shift
WARNING: shift/reduce conflict for VAR in state 88 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 88 resolved as shift
WARNING: shift/reduce conflict for USE in state 88 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 88 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 88 resolved as shift
WARNING: shift/reduce conflict for IF in state 88 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 88 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 88 resolved as shift
WARNING: shift/reduce conflict for FOR in state 88 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 88 resolved as shift
WARNING: shift/reduce conflict for TRY in state 88 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 116 resolved as shift
WARNING: shift/reduce conflict for VAR in state 116 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 116 resolved as shift
WARNING: shift/reduce conflict for USE in state 116 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 116 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 116 resolved as shift
WARNING: shift/reduce conflict for IF in state 116 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 116 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 116 resolved as shift
WARNING: shift/reduce conflict for FOR in state 116 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 116 resolved as shift
WARNING: shift/reduce conflict for TRY in state 116 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 122 resolved as shift
WARNING: shift/reduce conflict for VAR in state 122 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 122 resolved as shift
WARNING: shift/reduce conflict for USE in state 122 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 122 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 122 resolved as shift
WARNING: shift/reduce conflict for IF in state 122 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 122 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 122 resolved as shift
WARNING: shift/reduce conflict for FOR in state 122 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 122 resolved as shift
WARNING: shift/reduce conflict for TRY in state 122 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 180 resolved as shift
WARNING: shift/reduce conflict for VAR in state 180 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 180 resolved as shift
WARNING: shift/reduce conflict for USE in state 180 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 180 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 180 resolved as shift
WARNING: shift/reduce conflict for IF in state 180 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 180 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 180 resolved as shift
WARNING: shift/reduce conflict for FOR in state 180 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 180 resolved as shift
WARNING: shift/reduce conflict for TRY in state 180 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 195 resolved as shift
WARNING: shift/reduce conflict for VAR in state 195 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 195 resolved as shift
WARNING: shift/reduce conflict for USE in state 195 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 195 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 195 resolved as shift
WARNING: shift/reduce conflict for IF in state 195 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 195 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 195 resolved as shift
WARNING: shift/reduce conflict for FOR in state 195 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 195 resolved as shift
WARNING: shift/reduce conflict for TRY in state 195 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 203 resolved as shift
WARNING: shift/reduce conflict for VAR in state 203 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 203 resolved as shift
WARNING: shift/reduce conflict for USE in state 203 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 203 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 203 resolved as shift
WARNING: shift/reduce conflict for IF in state 203 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 203 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 203 resolved as shift
WARNING: shift/reduce conflict for FOR in state 203 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 203 resolved as shift
WARNING: shift/reduce conflict for TRY in state 203 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 206 resolved as shift
WARNING: shift/reduce conflict for VAR in state 206 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 206 resolved as shift
WARNING: shift/reduce conflict for USE in state 206 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 206 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 206 resolved as shift
WARNING: shift/reduce conflict for IF in state 206 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 206 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 206 resolved as shift
WARNING: shift/reduce conflict for FOR in state 206 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 206 resolved as shift
WARNING: shift/reduce conflict for TRY in state 206 resolved as shift
WARNING: reduce/reduce conflict in state 101 resolved using rule (variable_value_change -> IDENTIFIER EQUAL LIST)
WARNING: rejected rule (calculate -> LIST) in state 101
