Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> root
Rule 1     root -> expression
Rule 2     expression -> expression variable_declaration SEMI
Rule 3     expression -> expression variable_value_change SEMI
Rule 4     expression -> expression if_statement
Rule 5     expression -> expression function
Rule 6     expression -> expression function_call SEMI
Rule 7     expression -> expression repeat
Rule 8     expression -> expression for
Rule 9     expression -> expression while
Rule 10    expression -> expression use
Rule 11    expression -> expression error_handling
Rule 12    expression -> variable_declaration SEMI
Rule 13    expression -> variable_value_change SEMI
Rule 14    expression -> if_statement
Rule 15    expression -> function
Rule 16    expression -> function_call
Rule 17    expression -> repeat
Rule 18    expression -> for
Rule 19    expression -> while
Rule 20    expression -> use
Rule 21    expression -> error_handling
Rule 22    expression -> empty
Rule 23    error_handling -> try catch
Rule 24    try -> TRY LMB expression RMB
Rule 25    catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB
Rule 26    for -> for_head for_body
Rule 27    for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB
Rule 28    for_body -> LMB expression RMB
Rule 29    while -> while_head while_body
Rule 30    while_head -> WHILE LSB condition RSB
Rule 31    while_body -> LMB expression RMB
Rule 32    repeat -> repeat_head repeat_body
Rule 33    repeat_head -> REPEAT LSB calculate RSB
Rule 34    repeat_body -> LMB expression RMB
Rule 35    function -> function_head function_body
Rule 36    function_head -> FUNCTION IDENTIFIER LSB empty RSB
Rule 37    function_head -> FUNCTION IDENTIFIER LSB parameter RSB
Rule 38    function_body -> LMB expression RMB
Rule 39    function_call -> IDENTIFIER LSB parameter RSB
Rule 40    parameter -> parameter COMMA calculate
Rule 41    parameter -> calculate
Rule 42    parameter -> empty
Rule 43    if_statement -> if_statement_1 if_statement_2 if_statement_3
Rule 44    if_statement -> if_statement_1 if_statement_2
Rule 45    if_statement -> if_statement_1 if_statement_3
Rule 46    if_statement -> if_statement_1
Rule 47    if_statement_1 -> IF LSB condition RSB LMB expression RMB
Rule 48    if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB
Rule 49    if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
Rule 50    if_statement_3 -> ELSE LMB expression RMB
Rule 51    condition -> condition LB calculate
Rule 52    condition -> condition RB calculate
Rule 53    condition -> condition LB EQUAL calculate
Rule 54    condition -> condition RB EQUAL calculate
Rule 55    condition -> condition EQUAL calculate
Rule 56    condition -> calculate
Rule 57    use -> USE IDENTIFIER
Rule 58    variable_value_change -> IDENTIFIER EQUAL LIST
Rule 59    variable_value_change -> IDENTIFIER EQUAL calculate
Rule 60    variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate
Rule 61    variable_declaration -> VAR IDENTIFIER EQUAL calculate
Rule 62    variable_declaration -> VAR IDENTIFIER
Rule 63    calculate -> calculate PLUS calculate
Rule 64    calculate -> calculate MINUS calculate
Rule 65    calculate -> MINUS calculate
Rule 66    calculate -> calculate MUL calculate
Rule 67    calculate -> calculate DIV calculate
Rule 68    calculate -> INT
Rule 69    calculate -> FLOAT
Rule 70    calculate -> STRING
Rule 71    calculate -> IDENTIFIER
Rule 72    calculate -> IDENTIFIER LIST
Rule 73    calculate -> LIST
Rule 74    calculate -> LSB calculate RSB
Rule 75    empty -> <empty>

Terminals, with rules where they appear

CATCH                : 25
COLON                : 
COMMA                : 40
DIV                  : 67
ELSE                 : 48 49 50
EQUAL                : 53 54 55 58 59 60 61
FLOAT                : 69
FOR                  : 27
FUNCTION             : 36 37
IDENTIFIER           : 25 27 27 36 37 39 57 58 59 60 61 62 71 72
IF                   : 47 48 49
IN                   : 27
INT                  : 68
LB                   : 51 53
LIST                 : 58 60 72 73
LMB                  : 24 25 28 31 34 38 47 48 49 50
LSB                  : 25 27 30 33 36 37 39 47 48 49 74
MINUS                : 64 65
MUL                  : 66
PLUS                 : 63
RB                   : 52 54
REPEAT               : 33
RMB                  : 24 25 28 31 34 38 47 48 49 50
RSB                  : 25 27 30 33 36 37 39 47 48 49 74
SEMI                 : 2 3 6 12 13
STRING               : 70
TRY                  : 24
USE                  : 57
VAR                  : 60 61 62
WHILE                : 30
error                : 

Nonterminals, with rules where they appear

calculate            : 33 40 41 51 52 53 54 55 56 59 60 61 63 63 64 64 65 66 66 67 67 74
catch                : 23
condition            : 30 47 48 49 51 52 53 54 55
empty                : 22 36 42
error_handling       : 11 21
expression           : 1 2 3 4 5 6 7 8 9 10 11 24 25 28 31 34 38 47 48 49 50
for                  : 8 18
for_body             : 26
for_head             : 26
function             : 5 15
function_body        : 35
function_call        : 6 16
function_head        : 35
if_statement         : 4 14
if_statement_1       : 43 44 45 46
if_statement_2       : 43 44 49
if_statement_3       : 43 45
parameter            : 37 39 40
repeat               : 7 17
repeat_body          : 32
repeat_head          : 32
root                 : 0
try                  : 23
use                  : 10 20
variable_declaration : 2 12
variable_value_change : 3 13
while                : 9 19
while_body           : 29
while_head           : 29

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . expression
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . variable_declaration SEMI
    (13) expression -> . variable_value_change SEMI
    (14) expression -> . if_statement
    (15) expression -> . function
    (16) expression -> . function_call
    (17) expression -> . repeat
    (18) expression -> . for
    (19) expression -> . while
    (20) expression -> . use
    (21) expression -> . error_handling
    (22) expression -> . empty
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (75) empty -> .
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    $end            reduce using rule 75 (empty -> .)
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

  ! VAR             [ reduce using rule 75 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 75 (empty -> .) ]
  ! USE             [ reduce using rule 75 (empty -> .) ]
  ! IF              [ reduce using rule 75 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 75 (empty -> .) ]
  ! REPEAT          [ reduce using rule 75 (empty -> .) ]
  ! FOR             [ reduce using rule 75 (empty -> .) ]
  ! WHILE           [ reduce using rule 75 (empty -> .) ]
  ! TRY             [ reduce using rule 75 (empty -> .) ]

    root                           shift and go to state 1
    expression                     shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    empty                          shift and go to state 13
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 1

    (0) S' -> root .



state 2

    (1) root -> expression .
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

    $end            reduce using rule 1 (root -> expression .)
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

    variable_declaration           shift and go to state 29
    variable_value_change          shift and go to state 30
    if_statement                   shift and go to state 31
    function                       shift and go to state 32
    function_call                  shift and go to state 33
    repeat                         shift and go to state 34
    for                            shift and go to state 35
    while                          shift and go to state 36
    use                            shift and go to state 37
    error_handling                 shift and go to state 38
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 3

    (12) expression -> variable_declaration . SEMI

    SEMI            shift and go to state 39


state 4

    (13) expression -> variable_value_change . SEMI

    SEMI            shift and go to state 40


state 5

    (14) expression -> if_statement .

    VAR             reduce using rule 14 (expression -> if_statement .)
    IDENTIFIER      reduce using rule 14 (expression -> if_statement .)
    USE             reduce using rule 14 (expression -> if_statement .)
    IF              reduce using rule 14 (expression -> if_statement .)
    FUNCTION        reduce using rule 14 (expression -> if_statement .)
    REPEAT          reduce using rule 14 (expression -> if_statement .)
    FOR             reduce using rule 14 (expression -> if_statement .)
    WHILE           reduce using rule 14 (expression -> if_statement .)
    TRY             reduce using rule 14 (expression -> if_statement .)
    $end            reduce using rule 14 (expression -> if_statement .)
    RMB             reduce using rule 14 (expression -> if_statement .)


state 6

    (15) expression -> function .

    VAR             reduce using rule 15 (expression -> function .)
    IDENTIFIER      reduce using rule 15 (expression -> function .)
    USE             reduce using rule 15 (expression -> function .)
    IF              reduce using rule 15 (expression -> function .)
    FUNCTION        reduce using rule 15 (expression -> function .)
    REPEAT          reduce using rule 15 (expression -> function .)
    FOR             reduce using rule 15 (expression -> function .)
    WHILE           reduce using rule 15 (expression -> function .)
    TRY             reduce using rule 15 (expression -> function .)
    $end            reduce using rule 15 (expression -> function .)
    RMB             reduce using rule 15 (expression -> function .)


state 7

    (16) expression -> function_call .

    VAR             reduce using rule 16 (expression -> function_call .)
    IDENTIFIER      reduce using rule 16 (expression -> function_call .)
    USE             reduce using rule 16 (expression -> function_call .)
    IF              reduce using rule 16 (expression -> function_call .)
    FUNCTION        reduce using rule 16 (expression -> function_call .)
    REPEAT          reduce using rule 16 (expression -> function_call .)
    FOR             reduce using rule 16 (expression -> function_call .)
    WHILE           reduce using rule 16 (expression -> function_call .)
    TRY             reduce using rule 16 (expression -> function_call .)
    $end            reduce using rule 16 (expression -> function_call .)
    RMB             reduce using rule 16 (expression -> function_call .)


state 8

    (17) expression -> repeat .

    VAR             reduce using rule 17 (expression -> repeat .)
    IDENTIFIER      reduce using rule 17 (expression -> repeat .)
    USE             reduce using rule 17 (expression -> repeat .)
    IF              reduce using rule 17 (expression -> repeat .)
    FUNCTION        reduce using rule 17 (expression -> repeat .)
    REPEAT          reduce using rule 17 (expression -> repeat .)
    FOR             reduce using rule 17 (expression -> repeat .)
    WHILE           reduce using rule 17 (expression -> repeat .)
    TRY             reduce using rule 17 (expression -> repeat .)
    $end            reduce using rule 17 (expression -> repeat .)
    RMB             reduce using rule 17 (expression -> repeat .)


state 9

    (18) expression -> for .

    VAR             reduce using rule 18 (expression -> for .)
    IDENTIFIER      reduce using rule 18 (expression -> for .)
    USE             reduce using rule 18 (expression -> for .)
    IF              reduce using rule 18 (expression -> for .)
    FUNCTION        reduce using rule 18 (expression -> for .)
    REPEAT          reduce using rule 18 (expression -> for .)
    FOR             reduce using rule 18 (expression -> for .)
    WHILE           reduce using rule 18 (expression -> for .)
    TRY             reduce using rule 18 (expression -> for .)
    $end            reduce using rule 18 (expression -> for .)
    RMB             reduce using rule 18 (expression -> for .)


state 10

    (19) expression -> while .

    VAR             reduce using rule 19 (expression -> while .)
    IDENTIFIER      reduce using rule 19 (expression -> while .)
    USE             reduce using rule 19 (expression -> while .)
    IF              reduce using rule 19 (expression -> while .)
    FUNCTION        reduce using rule 19 (expression -> while .)
    REPEAT          reduce using rule 19 (expression -> while .)
    FOR             reduce using rule 19 (expression -> while .)
    WHILE           reduce using rule 19 (expression -> while .)
    TRY             reduce using rule 19 (expression -> while .)
    $end            reduce using rule 19 (expression -> while .)
    RMB             reduce using rule 19 (expression -> while .)


state 11

    (20) expression -> use .

    VAR             reduce using rule 20 (expression -> use .)
    IDENTIFIER      reduce using rule 20 (expression -> use .)
    USE             reduce using rule 20 (expression -> use .)
    IF              reduce using rule 20 (expression -> use .)
    FUNCTION        reduce using rule 20 (expression -> use .)
    REPEAT          reduce using rule 20 (expression -> use .)
    FOR             reduce using rule 20 (expression -> use .)
    WHILE           reduce using rule 20 (expression -> use .)
    TRY             reduce using rule 20 (expression -> use .)
    $end            reduce using rule 20 (expression -> use .)
    RMB             reduce using rule 20 (expression -> use .)


state 12

    (21) expression -> error_handling .

    VAR             reduce using rule 21 (expression -> error_handling .)
    IDENTIFIER      reduce using rule 21 (expression -> error_handling .)
    USE             reduce using rule 21 (expression -> error_handling .)
    IF              reduce using rule 21 (expression -> error_handling .)
    FUNCTION        reduce using rule 21 (expression -> error_handling .)
    REPEAT          reduce using rule 21 (expression -> error_handling .)
    FOR             reduce using rule 21 (expression -> error_handling .)
    WHILE           reduce using rule 21 (expression -> error_handling .)
    TRY             reduce using rule 21 (expression -> error_handling .)
    $end            reduce using rule 21 (expression -> error_handling .)
    RMB             reduce using rule 21 (expression -> error_handling .)


state 13

    (22) expression -> empty .

    VAR             reduce using rule 22 (expression -> empty .)
    IDENTIFIER      reduce using rule 22 (expression -> empty .)
    USE             reduce using rule 22 (expression -> empty .)
    IF              reduce using rule 22 (expression -> empty .)
    FUNCTION        reduce using rule 22 (expression -> empty .)
    REPEAT          reduce using rule 22 (expression -> empty .)
    FOR             reduce using rule 22 (expression -> empty .)
    WHILE           reduce using rule 22 (expression -> empty .)
    TRY             reduce using rule 22 (expression -> empty .)
    $end            reduce using rule 22 (expression -> empty .)
    RMB             reduce using rule 22 (expression -> empty .)


state 14

    (60) variable_declaration -> VAR . IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> VAR . IDENTIFIER EQUAL calculate
    (62) variable_declaration -> VAR . IDENTIFIER

    IDENTIFIER      shift and go to state 41


state 15

    (58) variable_value_change -> IDENTIFIER . EQUAL LIST
    (59) variable_value_change -> IDENTIFIER . EQUAL calculate
    (39) function_call -> IDENTIFIER . LSB parameter RSB

    EQUAL           shift and go to state 42
    LSB             shift and go to state 43


state 16

    (43) if_statement -> if_statement_1 . if_statement_2 if_statement_3
    (44) if_statement -> if_statement_1 . if_statement_2
    (45) if_statement -> if_statement_1 . if_statement_3
    (46) if_statement -> if_statement_1 .
    (48) if_statement_2 -> . ELSE IF LSB condition RSB LMB expression RMB
    (49) if_statement_2 -> . if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
    (50) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 46 (if_statement -> if_statement_1 .)
    IDENTIFIER      reduce using rule 46 (if_statement -> if_statement_1 .)
    USE             reduce using rule 46 (if_statement -> if_statement_1 .)
    IF              reduce using rule 46 (if_statement -> if_statement_1 .)
    FUNCTION        reduce using rule 46 (if_statement -> if_statement_1 .)
    REPEAT          reduce using rule 46 (if_statement -> if_statement_1 .)
    FOR             reduce using rule 46 (if_statement -> if_statement_1 .)
    WHILE           reduce using rule 46 (if_statement -> if_statement_1 .)
    TRY             reduce using rule 46 (if_statement -> if_statement_1 .)
    $end            reduce using rule 46 (if_statement -> if_statement_1 .)
    RMB             reduce using rule 46 (if_statement -> if_statement_1 .)
    ELSE            shift and go to state 46

    if_statement_2                 shift and go to state 44
    if_statement_3                 shift and go to state 45

state 17

    (35) function -> function_head . function_body
    (38) function_body -> . LMB expression RMB

    LMB             shift and go to state 48

    function_body                  shift and go to state 47

state 18

    (32) repeat -> repeat_head . repeat_body
    (34) repeat_body -> . LMB expression RMB

    LMB             shift and go to state 50

    repeat_body                    shift and go to state 49

state 19

    (26) for -> for_head . for_body
    (28) for_body -> . LMB expression RMB

    LMB             shift and go to state 52

    for_body                       shift and go to state 51

state 20

    (29) while -> while_head . while_body
    (31) while_body -> . LMB expression RMB

    LMB             shift and go to state 54

    while_body                     shift and go to state 53

state 21

    (57) use -> USE . IDENTIFIER

    IDENTIFIER      shift and go to state 55


state 22

    (23) error_handling -> try . catch
    (25) catch -> . CATCH LSB IDENTIFIER RSB LMB expression RMB

    CATCH           shift and go to state 57

    catch                          shift and go to state 56

state 23

    (47) if_statement_1 -> IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 58


state 24

    (36) function_head -> FUNCTION . IDENTIFIER LSB empty RSB
    (37) function_head -> FUNCTION . IDENTIFIER LSB parameter RSB

    IDENTIFIER      shift and go to state 59


state 25

    (33) repeat_head -> REPEAT . LSB calculate RSB

    LSB             shift and go to state 60


state 26

    (27) for_head -> FOR . LSB IDENTIFIER IN IDENTIFIER RSB

    LSB             shift and go to state 61


state 27

    (30) while_head -> WHILE . LSB condition RSB

    LSB             shift and go to state 62


state 28

    (24) try -> TRY . LMB expression RMB

    LMB             shift and go to state 63


state 29

    (2) expression -> expression variable_declaration . SEMI

    SEMI            shift and go to state 64


state 30

    (3) expression -> expression variable_value_change . SEMI

    SEMI            shift and go to state 65


state 31

    (4) expression -> expression if_statement .

    VAR             reduce using rule 4 (expression -> expression if_statement .)
    IDENTIFIER      reduce using rule 4 (expression -> expression if_statement .)
    USE             reduce using rule 4 (expression -> expression if_statement .)
    IF              reduce using rule 4 (expression -> expression if_statement .)
    FUNCTION        reduce using rule 4 (expression -> expression if_statement .)
    REPEAT          reduce using rule 4 (expression -> expression if_statement .)
    FOR             reduce using rule 4 (expression -> expression if_statement .)
    WHILE           reduce using rule 4 (expression -> expression if_statement .)
    TRY             reduce using rule 4 (expression -> expression if_statement .)
    $end            reduce using rule 4 (expression -> expression if_statement .)
    RMB             reduce using rule 4 (expression -> expression if_statement .)


state 32

    (5) expression -> expression function .

    VAR             reduce using rule 5 (expression -> expression function .)
    IDENTIFIER      reduce using rule 5 (expression -> expression function .)
    USE             reduce using rule 5 (expression -> expression function .)
    IF              reduce using rule 5 (expression -> expression function .)
    FUNCTION        reduce using rule 5 (expression -> expression function .)
    REPEAT          reduce using rule 5 (expression -> expression function .)
    FOR             reduce using rule 5 (expression -> expression function .)
    WHILE           reduce using rule 5 (expression -> expression function .)
    TRY             reduce using rule 5 (expression -> expression function .)
    $end            reduce using rule 5 (expression -> expression function .)
    RMB             reduce using rule 5 (expression -> expression function .)


state 33

    (6) expression -> expression function_call . SEMI

    SEMI            shift and go to state 66


state 34

    (7) expression -> expression repeat .

    VAR             reduce using rule 7 (expression -> expression repeat .)
    IDENTIFIER      reduce using rule 7 (expression -> expression repeat .)
    USE             reduce using rule 7 (expression -> expression repeat .)
    IF              reduce using rule 7 (expression -> expression repeat .)
    FUNCTION        reduce using rule 7 (expression -> expression repeat .)
    REPEAT          reduce using rule 7 (expression -> expression repeat .)
    FOR             reduce using rule 7 (expression -> expression repeat .)
    WHILE           reduce using rule 7 (expression -> expression repeat .)
    TRY             reduce using rule 7 (expression -> expression repeat .)
    $end            reduce using rule 7 (expression -> expression repeat .)
    RMB             reduce using rule 7 (expression -> expression repeat .)


state 35

    (8) expression -> expression for .

    VAR             reduce using rule 8 (expression -> expression for .)
    IDENTIFIER      reduce using rule 8 (expression -> expression for .)
    USE             reduce using rule 8 (expression -> expression for .)
    IF              reduce using rule 8 (expression -> expression for .)
    FUNCTION        reduce using rule 8 (expression -> expression for .)
    REPEAT          reduce using rule 8 (expression -> expression for .)
    FOR             reduce using rule 8 (expression -> expression for .)
    WHILE           reduce using rule 8 (expression -> expression for .)
    TRY             reduce using rule 8 (expression -> expression for .)
    $end            reduce using rule 8 (expression -> expression for .)
    RMB             reduce using rule 8 (expression -> expression for .)


state 36

    (9) expression -> expression while .

    VAR             reduce using rule 9 (expression -> expression while .)
    IDENTIFIER      reduce using rule 9 (expression -> expression while .)
    USE             reduce using rule 9 (expression -> expression while .)
    IF              reduce using rule 9 (expression -> expression while .)
    FUNCTION        reduce using rule 9 (expression -> expression while .)
    REPEAT          reduce using rule 9 (expression -> expression while .)
    FOR             reduce using rule 9 (expression -> expression while .)
    WHILE           reduce using rule 9 (expression -> expression while .)
    TRY             reduce using rule 9 (expression -> expression while .)
    $end            reduce using rule 9 (expression -> expression while .)
    RMB             reduce using rule 9 (expression -> expression while .)


state 37

    (10) expression -> expression use .

    VAR             reduce using rule 10 (expression -> expression use .)
    IDENTIFIER      reduce using rule 10 (expression -> expression use .)
    USE             reduce using rule 10 (expression -> expression use .)
    IF              reduce using rule 10 (expression -> expression use .)
    FUNCTION        reduce using rule 10 (expression -> expression use .)
    REPEAT          reduce using rule 10 (expression -> expression use .)
    FOR             reduce using rule 10 (expression -> expression use .)
    WHILE           reduce using rule 10 (expression -> expression use .)
    TRY             reduce using rule 10 (expression -> expression use .)
    $end            reduce using rule 10 (expression -> expression use .)
    RMB             reduce using rule 10 (expression -> expression use .)


state 38

    (11) expression -> expression error_handling .

    VAR             reduce using rule 11 (expression -> expression error_handling .)
    IDENTIFIER      reduce using rule 11 (expression -> expression error_handling .)
    USE             reduce using rule 11 (expression -> expression error_handling .)
    IF              reduce using rule 11 (expression -> expression error_handling .)
    FUNCTION        reduce using rule 11 (expression -> expression error_handling .)
    REPEAT          reduce using rule 11 (expression -> expression error_handling .)
    FOR             reduce using rule 11 (expression -> expression error_handling .)
    WHILE           reduce using rule 11 (expression -> expression error_handling .)
    TRY             reduce using rule 11 (expression -> expression error_handling .)
    $end            reduce using rule 11 (expression -> expression error_handling .)
    RMB             reduce using rule 11 (expression -> expression error_handling .)


state 39

    (12) expression -> variable_declaration SEMI .

    VAR             reduce using rule 12 (expression -> variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 12 (expression -> variable_declaration SEMI .)
    USE             reduce using rule 12 (expression -> variable_declaration SEMI .)
    IF              reduce using rule 12 (expression -> variable_declaration SEMI .)
    FUNCTION        reduce using rule 12 (expression -> variable_declaration SEMI .)
    REPEAT          reduce using rule 12 (expression -> variable_declaration SEMI .)
    FOR             reduce using rule 12 (expression -> variable_declaration SEMI .)
    WHILE           reduce using rule 12 (expression -> variable_declaration SEMI .)
    TRY             reduce using rule 12 (expression -> variable_declaration SEMI .)
    $end            reduce using rule 12 (expression -> variable_declaration SEMI .)
    RMB             reduce using rule 12 (expression -> variable_declaration SEMI .)


state 40

    (13) expression -> variable_value_change SEMI .

    VAR             reduce using rule 13 (expression -> variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 13 (expression -> variable_value_change SEMI .)
    USE             reduce using rule 13 (expression -> variable_value_change SEMI .)
    IF              reduce using rule 13 (expression -> variable_value_change SEMI .)
    FUNCTION        reduce using rule 13 (expression -> variable_value_change SEMI .)
    REPEAT          reduce using rule 13 (expression -> variable_value_change SEMI .)
    FOR             reduce using rule 13 (expression -> variable_value_change SEMI .)
    WHILE           reduce using rule 13 (expression -> variable_value_change SEMI .)
    TRY             reduce using rule 13 (expression -> variable_value_change SEMI .)
    $end            reduce using rule 13 (expression -> variable_value_change SEMI .)
    RMB             reduce using rule 13 (expression -> variable_value_change SEMI .)


state 41

    (60) variable_declaration -> VAR IDENTIFIER . LIST EQUAL calculate
    (61) variable_declaration -> VAR IDENTIFIER . EQUAL calculate
    (62) variable_declaration -> VAR IDENTIFIER .

    LIST            shift and go to state 67
    EQUAL           shift and go to state 68
    SEMI            reduce using rule 62 (variable_declaration -> VAR IDENTIFIER .)


state 42

    (58) variable_value_change -> IDENTIFIER EQUAL . LIST
    (59) variable_value_change -> IDENTIFIER EQUAL . calculate
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    LIST            shift and go to state 70
    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LSB             shift and go to state 76

    calculate                      shift and go to state 71

state 43

    (39) function_call -> IDENTIFIER LSB . parameter RSB
    (40) parameter -> . parameter COMMA calculate
    (41) parameter -> . calculate
    (42) parameter -> . empty
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB
    (75) empty -> .

    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76
    RSB             reduce using rule 75 (empty -> .)
    COMMA           reduce using rule 75 (empty -> .)

    parameter                      shift and go to state 77
    calculate                      shift and go to state 78
    empty                          shift and go to state 79

state 44

    (43) if_statement -> if_statement_1 if_statement_2 . if_statement_3
    (44) if_statement -> if_statement_1 if_statement_2 .
    (49) if_statement_2 -> if_statement_2 . ELSE IF LSB condition RSB LMB expression RMB
    (50) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 44 (if_statement -> if_statement_1 if_statement_2 .)
    IDENTIFIER      reduce using rule 44 (if_statement -> if_statement_1 if_statement_2 .)
    USE             reduce using rule 44 (if_statement -> if_statement_1 if_statement_2 .)
    IF              reduce using rule 44 (if_statement -> if_statement_1 if_statement_2 .)
    FUNCTION        reduce using rule 44 (if_statement -> if_statement_1 if_statement_2 .)
    REPEAT          reduce using rule 44 (if_statement -> if_statement_1 if_statement_2 .)
    FOR             reduce using rule 44 (if_statement -> if_statement_1 if_statement_2 .)
    WHILE           reduce using rule 44 (if_statement -> if_statement_1 if_statement_2 .)
    TRY             reduce using rule 44 (if_statement -> if_statement_1 if_statement_2 .)
    $end            reduce using rule 44 (if_statement -> if_statement_1 if_statement_2 .)
    RMB             reduce using rule 44 (if_statement -> if_statement_1 if_statement_2 .)
    ELSE            shift and go to state 82

    if_statement_3                 shift and go to state 81

state 45

    (45) if_statement -> if_statement_1 if_statement_3 .

    VAR             reduce using rule 45 (if_statement -> if_statement_1 if_statement_3 .)
    IDENTIFIER      reduce using rule 45 (if_statement -> if_statement_1 if_statement_3 .)
    USE             reduce using rule 45 (if_statement -> if_statement_1 if_statement_3 .)
    IF              reduce using rule 45 (if_statement -> if_statement_1 if_statement_3 .)
    FUNCTION        reduce using rule 45 (if_statement -> if_statement_1 if_statement_3 .)
    REPEAT          reduce using rule 45 (if_statement -> if_statement_1 if_statement_3 .)
    FOR             reduce using rule 45 (if_statement -> if_statement_1 if_statement_3 .)
    WHILE           reduce using rule 45 (if_statement -> if_statement_1 if_statement_3 .)
    TRY             reduce using rule 45 (if_statement -> if_statement_1 if_statement_3 .)
    $end            reduce using rule 45 (if_statement -> if_statement_1 if_statement_3 .)
    RMB             reduce using rule 45 (if_statement -> if_statement_1 if_statement_3 .)


state 46

    (48) if_statement_2 -> ELSE . IF LSB condition RSB LMB expression RMB
    (50) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 83
    LMB             shift and go to state 84


state 47

    (35) function -> function_head function_body .

    VAR             reduce using rule 35 (function -> function_head function_body .)
    IDENTIFIER      reduce using rule 35 (function -> function_head function_body .)
    USE             reduce using rule 35 (function -> function_head function_body .)
    IF              reduce using rule 35 (function -> function_head function_body .)
    FUNCTION        reduce using rule 35 (function -> function_head function_body .)
    REPEAT          reduce using rule 35 (function -> function_head function_body .)
    FOR             reduce using rule 35 (function -> function_head function_body .)
    WHILE           reduce using rule 35 (function -> function_head function_body .)
    TRY             reduce using rule 35 (function -> function_head function_body .)
    $end            reduce using rule 35 (function -> function_head function_body .)
    RMB             reduce using rule 35 (function -> function_head function_body .)


state 48

    (38) function_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . variable_declaration SEMI
    (13) expression -> . variable_value_change SEMI
    (14) expression -> . if_statement
    (15) expression -> . function
    (16) expression -> . function_call
    (17) expression -> . repeat
    (18) expression -> . for
    (19) expression -> . while
    (20) expression -> . use
    (21) expression -> . error_handling
    (22) expression -> . empty
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (75) empty -> .
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    RMB             reduce using rule 75 (empty -> .)
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

  ! VAR             [ reduce using rule 75 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 75 (empty -> .) ]
  ! USE             [ reduce using rule 75 (empty -> .) ]
  ! IF              [ reduce using rule 75 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 75 (empty -> .) ]
  ! REPEAT          [ reduce using rule 75 (empty -> .) ]
  ! FOR             [ reduce using rule 75 (empty -> .) ]
  ! WHILE           [ reduce using rule 75 (empty -> .) ]
  ! TRY             [ reduce using rule 75 (empty -> .) ]

    expression                     shift and go to state 85
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    empty                          shift and go to state 13
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 49

    (32) repeat -> repeat_head repeat_body .

    VAR             reduce using rule 32 (repeat -> repeat_head repeat_body .)
    IDENTIFIER      reduce using rule 32 (repeat -> repeat_head repeat_body .)
    USE             reduce using rule 32 (repeat -> repeat_head repeat_body .)
    IF              reduce using rule 32 (repeat -> repeat_head repeat_body .)
    FUNCTION        reduce using rule 32 (repeat -> repeat_head repeat_body .)
    REPEAT          reduce using rule 32 (repeat -> repeat_head repeat_body .)
    FOR             reduce using rule 32 (repeat -> repeat_head repeat_body .)
    WHILE           reduce using rule 32 (repeat -> repeat_head repeat_body .)
    TRY             reduce using rule 32 (repeat -> repeat_head repeat_body .)
    $end            reduce using rule 32 (repeat -> repeat_head repeat_body .)
    RMB             reduce using rule 32 (repeat -> repeat_head repeat_body .)


state 50

    (34) repeat_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . variable_declaration SEMI
    (13) expression -> . variable_value_change SEMI
    (14) expression -> . if_statement
    (15) expression -> . function
    (16) expression -> . function_call
    (17) expression -> . repeat
    (18) expression -> . for
    (19) expression -> . while
    (20) expression -> . use
    (21) expression -> . error_handling
    (22) expression -> . empty
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (75) empty -> .
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    RMB             reduce using rule 75 (empty -> .)
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

  ! VAR             [ reduce using rule 75 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 75 (empty -> .) ]
  ! USE             [ reduce using rule 75 (empty -> .) ]
  ! IF              [ reduce using rule 75 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 75 (empty -> .) ]
  ! REPEAT          [ reduce using rule 75 (empty -> .) ]
  ! FOR             [ reduce using rule 75 (empty -> .) ]
  ! WHILE           [ reduce using rule 75 (empty -> .) ]
  ! TRY             [ reduce using rule 75 (empty -> .) ]

    expression                     shift and go to state 86
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    empty                          shift and go to state 13
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 51

    (26) for -> for_head for_body .

    VAR             reduce using rule 26 (for -> for_head for_body .)
    IDENTIFIER      reduce using rule 26 (for -> for_head for_body .)
    USE             reduce using rule 26 (for -> for_head for_body .)
    IF              reduce using rule 26 (for -> for_head for_body .)
    FUNCTION        reduce using rule 26 (for -> for_head for_body .)
    REPEAT          reduce using rule 26 (for -> for_head for_body .)
    FOR             reduce using rule 26 (for -> for_head for_body .)
    WHILE           reduce using rule 26 (for -> for_head for_body .)
    TRY             reduce using rule 26 (for -> for_head for_body .)
    $end            reduce using rule 26 (for -> for_head for_body .)
    RMB             reduce using rule 26 (for -> for_head for_body .)


state 52

    (28) for_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . variable_declaration SEMI
    (13) expression -> . variable_value_change SEMI
    (14) expression -> . if_statement
    (15) expression -> . function
    (16) expression -> . function_call
    (17) expression -> . repeat
    (18) expression -> . for
    (19) expression -> . while
    (20) expression -> . use
    (21) expression -> . error_handling
    (22) expression -> . empty
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (75) empty -> .
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    RMB             reduce using rule 75 (empty -> .)
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

  ! VAR             [ reduce using rule 75 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 75 (empty -> .) ]
  ! USE             [ reduce using rule 75 (empty -> .) ]
  ! IF              [ reduce using rule 75 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 75 (empty -> .) ]
  ! REPEAT          [ reduce using rule 75 (empty -> .) ]
  ! FOR             [ reduce using rule 75 (empty -> .) ]
  ! WHILE           [ reduce using rule 75 (empty -> .) ]
  ! TRY             [ reduce using rule 75 (empty -> .) ]

    expression                     shift and go to state 87
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    empty                          shift and go to state 13
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 53

    (29) while -> while_head while_body .

    VAR             reduce using rule 29 (while -> while_head while_body .)
    IDENTIFIER      reduce using rule 29 (while -> while_head while_body .)
    USE             reduce using rule 29 (while -> while_head while_body .)
    IF              reduce using rule 29 (while -> while_head while_body .)
    FUNCTION        reduce using rule 29 (while -> while_head while_body .)
    REPEAT          reduce using rule 29 (while -> while_head while_body .)
    FOR             reduce using rule 29 (while -> while_head while_body .)
    WHILE           reduce using rule 29 (while -> while_head while_body .)
    TRY             reduce using rule 29 (while -> while_head while_body .)
    $end            reduce using rule 29 (while -> while_head while_body .)
    RMB             reduce using rule 29 (while -> while_head while_body .)


state 54

    (31) while_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . variable_declaration SEMI
    (13) expression -> . variable_value_change SEMI
    (14) expression -> . if_statement
    (15) expression -> . function
    (16) expression -> . function_call
    (17) expression -> . repeat
    (18) expression -> . for
    (19) expression -> . while
    (20) expression -> . use
    (21) expression -> . error_handling
    (22) expression -> . empty
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (75) empty -> .
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    RMB             reduce using rule 75 (empty -> .)
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

  ! VAR             [ reduce using rule 75 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 75 (empty -> .) ]
  ! USE             [ reduce using rule 75 (empty -> .) ]
  ! IF              [ reduce using rule 75 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 75 (empty -> .) ]
  ! REPEAT          [ reduce using rule 75 (empty -> .) ]
  ! FOR             [ reduce using rule 75 (empty -> .) ]
  ! WHILE           [ reduce using rule 75 (empty -> .) ]
  ! TRY             [ reduce using rule 75 (empty -> .) ]

    expression                     shift and go to state 88
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    empty                          shift and go to state 13
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 55

    (57) use -> USE IDENTIFIER .

    VAR             reduce using rule 57 (use -> USE IDENTIFIER .)
    IDENTIFIER      reduce using rule 57 (use -> USE IDENTIFIER .)
    USE             reduce using rule 57 (use -> USE IDENTIFIER .)
    IF              reduce using rule 57 (use -> USE IDENTIFIER .)
    FUNCTION        reduce using rule 57 (use -> USE IDENTIFIER .)
    REPEAT          reduce using rule 57 (use -> USE IDENTIFIER .)
    FOR             reduce using rule 57 (use -> USE IDENTIFIER .)
    WHILE           reduce using rule 57 (use -> USE IDENTIFIER .)
    TRY             reduce using rule 57 (use -> USE IDENTIFIER .)
    $end            reduce using rule 57 (use -> USE IDENTIFIER .)
    RMB             reduce using rule 57 (use -> USE IDENTIFIER .)


state 56

    (23) error_handling -> try catch .

    VAR             reduce using rule 23 (error_handling -> try catch .)
    IDENTIFIER      reduce using rule 23 (error_handling -> try catch .)
    USE             reduce using rule 23 (error_handling -> try catch .)
    IF              reduce using rule 23 (error_handling -> try catch .)
    FUNCTION        reduce using rule 23 (error_handling -> try catch .)
    REPEAT          reduce using rule 23 (error_handling -> try catch .)
    FOR             reduce using rule 23 (error_handling -> try catch .)
    WHILE           reduce using rule 23 (error_handling -> try catch .)
    TRY             reduce using rule 23 (error_handling -> try catch .)
    $end            reduce using rule 23 (error_handling -> try catch .)
    RMB             reduce using rule 23 (error_handling -> try catch .)


state 57

    (25) catch -> CATCH . LSB IDENTIFIER RSB LMB expression RMB

    LSB             shift and go to state 89


state 58

    (47) if_statement_1 -> IF LSB . condition RSB LMB expression RMB
    (51) condition -> . condition LB calculate
    (52) condition -> . condition RB calculate
    (53) condition -> . condition LB EQUAL calculate
    (54) condition -> . condition RB EQUAL calculate
    (55) condition -> . condition EQUAL calculate
    (56) condition -> . calculate
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    condition                      shift and go to state 90
    calculate                      shift and go to state 91

state 59

    (36) function_head -> FUNCTION IDENTIFIER . LSB empty RSB
    (37) function_head -> FUNCTION IDENTIFIER . LSB parameter RSB

    LSB             shift and go to state 92


state 60

    (33) repeat_head -> REPEAT LSB . calculate RSB
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    calculate                      shift and go to state 93

state 61

    (27) for_head -> FOR LSB . IDENTIFIER IN IDENTIFIER RSB

    IDENTIFIER      shift and go to state 94


state 62

    (30) while_head -> WHILE LSB . condition RSB
    (51) condition -> . condition LB calculate
    (52) condition -> . condition RB calculate
    (53) condition -> . condition LB EQUAL calculate
    (54) condition -> . condition RB EQUAL calculate
    (55) condition -> . condition EQUAL calculate
    (56) condition -> . calculate
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    condition                      shift and go to state 95
    calculate                      shift and go to state 91

state 63

    (24) try -> TRY LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . variable_declaration SEMI
    (13) expression -> . variable_value_change SEMI
    (14) expression -> . if_statement
    (15) expression -> . function
    (16) expression -> . function_call
    (17) expression -> . repeat
    (18) expression -> . for
    (19) expression -> . while
    (20) expression -> . use
    (21) expression -> . error_handling
    (22) expression -> . empty
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (75) empty -> .
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    RMB             reduce using rule 75 (empty -> .)
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

  ! VAR             [ reduce using rule 75 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 75 (empty -> .) ]
  ! USE             [ reduce using rule 75 (empty -> .) ]
  ! IF              [ reduce using rule 75 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 75 (empty -> .) ]
  ! REPEAT          [ reduce using rule 75 (empty -> .) ]
  ! FOR             [ reduce using rule 75 (empty -> .) ]
  ! WHILE           [ reduce using rule 75 (empty -> .) ]
  ! TRY             [ reduce using rule 75 (empty -> .) ]

    expression                     shift and go to state 96
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    empty                          shift and go to state 13
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 64

    (2) expression -> expression variable_declaration SEMI .

    VAR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    USE             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IF              reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FUNCTION        reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    REPEAT          reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FOR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    WHILE           reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    TRY             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    $end            reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    RMB             reduce using rule 2 (expression -> expression variable_declaration SEMI .)


state 65

    (3) expression -> expression variable_value_change SEMI .

    VAR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    USE             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IF              reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FUNCTION        reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    REPEAT          reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FOR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    WHILE           reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    TRY             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    $end            reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    RMB             reduce using rule 3 (expression -> expression variable_value_change SEMI .)


state 66

    (6) expression -> expression function_call SEMI .

    VAR             reduce using rule 6 (expression -> expression function_call SEMI .)
    IDENTIFIER      reduce using rule 6 (expression -> expression function_call SEMI .)
    USE             reduce using rule 6 (expression -> expression function_call SEMI .)
    IF              reduce using rule 6 (expression -> expression function_call SEMI .)
    FUNCTION        reduce using rule 6 (expression -> expression function_call SEMI .)
    REPEAT          reduce using rule 6 (expression -> expression function_call SEMI .)
    FOR             reduce using rule 6 (expression -> expression function_call SEMI .)
    WHILE           reduce using rule 6 (expression -> expression function_call SEMI .)
    TRY             reduce using rule 6 (expression -> expression function_call SEMI .)
    $end            reduce using rule 6 (expression -> expression function_call SEMI .)
    RMB             reduce using rule 6 (expression -> expression function_call SEMI .)


state 67

    (60) variable_declaration -> VAR IDENTIFIER LIST . EQUAL calculate

    EQUAL           shift and go to state 97


state 68

    (61) variable_declaration -> VAR IDENTIFIER EQUAL . calculate
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    calculate                      shift and go to state 98

state 69

    (71) calculate -> IDENTIFIER .
    (72) calculate -> IDENTIFIER . LIST

    PLUS            reduce using rule 71 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 71 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 71 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 71 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 71 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 71 (calculate -> IDENTIFIER .)
    COMMA           reduce using rule 71 (calculate -> IDENTIFIER .)
    LB              reduce using rule 71 (calculate -> IDENTIFIER .)
    RB              reduce using rule 71 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 71 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 99


state 70

    (58) variable_value_change -> IDENTIFIER EQUAL LIST .
    (73) calculate -> LIST .

  ! reduce/reduce conflict for SEMI resolved using rule 58 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    SEMI            reduce using rule 58 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    PLUS            reduce using rule 73 (calculate -> LIST .)
    MINUS           reduce using rule 73 (calculate -> LIST .)
    MUL             reduce using rule 73 (calculate -> LIST .)
    DIV             reduce using rule 73 (calculate -> LIST .)

  ! SEMI            [ reduce using rule 73 (calculate -> LIST .) ]


state 71

    (59) variable_value_change -> IDENTIFIER EQUAL calculate .
    (63) calculate -> calculate . PLUS calculate
    (64) calculate -> calculate . MINUS calculate
    (66) calculate -> calculate . MUL calculate
    (67) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 59 (variable_value_change -> IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103


state 72

    (65) calculate -> MINUS . calculate
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    calculate                      shift and go to state 104

state 73

    (68) calculate -> INT .

    PLUS            reduce using rule 68 (calculate -> INT .)
    MINUS           reduce using rule 68 (calculate -> INT .)
    MUL             reduce using rule 68 (calculate -> INT .)
    DIV             reduce using rule 68 (calculate -> INT .)
    SEMI            reduce using rule 68 (calculate -> INT .)
    RSB             reduce using rule 68 (calculate -> INT .)
    COMMA           reduce using rule 68 (calculate -> INT .)
    LB              reduce using rule 68 (calculate -> INT .)
    RB              reduce using rule 68 (calculate -> INT .)
    EQUAL           reduce using rule 68 (calculate -> INT .)


state 74

    (69) calculate -> FLOAT .

    PLUS            reduce using rule 69 (calculate -> FLOAT .)
    MINUS           reduce using rule 69 (calculate -> FLOAT .)
    MUL             reduce using rule 69 (calculate -> FLOAT .)
    DIV             reduce using rule 69 (calculate -> FLOAT .)
    SEMI            reduce using rule 69 (calculate -> FLOAT .)
    RSB             reduce using rule 69 (calculate -> FLOAT .)
    COMMA           reduce using rule 69 (calculate -> FLOAT .)
    LB              reduce using rule 69 (calculate -> FLOAT .)
    RB              reduce using rule 69 (calculate -> FLOAT .)
    EQUAL           reduce using rule 69 (calculate -> FLOAT .)


state 75

    (70) calculate -> STRING .

    PLUS            reduce using rule 70 (calculate -> STRING .)
    MINUS           reduce using rule 70 (calculate -> STRING .)
    MUL             reduce using rule 70 (calculate -> STRING .)
    DIV             reduce using rule 70 (calculate -> STRING .)
    SEMI            reduce using rule 70 (calculate -> STRING .)
    RSB             reduce using rule 70 (calculate -> STRING .)
    COMMA           reduce using rule 70 (calculate -> STRING .)
    LB              reduce using rule 70 (calculate -> STRING .)
    RB              reduce using rule 70 (calculate -> STRING .)
    EQUAL           reduce using rule 70 (calculate -> STRING .)


state 76

    (74) calculate -> LSB . calculate RSB
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    calculate                      shift and go to state 105

state 77

    (39) function_call -> IDENTIFIER LSB parameter . RSB
    (40) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 106
    COMMA           shift and go to state 107


state 78

    (41) parameter -> calculate .
    (63) calculate -> calculate . PLUS calculate
    (64) calculate -> calculate . MINUS calculate
    (66) calculate -> calculate . MUL calculate
    (67) calculate -> calculate . DIV calculate

    RSB             reduce using rule 41 (parameter -> calculate .)
    COMMA           reduce using rule 41 (parameter -> calculate .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103


state 79

    (42) parameter -> empty .

    RSB             reduce using rule 42 (parameter -> empty .)
    COMMA           reduce using rule 42 (parameter -> empty .)


state 80

    (73) calculate -> LIST .

    PLUS            reduce using rule 73 (calculate -> LIST .)
    MINUS           reduce using rule 73 (calculate -> LIST .)
    MUL             reduce using rule 73 (calculate -> LIST .)
    DIV             reduce using rule 73 (calculate -> LIST .)
    RSB             reduce using rule 73 (calculate -> LIST .)
    COMMA           reduce using rule 73 (calculate -> LIST .)
    LB              reduce using rule 73 (calculate -> LIST .)
    RB              reduce using rule 73 (calculate -> LIST .)
    EQUAL           reduce using rule 73 (calculate -> LIST .)
    SEMI            reduce using rule 73 (calculate -> LIST .)


state 81

    (43) if_statement -> if_statement_1 if_statement_2 if_statement_3 .

    VAR             reduce using rule 43 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IDENTIFIER      reduce using rule 43 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    USE             reduce using rule 43 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IF              reduce using rule 43 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FUNCTION        reduce using rule 43 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    REPEAT          reduce using rule 43 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FOR             reduce using rule 43 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    WHILE           reduce using rule 43 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    TRY             reduce using rule 43 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    $end            reduce using rule 43 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    RMB             reduce using rule 43 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)


state 82

    (49) if_statement_2 -> if_statement_2 ELSE . IF LSB condition RSB LMB expression RMB
    (50) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 108
    LMB             shift and go to state 84


state 83

    (48) if_statement_2 -> ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 109


state 84

    (50) if_statement_3 -> ELSE LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . variable_declaration SEMI
    (13) expression -> . variable_value_change SEMI
    (14) expression -> . if_statement
    (15) expression -> . function
    (16) expression -> . function_call
    (17) expression -> . repeat
    (18) expression -> . for
    (19) expression -> . while
    (20) expression -> . use
    (21) expression -> . error_handling
    (22) expression -> . empty
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (75) empty -> .
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    RMB             reduce using rule 75 (empty -> .)
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

  ! VAR             [ reduce using rule 75 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 75 (empty -> .) ]
  ! USE             [ reduce using rule 75 (empty -> .) ]
  ! IF              [ reduce using rule 75 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 75 (empty -> .) ]
  ! REPEAT          [ reduce using rule 75 (empty -> .) ]
  ! FOR             [ reduce using rule 75 (empty -> .) ]
  ! WHILE           [ reduce using rule 75 (empty -> .) ]
  ! TRY             [ reduce using rule 75 (empty -> .) ]

    expression                     shift and go to state 110
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    empty                          shift and go to state 13
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 85

    (38) function_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

    RMB             shift and go to state 111
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

    variable_declaration           shift and go to state 29
    variable_value_change          shift and go to state 30
    if_statement                   shift and go to state 31
    function                       shift and go to state 32
    function_call                  shift and go to state 33
    repeat                         shift and go to state 34
    for                            shift and go to state 35
    while                          shift and go to state 36
    use                            shift and go to state 37
    error_handling                 shift and go to state 38
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 86

    (34) repeat_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

    RMB             shift and go to state 112
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

    variable_declaration           shift and go to state 29
    variable_value_change          shift and go to state 30
    if_statement                   shift and go to state 31
    function                       shift and go to state 32
    function_call                  shift and go to state 33
    repeat                         shift and go to state 34
    for                            shift and go to state 35
    while                          shift and go to state 36
    use                            shift and go to state 37
    error_handling                 shift and go to state 38
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 87

    (28) for_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

    RMB             shift and go to state 113
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

    variable_declaration           shift and go to state 29
    variable_value_change          shift and go to state 30
    if_statement                   shift and go to state 31
    function                       shift and go to state 32
    function_call                  shift and go to state 33
    repeat                         shift and go to state 34
    for                            shift and go to state 35
    while                          shift and go to state 36
    use                            shift and go to state 37
    error_handling                 shift and go to state 38
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 88

    (31) while_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

    RMB             shift and go to state 114
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

    variable_declaration           shift and go to state 29
    variable_value_change          shift and go to state 30
    if_statement                   shift and go to state 31
    function                       shift and go to state 32
    function_call                  shift and go to state 33
    repeat                         shift and go to state 34
    for                            shift and go to state 35
    while                          shift and go to state 36
    use                            shift and go to state 37
    error_handling                 shift and go to state 38
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 89

    (25) catch -> CATCH LSB . IDENTIFIER RSB LMB expression RMB

    IDENTIFIER      shift and go to state 115


state 90

    (47) if_statement_1 -> IF LSB condition . RSB LMB expression RMB
    (51) condition -> condition . LB calculate
    (52) condition -> condition . RB calculate
    (53) condition -> condition . LB EQUAL calculate
    (54) condition -> condition . RB EQUAL calculate
    (55) condition -> condition . EQUAL calculate

    RSB             shift and go to state 116
    LB              shift and go to state 117
    RB              shift and go to state 118
    EQUAL           shift and go to state 119


state 91

    (56) condition -> calculate .
    (63) calculate -> calculate . PLUS calculate
    (64) calculate -> calculate . MINUS calculate
    (66) calculate -> calculate . MUL calculate
    (67) calculate -> calculate . DIV calculate

    RSB             reduce using rule 56 (condition -> calculate .)
    LB              reduce using rule 56 (condition -> calculate .)
    RB              reduce using rule 56 (condition -> calculate .)
    EQUAL           reduce using rule 56 (condition -> calculate .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103


state 92

    (36) function_head -> FUNCTION IDENTIFIER LSB . empty RSB
    (37) function_head -> FUNCTION IDENTIFIER LSB . parameter RSB
    (75) empty -> .
    (40) parameter -> . parameter COMMA calculate
    (41) parameter -> . calculate
    (42) parameter -> . empty
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    RSB             reduce using rule 75 (empty -> .)
    COMMA           reduce using rule 75 (empty -> .)
    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    empty                          shift and go to state 120
    parameter                      shift and go to state 121
    calculate                      shift and go to state 78

state 93

    (33) repeat_head -> REPEAT LSB calculate . RSB
    (63) calculate -> calculate . PLUS calculate
    (64) calculate -> calculate . MINUS calculate
    (66) calculate -> calculate . MUL calculate
    (67) calculate -> calculate . DIV calculate

    RSB             shift and go to state 122
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103


state 94

    (27) for_head -> FOR LSB IDENTIFIER . IN IDENTIFIER RSB

    IN              shift and go to state 123


state 95

    (30) while_head -> WHILE LSB condition . RSB
    (51) condition -> condition . LB calculate
    (52) condition -> condition . RB calculate
    (53) condition -> condition . LB EQUAL calculate
    (54) condition -> condition . RB EQUAL calculate
    (55) condition -> condition . EQUAL calculate

    RSB             shift and go to state 124
    LB              shift and go to state 117
    RB              shift and go to state 118
    EQUAL           shift and go to state 119


state 96

    (24) try -> TRY LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

    RMB             shift and go to state 125
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

    variable_declaration           shift and go to state 29
    variable_value_change          shift and go to state 30
    if_statement                   shift and go to state 31
    function                       shift and go to state 32
    function_call                  shift and go to state 33
    repeat                         shift and go to state 34
    for                            shift and go to state 35
    while                          shift and go to state 36
    use                            shift and go to state 37
    error_handling                 shift and go to state 38
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 97

    (60) variable_declaration -> VAR IDENTIFIER LIST EQUAL . calculate
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    calculate                      shift and go to state 126

state 98

    (61) variable_declaration -> VAR IDENTIFIER EQUAL calculate .
    (63) calculate -> calculate . PLUS calculate
    (64) calculate -> calculate . MINUS calculate
    (66) calculate -> calculate . MUL calculate
    (67) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 61 (variable_declaration -> VAR IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103


state 99

    (72) calculate -> IDENTIFIER LIST .

    PLUS            reduce using rule 72 (calculate -> IDENTIFIER LIST .)
    MINUS           reduce using rule 72 (calculate -> IDENTIFIER LIST .)
    MUL             reduce using rule 72 (calculate -> IDENTIFIER LIST .)
    DIV             reduce using rule 72 (calculate -> IDENTIFIER LIST .)
    SEMI            reduce using rule 72 (calculate -> IDENTIFIER LIST .)
    RSB             reduce using rule 72 (calculate -> IDENTIFIER LIST .)
    COMMA           reduce using rule 72 (calculate -> IDENTIFIER LIST .)
    LB              reduce using rule 72 (calculate -> IDENTIFIER LIST .)
    RB              reduce using rule 72 (calculate -> IDENTIFIER LIST .)
    EQUAL           reduce using rule 72 (calculate -> IDENTIFIER LIST .)


state 100

    (63) calculate -> calculate PLUS . calculate
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    calculate                      shift and go to state 127

state 101

    (64) calculate -> calculate MINUS . calculate
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    calculate                      shift and go to state 128

state 102

    (66) calculate -> calculate MUL . calculate
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    calculate                      shift and go to state 129

state 103

    (67) calculate -> calculate DIV . calculate
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    calculate                      shift and go to state 130

state 104

    (65) calculate -> MINUS calculate .
    (63) calculate -> calculate . PLUS calculate
    (64) calculate -> calculate . MINUS calculate
    (66) calculate -> calculate . MUL calculate
    (67) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 65 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 65 (calculate -> MINUS calculate .)
    MUL             reduce using rule 65 (calculate -> MINUS calculate .)
    DIV             reduce using rule 65 (calculate -> MINUS calculate .)
    SEMI            reduce using rule 65 (calculate -> MINUS calculate .)
    RSB             reduce using rule 65 (calculate -> MINUS calculate .)
    COMMA           reduce using rule 65 (calculate -> MINUS calculate .)
    LB              reduce using rule 65 (calculate -> MINUS calculate .)
    RB              reduce using rule 65 (calculate -> MINUS calculate .)
    EQUAL           reduce using rule 65 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 100 ]
  ! MINUS           [ shift and go to state 101 ]
  ! MUL             [ shift and go to state 102 ]
  ! DIV             [ shift and go to state 103 ]


state 105

    (74) calculate -> LSB calculate . RSB
    (63) calculate -> calculate . PLUS calculate
    (64) calculate -> calculate . MINUS calculate
    (66) calculate -> calculate . MUL calculate
    (67) calculate -> calculate . DIV calculate

    RSB             shift and go to state 131
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103


state 106

    (39) function_call -> IDENTIFIER LSB parameter RSB .

    VAR             reduce using rule 39 (function_call -> IDENTIFIER LSB parameter RSB .)
    IDENTIFIER      reduce using rule 39 (function_call -> IDENTIFIER LSB parameter RSB .)
    USE             reduce using rule 39 (function_call -> IDENTIFIER LSB parameter RSB .)
    IF              reduce using rule 39 (function_call -> IDENTIFIER LSB parameter RSB .)
    FUNCTION        reduce using rule 39 (function_call -> IDENTIFIER LSB parameter RSB .)
    REPEAT          reduce using rule 39 (function_call -> IDENTIFIER LSB parameter RSB .)
    FOR             reduce using rule 39 (function_call -> IDENTIFIER LSB parameter RSB .)
    WHILE           reduce using rule 39 (function_call -> IDENTIFIER LSB parameter RSB .)
    TRY             reduce using rule 39 (function_call -> IDENTIFIER LSB parameter RSB .)
    $end            reduce using rule 39 (function_call -> IDENTIFIER LSB parameter RSB .)
    SEMI            reduce using rule 39 (function_call -> IDENTIFIER LSB parameter RSB .)
    RMB             reduce using rule 39 (function_call -> IDENTIFIER LSB parameter RSB .)


state 107

    (40) parameter -> parameter COMMA . calculate
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    calculate                      shift and go to state 132

state 108

    (49) if_statement_2 -> if_statement_2 ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 133


state 109

    (48) if_statement_2 -> ELSE IF LSB . condition RSB LMB expression RMB
    (51) condition -> . condition LB calculate
    (52) condition -> . condition RB calculate
    (53) condition -> . condition LB EQUAL calculate
    (54) condition -> . condition RB EQUAL calculate
    (55) condition -> . condition EQUAL calculate
    (56) condition -> . calculate
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    condition                      shift and go to state 134
    calculate                      shift and go to state 91

state 110

    (50) if_statement_3 -> ELSE LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

    RMB             shift and go to state 135
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

    variable_declaration           shift and go to state 29
    variable_value_change          shift and go to state 30
    if_statement                   shift and go to state 31
    function                       shift and go to state 32
    function_call                  shift and go to state 33
    repeat                         shift and go to state 34
    for                            shift and go to state 35
    while                          shift and go to state 36
    use                            shift and go to state 37
    error_handling                 shift and go to state 38
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 111

    (38) function_body -> LMB expression RMB .

    VAR             reduce using rule 38 (function_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 38 (function_body -> LMB expression RMB .)
    USE             reduce using rule 38 (function_body -> LMB expression RMB .)
    IF              reduce using rule 38 (function_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 38 (function_body -> LMB expression RMB .)
    REPEAT          reduce using rule 38 (function_body -> LMB expression RMB .)
    FOR             reduce using rule 38 (function_body -> LMB expression RMB .)
    WHILE           reduce using rule 38 (function_body -> LMB expression RMB .)
    TRY             reduce using rule 38 (function_body -> LMB expression RMB .)
    $end            reduce using rule 38 (function_body -> LMB expression RMB .)
    RMB             reduce using rule 38 (function_body -> LMB expression RMB .)


state 112

    (34) repeat_body -> LMB expression RMB .

    VAR             reduce using rule 34 (repeat_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 34 (repeat_body -> LMB expression RMB .)
    USE             reduce using rule 34 (repeat_body -> LMB expression RMB .)
    IF              reduce using rule 34 (repeat_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 34 (repeat_body -> LMB expression RMB .)
    REPEAT          reduce using rule 34 (repeat_body -> LMB expression RMB .)
    FOR             reduce using rule 34 (repeat_body -> LMB expression RMB .)
    WHILE           reduce using rule 34 (repeat_body -> LMB expression RMB .)
    TRY             reduce using rule 34 (repeat_body -> LMB expression RMB .)
    $end            reduce using rule 34 (repeat_body -> LMB expression RMB .)
    RMB             reduce using rule 34 (repeat_body -> LMB expression RMB .)


state 113

    (28) for_body -> LMB expression RMB .

    VAR             reduce using rule 28 (for_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 28 (for_body -> LMB expression RMB .)
    USE             reduce using rule 28 (for_body -> LMB expression RMB .)
    IF              reduce using rule 28 (for_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 28 (for_body -> LMB expression RMB .)
    REPEAT          reduce using rule 28 (for_body -> LMB expression RMB .)
    FOR             reduce using rule 28 (for_body -> LMB expression RMB .)
    WHILE           reduce using rule 28 (for_body -> LMB expression RMB .)
    TRY             reduce using rule 28 (for_body -> LMB expression RMB .)
    $end            reduce using rule 28 (for_body -> LMB expression RMB .)
    RMB             reduce using rule 28 (for_body -> LMB expression RMB .)


state 114

    (31) while_body -> LMB expression RMB .

    VAR             reduce using rule 31 (while_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 31 (while_body -> LMB expression RMB .)
    USE             reduce using rule 31 (while_body -> LMB expression RMB .)
    IF              reduce using rule 31 (while_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 31 (while_body -> LMB expression RMB .)
    REPEAT          reduce using rule 31 (while_body -> LMB expression RMB .)
    FOR             reduce using rule 31 (while_body -> LMB expression RMB .)
    WHILE           reduce using rule 31 (while_body -> LMB expression RMB .)
    TRY             reduce using rule 31 (while_body -> LMB expression RMB .)
    $end            reduce using rule 31 (while_body -> LMB expression RMB .)
    RMB             reduce using rule 31 (while_body -> LMB expression RMB .)


state 115

    (25) catch -> CATCH LSB IDENTIFIER . RSB LMB expression RMB

    RSB             shift and go to state 136


state 116

    (47) if_statement_1 -> IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 137


state 117

    (51) condition -> condition LB . calculate
    (53) condition -> condition LB . EQUAL calculate
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 139
    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    calculate                      shift and go to state 138

state 118

    (52) condition -> condition RB . calculate
    (54) condition -> condition RB . EQUAL calculate
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 141
    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    calculate                      shift and go to state 140

state 119

    (55) condition -> condition EQUAL . calculate
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    calculate                      shift and go to state 142

state 120

    (36) function_head -> FUNCTION IDENTIFIER LSB empty . RSB
    (42) parameter -> empty .

  ! shift/reduce conflict for RSB resolved as shift
    RSB             shift and go to state 143
    COMMA           reduce using rule 42 (parameter -> empty .)

  ! RSB             [ reduce using rule 42 (parameter -> empty .) ]


state 121

    (37) function_head -> FUNCTION IDENTIFIER LSB parameter . RSB
    (40) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 144
    COMMA           shift and go to state 107


state 122

    (33) repeat_head -> REPEAT LSB calculate RSB .

    LMB             reduce using rule 33 (repeat_head -> REPEAT LSB calculate RSB .)


state 123

    (27) for_head -> FOR LSB IDENTIFIER IN . IDENTIFIER RSB

    IDENTIFIER      shift and go to state 145


state 124

    (30) while_head -> WHILE LSB condition RSB .

    LMB             reduce using rule 30 (while_head -> WHILE LSB condition RSB .)


state 125

    (24) try -> TRY LMB expression RMB .

    CATCH           reduce using rule 24 (try -> TRY LMB expression RMB .)


state 126

    (60) variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .
    (63) calculate -> calculate . PLUS calculate
    (64) calculate -> calculate . MINUS calculate
    (66) calculate -> calculate . MUL calculate
    (67) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 60 (variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103


state 127

    (63) calculate -> calculate PLUS calculate .
    (63) calculate -> calculate . PLUS calculate
    (64) calculate -> calculate . MINUS calculate
    (66) calculate -> calculate . MUL calculate
    (67) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 63 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 63 (calculate -> calculate PLUS calculate .)
    SEMI            reduce using rule 63 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 63 (calculate -> calculate PLUS calculate .)
    COMMA           reduce using rule 63 (calculate -> calculate PLUS calculate .)
    LB              reduce using rule 63 (calculate -> calculate PLUS calculate .)
    RB              reduce using rule 63 (calculate -> calculate PLUS calculate .)
    EQUAL           reduce using rule 63 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 102
    DIV             shift and go to state 103

  ! MUL             [ reduce using rule 63 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 63 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 100 ]
  ! MINUS           [ shift and go to state 101 ]


state 128

    (64) calculate -> calculate MINUS calculate .
    (63) calculate -> calculate . PLUS calculate
    (64) calculate -> calculate . MINUS calculate
    (66) calculate -> calculate . MUL calculate
    (67) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 64 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 64 (calculate -> calculate MINUS calculate .)
    SEMI            reduce using rule 64 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 64 (calculate -> calculate MINUS calculate .)
    COMMA           reduce using rule 64 (calculate -> calculate MINUS calculate .)
    LB              reduce using rule 64 (calculate -> calculate MINUS calculate .)
    RB              reduce using rule 64 (calculate -> calculate MINUS calculate .)
    EQUAL           reduce using rule 64 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 102
    DIV             shift and go to state 103

  ! MUL             [ reduce using rule 64 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 64 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 100 ]
  ! MINUS           [ shift and go to state 101 ]


state 129

    (66) calculate -> calculate MUL calculate .
    (63) calculate -> calculate . PLUS calculate
    (64) calculate -> calculate . MINUS calculate
    (66) calculate -> calculate . MUL calculate
    (67) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 66 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 66 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 66 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 66 (calculate -> calculate MUL calculate .)
    SEMI            reduce using rule 66 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 66 (calculate -> calculate MUL calculate .)
    COMMA           reduce using rule 66 (calculate -> calculate MUL calculate .)
    LB              reduce using rule 66 (calculate -> calculate MUL calculate .)
    RB              reduce using rule 66 (calculate -> calculate MUL calculate .)
    EQUAL           reduce using rule 66 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 100 ]
  ! MINUS           [ shift and go to state 101 ]
  ! MUL             [ shift and go to state 102 ]
  ! DIV             [ shift and go to state 103 ]


state 130

    (67) calculate -> calculate DIV calculate .
    (63) calculate -> calculate . PLUS calculate
    (64) calculate -> calculate . MINUS calculate
    (66) calculate -> calculate . MUL calculate
    (67) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 67 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 67 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 67 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 67 (calculate -> calculate DIV calculate .)
    SEMI            reduce using rule 67 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 67 (calculate -> calculate DIV calculate .)
    COMMA           reduce using rule 67 (calculate -> calculate DIV calculate .)
    LB              reduce using rule 67 (calculate -> calculate DIV calculate .)
    RB              reduce using rule 67 (calculate -> calculate DIV calculate .)
    EQUAL           reduce using rule 67 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 100 ]
  ! MINUS           [ shift and go to state 101 ]
  ! MUL             [ shift and go to state 102 ]
  ! DIV             [ shift and go to state 103 ]


state 131

    (74) calculate -> LSB calculate RSB .

    PLUS            reduce using rule 74 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 74 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 74 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 74 (calculate -> LSB calculate RSB .)
    SEMI            reduce using rule 74 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 74 (calculate -> LSB calculate RSB .)
    COMMA           reduce using rule 74 (calculate -> LSB calculate RSB .)
    LB              reduce using rule 74 (calculate -> LSB calculate RSB .)
    RB              reduce using rule 74 (calculate -> LSB calculate RSB .)
    EQUAL           reduce using rule 74 (calculate -> LSB calculate RSB .)


state 132

    (40) parameter -> parameter COMMA calculate .
    (63) calculate -> calculate . PLUS calculate
    (64) calculate -> calculate . MINUS calculate
    (66) calculate -> calculate . MUL calculate
    (67) calculate -> calculate . DIV calculate

    RSB             reduce using rule 40 (parameter -> parameter COMMA calculate .)
    COMMA           reduce using rule 40 (parameter -> parameter COMMA calculate .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103


state 133

    (49) if_statement_2 -> if_statement_2 ELSE IF LSB . condition RSB LMB expression RMB
    (51) condition -> . condition LB calculate
    (52) condition -> . condition RB calculate
    (53) condition -> . condition LB EQUAL calculate
    (54) condition -> . condition RB EQUAL calculate
    (55) condition -> . condition EQUAL calculate
    (56) condition -> . calculate
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    condition                      shift and go to state 146
    calculate                      shift and go to state 91

state 134

    (48) if_statement_2 -> ELSE IF LSB condition . RSB LMB expression RMB
    (51) condition -> condition . LB calculate
    (52) condition -> condition . RB calculate
    (53) condition -> condition . LB EQUAL calculate
    (54) condition -> condition . RB EQUAL calculate
    (55) condition -> condition . EQUAL calculate

    RSB             shift and go to state 147
    LB              shift and go to state 117
    RB              shift and go to state 118
    EQUAL           shift and go to state 119


state 135

    (50) if_statement_3 -> ELSE LMB expression RMB .

    VAR             reduce using rule 50 (if_statement_3 -> ELSE LMB expression RMB .)
    IDENTIFIER      reduce using rule 50 (if_statement_3 -> ELSE LMB expression RMB .)
    USE             reduce using rule 50 (if_statement_3 -> ELSE LMB expression RMB .)
    IF              reduce using rule 50 (if_statement_3 -> ELSE LMB expression RMB .)
    FUNCTION        reduce using rule 50 (if_statement_3 -> ELSE LMB expression RMB .)
    REPEAT          reduce using rule 50 (if_statement_3 -> ELSE LMB expression RMB .)
    FOR             reduce using rule 50 (if_statement_3 -> ELSE LMB expression RMB .)
    WHILE           reduce using rule 50 (if_statement_3 -> ELSE LMB expression RMB .)
    TRY             reduce using rule 50 (if_statement_3 -> ELSE LMB expression RMB .)
    $end            reduce using rule 50 (if_statement_3 -> ELSE LMB expression RMB .)
    RMB             reduce using rule 50 (if_statement_3 -> ELSE LMB expression RMB .)


state 136

    (25) catch -> CATCH LSB IDENTIFIER RSB . LMB expression RMB

    LMB             shift and go to state 148


state 137

    (47) if_statement_1 -> IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . variable_declaration SEMI
    (13) expression -> . variable_value_change SEMI
    (14) expression -> . if_statement
    (15) expression -> . function
    (16) expression -> . function_call
    (17) expression -> . repeat
    (18) expression -> . for
    (19) expression -> . while
    (20) expression -> . use
    (21) expression -> . error_handling
    (22) expression -> . empty
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (75) empty -> .
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    RMB             reduce using rule 75 (empty -> .)
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

  ! VAR             [ reduce using rule 75 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 75 (empty -> .) ]
  ! USE             [ reduce using rule 75 (empty -> .) ]
  ! IF              [ reduce using rule 75 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 75 (empty -> .) ]
  ! REPEAT          [ reduce using rule 75 (empty -> .) ]
  ! FOR             [ reduce using rule 75 (empty -> .) ]
  ! WHILE           [ reduce using rule 75 (empty -> .) ]
  ! TRY             [ reduce using rule 75 (empty -> .) ]

    expression                     shift and go to state 149
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    empty                          shift and go to state 13
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 138

    (51) condition -> condition LB calculate .
    (63) calculate -> calculate . PLUS calculate
    (64) calculate -> calculate . MINUS calculate
    (66) calculate -> calculate . MUL calculate
    (67) calculate -> calculate . DIV calculate

    RSB             reduce using rule 51 (condition -> condition LB calculate .)
    LB              reduce using rule 51 (condition -> condition LB calculate .)
    RB              reduce using rule 51 (condition -> condition LB calculate .)
    EQUAL           reduce using rule 51 (condition -> condition LB calculate .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103


state 139

    (53) condition -> condition LB EQUAL . calculate
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    calculate                      shift and go to state 150

state 140

    (52) condition -> condition RB calculate .
    (63) calculate -> calculate . PLUS calculate
    (64) calculate -> calculate . MINUS calculate
    (66) calculate -> calculate . MUL calculate
    (67) calculate -> calculate . DIV calculate

    RSB             reduce using rule 52 (condition -> condition RB calculate .)
    LB              reduce using rule 52 (condition -> condition RB calculate .)
    RB              reduce using rule 52 (condition -> condition RB calculate .)
    EQUAL           reduce using rule 52 (condition -> condition RB calculate .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103


state 141

    (54) condition -> condition RB EQUAL . calculate
    (63) calculate -> . calculate PLUS calculate
    (64) calculate -> . calculate MINUS calculate
    (65) calculate -> . MINUS calculate
    (66) calculate -> . calculate MUL calculate
    (67) calculate -> . calculate DIV calculate
    (68) calculate -> . INT
    (69) calculate -> . FLOAT
    (70) calculate -> . STRING
    (71) calculate -> . IDENTIFIER
    (72) calculate -> . IDENTIFIER LIST
    (73) calculate -> . LIST
    (74) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 72
    INT             shift and go to state 73
    FLOAT           shift and go to state 74
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 69
    LIST            shift and go to state 80
    LSB             shift and go to state 76

    calculate                      shift and go to state 151

state 142

    (55) condition -> condition EQUAL calculate .
    (63) calculate -> calculate . PLUS calculate
    (64) calculate -> calculate . MINUS calculate
    (66) calculate -> calculate . MUL calculate
    (67) calculate -> calculate . DIV calculate

    RSB             reduce using rule 55 (condition -> condition EQUAL calculate .)
    LB              reduce using rule 55 (condition -> condition EQUAL calculate .)
    RB              reduce using rule 55 (condition -> condition EQUAL calculate .)
    EQUAL           reduce using rule 55 (condition -> condition EQUAL calculate .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103


state 143

    (36) function_head -> FUNCTION IDENTIFIER LSB empty RSB .

    LMB             reduce using rule 36 (function_head -> FUNCTION IDENTIFIER LSB empty RSB .)


state 144

    (37) function_head -> FUNCTION IDENTIFIER LSB parameter RSB .

    LMB             reduce using rule 37 (function_head -> FUNCTION IDENTIFIER LSB parameter RSB .)


state 145

    (27) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER . RSB

    RSB             shift and go to state 152


state 146

    (49) if_statement_2 -> if_statement_2 ELSE IF LSB condition . RSB LMB expression RMB
    (51) condition -> condition . LB calculate
    (52) condition -> condition . RB calculate
    (53) condition -> condition . LB EQUAL calculate
    (54) condition -> condition . RB EQUAL calculate
    (55) condition -> condition . EQUAL calculate

    RSB             shift and go to state 153
    LB              shift and go to state 117
    RB              shift and go to state 118
    EQUAL           shift and go to state 119


state 147

    (48) if_statement_2 -> ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 154


state 148

    (25) catch -> CATCH LSB IDENTIFIER RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . variable_declaration SEMI
    (13) expression -> . variable_value_change SEMI
    (14) expression -> . if_statement
    (15) expression -> . function
    (16) expression -> . function_call
    (17) expression -> . repeat
    (18) expression -> . for
    (19) expression -> . while
    (20) expression -> . use
    (21) expression -> . error_handling
    (22) expression -> . empty
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (75) empty -> .
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    RMB             reduce using rule 75 (empty -> .)
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

  ! VAR             [ reduce using rule 75 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 75 (empty -> .) ]
  ! USE             [ reduce using rule 75 (empty -> .) ]
  ! IF              [ reduce using rule 75 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 75 (empty -> .) ]
  ! REPEAT          [ reduce using rule 75 (empty -> .) ]
  ! FOR             [ reduce using rule 75 (empty -> .) ]
  ! WHILE           [ reduce using rule 75 (empty -> .) ]
  ! TRY             [ reduce using rule 75 (empty -> .) ]

    expression                     shift and go to state 155
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    empty                          shift and go to state 13
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 149

    (47) if_statement_1 -> IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

    RMB             shift and go to state 156
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

    variable_declaration           shift and go to state 29
    variable_value_change          shift and go to state 30
    if_statement                   shift and go to state 31
    function                       shift and go to state 32
    function_call                  shift and go to state 33
    repeat                         shift and go to state 34
    for                            shift and go to state 35
    while                          shift and go to state 36
    use                            shift and go to state 37
    error_handling                 shift and go to state 38
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 150

    (53) condition -> condition LB EQUAL calculate .
    (63) calculate -> calculate . PLUS calculate
    (64) calculate -> calculate . MINUS calculate
    (66) calculate -> calculate . MUL calculate
    (67) calculate -> calculate . DIV calculate

    RSB             reduce using rule 53 (condition -> condition LB EQUAL calculate .)
    LB              reduce using rule 53 (condition -> condition LB EQUAL calculate .)
    RB              reduce using rule 53 (condition -> condition LB EQUAL calculate .)
    EQUAL           reduce using rule 53 (condition -> condition LB EQUAL calculate .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103


state 151

    (54) condition -> condition RB EQUAL calculate .
    (63) calculate -> calculate . PLUS calculate
    (64) calculate -> calculate . MINUS calculate
    (66) calculate -> calculate . MUL calculate
    (67) calculate -> calculate . DIV calculate

    RSB             reduce using rule 54 (condition -> condition RB EQUAL calculate .)
    LB              reduce using rule 54 (condition -> condition RB EQUAL calculate .)
    RB              reduce using rule 54 (condition -> condition RB EQUAL calculate .)
    EQUAL           reduce using rule 54 (condition -> condition RB EQUAL calculate .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    MUL             shift and go to state 102
    DIV             shift and go to state 103


state 152

    (27) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .

    LMB             reduce using rule 27 (for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .)


state 153

    (49) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 157


state 154

    (48) if_statement_2 -> ELSE IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . variable_declaration SEMI
    (13) expression -> . variable_value_change SEMI
    (14) expression -> . if_statement
    (15) expression -> . function
    (16) expression -> . function_call
    (17) expression -> . repeat
    (18) expression -> . for
    (19) expression -> . while
    (20) expression -> . use
    (21) expression -> . error_handling
    (22) expression -> . empty
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (75) empty -> .
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    RMB             reduce using rule 75 (empty -> .)
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

  ! VAR             [ reduce using rule 75 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 75 (empty -> .) ]
  ! USE             [ reduce using rule 75 (empty -> .) ]
  ! IF              [ reduce using rule 75 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 75 (empty -> .) ]
  ! REPEAT          [ reduce using rule 75 (empty -> .) ]
  ! FOR             [ reduce using rule 75 (empty -> .) ]
  ! WHILE           [ reduce using rule 75 (empty -> .) ]
  ! TRY             [ reduce using rule 75 (empty -> .) ]

    expression                     shift and go to state 158
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    empty                          shift and go to state 13
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 155

    (25) catch -> CATCH LSB IDENTIFIER RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

    RMB             shift and go to state 159
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

    variable_declaration           shift and go to state 29
    variable_value_change          shift and go to state 30
    if_statement                   shift and go to state 31
    function                       shift and go to state 32
    function_call                  shift and go to state 33
    repeat                         shift and go to state 34
    for                            shift and go to state 35
    while                          shift and go to state 36
    use                            shift and go to state 37
    error_handling                 shift and go to state 38
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 156

    (47) if_statement_1 -> IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 47 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 47 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 47 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 47 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 47 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 47 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 47 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 47 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 47 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 47 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 47 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 47 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)


state 157

    (49) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use
    (11) expression -> . expression error_handling
    (12) expression -> . variable_declaration SEMI
    (13) expression -> . variable_value_change SEMI
    (14) expression -> . if_statement
    (15) expression -> . function
    (16) expression -> . function_call
    (17) expression -> . repeat
    (18) expression -> . for
    (19) expression -> . while
    (20) expression -> . use
    (21) expression -> . error_handling
    (22) expression -> . empty
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (75) empty -> .
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    RMB             reduce using rule 75 (empty -> .)
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

  ! VAR             [ reduce using rule 75 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 75 (empty -> .) ]
  ! USE             [ reduce using rule 75 (empty -> .) ]
  ! IF              [ reduce using rule 75 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 75 (empty -> .) ]
  ! REPEAT          [ reduce using rule 75 (empty -> .) ]
  ! FOR             [ reduce using rule 75 (empty -> .) ]
  ! WHILE           [ reduce using rule 75 (empty -> .) ]
  ! TRY             [ reduce using rule 75 (empty -> .) ]

    expression                     shift and go to state 160
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    empty                          shift and go to state 13
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 158

    (48) if_statement_2 -> ELSE IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

    RMB             shift and go to state 161
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

    variable_declaration           shift and go to state 29
    variable_value_change          shift and go to state 30
    if_statement                   shift and go to state 31
    function                       shift and go to state 32
    function_call                  shift and go to state 33
    repeat                         shift and go to state 34
    for                            shift and go to state 35
    while                          shift and go to state 36
    use                            shift and go to state 37
    error_handling                 shift and go to state 38
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 159

    (25) catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .

    VAR             reduce using rule 25 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 25 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    USE             reduce using rule 25 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IF              reduce using rule 25 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FUNCTION        reduce using rule 25 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    REPEAT          reduce using rule 25 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FOR             reduce using rule 25 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    WHILE           reduce using rule 25 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    TRY             reduce using rule 25 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    $end            reduce using rule 25 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    RMB             reduce using rule 25 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)


state 160

    (49) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use
    (11) expression -> expression . error_handling
    (60) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (61) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (62) variable_declaration -> . VAR IDENTIFIER
    (58) variable_value_change -> . IDENTIFIER EQUAL LIST
    (59) variable_value_change -> . IDENTIFIER EQUAL calculate
    (43) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (44) if_statement -> . if_statement_1 if_statement_2
    (45) if_statement -> . if_statement_1 if_statement_3
    (46) if_statement -> . if_statement_1
    (35) function -> . function_head function_body
    (39) function_call -> . IDENTIFIER LSB parameter RSB
    (32) repeat -> . repeat_head repeat_body
    (26) for -> . for_head for_body
    (29) while -> . while_head while_body
    (57) use -> . USE IDENTIFIER
    (23) error_handling -> . try catch
    (47) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (36) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (37) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (33) repeat_head -> . REPEAT LSB calculate RSB
    (27) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (30) while_head -> . WHILE LSB condition RSB
    (24) try -> . TRY LMB expression RMB

    RMB             shift and go to state 162
    VAR             shift and go to state 14
    IDENTIFIER      shift and go to state 15
    USE             shift and go to state 21
    IF              shift and go to state 23
    FUNCTION        shift and go to state 24
    REPEAT          shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 27
    TRY             shift and go to state 28

    variable_declaration           shift and go to state 29
    variable_value_change          shift and go to state 30
    if_statement                   shift and go to state 31
    function                       shift and go to state 32
    function_call                  shift and go to state 33
    repeat                         shift and go to state 34
    for                            shift and go to state 35
    while                          shift and go to state 36
    use                            shift and go to state 37
    error_handling                 shift and go to state 38
    if_statement_1                 shift and go to state 16
    function_head                  shift and go to state 17
    repeat_head                    shift and go to state 18
    for_head                       shift and go to state 19
    while_head                     shift and go to state 20
    try                            shift and go to state 22

state 161

    (48) if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 48 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 48 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 48 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 48 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 48 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 48 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 48 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 48 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 48 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 48 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 48 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 48 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)


state 162

    (49) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 49 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 49 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 49 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 49 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 49 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 49 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 49 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 49 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 49 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 49 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 49 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 49 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for USE in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 48 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 48 resolved as shift
WARNING: shift/reduce conflict for USE in state 48 resolved as shift
WARNING: shift/reduce conflict for IF in state 48 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 48 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 48 resolved as shift
WARNING: shift/reduce conflict for FOR in state 48 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 48 resolved as shift
WARNING: shift/reduce conflict for TRY in state 48 resolved as shift
WARNING: shift/reduce conflict for VAR in state 50 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 50 resolved as shift
WARNING: shift/reduce conflict for USE in state 50 resolved as shift
WARNING: shift/reduce conflict for IF in state 50 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 50 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 50 resolved as shift
WARNING: shift/reduce conflict for FOR in state 50 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 50 resolved as shift
WARNING: shift/reduce conflict for TRY in state 50 resolved as shift
WARNING: shift/reduce conflict for VAR in state 52 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 52 resolved as shift
WARNING: shift/reduce conflict for USE in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 52 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 52 resolved as shift
WARNING: shift/reduce conflict for FOR in state 52 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 52 resolved as shift
WARNING: shift/reduce conflict for TRY in state 52 resolved as shift
WARNING: shift/reduce conflict for VAR in state 54 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 54 resolved as shift
WARNING: shift/reduce conflict for USE in state 54 resolved as shift
WARNING: shift/reduce conflict for IF in state 54 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 54 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 54 resolved as shift
WARNING: shift/reduce conflict for FOR in state 54 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 54 resolved as shift
WARNING: shift/reduce conflict for TRY in state 54 resolved as shift
WARNING: shift/reduce conflict for VAR in state 63 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 63 resolved as shift
WARNING: shift/reduce conflict for USE in state 63 resolved as shift
WARNING: shift/reduce conflict for IF in state 63 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 63 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 63 resolved as shift
WARNING: shift/reduce conflict for FOR in state 63 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 63 resolved as shift
WARNING: shift/reduce conflict for TRY in state 63 resolved as shift
WARNING: shift/reduce conflict for VAR in state 84 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 84 resolved as shift
WARNING: shift/reduce conflict for USE in state 84 resolved as shift
WARNING: shift/reduce conflict for IF in state 84 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 84 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 84 resolved as shift
WARNING: shift/reduce conflict for FOR in state 84 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 84 resolved as shift
WARNING: shift/reduce conflict for TRY in state 84 resolved as shift
WARNING: shift/reduce conflict for RSB in state 120 resolved as shift
WARNING: shift/reduce conflict for VAR in state 137 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 137 resolved as shift
WARNING: shift/reduce conflict for USE in state 137 resolved as shift
WARNING: shift/reduce conflict for IF in state 137 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 137 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 137 resolved as shift
WARNING: shift/reduce conflict for FOR in state 137 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 137 resolved as shift
WARNING: shift/reduce conflict for TRY in state 137 resolved as shift
WARNING: shift/reduce conflict for VAR in state 148 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 148 resolved as shift
WARNING: shift/reduce conflict for USE in state 148 resolved as shift
WARNING: shift/reduce conflict for IF in state 148 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 148 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 148 resolved as shift
WARNING: shift/reduce conflict for FOR in state 148 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 148 resolved as shift
WARNING: shift/reduce conflict for TRY in state 148 resolved as shift
WARNING: shift/reduce conflict for VAR in state 154 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 154 resolved as shift
WARNING: shift/reduce conflict for USE in state 154 resolved as shift
WARNING: shift/reduce conflict for IF in state 154 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 154 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 154 resolved as shift
WARNING: shift/reduce conflict for FOR in state 154 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 154 resolved as shift
WARNING: shift/reduce conflict for TRY in state 154 resolved as shift
WARNING: shift/reduce conflict for VAR in state 157 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 157 resolved as shift
WARNING: shift/reduce conflict for USE in state 157 resolved as shift
WARNING: shift/reduce conflict for IF in state 157 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 157 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 157 resolved as shift
WARNING: shift/reduce conflict for FOR in state 157 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 157 resolved as shift
WARNING: shift/reduce conflict for TRY in state 157 resolved as shift
WARNING: reduce/reduce conflict in state 70 resolved using rule (variable_value_change -> IDENTIFIER EQUAL LIST)
WARNING: rejected rule (calculate -> LIST) in state 70
