Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    PRINT
    PYTHON

Grammar

Rule 0     S' -> root
Rule 1     root -> expression
Rule 2     expression -> expression variable_declaration SEMI
Rule 3     expression -> expression variable_value_change SEMI
Rule 4     expression -> expression if_statement
Rule 5     expression -> expression function
Rule 6     expression -> expression function_call SEMI
Rule 7     expression -> expression repeat
Rule 8     expression -> expression for
Rule 9     expression -> expression while
Rule 10    expression -> expression use SEMI
Rule 11    expression -> expression error_handling
Rule 12    expression -> expression variable_alone SEMI
Rule 13    expression -> expression global_variable SEMI
Rule 14    expression -> expression class_def
Rule 15    expression -> expression debug SEMI
Rule 16    expression -> expression function_class SEMI
Rule 17    expression -> expression inside SEMI
Rule 18    expression -> variable_declaration SEMI
Rule 19    expression -> variable_value_change SEMI
Rule 20    expression -> if_statement
Rule 21    expression -> function
Rule 22    expression -> function_call SEMI
Rule 23    expression -> repeat
Rule 24    expression -> for
Rule 25    expression -> while
Rule 26    expression -> use SEMI
Rule 27    expression -> error_handling
Rule 28    expression -> variable_alone SEMI
Rule 29    expression -> global_variable SEMI
Rule 30    expression -> class_def
Rule 31    expression -> debug SEMI
Rule 32    expression -> function_class SEMI
Rule 33    expression -> inside SEMI
Rule 34    expression -> empty
Rule 35    error_handling -> try catch
Rule 36    try -> TRY LMB expression RMB
Rule 37    catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB
Rule 38    for -> for_head for_body
Rule 39    for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB
Rule 40    for_body -> LMB expression RMB
Rule 41    while -> while_head while_body
Rule 42    while_head -> WHILE LSB condition RSB
Rule 43    while_body -> LMB expression RMB
Rule 44    repeat -> repeat_head repeat_body
Rule 45    repeat_head -> REPEAT LSB calculate RSB
Rule 46    repeat_body -> LMB expression RMB
Rule 47    inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
Rule 48    inside -> IDENTIFIER DOT IDENTIFIER LSB parameter RSB
Rule 49    inside -> IDENTIFIER LSB parameter DOT IDENTIFIER
Rule 50    inside -> IDENTIFIER DOT IDENTIFIER
Rule 51    function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
Rule 52    function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
Rule 53    function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
Rule 54    function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
Rule 55    class_def -> CLASS IDENTIFIER LMB expression RMB
Rule 56    function -> function_head function_body
Rule 57    function_head -> FUNCTION IDENTIFIER LSB parameter RSB
Rule 58    function_head -> FUNCTION IDENTIFIER LSB empty RSB
Rule 59    function_body -> LMB expression RMB
Rule 60    function_call -> IDENTIFIER LSB parameter RSB
Rule 61    function_call -> IDENTIFIER LSB empty RSB
Rule 62    parameter -> parameter COMMA calculate
Rule 63    parameter -> calculate
Rule 64    debug -> USE DEBUG
Rule 65    if_statement -> if_statement_1 if_statement_2 if_statement_3
Rule 66    if_statement -> if_statement_1 if_statement_2
Rule 67    if_statement -> if_statement_1 if_statement_3
Rule 68    if_statement -> if_statement_1
Rule 69    if_statement_1 -> IF LSB condition RSB LMB expression RMB
Rule 70    if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB
Rule 71    if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
Rule 72    if_statement_3 -> ELSE LMB expression RMB
Rule 73    condition -> condition LB calculate
Rule 74    condition -> condition RB calculate
Rule 75    condition -> condition LB EQUAL calculate
Rule 76    condition -> condition RB EQUAL calculate
Rule 77    condition -> condition EQUAL calculate
Rule 78    condition -> calculate
Rule 79    use -> USE use_params
Rule 80    use_params -> IDENTIFIER
Rule 81    global_variable -> GLOBAL IDENTIFIER
Rule 82    variable_alone -> IDENTIFIER
Rule 83    variable_value_change -> IDENTIFIER EQUAL LIST
Rule 84    variable_value_change -> IDENTIFIER EQUAL calculate
Rule 85    variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate
Rule 86    variable_declaration -> VAR IDENTIFIER EQUAL calculate
Rule 87    variable_declaration -> VAR IDENTIFIER
Rule 88    calculate -> calculate PLUS calculate
Rule 89    calculate -> calculate MINUS calculate
Rule 90    calculate -> MINUS calculate
Rule 91    calculate -> calculate MUL calculate
Rule 92    calculate -> calculate DIV calculate
Rule 93    calculate -> INT
Rule 94    calculate -> FLOAT
Rule 95    calculate -> STRING
Rule 96    calculate -> IDENTIFIER
Rule 97    calculate -> IDENTIFIER LIST
Rule 98    calculate -> LIST
Rule 99    calculate -> LSB calculate RSB
Rule 100   empty -> <empty>

Terminals, with rules where they appear

CATCH                : 37
CLASS                : 55
COLON                : 
COMMA                : 62
DEBUG                : 64
DIV                  : 92
DOT                  : 47 48 49 50
ELSE                 : 70 71 72
EQUAL                : 51 52 53 54 75 76 77 83 84 85 86
FLOAT                : 94
FOR                  : 39
FUNCTION             : 57 58
GLOBAL               : 81
IDENTIFIER           : 37 39 39 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 57 58 60 61 80 81 82 83 84 85 86 87 96 97
IF                   : 69 70 71
IN                   : 39
INT                  : 93
LB                   : 73 75
LIST                 : 83 85 97 98
LMB                  : 36 37 40 43 46 55 59 69 70 71 72
LSB                  : 37 39 42 45 47 47 48 49 51 52 53 54 57 58 60 61 69 70 71 99
MINUS                : 89 90
MUL                  : 91
PLUS                 : 88
PRINT                : 
PYTHON               : 
RB                   : 74 76
REPEAT               : 45
RMB                  : 36 37 40 43 46 55 59 69 70 71 72
RSB                  : 37 39 42 45 47 47 48 51 52 53 54 57 58 60 61 69 70 71 99
SEMI                 : 2 3 6 10 12 13 15 16 17 18 19 22 26 28 29 31 32 33
STRING               : 95
TRY                  : 36
USE                  : 64 79
VAR                  : 51 52 85 86 87
WHILE                : 42
error                : 

Nonterminals, with rules where they appear

calculate            : 45 62 63 73 74 75 76 77 78 84 85 86 88 88 89 89 90 91 91 92 92 99
catch                : 35
class_def            : 14 30
condition            : 42 69 70 71 73 74 75 76 77
debug                : 15 31
empty                : 34 52 54 58 61
error_handling       : 11 27
expression           : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 36 37 40 43 46 55 59 69 70 71 72
for                  : 8 24
for_body             : 38
for_head             : 38
function             : 5 21
function_body        : 56
function_call        : 6 22
function_class       : 16 32
function_head        : 56
global_variable      : 13 29
if_statement         : 4 20
if_statement_1       : 65 66 67 68
if_statement_2       : 65 66 71
if_statement_3       : 65 67
inside               : 17 33
parameter            : 47 47 48 49 51 53 57 60 62
repeat               : 7 23
repeat_body          : 44
repeat_head          : 44
root                 : 0
try                  : 35
use                  : 10 26
use_params           : 79
variable_alone       : 12 28
variable_declaration : 2 18
variable_value_change : 3 19
while                : 9 25
while_body           : 41
while_head           : 41

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . expression
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside SEMI
    (34) expression -> . empty
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (100) empty -> .
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    $end            reduce using rule 100 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! VAR             [ reduce using rule 100 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 100 (empty -> .) ]
  ! USE             [ reduce using rule 100 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 100 (empty -> .) ]
  ! CLASS           [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 100 (empty -> .) ]
  ! REPEAT          [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! TRY             [ reduce using rule 100 (empty -> .) ]

    root                           shift and go to state 1
    expression                     shift and go to state 2
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside                         shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 1

    (0) S' -> root .



state 2

    (1) root -> expression .
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside SEMI
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

    $end            reduce using rule 1 (root -> expression .)
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    variable_declaration           shift and go to state 37
    variable_value_change          shift and go to state 38
    if_statement                   shift and go to state 39
    function                       shift and go to state 40
    function_call                  shift and go to state 41
    repeat                         shift and go to state 42
    for                            shift and go to state 43
    while                          shift and go to state 44
    use                            shift and go to state 45
    error_handling                 shift and go to state 46
    variable_alone                 shift and go to state 47
    global_variable                shift and go to state 48
    class_def                      shift and go to state 49
    debug                          shift and go to state 50
    function_class                 shift and go to state 51
    inside                         shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 3

    (18) expression -> variable_declaration . SEMI

    SEMI            shift and go to state 53


state 4

    (19) expression -> variable_value_change . SEMI

    SEMI            shift and go to state 54


state 5

    (20) expression -> if_statement .

    VAR             reduce using rule 20 (expression -> if_statement .)
    IDENTIFIER      reduce using rule 20 (expression -> if_statement .)
    USE             reduce using rule 20 (expression -> if_statement .)
    GLOBAL          reduce using rule 20 (expression -> if_statement .)
    CLASS           reduce using rule 20 (expression -> if_statement .)
    IF              reduce using rule 20 (expression -> if_statement .)
    FUNCTION        reduce using rule 20 (expression -> if_statement .)
    REPEAT          reduce using rule 20 (expression -> if_statement .)
    FOR             reduce using rule 20 (expression -> if_statement .)
    WHILE           reduce using rule 20 (expression -> if_statement .)
    TRY             reduce using rule 20 (expression -> if_statement .)
    $end            reduce using rule 20 (expression -> if_statement .)
    RMB             reduce using rule 20 (expression -> if_statement .)


state 6

    (21) expression -> function .

    VAR             reduce using rule 21 (expression -> function .)
    IDENTIFIER      reduce using rule 21 (expression -> function .)
    USE             reduce using rule 21 (expression -> function .)
    GLOBAL          reduce using rule 21 (expression -> function .)
    CLASS           reduce using rule 21 (expression -> function .)
    IF              reduce using rule 21 (expression -> function .)
    FUNCTION        reduce using rule 21 (expression -> function .)
    REPEAT          reduce using rule 21 (expression -> function .)
    FOR             reduce using rule 21 (expression -> function .)
    WHILE           reduce using rule 21 (expression -> function .)
    TRY             reduce using rule 21 (expression -> function .)
    $end            reduce using rule 21 (expression -> function .)
    RMB             reduce using rule 21 (expression -> function .)


state 7

    (22) expression -> function_call . SEMI

    SEMI            shift and go to state 55


state 8

    (23) expression -> repeat .

    VAR             reduce using rule 23 (expression -> repeat .)
    IDENTIFIER      reduce using rule 23 (expression -> repeat .)
    USE             reduce using rule 23 (expression -> repeat .)
    GLOBAL          reduce using rule 23 (expression -> repeat .)
    CLASS           reduce using rule 23 (expression -> repeat .)
    IF              reduce using rule 23 (expression -> repeat .)
    FUNCTION        reduce using rule 23 (expression -> repeat .)
    REPEAT          reduce using rule 23 (expression -> repeat .)
    FOR             reduce using rule 23 (expression -> repeat .)
    WHILE           reduce using rule 23 (expression -> repeat .)
    TRY             reduce using rule 23 (expression -> repeat .)
    $end            reduce using rule 23 (expression -> repeat .)
    RMB             reduce using rule 23 (expression -> repeat .)


state 9

    (24) expression -> for .

    VAR             reduce using rule 24 (expression -> for .)
    IDENTIFIER      reduce using rule 24 (expression -> for .)
    USE             reduce using rule 24 (expression -> for .)
    GLOBAL          reduce using rule 24 (expression -> for .)
    CLASS           reduce using rule 24 (expression -> for .)
    IF              reduce using rule 24 (expression -> for .)
    FUNCTION        reduce using rule 24 (expression -> for .)
    REPEAT          reduce using rule 24 (expression -> for .)
    FOR             reduce using rule 24 (expression -> for .)
    WHILE           reduce using rule 24 (expression -> for .)
    TRY             reduce using rule 24 (expression -> for .)
    $end            reduce using rule 24 (expression -> for .)
    RMB             reduce using rule 24 (expression -> for .)


state 10

    (25) expression -> while .

    VAR             reduce using rule 25 (expression -> while .)
    IDENTIFIER      reduce using rule 25 (expression -> while .)
    USE             reduce using rule 25 (expression -> while .)
    GLOBAL          reduce using rule 25 (expression -> while .)
    CLASS           reduce using rule 25 (expression -> while .)
    IF              reduce using rule 25 (expression -> while .)
    FUNCTION        reduce using rule 25 (expression -> while .)
    REPEAT          reduce using rule 25 (expression -> while .)
    FOR             reduce using rule 25 (expression -> while .)
    WHILE           reduce using rule 25 (expression -> while .)
    TRY             reduce using rule 25 (expression -> while .)
    $end            reduce using rule 25 (expression -> while .)
    RMB             reduce using rule 25 (expression -> while .)


state 11

    (26) expression -> use . SEMI

    SEMI            shift and go to state 56


state 12

    (27) expression -> error_handling .

    VAR             reduce using rule 27 (expression -> error_handling .)
    IDENTIFIER      reduce using rule 27 (expression -> error_handling .)
    USE             reduce using rule 27 (expression -> error_handling .)
    GLOBAL          reduce using rule 27 (expression -> error_handling .)
    CLASS           reduce using rule 27 (expression -> error_handling .)
    IF              reduce using rule 27 (expression -> error_handling .)
    FUNCTION        reduce using rule 27 (expression -> error_handling .)
    REPEAT          reduce using rule 27 (expression -> error_handling .)
    FOR             reduce using rule 27 (expression -> error_handling .)
    WHILE           reduce using rule 27 (expression -> error_handling .)
    TRY             reduce using rule 27 (expression -> error_handling .)
    $end            reduce using rule 27 (expression -> error_handling .)
    RMB             reduce using rule 27 (expression -> error_handling .)


state 13

    (28) expression -> variable_alone . SEMI

    SEMI            shift and go to state 57


state 14

    (29) expression -> global_variable . SEMI

    SEMI            shift and go to state 58


state 15

    (30) expression -> class_def .

    VAR             reduce using rule 30 (expression -> class_def .)
    IDENTIFIER      reduce using rule 30 (expression -> class_def .)
    USE             reduce using rule 30 (expression -> class_def .)
    GLOBAL          reduce using rule 30 (expression -> class_def .)
    CLASS           reduce using rule 30 (expression -> class_def .)
    IF              reduce using rule 30 (expression -> class_def .)
    FUNCTION        reduce using rule 30 (expression -> class_def .)
    REPEAT          reduce using rule 30 (expression -> class_def .)
    FOR             reduce using rule 30 (expression -> class_def .)
    WHILE           reduce using rule 30 (expression -> class_def .)
    TRY             reduce using rule 30 (expression -> class_def .)
    $end            reduce using rule 30 (expression -> class_def .)
    RMB             reduce using rule 30 (expression -> class_def .)


state 16

    (31) expression -> debug . SEMI

    SEMI            shift and go to state 59


state 17

    (32) expression -> function_class . SEMI

    SEMI            shift and go to state 60


state 18

    (33) expression -> inside . SEMI

    SEMI            shift and go to state 61


state 19

    (34) expression -> empty .

    VAR             reduce using rule 34 (expression -> empty .)
    IDENTIFIER      reduce using rule 34 (expression -> empty .)
    USE             reduce using rule 34 (expression -> empty .)
    GLOBAL          reduce using rule 34 (expression -> empty .)
    CLASS           reduce using rule 34 (expression -> empty .)
    IF              reduce using rule 34 (expression -> empty .)
    FUNCTION        reduce using rule 34 (expression -> empty .)
    REPEAT          reduce using rule 34 (expression -> empty .)
    FOR             reduce using rule 34 (expression -> empty .)
    WHILE           reduce using rule 34 (expression -> empty .)
    TRY             reduce using rule 34 (expression -> empty .)
    $end            reduce using rule 34 (expression -> empty .)
    RMB             reduce using rule 34 (expression -> empty .)


state 20

    (85) variable_declaration -> VAR . IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> VAR . IDENTIFIER EQUAL calculate
    (87) variable_declaration -> VAR . IDENTIFIER
    (51) function_class -> VAR . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> VAR . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB

    IDENTIFIER      shift and go to state 62


state 21

    (83) variable_value_change -> IDENTIFIER . EQUAL LIST
    (84) variable_value_change -> IDENTIFIER . EQUAL calculate
    (60) function_call -> IDENTIFIER . LSB parameter RSB
    (61) function_call -> IDENTIFIER . LSB empty RSB
    (82) variable_alone -> IDENTIFIER .
    (53) function_class -> IDENTIFIER . EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> IDENTIFIER . EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> IDENTIFIER . LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> IDENTIFIER . DOT IDENTIFIER LSB parameter RSB
    (49) inside -> IDENTIFIER . LSB parameter DOT IDENTIFIER
    (50) inside -> IDENTIFIER . DOT IDENTIFIER

    EQUAL           shift and go to state 63
    LSB             shift and go to state 64
    SEMI            reduce using rule 82 (variable_alone -> IDENTIFIER .)
    DOT             shift and go to state 65


state 22

    (65) if_statement -> if_statement_1 . if_statement_2 if_statement_3
    (66) if_statement -> if_statement_1 . if_statement_2
    (67) if_statement -> if_statement_1 . if_statement_3
    (68) if_statement -> if_statement_1 .
    (70) if_statement_2 -> . ELSE IF LSB condition RSB LMB expression RMB
    (71) if_statement_2 -> . if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
    (72) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 68 (if_statement -> if_statement_1 .)
    IDENTIFIER      reduce using rule 68 (if_statement -> if_statement_1 .)
    USE             reduce using rule 68 (if_statement -> if_statement_1 .)
    GLOBAL          reduce using rule 68 (if_statement -> if_statement_1 .)
    CLASS           reduce using rule 68 (if_statement -> if_statement_1 .)
    IF              reduce using rule 68 (if_statement -> if_statement_1 .)
    FUNCTION        reduce using rule 68 (if_statement -> if_statement_1 .)
    REPEAT          reduce using rule 68 (if_statement -> if_statement_1 .)
    FOR             reduce using rule 68 (if_statement -> if_statement_1 .)
    WHILE           reduce using rule 68 (if_statement -> if_statement_1 .)
    TRY             reduce using rule 68 (if_statement -> if_statement_1 .)
    $end            reduce using rule 68 (if_statement -> if_statement_1 .)
    RMB             reduce using rule 68 (if_statement -> if_statement_1 .)
    ELSE            shift and go to state 68

    if_statement_2                 shift and go to state 66
    if_statement_3                 shift and go to state 67

state 23

    (56) function -> function_head . function_body
    (59) function_body -> . LMB expression RMB

    LMB             shift and go to state 70

    function_body                  shift and go to state 69

state 24

    (44) repeat -> repeat_head . repeat_body
    (46) repeat_body -> . LMB expression RMB

    LMB             shift and go to state 72

    repeat_body                    shift and go to state 71

state 25

    (38) for -> for_head . for_body
    (40) for_body -> . LMB expression RMB

    LMB             shift and go to state 74

    for_body                       shift and go to state 73

state 26

    (41) while -> while_head . while_body
    (43) while_body -> . LMB expression RMB

    LMB             shift and go to state 76

    while_body                     shift and go to state 75

state 27

    (79) use -> USE . use_params
    (64) debug -> USE . DEBUG
    (80) use_params -> . IDENTIFIER

    DEBUG           shift and go to state 78
    IDENTIFIER      shift and go to state 79

    use_params                     shift and go to state 77

state 28

    (35) error_handling -> try . catch
    (37) catch -> . CATCH LSB IDENTIFIER RSB LMB expression RMB

    CATCH           shift and go to state 81

    catch                          shift and go to state 80

state 29

    (81) global_variable -> GLOBAL . IDENTIFIER

    IDENTIFIER      shift and go to state 82


state 30

    (55) class_def -> CLASS . IDENTIFIER LMB expression RMB

    IDENTIFIER      shift and go to state 83


state 31

    (69) if_statement_1 -> IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 84


state 32

    (57) function_head -> FUNCTION . IDENTIFIER LSB parameter RSB
    (58) function_head -> FUNCTION . IDENTIFIER LSB empty RSB

    IDENTIFIER      shift and go to state 85


state 33

    (45) repeat_head -> REPEAT . LSB calculate RSB

    LSB             shift and go to state 86


state 34

    (39) for_head -> FOR . LSB IDENTIFIER IN IDENTIFIER RSB

    LSB             shift and go to state 87


state 35

    (42) while_head -> WHILE . LSB condition RSB

    LSB             shift and go to state 88


state 36

    (36) try -> TRY . LMB expression RMB

    LMB             shift and go to state 89


state 37

    (2) expression -> expression variable_declaration . SEMI

    SEMI            shift and go to state 90


state 38

    (3) expression -> expression variable_value_change . SEMI

    SEMI            shift and go to state 91


state 39

    (4) expression -> expression if_statement .

    VAR             reduce using rule 4 (expression -> expression if_statement .)
    IDENTIFIER      reduce using rule 4 (expression -> expression if_statement .)
    USE             reduce using rule 4 (expression -> expression if_statement .)
    GLOBAL          reduce using rule 4 (expression -> expression if_statement .)
    CLASS           reduce using rule 4 (expression -> expression if_statement .)
    IF              reduce using rule 4 (expression -> expression if_statement .)
    FUNCTION        reduce using rule 4 (expression -> expression if_statement .)
    REPEAT          reduce using rule 4 (expression -> expression if_statement .)
    FOR             reduce using rule 4 (expression -> expression if_statement .)
    WHILE           reduce using rule 4 (expression -> expression if_statement .)
    TRY             reduce using rule 4 (expression -> expression if_statement .)
    $end            reduce using rule 4 (expression -> expression if_statement .)
    RMB             reduce using rule 4 (expression -> expression if_statement .)


state 40

    (5) expression -> expression function .

    VAR             reduce using rule 5 (expression -> expression function .)
    IDENTIFIER      reduce using rule 5 (expression -> expression function .)
    USE             reduce using rule 5 (expression -> expression function .)
    GLOBAL          reduce using rule 5 (expression -> expression function .)
    CLASS           reduce using rule 5 (expression -> expression function .)
    IF              reduce using rule 5 (expression -> expression function .)
    FUNCTION        reduce using rule 5 (expression -> expression function .)
    REPEAT          reduce using rule 5 (expression -> expression function .)
    FOR             reduce using rule 5 (expression -> expression function .)
    WHILE           reduce using rule 5 (expression -> expression function .)
    TRY             reduce using rule 5 (expression -> expression function .)
    $end            reduce using rule 5 (expression -> expression function .)
    RMB             reduce using rule 5 (expression -> expression function .)


state 41

    (6) expression -> expression function_call . SEMI

    SEMI            shift and go to state 92


state 42

    (7) expression -> expression repeat .

    VAR             reduce using rule 7 (expression -> expression repeat .)
    IDENTIFIER      reduce using rule 7 (expression -> expression repeat .)
    USE             reduce using rule 7 (expression -> expression repeat .)
    GLOBAL          reduce using rule 7 (expression -> expression repeat .)
    CLASS           reduce using rule 7 (expression -> expression repeat .)
    IF              reduce using rule 7 (expression -> expression repeat .)
    FUNCTION        reduce using rule 7 (expression -> expression repeat .)
    REPEAT          reduce using rule 7 (expression -> expression repeat .)
    FOR             reduce using rule 7 (expression -> expression repeat .)
    WHILE           reduce using rule 7 (expression -> expression repeat .)
    TRY             reduce using rule 7 (expression -> expression repeat .)
    $end            reduce using rule 7 (expression -> expression repeat .)
    RMB             reduce using rule 7 (expression -> expression repeat .)


state 43

    (8) expression -> expression for .

    VAR             reduce using rule 8 (expression -> expression for .)
    IDENTIFIER      reduce using rule 8 (expression -> expression for .)
    USE             reduce using rule 8 (expression -> expression for .)
    GLOBAL          reduce using rule 8 (expression -> expression for .)
    CLASS           reduce using rule 8 (expression -> expression for .)
    IF              reduce using rule 8 (expression -> expression for .)
    FUNCTION        reduce using rule 8 (expression -> expression for .)
    REPEAT          reduce using rule 8 (expression -> expression for .)
    FOR             reduce using rule 8 (expression -> expression for .)
    WHILE           reduce using rule 8 (expression -> expression for .)
    TRY             reduce using rule 8 (expression -> expression for .)
    $end            reduce using rule 8 (expression -> expression for .)
    RMB             reduce using rule 8 (expression -> expression for .)


state 44

    (9) expression -> expression while .

    VAR             reduce using rule 9 (expression -> expression while .)
    IDENTIFIER      reduce using rule 9 (expression -> expression while .)
    USE             reduce using rule 9 (expression -> expression while .)
    GLOBAL          reduce using rule 9 (expression -> expression while .)
    CLASS           reduce using rule 9 (expression -> expression while .)
    IF              reduce using rule 9 (expression -> expression while .)
    FUNCTION        reduce using rule 9 (expression -> expression while .)
    REPEAT          reduce using rule 9 (expression -> expression while .)
    FOR             reduce using rule 9 (expression -> expression while .)
    WHILE           reduce using rule 9 (expression -> expression while .)
    TRY             reduce using rule 9 (expression -> expression while .)
    $end            reduce using rule 9 (expression -> expression while .)
    RMB             reduce using rule 9 (expression -> expression while .)


state 45

    (10) expression -> expression use . SEMI

    SEMI            shift and go to state 93


state 46

    (11) expression -> expression error_handling .

    VAR             reduce using rule 11 (expression -> expression error_handling .)
    IDENTIFIER      reduce using rule 11 (expression -> expression error_handling .)
    USE             reduce using rule 11 (expression -> expression error_handling .)
    GLOBAL          reduce using rule 11 (expression -> expression error_handling .)
    CLASS           reduce using rule 11 (expression -> expression error_handling .)
    IF              reduce using rule 11 (expression -> expression error_handling .)
    FUNCTION        reduce using rule 11 (expression -> expression error_handling .)
    REPEAT          reduce using rule 11 (expression -> expression error_handling .)
    FOR             reduce using rule 11 (expression -> expression error_handling .)
    WHILE           reduce using rule 11 (expression -> expression error_handling .)
    TRY             reduce using rule 11 (expression -> expression error_handling .)
    $end            reduce using rule 11 (expression -> expression error_handling .)
    RMB             reduce using rule 11 (expression -> expression error_handling .)


state 47

    (12) expression -> expression variable_alone . SEMI

    SEMI            shift and go to state 94


state 48

    (13) expression -> expression global_variable . SEMI

    SEMI            shift and go to state 95


state 49

    (14) expression -> expression class_def .

    VAR             reduce using rule 14 (expression -> expression class_def .)
    IDENTIFIER      reduce using rule 14 (expression -> expression class_def .)
    USE             reduce using rule 14 (expression -> expression class_def .)
    GLOBAL          reduce using rule 14 (expression -> expression class_def .)
    CLASS           reduce using rule 14 (expression -> expression class_def .)
    IF              reduce using rule 14 (expression -> expression class_def .)
    FUNCTION        reduce using rule 14 (expression -> expression class_def .)
    REPEAT          reduce using rule 14 (expression -> expression class_def .)
    FOR             reduce using rule 14 (expression -> expression class_def .)
    WHILE           reduce using rule 14 (expression -> expression class_def .)
    TRY             reduce using rule 14 (expression -> expression class_def .)
    $end            reduce using rule 14 (expression -> expression class_def .)
    RMB             reduce using rule 14 (expression -> expression class_def .)


state 50

    (15) expression -> expression debug . SEMI

    SEMI            shift and go to state 96


state 51

    (16) expression -> expression function_class . SEMI

    SEMI            shift and go to state 97


state 52

    (17) expression -> expression inside . SEMI

    SEMI            shift and go to state 98


state 53

    (18) expression -> variable_declaration SEMI .

    VAR             reduce using rule 18 (expression -> variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 18 (expression -> variable_declaration SEMI .)
    USE             reduce using rule 18 (expression -> variable_declaration SEMI .)
    GLOBAL          reduce using rule 18 (expression -> variable_declaration SEMI .)
    CLASS           reduce using rule 18 (expression -> variable_declaration SEMI .)
    IF              reduce using rule 18 (expression -> variable_declaration SEMI .)
    FUNCTION        reduce using rule 18 (expression -> variable_declaration SEMI .)
    REPEAT          reduce using rule 18 (expression -> variable_declaration SEMI .)
    FOR             reduce using rule 18 (expression -> variable_declaration SEMI .)
    WHILE           reduce using rule 18 (expression -> variable_declaration SEMI .)
    TRY             reduce using rule 18 (expression -> variable_declaration SEMI .)
    $end            reduce using rule 18 (expression -> variable_declaration SEMI .)
    RMB             reduce using rule 18 (expression -> variable_declaration SEMI .)


state 54

    (19) expression -> variable_value_change SEMI .

    VAR             reduce using rule 19 (expression -> variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 19 (expression -> variable_value_change SEMI .)
    USE             reduce using rule 19 (expression -> variable_value_change SEMI .)
    GLOBAL          reduce using rule 19 (expression -> variable_value_change SEMI .)
    CLASS           reduce using rule 19 (expression -> variable_value_change SEMI .)
    IF              reduce using rule 19 (expression -> variable_value_change SEMI .)
    FUNCTION        reduce using rule 19 (expression -> variable_value_change SEMI .)
    REPEAT          reduce using rule 19 (expression -> variable_value_change SEMI .)
    FOR             reduce using rule 19 (expression -> variable_value_change SEMI .)
    WHILE           reduce using rule 19 (expression -> variable_value_change SEMI .)
    TRY             reduce using rule 19 (expression -> variable_value_change SEMI .)
    $end            reduce using rule 19 (expression -> variable_value_change SEMI .)
    RMB             reduce using rule 19 (expression -> variable_value_change SEMI .)


state 55

    (22) expression -> function_call SEMI .

    VAR             reduce using rule 22 (expression -> function_call SEMI .)
    IDENTIFIER      reduce using rule 22 (expression -> function_call SEMI .)
    USE             reduce using rule 22 (expression -> function_call SEMI .)
    GLOBAL          reduce using rule 22 (expression -> function_call SEMI .)
    CLASS           reduce using rule 22 (expression -> function_call SEMI .)
    IF              reduce using rule 22 (expression -> function_call SEMI .)
    FUNCTION        reduce using rule 22 (expression -> function_call SEMI .)
    REPEAT          reduce using rule 22 (expression -> function_call SEMI .)
    FOR             reduce using rule 22 (expression -> function_call SEMI .)
    WHILE           reduce using rule 22 (expression -> function_call SEMI .)
    TRY             reduce using rule 22 (expression -> function_call SEMI .)
    $end            reduce using rule 22 (expression -> function_call SEMI .)
    RMB             reduce using rule 22 (expression -> function_call SEMI .)


state 56

    (26) expression -> use SEMI .

    VAR             reduce using rule 26 (expression -> use SEMI .)
    IDENTIFIER      reduce using rule 26 (expression -> use SEMI .)
    USE             reduce using rule 26 (expression -> use SEMI .)
    GLOBAL          reduce using rule 26 (expression -> use SEMI .)
    CLASS           reduce using rule 26 (expression -> use SEMI .)
    IF              reduce using rule 26 (expression -> use SEMI .)
    FUNCTION        reduce using rule 26 (expression -> use SEMI .)
    REPEAT          reduce using rule 26 (expression -> use SEMI .)
    FOR             reduce using rule 26 (expression -> use SEMI .)
    WHILE           reduce using rule 26 (expression -> use SEMI .)
    TRY             reduce using rule 26 (expression -> use SEMI .)
    $end            reduce using rule 26 (expression -> use SEMI .)
    RMB             reduce using rule 26 (expression -> use SEMI .)


state 57

    (28) expression -> variable_alone SEMI .

    VAR             reduce using rule 28 (expression -> variable_alone SEMI .)
    IDENTIFIER      reduce using rule 28 (expression -> variable_alone SEMI .)
    USE             reduce using rule 28 (expression -> variable_alone SEMI .)
    GLOBAL          reduce using rule 28 (expression -> variable_alone SEMI .)
    CLASS           reduce using rule 28 (expression -> variable_alone SEMI .)
    IF              reduce using rule 28 (expression -> variable_alone SEMI .)
    FUNCTION        reduce using rule 28 (expression -> variable_alone SEMI .)
    REPEAT          reduce using rule 28 (expression -> variable_alone SEMI .)
    FOR             reduce using rule 28 (expression -> variable_alone SEMI .)
    WHILE           reduce using rule 28 (expression -> variable_alone SEMI .)
    TRY             reduce using rule 28 (expression -> variable_alone SEMI .)
    $end            reduce using rule 28 (expression -> variable_alone SEMI .)
    RMB             reduce using rule 28 (expression -> variable_alone SEMI .)


state 58

    (29) expression -> global_variable SEMI .

    VAR             reduce using rule 29 (expression -> global_variable SEMI .)
    IDENTIFIER      reduce using rule 29 (expression -> global_variable SEMI .)
    USE             reduce using rule 29 (expression -> global_variable SEMI .)
    GLOBAL          reduce using rule 29 (expression -> global_variable SEMI .)
    CLASS           reduce using rule 29 (expression -> global_variable SEMI .)
    IF              reduce using rule 29 (expression -> global_variable SEMI .)
    FUNCTION        reduce using rule 29 (expression -> global_variable SEMI .)
    REPEAT          reduce using rule 29 (expression -> global_variable SEMI .)
    FOR             reduce using rule 29 (expression -> global_variable SEMI .)
    WHILE           reduce using rule 29 (expression -> global_variable SEMI .)
    TRY             reduce using rule 29 (expression -> global_variable SEMI .)
    $end            reduce using rule 29 (expression -> global_variable SEMI .)
    RMB             reduce using rule 29 (expression -> global_variable SEMI .)


state 59

    (31) expression -> debug SEMI .

    VAR             reduce using rule 31 (expression -> debug SEMI .)
    IDENTIFIER      reduce using rule 31 (expression -> debug SEMI .)
    USE             reduce using rule 31 (expression -> debug SEMI .)
    GLOBAL          reduce using rule 31 (expression -> debug SEMI .)
    CLASS           reduce using rule 31 (expression -> debug SEMI .)
    IF              reduce using rule 31 (expression -> debug SEMI .)
    FUNCTION        reduce using rule 31 (expression -> debug SEMI .)
    REPEAT          reduce using rule 31 (expression -> debug SEMI .)
    FOR             reduce using rule 31 (expression -> debug SEMI .)
    WHILE           reduce using rule 31 (expression -> debug SEMI .)
    TRY             reduce using rule 31 (expression -> debug SEMI .)
    $end            reduce using rule 31 (expression -> debug SEMI .)
    RMB             reduce using rule 31 (expression -> debug SEMI .)


state 60

    (32) expression -> function_class SEMI .

    VAR             reduce using rule 32 (expression -> function_class SEMI .)
    IDENTIFIER      reduce using rule 32 (expression -> function_class SEMI .)
    USE             reduce using rule 32 (expression -> function_class SEMI .)
    GLOBAL          reduce using rule 32 (expression -> function_class SEMI .)
    CLASS           reduce using rule 32 (expression -> function_class SEMI .)
    IF              reduce using rule 32 (expression -> function_class SEMI .)
    FUNCTION        reduce using rule 32 (expression -> function_class SEMI .)
    REPEAT          reduce using rule 32 (expression -> function_class SEMI .)
    FOR             reduce using rule 32 (expression -> function_class SEMI .)
    WHILE           reduce using rule 32 (expression -> function_class SEMI .)
    TRY             reduce using rule 32 (expression -> function_class SEMI .)
    $end            reduce using rule 32 (expression -> function_class SEMI .)
    RMB             reduce using rule 32 (expression -> function_class SEMI .)


state 61

    (33) expression -> inside SEMI .

    VAR             reduce using rule 33 (expression -> inside SEMI .)
    IDENTIFIER      reduce using rule 33 (expression -> inside SEMI .)
    USE             reduce using rule 33 (expression -> inside SEMI .)
    GLOBAL          reduce using rule 33 (expression -> inside SEMI .)
    CLASS           reduce using rule 33 (expression -> inside SEMI .)
    IF              reduce using rule 33 (expression -> inside SEMI .)
    FUNCTION        reduce using rule 33 (expression -> inside SEMI .)
    REPEAT          reduce using rule 33 (expression -> inside SEMI .)
    FOR             reduce using rule 33 (expression -> inside SEMI .)
    WHILE           reduce using rule 33 (expression -> inside SEMI .)
    TRY             reduce using rule 33 (expression -> inside SEMI .)
    $end            reduce using rule 33 (expression -> inside SEMI .)
    RMB             reduce using rule 33 (expression -> inside SEMI .)


state 62

    (85) variable_declaration -> VAR IDENTIFIER . LIST EQUAL calculate
    (86) variable_declaration -> VAR IDENTIFIER . EQUAL calculate
    (87) variable_declaration -> VAR IDENTIFIER .
    (51) function_class -> VAR IDENTIFIER . EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> VAR IDENTIFIER . EQUAL IDENTIFIER LSB empty RSB

    LIST            shift and go to state 99
    EQUAL           shift and go to state 100
    SEMI            reduce using rule 87 (variable_declaration -> VAR IDENTIFIER .)


state 63

    (83) variable_value_change -> IDENTIFIER EQUAL . LIST
    (84) variable_value_change -> IDENTIFIER EQUAL . calculate
    (53) function_class -> IDENTIFIER EQUAL . IDENTIFIER LSB parameter RSB
    (54) function_class -> IDENTIFIER EQUAL . IDENTIFIER LSB empty RSB
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    LIST            shift and go to state 102
    IDENTIFIER      shift and go to state 101
    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    LSB             shift and go to state 104

    calculate                      shift and go to state 103

state 64

    (60) function_call -> IDENTIFIER LSB . parameter RSB
    (61) function_call -> IDENTIFIER LSB . empty RSB
    (47) inside -> IDENTIFIER LSB . parameter RSB DOT IDENTIFIER LSB parameter RSB
    (49) inside -> IDENTIFIER LSB . parameter DOT IDENTIFIER
    (62) parameter -> . parameter COMMA calculate
    (63) parameter -> . calculate
    (100) empty -> .
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    RSB             reduce using rule 100 (empty -> .)
    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    parameter                      shift and go to state 110
    empty                          shift and go to state 111
    calculate                      shift and go to state 112

state 65

    (48) inside -> IDENTIFIER DOT . IDENTIFIER LSB parameter RSB
    (50) inside -> IDENTIFIER DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 114


state 66

    (65) if_statement -> if_statement_1 if_statement_2 . if_statement_3
    (66) if_statement -> if_statement_1 if_statement_2 .
    (71) if_statement_2 -> if_statement_2 . ELSE IF LSB condition RSB LMB expression RMB
    (72) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 66 (if_statement -> if_statement_1 if_statement_2 .)
    IDENTIFIER      reduce using rule 66 (if_statement -> if_statement_1 if_statement_2 .)
    USE             reduce using rule 66 (if_statement -> if_statement_1 if_statement_2 .)
    GLOBAL          reduce using rule 66 (if_statement -> if_statement_1 if_statement_2 .)
    CLASS           reduce using rule 66 (if_statement -> if_statement_1 if_statement_2 .)
    IF              reduce using rule 66 (if_statement -> if_statement_1 if_statement_2 .)
    FUNCTION        reduce using rule 66 (if_statement -> if_statement_1 if_statement_2 .)
    REPEAT          reduce using rule 66 (if_statement -> if_statement_1 if_statement_2 .)
    FOR             reduce using rule 66 (if_statement -> if_statement_1 if_statement_2 .)
    WHILE           reduce using rule 66 (if_statement -> if_statement_1 if_statement_2 .)
    TRY             reduce using rule 66 (if_statement -> if_statement_1 if_statement_2 .)
    $end            reduce using rule 66 (if_statement -> if_statement_1 if_statement_2 .)
    RMB             reduce using rule 66 (if_statement -> if_statement_1 if_statement_2 .)
    ELSE            shift and go to state 116

    if_statement_3                 shift and go to state 115

state 67

    (67) if_statement -> if_statement_1 if_statement_3 .

    VAR             reduce using rule 67 (if_statement -> if_statement_1 if_statement_3 .)
    IDENTIFIER      reduce using rule 67 (if_statement -> if_statement_1 if_statement_3 .)
    USE             reduce using rule 67 (if_statement -> if_statement_1 if_statement_3 .)
    GLOBAL          reduce using rule 67 (if_statement -> if_statement_1 if_statement_3 .)
    CLASS           reduce using rule 67 (if_statement -> if_statement_1 if_statement_3 .)
    IF              reduce using rule 67 (if_statement -> if_statement_1 if_statement_3 .)
    FUNCTION        reduce using rule 67 (if_statement -> if_statement_1 if_statement_3 .)
    REPEAT          reduce using rule 67 (if_statement -> if_statement_1 if_statement_3 .)
    FOR             reduce using rule 67 (if_statement -> if_statement_1 if_statement_3 .)
    WHILE           reduce using rule 67 (if_statement -> if_statement_1 if_statement_3 .)
    TRY             reduce using rule 67 (if_statement -> if_statement_1 if_statement_3 .)
    $end            reduce using rule 67 (if_statement -> if_statement_1 if_statement_3 .)
    RMB             reduce using rule 67 (if_statement -> if_statement_1 if_statement_3 .)


state 68

    (70) if_statement_2 -> ELSE . IF LSB condition RSB LMB expression RMB
    (72) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 117
    LMB             shift and go to state 118


state 69

    (56) function -> function_head function_body .

    VAR             reduce using rule 56 (function -> function_head function_body .)
    IDENTIFIER      reduce using rule 56 (function -> function_head function_body .)
    USE             reduce using rule 56 (function -> function_head function_body .)
    GLOBAL          reduce using rule 56 (function -> function_head function_body .)
    CLASS           reduce using rule 56 (function -> function_head function_body .)
    IF              reduce using rule 56 (function -> function_head function_body .)
    FUNCTION        reduce using rule 56 (function -> function_head function_body .)
    REPEAT          reduce using rule 56 (function -> function_head function_body .)
    FOR             reduce using rule 56 (function -> function_head function_body .)
    WHILE           reduce using rule 56 (function -> function_head function_body .)
    TRY             reduce using rule 56 (function -> function_head function_body .)
    $end            reduce using rule 56 (function -> function_head function_body .)
    RMB             reduce using rule 56 (function -> function_head function_body .)


state 70

    (59) function_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside SEMI
    (34) expression -> . empty
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (100) empty -> .
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 100 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! VAR             [ reduce using rule 100 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 100 (empty -> .) ]
  ! USE             [ reduce using rule 100 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 100 (empty -> .) ]
  ! CLASS           [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 100 (empty -> .) ]
  ! REPEAT          [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! TRY             [ reduce using rule 100 (empty -> .) ]

    expression                     shift and go to state 119
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside                         shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 71

    (44) repeat -> repeat_head repeat_body .

    VAR             reduce using rule 44 (repeat -> repeat_head repeat_body .)
    IDENTIFIER      reduce using rule 44 (repeat -> repeat_head repeat_body .)
    USE             reduce using rule 44 (repeat -> repeat_head repeat_body .)
    GLOBAL          reduce using rule 44 (repeat -> repeat_head repeat_body .)
    CLASS           reduce using rule 44 (repeat -> repeat_head repeat_body .)
    IF              reduce using rule 44 (repeat -> repeat_head repeat_body .)
    FUNCTION        reduce using rule 44 (repeat -> repeat_head repeat_body .)
    REPEAT          reduce using rule 44 (repeat -> repeat_head repeat_body .)
    FOR             reduce using rule 44 (repeat -> repeat_head repeat_body .)
    WHILE           reduce using rule 44 (repeat -> repeat_head repeat_body .)
    TRY             reduce using rule 44 (repeat -> repeat_head repeat_body .)
    $end            reduce using rule 44 (repeat -> repeat_head repeat_body .)
    RMB             reduce using rule 44 (repeat -> repeat_head repeat_body .)


state 72

    (46) repeat_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside SEMI
    (34) expression -> . empty
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (100) empty -> .
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 100 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! VAR             [ reduce using rule 100 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 100 (empty -> .) ]
  ! USE             [ reduce using rule 100 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 100 (empty -> .) ]
  ! CLASS           [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 100 (empty -> .) ]
  ! REPEAT          [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! TRY             [ reduce using rule 100 (empty -> .) ]

    expression                     shift and go to state 120
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside                         shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 73

    (38) for -> for_head for_body .

    VAR             reduce using rule 38 (for -> for_head for_body .)
    IDENTIFIER      reduce using rule 38 (for -> for_head for_body .)
    USE             reduce using rule 38 (for -> for_head for_body .)
    GLOBAL          reduce using rule 38 (for -> for_head for_body .)
    CLASS           reduce using rule 38 (for -> for_head for_body .)
    IF              reduce using rule 38 (for -> for_head for_body .)
    FUNCTION        reduce using rule 38 (for -> for_head for_body .)
    REPEAT          reduce using rule 38 (for -> for_head for_body .)
    FOR             reduce using rule 38 (for -> for_head for_body .)
    WHILE           reduce using rule 38 (for -> for_head for_body .)
    TRY             reduce using rule 38 (for -> for_head for_body .)
    $end            reduce using rule 38 (for -> for_head for_body .)
    RMB             reduce using rule 38 (for -> for_head for_body .)


state 74

    (40) for_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside SEMI
    (34) expression -> . empty
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (100) empty -> .
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 100 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! VAR             [ reduce using rule 100 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 100 (empty -> .) ]
  ! USE             [ reduce using rule 100 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 100 (empty -> .) ]
  ! CLASS           [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 100 (empty -> .) ]
  ! REPEAT          [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! TRY             [ reduce using rule 100 (empty -> .) ]

    expression                     shift and go to state 121
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside                         shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 75

    (41) while -> while_head while_body .

    VAR             reduce using rule 41 (while -> while_head while_body .)
    IDENTIFIER      reduce using rule 41 (while -> while_head while_body .)
    USE             reduce using rule 41 (while -> while_head while_body .)
    GLOBAL          reduce using rule 41 (while -> while_head while_body .)
    CLASS           reduce using rule 41 (while -> while_head while_body .)
    IF              reduce using rule 41 (while -> while_head while_body .)
    FUNCTION        reduce using rule 41 (while -> while_head while_body .)
    REPEAT          reduce using rule 41 (while -> while_head while_body .)
    FOR             reduce using rule 41 (while -> while_head while_body .)
    WHILE           reduce using rule 41 (while -> while_head while_body .)
    TRY             reduce using rule 41 (while -> while_head while_body .)
    $end            reduce using rule 41 (while -> while_head while_body .)
    RMB             reduce using rule 41 (while -> while_head while_body .)


state 76

    (43) while_body -> LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside SEMI
    (34) expression -> . empty
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (100) empty -> .
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 100 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! VAR             [ reduce using rule 100 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 100 (empty -> .) ]
  ! USE             [ reduce using rule 100 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 100 (empty -> .) ]
  ! CLASS           [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 100 (empty -> .) ]
  ! REPEAT          [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! TRY             [ reduce using rule 100 (empty -> .) ]

    expression                     shift and go to state 122
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside                         shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 77

    (79) use -> USE use_params .

    SEMI            reduce using rule 79 (use -> USE use_params .)


state 78

    (64) debug -> USE DEBUG .

    SEMI            reduce using rule 64 (debug -> USE DEBUG .)


state 79

    (80) use_params -> IDENTIFIER .

    SEMI            reduce using rule 80 (use_params -> IDENTIFIER .)


state 80

    (35) error_handling -> try catch .

    VAR             reduce using rule 35 (error_handling -> try catch .)
    IDENTIFIER      reduce using rule 35 (error_handling -> try catch .)
    USE             reduce using rule 35 (error_handling -> try catch .)
    GLOBAL          reduce using rule 35 (error_handling -> try catch .)
    CLASS           reduce using rule 35 (error_handling -> try catch .)
    IF              reduce using rule 35 (error_handling -> try catch .)
    FUNCTION        reduce using rule 35 (error_handling -> try catch .)
    REPEAT          reduce using rule 35 (error_handling -> try catch .)
    FOR             reduce using rule 35 (error_handling -> try catch .)
    WHILE           reduce using rule 35 (error_handling -> try catch .)
    TRY             reduce using rule 35 (error_handling -> try catch .)
    $end            reduce using rule 35 (error_handling -> try catch .)
    RMB             reduce using rule 35 (error_handling -> try catch .)


state 81

    (37) catch -> CATCH . LSB IDENTIFIER RSB LMB expression RMB

    LSB             shift and go to state 123


state 82

    (81) global_variable -> GLOBAL IDENTIFIER .

    SEMI            reduce using rule 81 (global_variable -> GLOBAL IDENTIFIER .)


state 83

    (55) class_def -> CLASS IDENTIFIER . LMB expression RMB

    LMB             shift and go to state 124


state 84

    (69) if_statement_1 -> IF LSB . condition RSB LMB expression RMB
    (73) condition -> . condition LB calculate
    (74) condition -> . condition RB calculate
    (75) condition -> . condition LB EQUAL calculate
    (76) condition -> . condition RB EQUAL calculate
    (77) condition -> . condition EQUAL calculate
    (78) condition -> . calculate
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    condition                      shift and go to state 125
    calculate                      shift and go to state 126

state 85

    (57) function_head -> FUNCTION IDENTIFIER . LSB parameter RSB
    (58) function_head -> FUNCTION IDENTIFIER . LSB empty RSB

    LSB             shift and go to state 127


state 86

    (45) repeat_head -> REPEAT LSB . calculate RSB
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    calculate                      shift and go to state 128

state 87

    (39) for_head -> FOR LSB . IDENTIFIER IN IDENTIFIER RSB

    IDENTIFIER      shift and go to state 129


state 88

    (42) while_head -> WHILE LSB . condition RSB
    (73) condition -> . condition LB calculate
    (74) condition -> . condition RB calculate
    (75) condition -> . condition LB EQUAL calculate
    (76) condition -> . condition RB EQUAL calculate
    (77) condition -> . condition EQUAL calculate
    (78) condition -> . calculate
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    condition                      shift and go to state 130
    calculate                      shift and go to state 126

state 89

    (36) try -> TRY LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside SEMI
    (34) expression -> . empty
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (100) empty -> .
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 100 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! VAR             [ reduce using rule 100 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 100 (empty -> .) ]
  ! USE             [ reduce using rule 100 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 100 (empty -> .) ]
  ! CLASS           [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 100 (empty -> .) ]
  ! REPEAT          [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! TRY             [ reduce using rule 100 (empty -> .) ]

    expression                     shift and go to state 131
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside                         shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 90

    (2) expression -> expression variable_declaration SEMI .

    VAR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    USE             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    GLOBAL          reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    CLASS           reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    IF              reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FUNCTION        reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    REPEAT          reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    FOR             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    WHILE           reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    TRY             reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    $end            reduce using rule 2 (expression -> expression variable_declaration SEMI .)
    RMB             reduce using rule 2 (expression -> expression variable_declaration SEMI .)


state 91

    (3) expression -> expression variable_value_change SEMI .

    VAR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    USE             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    GLOBAL          reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    CLASS           reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    IF              reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FUNCTION        reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    REPEAT          reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    FOR             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    WHILE           reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    TRY             reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    $end            reduce using rule 3 (expression -> expression variable_value_change SEMI .)
    RMB             reduce using rule 3 (expression -> expression variable_value_change SEMI .)


state 92

    (6) expression -> expression function_call SEMI .

    VAR             reduce using rule 6 (expression -> expression function_call SEMI .)
    IDENTIFIER      reduce using rule 6 (expression -> expression function_call SEMI .)
    USE             reduce using rule 6 (expression -> expression function_call SEMI .)
    GLOBAL          reduce using rule 6 (expression -> expression function_call SEMI .)
    CLASS           reduce using rule 6 (expression -> expression function_call SEMI .)
    IF              reduce using rule 6 (expression -> expression function_call SEMI .)
    FUNCTION        reduce using rule 6 (expression -> expression function_call SEMI .)
    REPEAT          reduce using rule 6 (expression -> expression function_call SEMI .)
    FOR             reduce using rule 6 (expression -> expression function_call SEMI .)
    WHILE           reduce using rule 6 (expression -> expression function_call SEMI .)
    TRY             reduce using rule 6 (expression -> expression function_call SEMI .)
    $end            reduce using rule 6 (expression -> expression function_call SEMI .)
    RMB             reduce using rule 6 (expression -> expression function_call SEMI .)


state 93

    (10) expression -> expression use SEMI .

    VAR             reduce using rule 10 (expression -> expression use SEMI .)
    IDENTIFIER      reduce using rule 10 (expression -> expression use SEMI .)
    USE             reduce using rule 10 (expression -> expression use SEMI .)
    GLOBAL          reduce using rule 10 (expression -> expression use SEMI .)
    CLASS           reduce using rule 10 (expression -> expression use SEMI .)
    IF              reduce using rule 10 (expression -> expression use SEMI .)
    FUNCTION        reduce using rule 10 (expression -> expression use SEMI .)
    REPEAT          reduce using rule 10 (expression -> expression use SEMI .)
    FOR             reduce using rule 10 (expression -> expression use SEMI .)
    WHILE           reduce using rule 10 (expression -> expression use SEMI .)
    TRY             reduce using rule 10 (expression -> expression use SEMI .)
    $end            reduce using rule 10 (expression -> expression use SEMI .)
    RMB             reduce using rule 10 (expression -> expression use SEMI .)


state 94

    (12) expression -> expression variable_alone SEMI .

    VAR             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    IDENTIFIER      reduce using rule 12 (expression -> expression variable_alone SEMI .)
    USE             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    GLOBAL          reduce using rule 12 (expression -> expression variable_alone SEMI .)
    CLASS           reduce using rule 12 (expression -> expression variable_alone SEMI .)
    IF              reduce using rule 12 (expression -> expression variable_alone SEMI .)
    FUNCTION        reduce using rule 12 (expression -> expression variable_alone SEMI .)
    REPEAT          reduce using rule 12 (expression -> expression variable_alone SEMI .)
    FOR             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    WHILE           reduce using rule 12 (expression -> expression variable_alone SEMI .)
    TRY             reduce using rule 12 (expression -> expression variable_alone SEMI .)
    $end            reduce using rule 12 (expression -> expression variable_alone SEMI .)
    RMB             reduce using rule 12 (expression -> expression variable_alone SEMI .)


state 95

    (13) expression -> expression global_variable SEMI .

    VAR             reduce using rule 13 (expression -> expression global_variable SEMI .)
    IDENTIFIER      reduce using rule 13 (expression -> expression global_variable SEMI .)
    USE             reduce using rule 13 (expression -> expression global_variable SEMI .)
    GLOBAL          reduce using rule 13 (expression -> expression global_variable SEMI .)
    CLASS           reduce using rule 13 (expression -> expression global_variable SEMI .)
    IF              reduce using rule 13 (expression -> expression global_variable SEMI .)
    FUNCTION        reduce using rule 13 (expression -> expression global_variable SEMI .)
    REPEAT          reduce using rule 13 (expression -> expression global_variable SEMI .)
    FOR             reduce using rule 13 (expression -> expression global_variable SEMI .)
    WHILE           reduce using rule 13 (expression -> expression global_variable SEMI .)
    TRY             reduce using rule 13 (expression -> expression global_variable SEMI .)
    $end            reduce using rule 13 (expression -> expression global_variable SEMI .)
    RMB             reduce using rule 13 (expression -> expression global_variable SEMI .)


state 96

    (15) expression -> expression debug SEMI .

    VAR             reduce using rule 15 (expression -> expression debug SEMI .)
    IDENTIFIER      reduce using rule 15 (expression -> expression debug SEMI .)
    USE             reduce using rule 15 (expression -> expression debug SEMI .)
    GLOBAL          reduce using rule 15 (expression -> expression debug SEMI .)
    CLASS           reduce using rule 15 (expression -> expression debug SEMI .)
    IF              reduce using rule 15 (expression -> expression debug SEMI .)
    FUNCTION        reduce using rule 15 (expression -> expression debug SEMI .)
    REPEAT          reduce using rule 15 (expression -> expression debug SEMI .)
    FOR             reduce using rule 15 (expression -> expression debug SEMI .)
    WHILE           reduce using rule 15 (expression -> expression debug SEMI .)
    TRY             reduce using rule 15 (expression -> expression debug SEMI .)
    $end            reduce using rule 15 (expression -> expression debug SEMI .)
    RMB             reduce using rule 15 (expression -> expression debug SEMI .)


state 97

    (16) expression -> expression function_class SEMI .

    VAR             reduce using rule 16 (expression -> expression function_class SEMI .)
    IDENTIFIER      reduce using rule 16 (expression -> expression function_class SEMI .)
    USE             reduce using rule 16 (expression -> expression function_class SEMI .)
    GLOBAL          reduce using rule 16 (expression -> expression function_class SEMI .)
    CLASS           reduce using rule 16 (expression -> expression function_class SEMI .)
    IF              reduce using rule 16 (expression -> expression function_class SEMI .)
    FUNCTION        reduce using rule 16 (expression -> expression function_class SEMI .)
    REPEAT          reduce using rule 16 (expression -> expression function_class SEMI .)
    FOR             reduce using rule 16 (expression -> expression function_class SEMI .)
    WHILE           reduce using rule 16 (expression -> expression function_class SEMI .)
    TRY             reduce using rule 16 (expression -> expression function_class SEMI .)
    $end            reduce using rule 16 (expression -> expression function_class SEMI .)
    RMB             reduce using rule 16 (expression -> expression function_class SEMI .)


state 98

    (17) expression -> expression inside SEMI .

    VAR             reduce using rule 17 (expression -> expression inside SEMI .)
    IDENTIFIER      reduce using rule 17 (expression -> expression inside SEMI .)
    USE             reduce using rule 17 (expression -> expression inside SEMI .)
    GLOBAL          reduce using rule 17 (expression -> expression inside SEMI .)
    CLASS           reduce using rule 17 (expression -> expression inside SEMI .)
    IF              reduce using rule 17 (expression -> expression inside SEMI .)
    FUNCTION        reduce using rule 17 (expression -> expression inside SEMI .)
    REPEAT          reduce using rule 17 (expression -> expression inside SEMI .)
    FOR             reduce using rule 17 (expression -> expression inside SEMI .)
    WHILE           reduce using rule 17 (expression -> expression inside SEMI .)
    TRY             reduce using rule 17 (expression -> expression inside SEMI .)
    $end            reduce using rule 17 (expression -> expression inside SEMI .)
    RMB             reduce using rule 17 (expression -> expression inside SEMI .)


state 99

    (85) variable_declaration -> VAR IDENTIFIER LIST . EQUAL calculate

    EQUAL           shift and go to state 132


state 100

    (86) variable_declaration -> VAR IDENTIFIER EQUAL . calculate
    (51) function_class -> VAR IDENTIFIER EQUAL . IDENTIFIER LSB parameter RSB
    (52) function_class -> VAR IDENTIFIER EQUAL . IDENTIFIER LSB empty RSB
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    IDENTIFIER      shift and go to state 133
    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    calculate                      shift and go to state 134

state 101

    (53) function_class -> IDENTIFIER EQUAL IDENTIFIER . LSB parameter RSB
    (54) function_class -> IDENTIFIER EQUAL IDENTIFIER . LSB empty RSB
    (96) calculate -> IDENTIFIER .
    (97) calculate -> IDENTIFIER . LIST

    LSB             shift and go to state 135
    PLUS            reduce using rule 96 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 96 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 96 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 96 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 96 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 136


state 102

    (83) variable_value_change -> IDENTIFIER EQUAL LIST .
    (98) calculate -> LIST .

  ! reduce/reduce conflict for SEMI resolved using rule 83 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    SEMI            reduce using rule 83 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    PLUS            reduce using rule 98 (calculate -> LIST .)
    MINUS           reduce using rule 98 (calculate -> LIST .)
    MUL             reduce using rule 98 (calculate -> LIST .)
    DIV             reduce using rule 98 (calculate -> LIST .)

  ! SEMI            [ reduce using rule 98 (calculate -> LIST .) ]


state 103

    (84) variable_value_change -> IDENTIFIER EQUAL calculate .
    (88) calculate -> calculate . PLUS calculate
    (89) calculate -> calculate . MINUS calculate
    (91) calculate -> calculate . MUL calculate
    (92) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 84 (variable_value_change -> IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MUL             shift and go to state 139
    DIV             shift and go to state 140


state 104

    (99) calculate -> LSB . calculate RSB
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    calculate                      shift and go to state 141

state 105

    (90) calculate -> MINUS . calculate
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    calculate                      shift and go to state 142

state 106

    (93) calculate -> INT .

    PLUS            reduce using rule 93 (calculate -> INT .)
    MINUS           reduce using rule 93 (calculate -> INT .)
    MUL             reduce using rule 93 (calculate -> INT .)
    DIV             reduce using rule 93 (calculate -> INT .)
    SEMI            reduce using rule 93 (calculate -> INT .)
    RSB             reduce using rule 93 (calculate -> INT .)
    DOT             reduce using rule 93 (calculate -> INT .)
    COMMA           reduce using rule 93 (calculate -> INT .)
    LB              reduce using rule 93 (calculate -> INT .)
    RB              reduce using rule 93 (calculate -> INT .)
    EQUAL           reduce using rule 93 (calculate -> INT .)


state 107

    (94) calculate -> FLOAT .

    PLUS            reduce using rule 94 (calculate -> FLOAT .)
    MINUS           reduce using rule 94 (calculate -> FLOAT .)
    MUL             reduce using rule 94 (calculate -> FLOAT .)
    DIV             reduce using rule 94 (calculate -> FLOAT .)
    SEMI            reduce using rule 94 (calculate -> FLOAT .)
    RSB             reduce using rule 94 (calculate -> FLOAT .)
    DOT             reduce using rule 94 (calculate -> FLOAT .)
    COMMA           reduce using rule 94 (calculate -> FLOAT .)
    LB              reduce using rule 94 (calculate -> FLOAT .)
    RB              reduce using rule 94 (calculate -> FLOAT .)
    EQUAL           reduce using rule 94 (calculate -> FLOAT .)


state 108

    (95) calculate -> STRING .

    PLUS            reduce using rule 95 (calculate -> STRING .)
    MINUS           reduce using rule 95 (calculate -> STRING .)
    MUL             reduce using rule 95 (calculate -> STRING .)
    DIV             reduce using rule 95 (calculate -> STRING .)
    SEMI            reduce using rule 95 (calculate -> STRING .)
    RSB             reduce using rule 95 (calculate -> STRING .)
    DOT             reduce using rule 95 (calculate -> STRING .)
    COMMA           reduce using rule 95 (calculate -> STRING .)
    LB              reduce using rule 95 (calculate -> STRING .)
    RB              reduce using rule 95 (calculate -> STRING .)
    EQUAL           reduce using rule 95 (calculate -> STRING .)


state 109

    (96) calculate -> IDENTIFIER .
    (97) calculate -> IDENTIFIER . LIST

    PLUS            reduce using rule 96 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 96 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 96 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 96 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 96 (calculate -> IDENTIFIER .)
    DOT             reduce using rule 96 (calculate -> IDENTIFIER .)
    COMMA           reduce using rule 96 (calculate -> IDENTIFIER .)
    LB              reduce using rule 96 (calculate -> IDENTIFIER .)
    RB              reduce using rule 96 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 96 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 96 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 136


state 110

    (60) function_call -> IDENTIFIER LSB parameter . RSB
    (47) inside -> IDENTIFIER LSB parameter . RSB DOT IDENTIFIER LSB parameter RSB
    (49) inside -> IDENTIFIER LSB parameter . DOT IDENTIFIER
    (62) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 143
    DOT             shift and go to state 144
    COMMA           shift and go to state 145


state 111

    (61) function_call -> IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 146


state 112

    (63) parameter -> calculate .
    (88) calculate -> calculate . PLUS calculate
    (89) calculate -> calculate . MINUS calculate
    (91) calculate -> calculate . MUL calculate
    (92) calculate -> calculate . DIV calculate

    RSB             reduce using rule 63 (parameter -> calculate .)
    DOT             reduce using rule 63 (parameter -> calculate .)
    COMMA           reduce using rule 63 (parameter -> calculate .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MUL             shift and go to state 139
    DIV             shift and go to state 140


state 113

    (98) calculate -> LIST .

    PLUS            reduce using rule 98 (calculate -> LIST .)
    MINUS           reduce using rule 98 (calculate -> LIST .)
    MUL             reduce using rule 98 (calculate -> LIST .)
    DIV             reduce using rule 98 (calculate -> LIST .)
    RSB             reduce using rule 98 (calculate -> LIST .)
    DOT             reduce using rule 98 (calculate -> LIST .)
    COMMA           reduce using rule 98 (calculate -> LIST .)
    LB              reduce using rule 98 (calculate -> LIST .)
    RB              reduce using rule 98 (calculate -> LIST .)
    EQUAL           reduce using rule 98 (calculate -> LIST .)
    SEMI            reduce using rule 98 (calculate -> LIST .)


state 114

    (48) inside -> IDENTIFIER DOT IDENTIFIER . LSB parameter RSB
    (50) inside -> IDENTIFIER DOT IDENTIFIER .

    LSB             shift and go to state 147
    SEMI            reduce using rule 50 (inside -> IDENTIFIER DOT IDENTIFIER .)


state 115

    (65) if_statement -> if_statement_1 if_statement_2 if_statement_3 .

    VAR             reduce using rule 65 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IDENTIFIER      reduce using rule 65 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    USE             reduce using rule 65 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    GLOBAL          reduce using rule 65 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    CLASS           reduce using rule 65 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IF              reduce using rule 65 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FUNCTION        reduce using rule 65 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    REPEAT          reduce using rule 65 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FOR             reduce using rule 65 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    WHILE           reduce using rule 65 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    TRY             reduce using rule 65 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    $end            reduce using rule 65 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    RMB             reduce using rule 65 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)


state 116

    (71) if_statement_2 -> if_statement_2 ELSE . IF LSB condition RSB LMB expression RMB
    (72) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 148
    LMB             shift and go to state 118


state 117

    (70) if_statement_2 -> ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 149


state 118

    (72) if_statement_3 -> ELSE LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside SEMI
    (34) expression -> . empty
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (100) empty -> .
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 100 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! VAR             [ reduce using rule 100 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 100 (empty -> .) ]
  ! USE             [ reduce using rule 100 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 100 (empty -> .) ]
  ! CLASS           [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 100 (empty -> .) ]
  ! REPEAT          [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! TRY             [ reduce using rule 100 (empty -> .) ]

    expression                     shift and go to state 150
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside                         shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 119

    (59) function_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside SEMI
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

    RMB             shift and go to state 151
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    variable_declaration           shift and go to state 37
    variable_value_change          shift and go to state 38
    if_statement                   shift and go to state 39
    function                       shift and go to state 40
    function_call                  shift and go to state 41
    repeat                         shift and go to state 42
    for                            shift and go to state 43
    while                          shift and go to state 44
    use                            shift and go to state 45
    error_handling                 shift and go to state 46
    variable_alone                 shift and go to state 47
    global_variable                shift and go to state 48
    class_def                      shift and go to state 49
    debug                          shift and go to state 50
    function_class                 shift and go to state 51
    inside                         shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 120

    (46) repeat_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside SEMI
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

    RMB             shift and go to state 152
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    variable_declaration           shift and go to state 37
    variable_value_change          shift and go to state 38
    if_statement                   shift and go to state 39
    function                       shift and go to state 40
    function_call                  shift and go to state 41
    repeat                         shift and go to state 42
    for                            shift and go to state 43
    while                          shift and go to state 44
    use                            shift and go to state 45
    error_handling                 shift and go to state 46
    variable_alone                 shift and go to state 47
    global_variable                shift and go to state 48
    class_def                      shift and go to state 49
    debug                          shift and go to state 50
    function_class                 shift and go to state 51
    inside                         shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 121

    (40) for_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside SEMI
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

    RMB             shift and go to state 153
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    variable_declaration           shift and go to state 37
    variable_value_change          shift and go to state 38
    if_statement                   shift and go to state 39
    function                       shift and go to state 40
    function_call                  shift and go to state 41
    repeat                         shift and go to state 42
    for                            shift and go to state 43
    while                          shift and go to state 44
    use                            shift and go to state 45
    error_handling                 shift and go to state 46
    variable_alone                 shift and go to state 47
    global_variable                shift and go to state 48
    class_def                      shift and go to state 49
    debug                          shift and go to state 50
    function_class                 shift and go to state 51
    inside                         shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 122

    (43) while_body -> LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside SEMI
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

    RMB             shift and go to state 154
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    variable_declaration           shift and go to state 37
    variable_value_change          shift and go to state 38
    if_statement                   shift and go to state 39
    function                       shift and go to state 40
    function_call                  shift and go to state 41
    repeat                         shift and go to state 42
    for                            shift and go to state 43
    while                          shift and go to state 44
    use                            shift and go to state 45
    error_handling                 shift and go to state 46
    variable_alone                 shift and go to state 47
    global_variable                shift and go to state 48
    class_def                      shift and go to state 49
    debug                          shift and go to state 50
    function_class                 shift and go to state 51
    inside                         shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 123

    (37) catch -> CATCH LSB . IDENTIFIER RSB LMB expression RMB

    IDENTIFIER      shift and go to state 155


state 124

    (55) class_def -> CLASS IDENTIFIER LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside SEMI
    (34) expression -> . empty
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (100) empty -> .
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 100 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! VAR             [ reduce using rule 100 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 100 (empty -> .) ]
  ! USE             [ reduce using rule 100 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 100 (empty -> .) ]
  ! CLASS           [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 100 (empty -> .) ]
  ! REPEAT          [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! TRY             [ reduce using rule 100 (empty -> .) ]

    expression                     shift and go to state 156
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside                         shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 125

    (69) if_statement_1 -> IF LSB condition . RSB LMB expression RMB
    (73) condition -> condition . LB calculate
    (74) condition -> condition . RB calculate
    (75) condition -> condition . LB EQUAL calculate
    (76) condition -> condition . RB EQUAL calculate
    (77) condition -> condition . EQUAL calculate

    RSB             shift and go to state 157
    LB              shift and go to state 158
    RB              shift and go to state 159
    EQUAL           shift and go to state 160


state 126

    (78) condition -> calculate .
    (88) calculate -> calculate . PLUS calculate
    (89) calculate -> calculate . MINUS calculate
    (91) calculate -> calculate . MUL calculate
    (92) calculate -> calculate . DIV calculate

    RSB             reduce using rule 78 (condition -> calculate .)
    LB              reduce using rule 78 (condition -> calculate .)
    RB              reduce using rule 78 (condition -> calculate .)
    EQUAL           reduce using rule 78 (condition -> calculate .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MUL             shift and go to state 139
    DIV             shift and go to state 140


state 127

    (57) function_head -> FUNCTION IDENTIFIER LSB . parameter RSB
    (58) function_head -> FUNCTION IDENTIFIER LSB . empty RSB
    (62) parameter -> . parameter COMMA calculate
    (63) parameter -> . calculate
    (100) empty -> .
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    RSB             reduce using rule 100 (empty -> .)
    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    parameter                      shift and go to state 161
    empty                          shift and go to state 162
    calculate                      shift and go to state 112

state 128

    (45) repeat_head -> REPEAT LSB calculate . RSB
    (88) calculate -> calculate . PLUS calculate
    (89) calculate -> calculate . MINUS calculate
    (91) calculate -> calculate . MUL calculate
    (92) calculate -> calculate . DIV calculate

    RSB             shift and go to state 163
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MUL             shift and go to state 139
    DIV             shift and go to state 140


state 129

    (39) for_head -> FOR LSB IDENTIFIER . IN IDENTIFIER RSB

    IN              shift and go to state 164


state 130

    (42) while_head -> WHILE LSB condition . RSB
    (73) condition -> condition . LB calculate
    (74) condition -> condition . RB calculate
    (75) condition -> condition . LB EQUAL calculate
    (76) condition -> condition . RB EQUAL calculate
    (77) condition -> condition . EQUAL calculate

    RSB             shift and go to state 165
    LB              shift and go to state 158
    RB              shift and go to state 159
    EQUAL           shift and go to state 160


state 131

    (36) try -> TRY LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside SEMI
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

    RMB             shift and go to state 166
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    variable_declaration           shift and go to state 37
    variable_value_change          shift and go to state 38
    if_statement                   shift and go to state 39
    function                       shift and go to state 40
    function_call                  shift and go to state 41
    repeat                         shift and go to state 42
    for                            shift and go to state 43
    while                          shift and go to state 44
    use                            shift and go to state 45
    error_handling                 shift and go to state 46
    variable_alone                 shift and go to state 47
    global_variable                shift and go to state 48
    class_def                      shift and go to state 49
    debug                          shift and go to state 50
    function_class                 shift and go to state 51
    inside                         shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 132

    (85) variable_declaration -> VAR IDENTIFIER LIST EQUAL . calculate
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    calculate                      shift and go to state 167

state 133

    (51) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER . LSB parameter RSB
    (52) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER . LSB empty RSB
    (96) calculate -> IDENTIFIER .
    (97) calculate -> IDENTIFIER . LIST

    LSB             shift and go to state 168
    PLUS            reduce using rule 96 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 96 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 96 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 96 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 96 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 136


state 134

    (86) variable_declaration -> VAR IDENTIFIER EQUAL calculate .
    (88) calculate -> calculate . PLUS calculate
    (89) calculate -> calculate . MINUS calculate
    (91) calculate -> calculate . MUL calculate
    (92) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 86 (variable_declaration -> VAR IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MUL             shift and go to state 139
    DIV             shift and go to state 140


state 135

    (53) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB . parameter RSB
    (54) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB . empty RSB
    (62) parameter -> . parameter COMMA calculate
    (63) parameter -> . calculate
    (100) empty -> .
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    RSB             reduce using rule 100 (empty -> .)
    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    parameter                      shift and go to state 169
    empty                          shift and go to state 170
    calculate                      shift and go to state 112

state 136

    (97) calculate -> IDENTIFIER LIST .

    PLUS            reduce using rule 97 (calculate -> IDENTIFIER LIST .)
    MINUS           reduce using rule 97 (calculate -> IDENTIFIER LIST .)
    MUL             reduce using rule 97 (calculate -> IDENTIFIER LIST .)
    DIV             reduce using rule 97 (calculate -> IDENTIFIER LIST .)
    SEMI            reduce using rule 97 (calculate -> IDENTIFIER LIST .)
    RSB             reduce using rule 97 (calculate -> IDENTIFIER LIST .)
    DOT             reduce using rule 97 (calculate -> IDENTIFIER LIST .)
    COMMA           reduce using rule 97 (calculate -> IDENTIFIER LIST .)
    LB              reduce using rule 97 (calculate -> IDENTIFIER LIST .)
    RB              reduce using rule 97 (calculate -> IDENTIFIER LIST .)
    EQUAL           reduce using rule 97 (calculate -> IDENTIFIER LIST .)


state 137

    (88) calculate -> calculate PLUS . calculate
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    calculate                      shift and go to state 171

state 138

    (89) calculate -> calculate MINUS . calculate
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    calculate                      shift and go to state 172

state 139

    (91) calculate -> calculate MUL . calculate
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    calculate                      shift and go to state 173

state 140

    (92) calculate -> calculate DIV . calculate
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    calculate                      shift and go to state 174

state 141

    (99) calculate -> LSB calculate . RSB
    (88) calculate -> calculate . PLUS calculate
    (89) calculate -> calculate . MINUS calculate
    (91) calculate -> calculate . MUL calculate
    (92) calculate -> calculate . DIV calculate

    RSB             shift and go to state 175
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MUL             shift and go to state 139
    DIV             shift and go to state 140


state 142

    (90) calculate -> MINUS calculate .
    (88) calculate -> calculate . PLUS calculate
    (89) calculate -> calculate . MINUS calculate
    (91) calculate -> calculate . MUL calculate
    (92) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 90 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 90 (calculate -> MINUS calculate .)
    MUL             reduce using rule 90 (calculate -> MINUS calculate .)
    DIV             reduce using rule 90 (calculate -> MINUS calculate .)
    SEMI            reduce using rule 90 (calculate -> MINUS calculate .)
    RSB             reduce using rule 90 (calculate -> MINUS calculate .)
    DOT             reduce using rule 90 (calculate -> MINUS calculate .)
    COMMA           reduce using rule 90 (calculate -> MINUS calculate .)
    LB              reduce using rule 90 (calculate -> MINUS calculate .)
    RB              reduce using rule 90 (calculate -> MINUS calculate .)
    EQUAL           reduce using rule 90 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 137 ]
  ! MINUS           [ shift and go to state 138 ]
  ! MUL             [ shift and go to state 139 ]
  ! DIV             [ shift and go to state 140 ]


state 143

    (60) function_call -> IDENTIFIER LSB parameter RSB .
    (47) inside -> IDENTIFIER LSB parameter RSB . DOT IDENTIFIER LSB parameter RSB

    SEMI            reduce using rule 60 (function_call -> IDENTIFIER LSB parameter RSB .)
    DOT             shift and go to state 176


state 144

    (49) inside -> IDENTIFIER LSB parameter DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 177


state 145

    (62) parameter -> parameter COMMA . calculate
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    calculate                      shift and go to state 178

state 146

    (61) function_call -> IDENTIFIER LSB empty RSB .

    SEMI            reduce using rule 61 (function_call -> IDENTIFIER LSB empty RSB .)


state 147

    (48) inside -> IDENTIFIER DOT IDENTIFIER LSB . parameter RSB
    (62) parameter -> . parameter COMMA calculate
    (63) parameter -> . calculate
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    parameter                      shift and go to state 179
    calculate                      shift and go to state 112

state 148

    (71) if_statement_2 -> if_statement_2 ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 180


state 149

    (70) if_statement_2 -> ELSE IF LSB . condition RSB LMB expression RMB
    (73) condition -> . condition LB calculate
    (74) condition -> . condition RB calculate
    (75) condition -> . condition LB EQUAL calculate
    (76) condition -> . condition RB EQUAL calculate
    (77) condition -> . condition EQUAL calculate
    (78) condition -> . calculate
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    condition                      shift and go to state 181
    calculate                      shift and go to state 126

state 150

    (72) if_statement_3 -> ELSE LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside SEMI
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

    RMB             shift and go to state 182
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    variable_declaration           shift and go to state 37
    variable_value_change          shift and go to state 38
    if_statement                   shift and go to state 39
    function                       shift and go to state 40
    function_call                  shift and go to state 41
    repeat                         shift and go to state 42
    for                            shift and go to state 43
    while                          shift and go to state 44
    use                            shift and go to state 45
    error_handling                 shift and go to state 46
    variable_alone                 shift and go to state 47
    global_variable                shift and go to state 48
    class_def                      shift and go to state 49
    debug                          shift and go to state 50
    function_class                 shift and go to state 51
    inside                         shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 151

    (59) function_body -> LMB expression RMB .

    VAR             reduce using rule 59 (function_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 59 (function_body -> LMB expression RMB .)
    USE             reduce using rule 59 (function_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 59 (function_body -> LMB expression RMB .)
    CLASS           reduce using rule 59 (function_body -> LMB expression RMB .)
    IF              reduce using rule 59 (function_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 59 (function_body -> LMB expression RMB .)
    REPEAT          reduce using rule 59 (function_body -> LMB expression RMB .)
    FOR             reduce using rule 59 (function_body -> LMB expression RMB .)
    WHILE           reduce using rule 59 (function_body -> LMB expression RMB .)
    TRY             reduce using rule 59 (function_body -> LMB expression RMB .)
    $end            reduce using rule 59 (function_body -> LMB expression RMB .)
    RMB             reduce using rule 59 (function_body -> LMB expression RMB .)


state 152

    (46) repeat_body -> LMB expression RMB .

    VAR             reduce using rule 46 (repeat_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 46 (repeat_body -> LMB expression RMB .)
    USE             reduce using rule 46 (repeat_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 46 (repeat_body -> LMB expression RMB .)
    CLASS           reduce using rule 46 (repeat_body -> LMB expression RMB .)
    IF              reduce using rule 46 (repeat_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 46 (repeat_body -> LMB expression RMB .)
    REPEAT          reduce using rule 46 (repeat_body -> LMB expression RMB .)
    FOR             reduce using rule 46 (repeat_body -> LMB expression RMB .)
    WHILE           reduce using rule 46 (repeat_body -> LMB expression RMB .)
    TRY             reduce using rule 46 (repeat_body -> LMB expression RMB .)
    $end            reduce using rule 46 (repeat_body -> LMB expression RMB .)
    RMB             reduce using rule 46 (repeat_body -> LMB expression RMB .)


state 153

    (40) for_body -> LMB expression RMB .

    VAR             reduce using rule 40 (for_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 40 (for_body -> LMB expression RMB .)
    USE             reduce using rule 40 (for_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 40 (for_body -> LMB expression RMB .)
    CLASS           reduce using rule 40 (for_body -> LMB expression RMB .)
    IF              reduce using rule 40 (for_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 40 (for_body -> LMB expression RMB .)
    REPEAT          reduce using rule 40 (for_body -> LMB expression RMB .)
    FOR             reduce using rule 40 (for_body -> LMB expression RMB .)
    WHILE           reduce using rule 40 (for_body -> LMB expression RMB .)
    TRY             reduce using rule 40 (for_body -> LMB expression RMB .)
    $end            reduce using rule 40 (for_body -> LMB expression RMB .)
    RMB             reduce using rule 40 (for_body -> LMB expression RMB .)


state 154

    (43) while_body -> LMB expression RMB .

    VAR             reduce using rule 43 (while_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 43 (while_body -> LMB expression RMB .)
    USE             reduce using rule 43 (while_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 43 (while_body -> LMB expression RMB .)
    CLASS           reduce using rule 43 (while_body -> LMB expression RMB .)
    IF              reduce using rule 43 (while_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 43 (while_body -> LMB expression RMB .)
    REPEAT          reduce using rule 43 (while_body -> LMB expression RMB .)
    FOR             reduce using rule 43 (while_body -> LMB expression RMB .)
    WHILE           reduce using rule 43 (while_body -> LMB expression RMB .)
    TRY             reduce using rule 43 (while_body -> LMB expression RMB .)
    $end            reduce using rule 43 (while_body -> LMB expression RMB .)
    RMB             reduce using rule 43 (while_body -> LMB expression RMB .)


state 155

    (37) catch -> CATCH LSB IDENTIFIER . RSB LMB expression RMB

    RSB             shift and go to state 183


state 156

    (55) class_def -> CLASS IDENTIFIER LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside SEMI
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

    RMB             shift and go to state 184
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    variable_declaration           shift and go to state 37
    variable_value_change          shift and go to state 38
    if_statement                   shift and go to state 39
    function                       shift and go to state 40
    function_call                  shift and go to state 41
    repeat                         shift and go to state 42
    for                            shift and go to state 43
    while                          shift and go to state 44
    use                            shift and go to state 45
    error_handling                 shift and go to state 46
    variable_alone                 shift and go to state 47
    global_variable                shift and go to state 48
    class_def                      shift and go to state 49
    debug                          shift and go to state 50
    function_class                 shift and go to state 51
    inside                         shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 157

    (69) if_statement_1 -> IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 185


state 158

    (73) condition -> condition LB . calculate
    (75) condition -> condition LB . EQUAL calculate
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 187
    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    calculate                      shift and go to state 186

state 159

    (74) condition -> condition RB . calculate
    (76) condition -> condition RB . EQUAL calculate
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 189
    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    calculate                      shift and go to state 188

state 160

    (77) condition -> condition EQUAL . calculate
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    calculate                      shift and go to state 190

state 161

    (57) function_head -> FUNCTION IDENTIFIER LSB parameter . RSB
    (62) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 191
    COMMA           shift and go to state 145


state 162

    (58) function_head -> FUNCTION IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 192


state 163

    (45) repeat_head -> REPEAT LSB calculate RSB .

    LMB             reduce using rule 45 (repeat_head -> REPEAT LSB calculate RSB .)


state 164

    (39) for_head -> FOR LSB IDENTIFIER IN . IDENTIFIER RSB

    IDENTIFIER      shift and go to state 193


state 165

    (42) while_head -> WHILE LSB condition RSB .

    LMB             reduce using rule 42 (while_head -> WHILE LSB condition RSB .)


state 166

    (36) try -> TRY LMB expression RMB .

    CATCH           reduce using rule 36 (try -> TRY LMB expression RMB .)


state 167

    (85) variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .
    (88) calculate -> calculate . PLUS calculate
    (89) calculate -> calculate . MINUS calculate
    (91) calculate -> calculate . MUL calculate
    (92) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 85 (variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MUL             shift and go to state 139
    DIV             shift and go to state 140


state 168

    (51) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB . parameter RSB
    (52) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB . empty RSB
    (62) parameter -> . parameter COMMA calculate
    (63) parameter -> . calculate
    (100) empty -> .
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    RSB             reduce using rule 100 (empty -> .)
    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    parameter                      shift and go to state 194
    empty                          shift and go to state 195
    calculate                      shift and go to state 112

state 169

    (53) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter . RSB
    (62) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 196
    COMMA           shift and go to state 145


state 170

    (54) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 197


state 171

    (88) calculate -> calculate PLUS calculate .
    (88) calculate -> calculate . PLUS calculate
    (89) calculate -> calculate . MINUS calculate
    (91) calculate -> calculate . MUL calculate
    (92) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 88 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 88 (calculate -> calculate PLUS calculate .)
    SEMI            reduce using rule 88 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 88 (calculate -> calculate PLUS calculate .)
    DOT             reduce using rule 88 (calculate -> calculate PLUS calculate .)
    COMMA           reduce using rule 88 (calculate -> calculate PLUS calculate .)
    LB              reduce using rule 88 (calculate -> calculate PLUS calculate .)
    RB              reduce using rule 88 (calculate -> calculate PLUS calculate .)
    EQUAL           reduce using rule 88 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 139
    DIV             shift and go to state 140

  ! MUL             [ reduce using rule 88 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 88 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 137 ]
  ! MINUS           [ shift and go to state 138 ]


state 172

    (89) calculate -> calculate MINUS calculate .
    (88) calculate -> calculate . PLUS calculate
    (89) calculate -> calculate . MINUS calculate
    (91) calculate -> calculate . MUL calculate
    (92) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 89 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 89 (calculate -> calculate MINUS calculate .)
    SEMI            reduce using rule 89 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 89 (calculate -> calculate MINUS calculate .)
    DOT             reduce using rule 89 (calculate -> calculate MINUS calculate .)
    COMMA           reduce using rule 89 (calculate -> calculate MINUS calculate .)
    LB              reduce using rule 89 (calculate -> calculate MINUS calculate .)
    RB              reduce using rule 89 (calculate -> calculate MINUS calculate .)
    EQUAL           reduce using rule 89 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 139
    DIV             shift and go to state 140

  ! MUL             [ reduce using rule 89 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 89 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 137 ]
  ! MINUS           [ shift and go to state 138 ]


state 173

    (91) calculate -> calculate MUL calculate .
    (88) calculate -> calculate . PLUS calculate
    (89) calculate -> calculate . MINUS calculate
    (91) calculate -> calculate . MUL calculate
    (92) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 91 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 91 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 91 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 91 (calculate -> calculate MUL calculate .)
    SEMI            reduce using rule 91 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 91 (calculate -> calculate MUL calculate .)
    DOT             reduce using rule 91 (calculate -> calculate MUL calculate .)
    COMMA           reduce using rule 91 (calculate -> calculate MUL calculate .)
    LB              reduce using rule 91 (calculate -> calculate MUL calculate .)
    RB              reduce using rule 91 (calculate -> calculate MUL calculate .)
    EQUAL           reduce using rule 91 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 137 ]
  ! MINUS           [ shift and go to state 138 ]
  ! MUL             [ shift and go to state 139 ]
  ! DIV             [ shift and go to state 140 ]


state 174

    (92) calculate -> calculate DIV calculate .
    (88) calculate -> calculate . PLUS calculate
    (89) calculate -> calculate . MINUS calculate
    (91) calculate -> calculate . MUL calculate
    (92) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 92 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 92 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 92 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 92 (calculate -> calculate DIV calculate .)
    SEMI            reduce using rule 92 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 92 (calculate -> calculate DIV calculate .)
    DOT             reduce using rule 92 (calculate -> calculate DIV calculate .)
    COMMA           reduce using rule 92 (calculate -> calculate DIV calculate .)
    LB              reduce using rule 92 (calculate -> calculate DIV calculate .)
    RB              reduce using rule 92 (calculate -> calculate DIV calculate .)
    EQUAL           reduce using rule 92 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 137 ]
  ! MINUS           [ shift and go to state 138 ]
  ! MUL             [ shift and go to state 139 ]
  ! DIV             [ shift and go to state 140 ]


state 175

    (99) calculate -> LSB calculate RSB .

    PLUS            reduce using rule 99 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 99 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 99 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 99 (calculate -> LSB calculate RSB .)
    SEMI            reduce using rule 99 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 99 (calculate -> LSB calculate RSB .)
    DOT             reduce using rule 99 (calculate -> LSB calculate RSB .)
    COMMA           reduce using rule 99 (calculate -> LSB calculate RSB .)
    LB              reduce using rule 99 (calculate -> LSB calculate RSB .)
    RB              reduce using rule 99 (calculate -> LSB calculate RSB .)
    EQUAL           reduce using rule 99 (calculate -> LSB calculate RSB .)


state 176

    (47) inside -> IDENTIFIER LSB parameter RSB DOT . IDENTIFIER LSB parameter RSB

    IDENTIFIER      shift and go to state 198


state 177

    (49) inside -> IDENTIFIER LSB parameter DOT IDENTIFIER .

    SEMI            reduce using rule 49 (inside -> IDENTIFIER LSB parameter DOT IDENTIFIER .)


state 178

    (62) parameter -> parameter COMMA calculate .
    (88) calculate -> calculate . PLUS calculate
    (89) calculate -> calculate . MINUS calculate
    (91) calculate -> calculate . MUL calculate
    (92) calculate -> calculate . DIV calculate

    RSB             reduce using rule 62 (parameter -> parameter COMMA calculate .)
    DOT             reduce using rule 62 (parameter -> parameter COMMA calculate .)
    COMMA           reduce using rule 62 (parameter -> parameter COMMA calculate .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MUL             shift and go to state 139
    DIV             shift and go to state 140


state 179

    (48) inside -> IDENTIFIER DOT IDENTIFIER LSB parameter . RSB
    (62) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 199
    COMMA           shift and go to state 145


state 180

    (71) if_statement_2 -> if_statement_2 ELSE IF LSB . condition RSB LMB expression RMB
    (73) condition -> . condition LB calculate
    (74) condition -> . condition RB calculate
    (75) condition -> . condition LB EQUAL calculate
    (76) condition -> . condition RB EQUAL calculate
    (77) condition -> . condition EQUAL calculate
    (78) condition -> . calculate
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    condition                      shift and go to state 200
    calculate                      shift and go to state 126

state 181

    (70) if_statement_2 -> ELSE IF LSB condition . RSB LMB expression RMB
    (73) condition -> condition . LB calculate
    (74) condition -> condition . RB calculate
    (75) condition -> condition . LB EQUAL calculate
    (76) condition -> condition . RB EQUAL calculate
    (77) condition -> condition . EQUAL calculate

    RSB             shift and go to state 201
    LB              shift and go to state 158
    RB              shift and go to state 159
    EQUAL           shift and go to state 160


state 182

    (72) if_statement_3 -> ELSE LMB expression RMB .

    VAR             reduce using rule 72 (if_statement_3 -> ELSE LMB expression RMB .)
    IDENTIFIER      reduce using rule 72 (if_statement_3 -> ELSE LMB expression RMB .)
    USE             reduce using rule 72 (if_statement_3 -> ELSE LMB expression RMB .)
    GLOBAL          reduce using rule 72 (if_statement_3 -> ELSE LMB expression RMB .)
    CLASS           reduce using rule 72 (if_statement_3 -> ELSE LMB expression RMB .)
    IF              reduce using rule 72 (if_statement_3 -> ELSE LMB expression RMB .)
    FUNCTION        reduce using rule 72 (if_statement_3 -> ELSE LMB expression RMB .)
    REPEAT          reduce using rule 72 (if_statement_3 -> ELSE LMB expression RMB .)
    FOR             reduce using rule 72 (if_statement_3 -> ELSE LMB expression RMB .)
    WHILE           reduce using rule 72 (if_statement_3 -> ELSE LMB expression RMB .)
    TRY             reduce using rule 72 (if_statement_3 -> ELSE LMB expression RMB .)
    $end            reduce using rule 72 (if_statement_3 -> ELSE LMB expression RMB .)
    RMB             reduce using rule 72 (if_statement_3 -> ELSE LMB expression RMB .)


state 183

    (37) catch -> CATCH LSB IDENTIFIER RSB . LMB expression RMB

    LMB             shift and go to state 202


state 184

    (55) class_def -> CLASS IDENTIFIER LMB expression RMB .

    VAR             reduce using rule 55 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    IDENTIFIER      reduce using rule 55 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    USE             reduce using rule 55 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    GLOBAL          reduce using rule 55 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    CLASS           reduce using rule 55 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    IF              reduce using rule 55 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    FUNCTION        reduce using rule 55 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    REPEAT          reduce using rule 55 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    FOR             reduce using rule 55 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    WHILE           reduce using rule 55 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    TRY             reduce using rule 55 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    $end            reduce using rule 55 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    RMB             reduce using rule 55 (class_def -> CLASS IDENTIFIER LMB expression RMB .)


state 185

    (69) if_statement_1 -> IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside SEMI
    (34) expression -> . empty
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (100) empty -> .
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 100 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! VAR             [ reduce using rule 100 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 100 (empty -> .) ]
  ! USE             [ reduce using rule 100 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 100 (empty -> .) ]
  ! CLASS           [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 100 (empty -> .) ]
  ! REPEAT          [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! TRY             [ reduce using rule 100 (empty -> .) ]

    expression                     shift and go to state 203
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside                         shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 186

    (73) condition -> condition LB calculate .
    (88) calculate -> calculate . PLUS calculate
    (89) calculate -> calculate . MINUS calculate
    (91) calculate -> calculate . MUL calculate
    (92) calculate -> calculate . DIV calculate

    RSB             reduce using rule 73 (condition -> condition LB calculate .)
    LB              reduce using rule 73 (condition -> condition LB calculate .)
    RB              reduce using rule 73 (condition -> condition LB calculate .)
    EQUAL           reduce using rule 73 (condition -> condition LB calculate .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MUL             shift and go to state 139
    DIV             shift and go to state 140


state 187

    (75) condition -> condition LB EQUAL . calculate
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    calculate                      shift and go to state 204

state 188

    (74) condition -> condition RB calculate .
    (88) calculate -> calculate . PLUS calculate
    (89) calculate -> calculate . MINUS calculate
    (91) calculate -> calculate . MUL calculate
    (92) calculate -> calculate . DIV calculate

    RSB             reduce using rule 74 (condition -> condition RB calculate .)
    LB              reduce using rule 74 (condition -> condition RB calculate .)
    RB              reduce using rule 74 (condition -> condition RB calculate .)
    EQUAL           reduce using rule 74 (condition -> condition RB calculate .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MUL             shift and go to state 139
    DIV             shift and go to state 140


state 189

    (76) condition -> condition RB EQUAL . calculate
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    calculate                      shift and go to state 205

state 190

    (77) condition -> condition EQUAL calculate .
    (88) calculate -> calculate . PLUS calculate
    (89) calculate -> calculate . MINUS calculate
    (91) calculate -> calculate . MUL calculate
    (92) calculate -> calculate . DIV calculate

    RSB             reduce using rule 77 (condition -> condition EQUAL calculate .)
    LB              reduce using rule 77 (condition -> condition EQUAL calculate .)
    RB              reduce using rule 77 (condition -> condition EQUAL calculate .)
    EQUAL           reduce using rule 77 (condition -> condition EQUAL calculate .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MUL             shift and go to state 139
    DIV             shift and go to state 140


state 191

    (57) function_head -> FUNCTION IDENTIFIER LSB parameter RSB .

    LMB             reduce using rule 57 (function_head -> FUNCTION IDENTIFIER LSB parameter RSB .)


state 192

    (58) function_head -> FUNCTION IDENTIFIER LSB empty RSB .

    LMB             reduce using rule 58 (function_head -> FUNCTION IDENTIFIER LSB empty RSB .)


state 193

    (39) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER . RSB

    RSB             shift and go to state 206


state 194

    (51) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter . RSB
    (62) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 207
    COMMA           shift and go to state 145


state 195

    (52) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 208


state 196

    (53) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .

    SEMI            reduce using rule 53 (function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .)


state 197

    (54) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .

    SEMI            reduce using rule 54 (function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .)


state 198

    (47) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER . LSB parameter RSB

    LSB             shift and go to state 209


state 199

    (48) inside -> IDENTIFIER DOT IDENTIFIER LSB parameter RSB .

    SEMI            reduce using rule 48 (inside -> IDENTIFIER DOT IDENTIFIER LSB parameter RSB .)


state 200

    (71) if_statement_2 -> if_statement_2 ELSE IF LSB condition . RSB LMB expression RMB
    (73) condition -> condition . LB calculate
    (74) condition -> condition . RB calculate
    (75) condition -> condition . LB EQUAL calculate
    (76) condition -> condition . RB EQUAL calculate
    (77) condition -> condition . EQUAL calculate

    RSB             shift and go to state 210
    LB              shift and go to state 158
    RB              shift and go to state 159
    EQUAL           shift and go to state 160


state 201

    (70) if_statement_2 -> ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 211


state 202

    (37) catch -> CATCH LSB IDENTIFIER RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside SEMI
    (34) expression -> . empty
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (100) empty -> .
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 100 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! VAR             [ reduce using rule 100 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 100 (empty -> .) ]
  ! USE             [ reduce using rule 100 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 100 (empty -> .) ]
  ! CLASS           [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 100 (empty -> .) ]
  ! REPEAT          [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! TRY             [ reduce using rule 100 (empty -> .) ]

    expression                     shift and go to state 212
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside                         shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 203

    (69) if_statement_1 -> IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside SEMI
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

    RMB             shift and go to state 213
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    variable_declaration           shift and go to state 37
    variable_value_change          shift and go to state 38
    if_statement                   shift and go to state 39
    function                       shift and go to state 40
    function_call                  shift and go to state 41
    repeat                         shift and go to state 42
    for                            shift and go to state 43
    while                          shift and go to state 44
    use                            shift and go to state 45
    error_handling                 shift and go to state 46
    variable_alone                 shift and go to state 47
    global_variable                shift and go to state 48
    class_def                      shift and go to state 49
    debug                          shift and go to state 50
    function_class                 shift and go to state 51
    inside                         shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 204

    (75) condition -> condition LB EQUAL calculate .
    (88) calculate -> calculate . PLUS calculate
    (89) calculate -> calculate . MINUS calculate
    (91) calculate -> calculate . MUL calculate
    (92) calculate -> calculate . DIV calculate

    RSB             reduce using rule 75 (condition -> condition LB EQUAL calculate .)
    LB              reduce using rule 75 (condition -> condition LB EQUAL calculate .)
    RB              reduce using rule 75 (condition -> condition LB EQUAL calculate .)
    EQUAL           reduce using rule 75 (condition -> condition LB EQUAL calculate .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MUL             shift and go to state 139
    DIV             shift and go to state 140


state 205

    (76) condition -> condition RB EQUAL calculate .
    (88) calculate -> calculate . PLUS calculate
    (89) calculate -> calculate . MINUS calculate
    (91) calculate -> calculate . MUL calculate
    (92) calculate -> calculate . DIV calculate

    RSB             reduce using rule 76 (condition -> condition RB EQUAL calculate .)
    LB              reduce using rule 76 (condition -> condition RB EQUAL calculate .)
    RB              reduce using rule 76 (condition -> condition RB EQUAL calculate .)
    EQUAL           reduce using rule 76 (condition -> condition RB EQUAL calculate .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MUL             shift and go to state 139
    DIV             shift and go to state 140


state 206

    (39) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .

    LMB             reduce using rule 39 (for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .)


state 207

    (51) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .

    SEMI            reduce using rule 51 (function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .)


state 208

    (52) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .

    SEMI            reduce using rule 52 (function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .)


state 209

    (47) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB . parameter RSB
    (62) parameter -> . parameter COMMA calculate
    (63) parameter -> . calculate
    (88) calculate -> . calculate PLUS calculate
    (89) calculate -> . calculate MINUS calculate
    (90) calculate -> . MINUS calculate
    (91) calculate -> . calculate MUL calculate
    (92) calculate -> . calculate DIV calculate
    (93) calculate -> . INT
    (94) calculate -> . FLOAT
    (95) calculate -> . STRING
    (96) calculate -> . IDENTIFIER
    (97) calculate -> . IDENTIFIER LIST
    (98) calculate -> . LIST
    (99) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 105
    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108
    IDENTIFIER      shift and go to state 109
    LIST            shift and go to state 113
    LSB             shift and go to state 104

    parameter                      shift and go to state 214
    calculate                      shift and go to state 112

state 210

    (71) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 215


state 211

    (70) if_statement_2 -> ELSE IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside SEMI
    (34) expression -> . empty
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (100) empty -> .
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 100 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! VAR             [ reduce using rule 100 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 100 (empty -> .) ]
  ! USE             [ reduce using rule 100 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 100 (empty -> .) ]
  ! CLASS           [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 100 (empty -> .) ]
  ! REPEAT          [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! TRY             [ reduce using rule 100 (empty -> .) ]

    expression                     shift and go to state 216
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside                         shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 212

    (37) catch -> CATCH LSB IDENTIFIER RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside SEMI
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

    RMB             shift and go to state 217
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    variable_declaration           shift and go to state 37
    variable_value_change          shift and go to state 38
    if_statement                   shift and go to state 39
    function                       shift and go to state 40
    function_call                  shift and go to state 41
    repeat                         shift and go to state 42
    for                            shift and go to state 43
    while                          shift and go to state 44
    use                            shift and go to state 45
    error_handling                 shift and go to state 46
    variable_alone                 shift and go to state 47
    global_variable                shift and go to state 48
    class_def                      shift and go to state 49
    debug                          shift and go to state 50
    function_class                 shift and go to state 51
    inside                         shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 213

    (69) if_statement_1 -> IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 69 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 69 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 69 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 69 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 69 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 69 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 69 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 69 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 69 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 69 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 69 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 69 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 69 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 69 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)


state 214

    (47) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter . RSB
    (62) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 218
    COMMA           shift and go to state 145


state 215

    (71) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB . expression RMB
    (2) expression -> . expression variable_declaration SEMI
    (3) expression -> . expression variable_value_change SEMI
    (4) expression -> . expression if_statement
    (5) expression -> . expression function
    (6) expression -> . expression function_call SEMI
    (7) expression -> . expression repeat
    (8) expression -> . expression for
    (9) expression -> . expression while
    (10) expression -> . expression use SEMI
    (11) expression -> . expression error_handling
    (12) expression -> . expression variable_alone SEMI
    (13) expression -> . expression global_variable SEMI
    (14) expression -> . expression class_def
    (15) expression -> . expression debug SEMI
    (16) expression -> . expression function_class SEMI
    (17) expression -> . expression inside SEMI
    (18) expression -> . variable_declaration SEMI
    (19) expression -> . variable_value_change SEMI
    (20) expression -> . if_statement
    (21) expression -> . function
    (22) expression -> . function_call SEMI
    (23) expression -> . repeat
    (24) expression -> . for
    (25) expression -> . while
    (26) expression -> . use SEMI
    (27) expression -> . error_handling
    (28) expression -> . variable_alone SEMI
    (29) expression -> . global_variable SEMI
    (30) expression -> . class_def
    (31) expression -> . debug SEMI
    (32) expression -> . function_class SEMI
    (33) expression -> . inside SEMI
    (34) expression -> . empty
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (100) empty -> .
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    RMB             reduce using rule 100 (empty -> .)
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

  ! VAR             [ reduce using rule 100 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 100 (empty -> .) ]
  ! USE             [ reduce using rule 100 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 100 (empty -> .) ]
  ! CLASS           [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 100 (empty -> .) ]
  ! REPEAT          [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! TRY             [ reduce using rule 100 (empty -> .) ]

    expression                     shift and go to state 219
    variable_declaration           shift and go to state 3
    variable_value_change          shift and go to state 4
    if_statement                   shift and go to state 5
    function                       shift and go to state 6
    function_call                  shift and go to state 7
    repeat                         shift and go to state 8
    for                            shift and go to state 9
    while                          shift and go to state 10
    use                            shift and go to state 11
    error_handling                 shift and go to state 12
    variable_alone                 shift and go to state 13
    global_variable                shift and go to state 14
    class_def                      shift and go to state 15
    debug                          shift and go to state 16
    function_class                 shift and go to state 17
    inside                         shift and go to state 18
    empty                          shift and go to state 19
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 216

    (70) if_statement_2 -> ELSE IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside SEMI
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

    RMB             shift and go to state 220
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    variable_declaration           shift and go to state 37
    variable_value_change          shift and go to state 38
    if_statement                   shift and go to state 39
    function                       shift and go to state 40
    function_call                  shift and go to state 41
    repeat                         shift and go to state 42
    for                            shift and go to state 43
    while                          shift and go to state 44
    use                            shift and go to state 45
    error_handling                 shift and go to state 46
    variable_alone                 shift and go to state 47
    global_variable                shift and go to state 48
    class_def                      shift and go to state 49
    debug                          shift and go to state 50
    function_class                 shift and go to state 51
    inside                         shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 217

    (37) catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .

    VAR             reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    USE             reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    GLOBAL          reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    CLASS           reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IF              reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FUNCTION        reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    REPEAT          reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FOR             reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    WHILE           reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    TRY             reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    $end            reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    RMB             reduce using rule 37 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)


state 218

    (47) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB .

    SEMI            reduce using rule 47 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB .)


state 219

    (71) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression . RMB
    (2) expression -> expression . variable_declaration SEMI
    (3) expression -> expression . variable_value_change SEMI
    (4) expression -> expression . if_statement
    (5) expression -> expression . function
    (6) expression -> expression . function_call SEMI
    (7) expression -> expression . repeat
    (8) expression -> expression . for
    (9) expression -> expression . while
    (10) expression -> expression . use SEMI
    (11) expression -> expression . error_handling
    (12) expression -> expression . variable_alone SEMI
    (13) expression -> expression . global_variable SEMI
    (14) expression -> expression . class_def
    (15) expression -> expression . debug SEMI
    (16) expression -> expression . function_class SEMI
    (17) expression -> expression . inside SEMI
    (85) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (86) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (87) variable_declaration -> . VAR IDENTIFIER
    (83) variable_value_change -> . IDENTIFIER EQUAL LIST
    (84) variable_value_change -> . IDENTIFIER EQUAL calculate
    (65) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (66) if_statement -> . if_statement_1 if_statement_2
    (67) if_statement -> . if_statement_1 if_statement_3
    (68) if_statement -> . if_statement_1
    (56) function -> . function_head function_body
    (60) function_call -> . IDENTIFIER LSB parameter RSB
    (61) function_call -> . IDENTIFIER LSB empty RSB
    (44) repeat -> . repeat_head repeat_body
    (38) for -> . for_head for_body
    (41) while -> . while_head while_body
    (79) use -> . USE use_params
    (35) error_handling -> . try catch
    (82) variable_alone -> . IDENTIFIER
    (81) global_variable -> . GLOBAL IDENTIFIER
    (55) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (64) debug -> . USE DEBUG
    (51) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (52) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (53) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (54) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (47) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (48) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (49) inside -> . IDENTIFIER LSB parameter DOT IDENTIFIER
    (50) inside -> . IDENTIFIER DOT IDENTIFIER
    (69) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (57) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (58) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (45) repeat_head -> . REPEAT LSB calculate RSB
    (39) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (42) while_head -> . WHILE LSB condition RSB
    (36) try -> . TRY LMB expression RMB

    RMB             shift and go to state 221
    VAR             shift and go to state 20
    IDENTIFIER      shift and go to state 21
    USE             shift and go to state 27
    GLOBAL          shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    FUNCTION        shift and go to state 32
    REPEAT          shift and go to state 33
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    TRY             shift and go to state 36

    variable_declaration           shift and go to state 37
    variable_value_change          shift and go to state 38
    if_statement                   shift and go to state 39
    function                       shift and go to state 40
    function_call                  shift and go to state 41
    repeat                         shift and go to state 42
    for                            shift and go to state 43
    while                          shift and go to state 44
    use                            shift and go to state 45
    error_handling                 shift and go to state 46
    variable_alone                 shift and go to state 47
    global_variable                shift and go to state 48
    class_def                      shift and go to state 49
    debug                          shift and go to state 50
    function_class                 shift and go to state 51
    inside                         shift and go to state 52
    if_statement_1                 shift and go to state 22
    function_head                  shift and go to state 23
    repeat_head                    shift and go to state 24
    for_head                       shift and go to state 25
    while_head                     shift and go to state 26
    try                            shift and go to state 28

state 220

    (70) if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 70 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 70 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 70 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 70 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 70 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 70 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 70 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 70 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 70 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 70 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 70 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 70 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 70 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 70 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)


state 221

    (71) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 71 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 71 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 71 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 71 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 71 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 71 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 71 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 71 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 71 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 71 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 71 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 71 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 71 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 71 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for USE in state 0 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 70 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 70 resolved as shift
WARNING: shift/reduce conflict for USE in state 70 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 70 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 70 resolved as shift
WARNING: shift/reduce conflict for IF in state 70 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 70 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 70 resolved as shift
WARNING: shift/reduce conflict for FOR in state 70 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 70 resolved as shift
WARNING: shift/reduce conflict for TRY in state 70 resolved as shift
WARNING: shift/reduce conflict for VAR in state 72 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 72 resolved as shift
WARNING: shift/reduce conflict for USE in state 72 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 72 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 72 resolved as shift
WARNING: shift/reduce conflict for IF in state 72 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 72 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 72 resolved as shift
WARNING: shift/reduce conflict for FOR in state 72 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 72 resolved as shift
WARNING: shift/reduce conflict for TRY in state 72 resolved as shift
WARNING: shift/reduce conflict for VAR in state 74 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 74 resolved as shift
WARNING: shift/reduce conflict for USE in state 74 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 74 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 74 resolved as shift
WARNING: shift/reduce conflict for IF in state 74 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 74 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 74 resolved as shift
WARNING: shift/reduce conflict for FOR in state 74 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 74 resolved as shift
WARNING: shift/reduce conflict for TRY in state 74 resolved as shift
WARNING: shift/reduce conflict for VAR in state 76 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 76 resolved as shift
WARNING: shift/reduce conflict for USE in state 76 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 76 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 76 resolved as shift
WARNING: shift/reduce conflict for IF in state 76 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 76 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 76 resolved as shift
WARNING: shift/reduce conflict for FOR in state 76 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 76 resolved as shift
WARNING: shift/reduce conflict for TRY in state 76 resolved as shift
WARNING: shift/reduce conflict for VAR in state 89 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 89 resolved as shift
WARNING: shift/reduce conflict for USE in state 89 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 89 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 89 resolved as shift
WARNING: shift/reduce conflict for IF in state 89 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 89 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 89 resolved as shift
WARNING: shift/reduce conflict for FOR in state 89 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 89 resolved as shift
WARNING: shift/reduce conflict for TRY in state 89 resolved as shift
WARNING: shift/reduce conflict for VAR in state 118 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 118 resolved as shift
WARNING: shift/reduce conflict for USE in state 118 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 118 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 118 resolved as shift
WARNING: shift/reduce conflict for IF in state 118 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 118 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 118 resolved as shift
WARNING: shift/reduce conflict for FOR in state 118 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 118 resolved as shift
WARNING: shift/reduce conflict for TRY in state 118 resolved as shift
WARNING: shift/reduce conflict for VAR in state 124 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 124 resolved as shift
WARNING: shift/reduce conflict for USE in state 124 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 124 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 124 resolved as shift
WARNING: shift/reduce conflict for IF in state 124 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 124 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 124 resolved as shift
WARNING: shift/reduce conflict for FOR in state 124 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 124 resolved as shift
WARNING: shift/reduce conflict for TRY in state 124 resolved as shift
WARNING: shift/reduce conflict for VAR in state 185 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 185 resolved as shift
WARNING: shift/reduce conflict for USE in state 185 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 185 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 185 resolved as shift
WARNING: shift/reduce conflict for IF in state 185 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 185 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 185 resolved as shift
WARNING: shift/reduce conflict for FOR in state 185 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 185 resolved as shift
WARNING: shift/reduce conflict for TRY in state 185 resolved as shift
WARNING: shift/reduce conflict for VAR in state 202 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 202 resolved as shift
WARNING: shift/reduce conflict for USE in state 202 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 202 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 202 resolved as shift
WARNING: shift/reduce conflict for IF in state 202 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 202 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 202 resolved as shift
WARNING: shift/reduce conflict for FOR in state 202 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 202 resolved as shift
WARNING: shift/reduce conflict for TRY in state 202 resolved as shift
WARNING: shift/reduce conflict for VAR in state 211 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 211 resolved as shift
WARNING: shift/reduce conflict for USE in state 211 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 211 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 211 resolved as shift
WARNING: shift/reduce conflict for IF in state 211 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 211 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 211 resolved as shift
WARNING: shift/reduce conflict for FOR in state 211 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 211 resolved as shift
WARNING: shift/reduce conflict for TRY in state 211 resolved as shift
WARNING: shift/reduce conflict for VAR in state 215 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 215 resolved as shift
WARNING: shift/reduce conflict for USE in state 215 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 215 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 215 resolved as shift
WARNING: shift/reduce conflict for IF in state 215 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 215 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 215 resolved as shift
WARNING: shift/reduce conflict for FOR in state 215 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 215 resolved as shift
WARNING: shift/reduce conflict for TRY in state 215 resolved as shift
WARNING: reduce/reduce conflict in state 102 resolved using rule (variable_value_change -> IDENTIFIER EQUAL LIST)
WARNING: rejected rule (calculate -> LIST) in state 102
