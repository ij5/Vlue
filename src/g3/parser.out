Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    INPUT
    PRINT
    PYTHON
    SLICE

Grammar

Rule 0     S' -> root
Rule 1     root -> exex
Rule 2     exex -> exex expression
Rule 3     exex -> exex exp
Rule 4     exex -> expression
Rule 5     exex -> exp
Rule 6     exp -> <empty>
Rule 7     expression -> variable_declaration SEMI
Rule 8     expression -> variable_value_change SEMI
Rule 9     expression -> if_statement
Rule 10    expression -> function
Rule 11    expression -> function_call SEMI
Rule 12    expression -> repeat
Rule 13    expression -> for
Rule 14    expression -> while
Rule 15    expression -> use SEMI
Rule 16    expression -> error_handling
Rule 17    expression -> variable_alone SEMI
Rule 18    expression -> global_variable SEMI
Rule 19    expression -> class_def
Rule 20    expression -> debug SEMI
Rule 21    expression -> function_class SEMI
Rule 22    expression -> inside_root SEMI
Rule 23    expression -> empty
Rule 24    error_handling -> try catch
Rule 25    try -> TRY LMB expression RMB
Rule 26    catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB
Rule 27    for -> for_head for_body
Rule 28    for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB
Rule 29    for_body -> LMB expression RMB
Rule 30    while -> while_head while_body
Rule 31    while_head -> WHILE LSB condition RSB
Rule 32    while_body -> LMB expression RMB
Rule 33    repeat -> repeat_head repeat_body
Rule 34    repeat_head -> REPEAT LSB calculate RSB
Rule 35    repeat_body -> LMB expression RMB
Rule 36    inside_root -> inside
Rule 37    inside_root -> inside DOT IDENTIFIER LSB parameter RSB
Rule 38    inside -> DOT IDENTIFIER LSB empty RSB
Rule 39    inside -> inside DOT IDENTIFIER
Rule 40    inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
Rule 41    inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
Rule 42    inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
Rule 43    inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
Rule 44    inside -> IDENTIFIER DOT IDENTIFIER LSB parameter RSB
Rule 45    inside -> IDENTIFIER DOT IDENTIFIER LSB empty RSB
Rule 46    inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER
Rule 47    inside -> IDENTIFIER DOT IDENTIFIER
Rule 48    function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
Rule 49    function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
Rule 50    function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
Rule 51    function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
Rule 52    class_def -> CLASS IDENTIFIER LMB expression RMB
Rule 53    function -> function_head function_body
Rule 54    function_head -> FUNCTION IDENTIFIER LSB parameter RSB
Rule 55    function_head -> FUNCTION IDENTIFIER LSB empty RSB
Rule 56    function_body -> LMB expression RMB
Rule 57    function_call -> IDENTIFIER LSB parameter RSB
Rule 58    function_call -> IDENTIFIER LSB empty RSB
Rule 59    parameter -> parameter COMMA calculate
Rule 60    parameter -> calculate
Rule 61    debug -> USE DEBUG
Rule 62    if_statement -> if_statement_1 if_statement_2 if_statement_3
Rule 63    if_statement -> if_statement_1 if_statement_2
Rule 64    if_statement -> if_statement_1 if_statement_3
Rule 65    if_statement -> if_statement_1
Rule 66    if_statement_1 -> IF LSB condition RSB LMB expression RMB
Rule 67    if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB
Rule 68    if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
Rule 69    if_statement_3 -> ELSE LMB expression RMB
Rule 70    condition -> condition LB calculate
Rule 71    condition -> condition RB calculate
Rule 72    condition -> condition LB EQUAL calculate
Rule 73    condition -> condition RB EQUAL calculate
Rule 74    condition -> condition EQUAL calculate
Rule 75    condition -> calculate
Rule 76    use -> USE use_params
Rule 77    use_params -> IDENTIFIER
Rule 78    global_variable -> GLOBAL IDENTIFIER
Rule 79    variable_alone -> IDENTIFIER
Rule 80    variable_value_change -> IDENTIFIER EQUAL LIST
Rule 81    variable_value_change -> IDENTIFIER EQUAL calculate
Rule 82    variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate
Rule 83    variable_declaration -> VAR IDENTIFIER EQUAL calculate
Rule 84    variable_declaration -> VAR IDENTIFIER
Rule 85    calculate -> calculate PLUS calculate
Rule 86    calculate -> calculate MINUS calculate
Rule 87    calculate -> MINUS calculate
Rule 88    calculate -> calculate MUL calculate
Rule 89    calculate -> calculate DIV calculate
Rule 90    calculate -> INT
Rule 91    calculate -> FLOAT
Rule 92    calculate -> STRING
Rule 93    calculate -> IDENTIFIER
Rule 94    calculate -> IDENTIFIER LIST
Rule 95    calculate -> LIST
Rule 96    calculate -> LSB calculate RSB
Rule 97    empty -> <empty>

Terminals, with rules where they appear

CATCH                : 26
CLASS                : 52
COLON                : 
COMMA                : 59
DEBUG                : 61
DIV                  : 89
DOT                  : 37 38 39 40 41 42 43 44 45 46 47
ELSE                 : 67 68 69
EQUAL                : 48 49 50 51 72 73 74 80 81 82 83
FLOAT                : 91
FOR                  : 28
FUNCTION             : 54 55
GLOBAL               : 78
IDENTIFIER           : 26 28 28 37 38 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 54 55 57 58 77 78 79 80 81 82 83 84 93 94
IF                   : 66 67 68
IN                   : 28
INPUT                : 
INT                  : 90
LB                   : 70 72
LIST                 : 80 82 94 95
LMB                  : 25 26 29 32 35 52 56 66 67 68 69
LSB                  : 26 28 31 34 37 38 40 40 41 41 42 42 43 43 44 45 46 48 49 50 51 54 55 57 58 66 67 68 96
MINUS                : 86 87
MUL                  : 88
PLUS                 : 85
PRINT                : 
PYTHON               : 
RB                   : 71 73
REPEAT               : 34
RMB                  : 25 26 29 32 35 52 56 66 67 68 69
RSB                  : 26 28 31 34 37 38 40 40 41 41 42 42 43 43 44 45 46 48 49 50 51 54 55 57 58 66 67 68 96
SEMI                 : 7 8 11 15 17 18 20 21 22
SLICE                : 
STRING               : 92
TRY                  : 25
USE                  : 61 76
VAR                  : 48 49 82 83 84
WHILE                : 31
error                : 

Nonterminals, with rules where they appear

calculate            : 34 59 60 70 71 72 73 74 75 81 82 83 85 85 86 86 87 88 88 89 89 96
catch                : 24
class_def            : 19
condition            : 31 66 67 68 70 71 72 73 74
debug                : 20
empty                : 23 38 41 41 42 43 45 49 51 55 58
error_handling       : 16
exex                 : 1 2 3
exp                  : 3 5
expression           : 2 4 25 26 29 32 35 52 56 66 67 68 69
for                  : 13
for_body             : 27
for_head             : 27
function             : 10
function_body        : 53
function_call        : 11
function_class       : 21
function_head        : 53
global_variable      : 18
if_statement         : 9
if_statement_1       : 62 63 64 65
if_statement_2       : 62 63 68
if_statement_3       : 62 64
inside               : 36 37 39
inside_root          : 22
parameter            : 37 40 40 42 43 44 46 48 50 54 57 59
repeat               : 12
repeat_body          : 33
repeat_head          : 33
root                 : 0
try                  : 24
use                  : 15
use_params           : 76
variable_alone       : 17
variable_declaration : 7
variable_value_change : 8
while                : 14
while_body           : 30
while_head           : 30

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . exex
    (2) exex -> . exex expression
    (3) exex -> . exex exp
    (4) exex -> . expression
    (5) exex -> . exp
    (7) expression -> . variable_declaration SEMI
    (8) expression -> . variable_value_change SEMI
    (9) expression -> . if_statement
    (10) expression -> . function
    (11) expression -> . function_call SEMI
    (12) expression -> . repeat
    (13) expression -> . for
    (14) expression -> . while
    (15) expression -> . use SEMI
    (16) expression -> . error_handling
    (17) expression -> . variable_alone SEMI
    (18) expression -> . global_variable SEMI
    (19) expression -> . class_def
    (20) expression -> . debug SEMI
    (21) expression -> . function_class SEMI
    (22) expression -> . inside_root SEMI
    (23) expression -> . empty
    (6) exp -> .
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (33) repeat -> . repeat_head repeat_body
    (27) for -> . for_head for_body
    (30) while -> . while_head while_body
    (76) use -> . USE use_params
    (24) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (36) inside_root -> . inside
    (37) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (34) repeat_head -> . REPEAT LSB calculate RSB
    (28) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (31) while_head -> . WHILE LSB condition RSB
    (25) try -> . TRY LMB expression RMB
    (38) inside -> . DOT IDENTIFIER LSB empty RSB
    (39) inside -> . inside DOT IDENTIFIER
    (40) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (41) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (42) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (43) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (44) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (45) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (46) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (47) inside -> . IDENTIFIER DOT IDENTIFIER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 6 (exp -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 6 (exp -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 6 (exp -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (exp -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (exp -> .)
  ! reduce/reduce conflict for TRY resolved using rule 6 (exp -> .)
  ! reduce/reduce conflict for DOT resolved using rule 6 (exp -> .)
  ! reduce/reduce conflict for $end resolved using rule 6 (exp -> .)
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    $end            reduce using rule 6 (exp -> .)
    VAR             shift and go to state 22
    IDENTIFIER      shift and go to state 23
    USE             shift and go to state 29
    GLOBAL          shift and go to state 31
    CLASS           shift and go to state 32
    IF              shift and go to state 35
    FUNCTION        shift and go to state 36
    REPEAT          shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39
    TRY             shift and go to state 40
    DOT             shift and go to state 34

  ! VAR             [ reduce using rule 6 (exp -> .) ]
  ! IDENTIFIER      [ reduce using rule 6 (exp -> .) ]
  ! USE             [ reduce using rule 6 (exp -> .) ]
  ! GLOBAL          [ reduce using rule 6 (exp -> .) ]
  ! CLASS           [ reduce using rule 6 (exp -> .) ]
  ! IF              [ reduce using rule 6 (exp -> .) ]
  ! FUNCTION        [ reduce using rule 6 (exp -> .) ]
  ! REPEAT          [ reduce using rule 6 (exp -> .) ]
  ! FOR             [ reduce using rule 6 (exp -> .) ]
  ! WHILE           [ reduce using rule 6 (exp -> .) ]
  ! TRY             [ reduce using rule 6 (exp -> .) ]
  ! DOT             [ reduce using rule 6 (exp -> .) ]
  ! VAR             [ reduce using rule 97 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 97 (empty -> .) ]
  ! USE             [ reduce using rule 97 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 97 (empty -> .) ]
  ! CLASS           [ reduce using rule 97 (empty -> .) ]
  ! IF              [ reduce using rule 97 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 97 (empty -> .) ]
  ! REPEAT          [ reduce using rule 97 (empty -> .) ]
  ! FOR             [ reduce using rule 97 (empty -> .) ]
  ! WHILE           [ reduce using rule 97 (empty -> .) ]
  ! TRY             [ reduce using rule 97 (empty -> .) ]
  ! DOT             [ reduce using rule 97 (empty -> .) ]
  ! $end            [ reduce using rule 97 (empty -> .) ]

    root                           shift and go to state 1
    exex                           shift and go to state 2
    expression                     shift and go to state 3
    exp                            shift and go to state 4
    variable_declaration           shift and go to state 5
    variable_value_change          shift and go to state 6
    if_statement                   shift and go to state 7
    function                       shift and go to state 8
    function_call                  shift and go to state 9
    repeat                         shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    use                            shift and go to state 13
    error_handling                 shift and go to state 14
    variable_alone                 shift and go to state 15
    global_variable                shift and go to state 16
    class_def                      shift and go to state 17
    debug                          shift and go to state 18
    function_class                 shift and go to state 19
    inside_root                    shift and go to state 20
    empty                          shift and go to state 21
    if_statement_1                 shift and go to state 24
    function_head                  shift and go to state 25
    repeat_head                    shift and go to state 26
    for_head                       shift and go to state 27
    while_head                     shift and go to state 28
    try                            shift and go to state 30
    inside                         shift and go to state 33

state 1

    (0) S' -> root .



state 2

    (1) root -> exex .
    (2) exex -> exex . expression
    (3) exex -> exex . exp
    (7) expression -> . variable_declaration SEMI
    (8) expression -> . variable_value_change SEMI
    (9) expression -> . if_statement
    (10) expression -> . function
    (11) expression -> . function_call SEMI
    (12) expression -> . repeat
    (13) expression -> . for
    (14) expression -> . while
    (15) expression -> . use SEMI
    (16) expression -> . error_handling
    (17) expression -> . variable_alone SEMI
    (18) expression -> . global_variable SEMI
    (19) expression -> . class_def
    (20) expression -> . debug SEMI
    (21) expression -> . function_class SEMI
    (22) expression -> . inside_root SEMI
    (23) expression -> . empty
    (6) exp -> .
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (33) repeat -> . repeat_head repeat_body
    (27) for -> . for_head for_body
    (30) while -> . while_head while_body
    (76) use -> . USE use_params
    (24) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (36) inside_root -> . inside
    (37) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (34) repeat_head -> . REPEAT LSB calculate RSB
    (28) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (31) while_head -> . WHILE LSB condition RSB
    (25) try -> . TRY LMB expression RMB
    (38) inside -> . DOT IDENTIFIER LSB empty RSB
    (39) inside -> . inside DOT IDENTIFIER
    (40) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (41) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (42) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (43) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (44) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (45) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (46) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (47) inside -> . IDENTIFIER DOT IDENTIFIER

  ! reduce/reduce conflict for $end resolved using rule 1 (root -> exex .)
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 6 (exp -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 6 (exp -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 6 (exp -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (exp -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (exp -> .)
  ! reduce/reduce conflict for TRY resolved using rule 6 (exp -> .)
  ! reduce/reduce conflict for DOT resolved using rule 6 (exp -> .)
  ! reduce/reduce conflict for $end resolved using rule 1 (root -> exex .)
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    $end            reduce using rule 1 (root -> exex .)
    VAR             shift and go to state 22
    IDENTIFIER      shift and go to state 23
    USE             shift and go to state 29
    GLOBAL          shift and go to state 31
    CLASS           shift and go to state 32
    IF              shift and go to state 35
    FUNCTION        shift and go to state 36
    REPEAT          shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39
    TRY             shift and go to state 40
    DOT             shift and go to state 34

  ! VAR             [ reduce using rule 6 (exp -> .) ]
  ! IDENTIFIER      [ reduce using rule 6 (exp -> .) ]
  ! USE             [ reduce using rule 6 (exp -> .) ]
  ! GLOBAL          [ reduce using rule 6 (exp -> .) ]
  ! CLASS           [ reduce using rule 6 (exp -> .) ]
  ! IF              [ reduce using rule 6 (exp -> .) ]
  ! FUNCTION        [ reduce using rule 6 (exp -> .) ]
  ! REPEAT          [ reduce using rule 6 (exp -> .) ]
  ! FOR             [ reduce using rule 6 (exp -> .) ]
  ! WHILE           [ reduce using rule 6 (exp -> .) ]
  ! TRY             [ reduce using rule 6 (exp -> .) ]
  ! DOT             [ reduce using rule 6 (exp -> .) ]
  ! $end            [ reduce using rule 6 (exp -> .) ]
  ! VAR             [ reduce using rule 97 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 97 (empty -> .) ]
  ! USE             [ reduce using rule 97 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 97 (empty -> .) ]
  ! CLASS           [ reduce using rule 97 (empty -> .) ]
  ! IF              [ reduce using rule 97 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 97 (empty -> .) ]
  ! REPEAT          [ reduce using rule 97 (empty -> .) ]
  ! FOR             [ reduce using rule 97 (empty -> .) ]
  ! WHILE           [ reduce using rule 97 (empty -> .) ]
  ! TRY             [ reduce using rule 97 (empty -> .) ]
  ! DOT             [ reduce using rule 97 (empty -> .) ]
  ! $end            [ reduce using rule 97 (empty -> .) ]

    expression                     shift and go to state 41
    exp                            shift and go to state 42
    variable_declaration           shift and go to state 5
    variable_value_change          shift and go to state 6
    if_statement                   shift and go to state 7
    function                       shift and go to state 8
    function_call                  shift and go to state 9
    repeat                         shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    use                            shift and go to state 13
    error_handling                 shift and go to state 14
    variable_alone                 shift and go to state 15
    global_variable                shift and go to state 16
    class_def                      shift and go to state 17
    debug                          shift and go to state 18
    function_class                 shift and go to state 19
    inside_root                    shift and go to state 20
    empty                          shift and go to state 21
    if_statement_1                 shift and go to state 24
    function_head                  shift and go to state 25
    repeat_head                    shift and go to state 26
    for_head                       shift and go to state 27
    while_head                     shift and go to state 28
    try                            shift and go to state 30
    inside                         shift and go to state 33

state 3

    (4) exex -> expression .

    VAR             reduce using rule 4 (exex -> expression .)
    IDENTIFIER      reduce using rule 4 (exex -> expression .)
    USE             reduce using rule 4 (exex -> expression .)
    GLOBAL          reduce using rule 4 (exex -> expression .)
    CLASS           reduce using rule 4 (exex -> expression .)
    IF              reduce using rule 4 (exex -> expression .)
    FUNCTION        reduce using rule 4 (exex -> expression .)
    REPEAT          reduce using rule 4 (exex -> expression .)
    FOR             reduce using rule 4 (exex -> expression .)
    WHILE           reduce using rule 4 (exex -> expression .)
    TRY             reduce using rule 4 (exex -> expression .)
    DOT             reduce using rule 4 (exex -> expression .)
    $end            reduce using rule 4 (exex -> expression .)


state 4

    (5) exex -> exp .

    VAR             reduce using rule 5 (exex -> exp .)
    IDENTIFIER      reduce using rule 5 (exex -> exp .)
    USE             reduce using rule 5 (exex -> exp .)
    GLOBAL          reduce using rule 5 (exex -> exp .)
    CLASS           reduce using rule 5 (exex -> exp .)
    IF              reduce using rule 5 (exex -> exp .)
    FUNCTION        reduce using rule 5 (exex -> exp .)
    REPEAT          reduce using rule 5 (exex -> exp .)
    FOR             reduce using rule 5 (exex -> exp .)
    WHILE           reduce using rule 5 (exex -> exp .)
    TRY             reduce using rule 5 (exex -> exp .)
    DOT             reduce using rule 5 (exex -> exp .)
    $end            reduce using rule 5 (exex -> exp .)


state 5

    (7) expression -> variable_declaration . SEMI

    SEMI            shift and go to state 43


state 6

    (8) expression -> variable_value_change . SEMI

    SEMI            shift and go to state 44


state 7

    (9) expression -> if_statement .

    VAR             reduce using rule 9 (expression -> if_statement .)
    IDENTIFIER      reduce using rule 9 (expression -> if_statement .)
    USE             reduce using rule 9 (expression -> if_statement .)
    GLOBAL          reduce using rule 9 (expression -> if_statement .)
    CLASS           reduce using rule 9 (expression -> if_statement .)
    IF              reduce using rule 9 (expression -> if_statement .)
    FUNCTION        reduce using rule 9 (expression -> if_statement .)
    REPEAT          reduce using rule 9 (expression -> if_statement .)
    FOR             reduce using rule 9 (expression -> if_statement .)
    WHILE           reduce using rule 9 (expression -> if_statement .)
    TRY             reduce using rule 9 (expression -> if_statement .)
    DOT             reduce using rule 9 (expression -> if_statement .)
    $end            reduce using rule 9 (expression -> if_statement .)
    RMB             reduce using rule 9 (expression -> if_statement .)


state 8

    (10) expression -> function .

    VAR             reduce using rule 10 (expression -> function .)
    IDENTIFIER      reduce using rule 10 (expression -> function .)
    USE             reduce using rule 10 (expression -> function .)
    GLOBAL          reduce using rule 10 (expression -> function .)
    CLASS           reduce using rule 10 (expression -> function .)
    IF              reduce using rule 10 (expression -> function .)
    FUNCTION        reduce using rule 10 (expression -> function .)
    REPEAT          reduce using rule 10 (expression -> function .)
    FOR             reduce using rule 10 (expression -> function .)
    WHILE           reduce using rule 10 (expression -> function .)
    TRY             reduce using rule 10 (expression -> function .)
    DOT             reduce using rule 10 (expression -> function .)
    $end            reduce using rule 10 (expression -> function .)
    RMB             reduce using rule 10 (expression -> function .)


state 9

    (11) expression -> function_call . SEMI

    SEMI            shift and go to state 45


state 10

    (12) expression -> repeat .

    VAR             reduce using rule 12 (expression -> repeat .)
    IDENTIFIER      reduce using rule 12 (expression -> repeat .)
    USE             reduce using rule 12 (expression -> repeat .)
    GLOBAL          reduce using rule 12 (expression -> repeat .)
    CLASS           reduce using rule 12 (expression -> repeat .)
    IF              reduce using rule 12 (expression -> repeat .)
    FUNCTION        reduce using rule 12 (expression -> repeat .)
    REPEAT          reduce using rule 12 (expression -> repeat .)
    FOR             reduce using rule 12 (expression -> repeat .)
    WHILE           reduce using rule 12 (expression -> repeat .)
    TRY             reduce using rule 12 (expression -> repeat .)
    DOT             reduce using rule 12 (expression -> repeat .)
    $end            reduce using rule 12 (expression -> repeat .)
    RMB             reduce using rule 12 (expression -> repeat .)


state 11

    (13) expression -> for .

    VAR             reduce using rule 13 (expression -> for .)
    IDENTIFIER      reduce using rule 13 (expression -> for .)
    USE             reduce using rule 13 (expression -> for .)
    GLOBAL          reduce using rule 13 (expression -> for .)
    CLASS           reduce using rule 13 (expression -> for .)
    IF              reduce using rule 13 (expression -> for .)
    FUNCTION        reduce using rule 13 (expression -> for .)
    REPEAT          reduce using rule 13 (expression -> for .)
    FOR             reduce using rule 13 (expression -> for .)
    WHILE           reduce using rule 13 (expression -> for .)
    TRY             reduce using rule 13 (expression -> for .)
    DOT             reduce using rule 13 (expression -> for .)
    $end            reduce using rule 13 (expression -> for .)
    RMB             reduce using rule 13 (expression -> for .)


state 12

    (14) expression -> while .

    VAR             reduce using rule 14 (expression -> while .)
    IDENTIFIER      reduce using rule 14 (expression -> while .)
    USE             reduce using rule 14 (expression -> while .)
    GLOBAL          reduce using rule 14 (expression -> while .)
    CLASS           reduce using rule 14 (expression -> while .)
    IF              reduce using rule 14 (expression -> while .)
    FUNCTION        reduce using rule 14 (expression -> while .)
    REPEAT          reduce using rule 14 (expression -> while .)
    FOR             reduce using rule 14 (expression -> while .)
    WHILE           reduce using rule 14 (expression -> while .)
    TRY             reduce using rule 14 (expression -> while .)
    DOT             reduce using rule 14 (expression -> while .)
    $end            reduce using rule 14 (expression -> while .)
    RMB             reduce using rule 14 (expression -> while .)


state 13

    (15) expression -> use . SEMI

    SEMI            shift and go to state 46


state 14

    (16) expression -> error_handling .

    VAR             reduce using rule 16 (expression -> error_handling .)
    IDENTIFIER      reduce using rule 16 (expression -> error_handling .)
    USE             reduce using rule 16 (expression -> error_handling .)
    GLOBAL          reduce using rule 16 (expression -> error_handling .)
    CLASS           reduce using rule 16 (expression -> error_handling .)
    IF              reduce using rule 16 (expression -> error_handling .)
    FUNCTION        reduce using rule 16 (expression -> error_handling .)
    REPEAT          reduce using rule 16 (expression -> error_handling .)
    FOR             reduce using rule 16 (expression -> error_handling .)
    WHILE           reduce using rule 16 (expression -> error_handling .)
    TRY             reduce using rule 16 (expression -> error_handling .)
    DOT             reduce using rule 16 (expression -> error_handling .)
    $end            reduce using rule 16 (expression -> error_handling .)
    RMB             reduce using rule 16 (expression -> error_handling .)


state 15

    (17) expression -> variable_alone . SEMI

    SEMI            shift and go to state 47


state 16

    (18) expression -> global_variable . SEMI

    SEMI            shift and go to state 48


state 17

    (19) expression -> class_def .

    VAR             reduce using rule 19 (expression -> class_def .)
    IDENTIFIER      reduce using rule 19 (expression -> class_def .)
    USE             reduce using rule 19 (expression -> class_def .)
    GLOBAL          reduce using rule 19 (expression -> class_def .)
    CLASS           reduce using rule 19 (expression -> class_def .)
    IF              reduce using rule 19 (expression -> class_def .)
    FUNCTION        reduce using rule 19 (expression -> class_def .)
    REPEAT          reduce using rule 19 (expression -> class_def .)
    FOR             reduce using rule 19 (expression -> class_def .)
    WHILE           reduce using rule 19 (expression -> class_def .)
    TRY             reduce using rule 19 (expression -> class_def .)
    DOT             reduce using rule 19 (expression -> class_def .)
    $end            reduce using rule 19 (expression -> class_def .)
    RMB             reduce using rule 19 (expression -> class_def .)


state 18

    (20) expression -> debug . SEMI

    SEMI            shift and go to state 49


state 19

    (21) expression -> function_class . SEMI

    SEMI            shift and go to state 50


state 20

    (22) expression -> inside_root . SEMI

    SEMI            shift and go to state 51


state 21

    (23) expression -> empty .

    VAR             reduce using rule 23 (expression -> empty .)
    IDENTIFIER      reduce using rule 23 (expression -> empty .)
    USE             reduce using rule 23 (expression -> empty .)
    GLOBAL          reduce using rule 23 (expression -> empty .)
    CLASS           reduce using rule 23 (expression -> empty .)
    IF              reduce using rule 23 (expression -> empty .)
    FUNCTION        reduce using rule 23 (expression -> empty .)
    REPEAT          reduce using rule 23 (expression -> empty .)
    FOR             reduce using rule 23 (expression -> empty .)
    WHILE           reduce using rule 23 (expression -> empty .)
    TRY             reduce using rule 23 (expression -> empty .)
    DOT             reduce using rule 23 (expression -> empty .)
    $end            reduce using rule 23 (expression -> empty .)
    RMB             reduce using rule 23 (expression -> empty .)


state 22

    (82) variable_declaration -> VAR . IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> VAR . IDENTIFIER EQUAL calculate
    (84) variable_declaration -> VAR . IDENTIFIER
    (48) function_class -> VAR . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> VAR . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB

    IDENTIFIER      shift and go to state 52


state 23

    (80) variable_value_change -> IDENTIFIER . EQUAL LIST
    (81) variable_value_change -> IDENTIFIER . EQUAL calculate
    (57) function_call -> IDENTIFIER . LSB parameter RSB
    (58) function_call -> IDENTIFIER . LSB empty RSB
    (79) variable_alone -> IDENTIFIER .
    (50) function_class -> IDENTIFIER . EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> IDENTIFIER . EQUAL IDENTIFIER LSB empty RSB
    (40) inside -> IDENTIFIER . LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (41) inside -> IDENTIFIER . LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (42) inside -> IDENTIFIER . LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (43) inside -> IDENTIFIER . LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (44) inside -> IDENTIFIER . DOT IDENTIFIER LSB parameter RSB
    (45) inside -> IDENTIFIER . DOT IDENTIFIER LSB empty RSB
    (46) inside -> IDENTIFIER . LSB parameter RSB DOT IDENTIFIER
    (47) inside -> IDENTIFIER . DOT IDENTIFIER

    EQUAL           shift and go to state 53
    LSB             shift and go to state 54
    SEMI            reduce using rule 79 (variable_alone -> IDENTIFIER .)
    DOT             shift and go to state 55


state 24

    (62) if_statement -> if_statement_1 . if_statement_2 if_statement_3
    (63) if_statement -> if_statement_1 . if_statement_2
    (64) if_statement -> if_statement_1 . if_statement_3
    (65) if_statement -> if_statement_1 .
    (67) if_statement_2 -> . ELSE IF LSB condition RSB LMB expression RMB
    (68) if_statement_2 -> . if_statement_2 ELSE IF LSB condition RSB LMB expression RMB
    (69) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 65 (if_statement -> if_statement_1 .)
    IDENTIFIER      reduce using rule 65 (if_statement -> if_statement_1 .)
    USE             reduce using rule 65 (if_statement -> if_statement_1 .)
    GLOBAL          reduce using rule 65 (if_statement -> if_statement_1 .)
    CLASS           reduce using rule 65 (if_statement -> if_statement_1 .)
    IF              reduce using rule 65 (if_statement -> if_statement_1 .)
    FUNCTION        reduce using rule 65 (if_statement -> if_statement_1 .)
    REPEAT          reduce using rule 65 (if_statement -> if_statement_1 .)
    FOR             reduce using rule 65 (if_statement -> if_statement_1 .)
    WHILE           reduce using rule 65 (if_statement -> if_statement_1 .)
    TRY             reduce using rule 65 (if_statement -> if_statement_1 .)
    DOT             reduce using rule 65 (if_statement -> if_statement_1 .)
    $end            reduce using rule 65 (if_statement -> if_statement_1 .)
    RMB             reduce using rule 65 (if_statement -> if_statement_1 .)
    ELSE            shift and go to state 58

    if_statement_2                 shift and go to state 56
    if_statement_3                 shift and go to state 57

state 25

    (53) function -> function_head . function_body
    (56) function_body -> . LMB expression RMB

    LMB             shift and go to state 60

    function_body                  shift and go to state 59

state 26

    (33) repeat -> repeat_head . repeat_body
    (35) repeat_body -> . LMB expression RMB

    LMB             shift and go to state 62

    repeat_body                    shift and go to state 61

state 27

    (27) for -> for_head . for_body
    (29) for_body -> . LMB expression RMB

    LMB             shift and go to state 64

    for_body                       shift and go to state 63

state 28

    (30) while -> while_head . while_body
    (32) while_body -> . LMB expression RMB

    LMB             shift and go to state 66

    while_body                     shift and go to state 65

state 29

    (76) use -> USE . use_params
    (61) debug -> USE . DEBUG
    (77) use_params -> . IDENTIFIER

    DEBUG           shift and go to state 68
    IDENTIFIER      shift and go to state 69

    use_params                     shift and go to state 67

state 30

    (24) error_handling -> try . catch
    (26) catch -> . CATCH LSB IDENTIFIER RSB LMB expression RMB

    CATCH           shift and go to state 71

    catch                          shift and go to state 70

state 31

    (78) global_variable -> GLOBAL . IDENTIFIER

    IDENTIFIER      shift and go to state 72


state 32

    (52) class_def -> CLASS . IDENTIFIER LMB expression RMB

    IDENTIFIER      shift and go to state 73


state 33

    (36) inside_root -> inside .
    (37) inside_root -> inside . DOT IDENTIFIER LSB parameter RSB
    (39) inside -> inside . DOT IDENTIFIER

    SEMI            reduce using rule 36 (inside_root -> inside .)
    DOT             shift and go to state 74


state 34

    (38) inside -> DOT . IDENTIFIER LSB empty RSB

    IDENTIFIER      shift and go to state 75


state 35

    (66) if_statement_1 -> IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 76


state 36

    (54) function_head -> FUNCTION . IDENTIFIER LSB parameter RSB
    (55) function_head -> FUNCTION . IDENTIFIER LSB empty RSB

    IDENTIFIER      shift and go to state 77


state 37

    (34) repeat_head -> REPEAT . LSB calculate RSB

    LSB             shift and go to state 78


state 38

    (28) for_head -> FOR . LSB IDENTIFIER IN IDENTIFIER RSB

    LSB             shift and go to state 79


state 39

    (31) while_head -> WHILE . LSB condition RSB

    LSB             shift and go to state 80


state 40

    (25) try -> TRY . LMB expression RMB

    LMB             shift and go to state 81


state 41

    (2) exex -> exex expression .

    VAR             reduce using rule 2 (exex -> exex expression .)
    IDENTIFIER      reduce using rule 2 (exex -> exex expression .)
    USE             reduce using rule 2 (exex -> exex expression .)
    GLOBAL          reduce using rule 2 (exex -> exex expression .)
    CLASS           reduce using rule 2 (exex -> exex expression .)
    IF              reduce using rule 2 (exex -> exex expression .)
    FUNCTION        reduce using rule 2 (exex -> exex expression .)
    REPEAT          reduce using rule 2 (exex -> exex expression .)
    FOR             reduce using rule 2 (exex -> exex expression .)
    WHILE           reduce using rule 2 (exex -> exex expression .)
    TRY             reduce using rule 2 (exex -> exex expression .)
    DOT             reduce using rule 2 (exex -> exex expression .)
    $end            reduce using rule 2 (exex -> exex expression .)


state 42

    (3) exex -> exex exp .

    VAR             reduce using rule 3 (exex -> exex exp .)
    IDENTIFIER      reduce using rule 3 (exex -> exex exp .)
    USE             reduce using rule 3 (exex -> exex exp .)
    GLOBAL          reduce using rule 3 (exex -> exex exp .)
    CLASS           reduce using rule 3 (exex -> exex exp .)
    IF              reduce using rule 3 (exex -> exex exp .)
    FUNCTION        reduce using rule 3 (exex -> exex exp .)
    REPEAT          reduce using rule 3 (exex -> exex exp .)
    FOR             reduce using rule 3 (exex -> exex exp .)
    WHILE           reduce using rule 3 (exex -> exex exp .)
    TRY             reduce using rule 3 (exex -> exex exp .)
    DOT             reduce using rule 3 (exex -> exex exp .)
    $end            reduce using rule 3 (exex -> exex exp .)


state 43

    (7) expression -> variable_declaration SEMI .

    VAR             reduce using rule 7 (expression -> variable_declaration SEMI .)
    IDENTIFIER      reduce using rule 7 (expression -> variable_declaration SEMI .)
    USE             reduce using rule 7 (expression -> variable_declaration SEMI .)
    GLOBAL          reduce using rule 7 (expression -> variable_declaration SEMI .)
    CLASS           reduce using rule 7 (expression -> variable_declaration SEMI .)
    IF              reduce using rule 7 (expression -> variable_declaration SEMI .)
    FUNCTION        reduce using rule 7 (expression -> variable_declaration SEMI .)
    REPEAT          reduce using rule 7 (expression -> variable_declaration SEMI .)
    FOR             reduce using rule 7 (expression -> variable_declaration SEMI .)
    WHILE           reduce using rule 7 (expression -> variable_declaration SEMI .)
    TRY             reduce using rule 7 (expression -> variable_declaration SEMI .)
    DOT             reduce using rule 7 (expression -> variable_declaration SEMI .)
    $end            reduce using rule 7 (expression -> variable_declaration SEMI .)
    RMB             reduce using rule 7 (expression -> variable_declaration SEMI .)


state 44

    (8) expression -> variable_value_change SEMI .

    VAR             reduce using rule 8 (expression -> variable_value_change SEMI .)
    IDENTIFIER      reduce using rule 8 (expression -> variable_value_change SEMI .)
    USE             reduce using rule 8 (expression -> variable_value_change SEMI .)
    GLOBAL          reduce using rule 8 (expression -> variable_value_change SEMI .)
    CLASS           reduce using rule 8 (expression -> variable_value_change SEMI .)
    IF              reduce using rule 8 (expression -> variable_value_change SEMI .)
    FUNCTION        reduce using rule 8 (expression -> variable_value_change SEMI .)
    REPEAT          reduce using rule 8 (expression -> variable_value_change SEMI .)
    FOR             reduce using rule 8 (expression -> variable_value_change SEMI .)
    WHILE           reduce using rule 8 (expression -> variable_value_change SEMI .)
    TRY             reduce using rule 8 (expression -> variable_value_change SEMI .)
    DOT             reduce using rule 8 (expression -> variable_value_change SEMI .)
    $end            reduce using rule 8 (expression -> variable_value_change SEMI .)
    RMB             reduce using rule 8 (expression -> variable_value_change SEMI .)


state 45

    (11) expression -> function_call SEMI .

    VAR             reduce using rule 11 (expression -> function_call SEMI .)
    IDENTIFIER      reduce using rule 11 (expression -> function_call SEMI .)
    USE             reduce using rule 11 (expression -> function_call SEMI .)
    GLOBAL          reduce using rule 11 (expression -> function_call SEMI .)
    CLASS           reduce using rule 11 (expression -> function_call SEMI .)
    IF              reduce using rule 11 (expression -> function_call SEMI .)
    FUNCTION        reduce using rule 11 (expression -> function_call SEMI .)
    REPEAT          reduce using rule 11 (expression -> function_call SEMI .)
    FOR             reduce using rule 11 (expression -> function_call SEMI .)
    WHILE           reduce using rule 11 (expression -> function_call SEMI .)
    TRY             reduce using rule 11 (expression -> function_call SEMI .)
    DOT             reduce using rule 11 (expression -> function_call SEMI .)
    $end            reduce using rule 11 (expression -> function_call SEMI .)
    RMB             reduce using rule 11 (expression -> function_call SEMI .)


state 46

    (15) expression -> use SEMI .

    VAR             reduce using rule 15 (expression -> use SEMI .)
    IDENTIFIER      reduce using rule 15 (expression -> use SEMI .)
    USE             reduce using rule 15 (expression -> use SEMI .)
    GLOBAL          reduce using rule 15 (expression -> use SEMI .)
    CLASS           reduce using rule 15 (expression -> use SEMI .)
    IF              reduce using rule 15 (expression -> use SEMI .)
    FUNCTION        reduce using rule 15 (expression -> use SEMI .)
    REPEAT          reduce using rule 15 (expression -> use SEMI .)
    FOR             reduce using rule 15 (expression -> use SEMI .)
    WHILE           reduce using rule 15 (expression -> use SEMI .)
    TRY             reduce using rule 15 (expression -> use SEMI .)
    DOT             reduce using rule 15 (expression -> use SEMI .)
    $end            reduce using rule 15 (expression -> use SEMI .)
    RMB             reduce using rule 15 (expression -> use SEMI .)


state 47

    (17) expression -> variable_alone SEMI .

    VAR             reduce using rule 17 (expression -> variable_alone SEMI .)
    IDENTIFIER      reduce using rule 17 (expression -> variable_alone SEMI .)
    USE             reduce using rule 17 (expression -> variable_alone SEMI .)
    GLOBAL          reduce using rule 17 (expression -> variable_alone SEMI .)
    CLASS           reduce using rule 17 (expression -> variable_alone SEMI .)
    IF              reduce using rule 17 (expression -> variable_alone SEMI .)
    FUNCTION        reduce using rule 17 (expression -> variable_alone SEMI .)
    REPEAT          reduce using rule 17 (expression -> variable_alone SEMI .)
    FOR             reduce using rule 17 (expression -> variable_alone SEMI .)
    WHILE           reduce using rule 17 (expression -> variable_alone SEMI .)
    TRY             reduce using rule 17 (expression -> variable_alone SEMI .)
    DOT             reduce using rule 17 (expression -> variable_alone SEMI .)
    $end            reduce using rule 17 (expression -> variable_alone SEMI .)
    RMB             reduce using rule 17 (expression -> variable_alone SEMI .)


state 48

    (18) expression -> global_variable SEMI .

    VAR             reduce using rule 18 (expression -> global_variable SEMI .)
    IDENTIFIER      reduce using rule 18 (expression -> global_variable SEMI .)
    USE             reduce using rule 18 (expression -> global_variable SEMI .)
    GLOBAL          reduce using rule 18 (expression -> global_variable SEMI .)
    CLASS           reduce using rule 18 (expression -> global_variable SEMI .)
    IF              reduce using rule 18 (expression -> global_variable SEMI .)
    FUNCTION        reduce using rule 18 (expression -> global_variable SEMI .)
    REPEAT          reduce using rule 18 (expression -> global_variable SEMI .)
    FOR             reduce using rule 18 (expression -> global_variable SEMI .)
    WHILE           reduce using rule 18 (expression -> global_variable SEMI .)
    TRY             reduce using rule 18 (expression -> global_variable SEMI .)
    DOT             reduce using rule 18 (expression -> global_variable SEMI .)
    $end            reduce using rule 18 (expression -> global_variable SEMI .)
    RMB             reduce using rule 18 (expression -> global_variable SEMI .)


state 49

    (20) expression -> debug SEMI .

    VAR             reduce using rule 20 (expression -> debug SEMI .)
    IDENTIFIER      reduce using rule 20 (expression -> debug SEMI .)
    USE             reduce using rule 20 (expression -> debug SEMI .)
    GLOBAL          reduce using rule 20 (expression -> debug SEMI .)
    CLASS           reduce using rule 20 (expression -> debug SEMI .)
    IF              reduce using rule 20 (expression -> debug SEMI .)
    FUNCTION        reduce using rule 20 (expression -> debug SEMI .)
    REPEAT          reduce using rule 20 (expression -> debug SEMI .)
    FOR             reduce using rule 20 (expression -> debug SEMI .)
    WHILE           reduce using rule 20 (expression -> debug SEMI .)
    TRY             reduce using rule 20 (expression -> debug SEMI .)
    DOT             reduce using rule 20 (expression -> debug SEMI .)
    $end            reduce using rule 20 (expression -> debug SEMI .)
    RMB             reduce using rule 20 (expression -> debug SEMI .)


state 50

    (21) expression -> function_class SEMI .

    VAR             reduce using rule 21 (expression -> function_class SEMI .)
    IDENTIFIER      reduce using rule 21 (expression -> function_class SEMI .)
    USE             reduce using rule 21 (expression -> function_class SEMI .)
    GLOBAL          reduce using rule 21 (expression -> function_class SEMI .)
    CLASS           reduce using rule 21 (expression -> function_class SEMI .)
    IF              reduce using rule 21 (expression -> function_class SEMI .)
    FUNCTION        reduce using rule 21 (expression -> function_class SEMI .)
    REPEAT          reduce using rule 21 (expression -> function_class SEMI .)
    FOR             reduce using rule 21 (expression -> function_class SEMI .)
    WHILE           reduce using rule 21 (expression -> function_class SEMI .)
    TRY             reduce using rule 21 (expression -> function_class SEMI .)
    DOT             reduce using rule 21 (expression -> function_class SEMI .)
    $end            reduce using rule 21 (expression -> function_class SEMI .)
    RMB             reduce using rule 21 (expression -> function_class SEMI .)


state 51

    (22) expression -> inside_root SEMI .

    VAR             reduce using rule 22 (expression -> inside_root SEMI .)
    IDENTIFIER      reduce using rule 22 (expression -> inside_root SEMI .)
    USE             reduce using rule 22 (expression -> inside_root SEMI .)
    GLOBAL          reduce using rule 22 (expression -> inside_root SEMI .)
    CLASS           reduce using rule 22 (expression -> inside_root SEMI .)
    IF              reduce using rule 22 (expression -> inside_root SEMI .)
    FUNCTION        reduce using rule 22 (expression -> inside_root SEMI .)
    REPEAT          reduce using rule 22 (expression -> inside_root SEMI .)
    FOR             reduce using rule 22 (expression -> inside_root SEMI .)
    WHILE           reduce using rule 22 (expression -> inside_root SEMI .)
    TRY             reduce using rule 22 (expression -> inside_root SEMI .)
    DOT             reduce using rule 22 (expression -> inside_root SEMI .)
    $end            reduce using rule 22 (expression -> inside_root SEMI .)
    RMB             reduce using rule 22 (expression -> inside_root SEMI .)


state 52

    (82) variable_declaration -> VAR IDENTIFIER . LIST EQUAL calculate
    (83) variable_declaration -> VAR IDENTIFIER . EQUAL calculate
    (84) variable_declaration -> VAR IDENTIFIER .
    (48) function_class -> VAR IDENTIFIER . EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> VAR IDENTIFIER . EQUAL IDENTIFIER LSB empty RSB

    LIST            shift and go to state 82
    EQUAL           shift and go to state 83
    SEMI            reduce using rule 84 (variable_declaration -> VAR IDENTIFIER .)


state 53

    (80) variable_value_change -> IDENTIFIER EQUAL . LIST
    (81) variable_value_change -> IDENTIFIER EQUAL . calculate
    (50) function_class -> IDENTIFIER EQUAL . IDENTIFIER LSB parameter RSB
    (51) function_class -> IDENTIFIER EQUAL . IDENTIFIER LSB empty RSB
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    LIST            shift and go to state 85
    IDENTIFIER      shift and go to state 84
    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    LSB             shift and go to state 87

    calculate                      shift and go to state 86

state 54

    (57) function_call -> IDENTIFIER LSB . parameter RSB
    (58) function_call -> IDENTIFIER LSB . empty RSB
    (40) inside -> IDENTIFIER LSB . parameter RSB DOT IDENTIFIER LSB parameter RSB
    (41) inside -> IDENTIFIER LSB . empty RSB DOT IDENTIFIER LSB empty RSB
    (42) inside -> IDENTIFIER LSB . parameter RSB DOT IDENTIFIER LSB empty RSB
    (43) inside -> IDENTIFIER LSB . empty RSB DOT IDENTIFIER LSB parameter RSB
    (46) inside -> IDENTIFIER LSB . parameter RSB DOT IDENTIFIER
    (59) parameter -> . parameter COMMA calculate
    (60) parameter -> . calculate
    (97) empty -> .
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    RSB             reduce using rule 97 (empty -> .)
    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    parameter                      shift and go to state 93
    empty                          shift and go to state 94
    calculate                      shift and go to state 95

state 55

    (44) inside -> IDENTIFIER DOT . IDENTIFIER LSB parameter RSB
    (45) inside -> IDENTIFIER DOT . IDENTIFIER LSB empty RSB
    (47) inside -> IDENTIFIER DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 97


state 56

    (62) if_statement -> if_statement_1 if_statement_2 . if_statement_3
    (63) if_statement -> if_statement_1 if_statement_2 .
    (68) if_statement_2 -> if_statement_2 . ELSE IF LSB condition RSB LMB expression RMB
    (69) if_statement_3 -> . ELSE LMB expression RMB

    VAR             reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    IDENTIFIER      reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    USE             reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    GLOBAL          reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    CLASS           reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    IF              reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    FUNCTION        reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    REPEAT          reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    FOR             reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    WHILE           reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    TRY             reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    DOT             reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    $end            reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    RMB             reduce using rule 63 (if_statement -> if_statement_1 if_statement_2 .)
    ELSE            shift and go to state 99

    if_statement_3                 shift and go to state 98

state 57

    (64) if_statement -> if_statement_1 if_statement_3 .

    VAR             reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    IDENTIFIER      reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    USE             reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    GLOBAL          reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    CLASS           reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    IF              reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    FUNCTION        reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    REPEAT          reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    FOR             reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    WHILE           reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    TRY             reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    DOT             reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    $end            reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)
    RMB             reduce using rule 64 (if_statement -> if_statement_1 if_statement_3 .)


state 58

    (67) if_statement_2 -> ELSE . IF LSB condition RSB LMB expression RMB
    (69) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 100
    LMB             shift and go to state 101


state 59

    (53) function -> function_head function_body .

    VAR             reduce using rule 53 (function -> function_head function_body .)
    IDENTIFIER      reduce using rule 53 (function -> function_head function_body .)
    USE             reduce using rule 53 (function -> function_head function_body .)
    GLOBAL          reduce using rule 53 (function -> function_head function_body .)
    CLASS           reduce using rule 53 (function -> function_head function_body .)
    IF              reduce using rule 53 (function -> function_head function_body .)
    FUNCTION        reduce using rule 53 (function -> function_head function_body .)
    REPEAT          reduce using rule 53 (function -> function_head function_body .)
    FOR             reduce using rule 53 (function -> function_head function_body .)
    WHILE           reduce using rule 53 (function -> function_head function_body .)
    TRY             reduce using rule 53 (function -> function_head function_body .)
    DOT             reduce using rule 53 (function -> function_head function_body .)
    $end            reduce using rule 53 (function -> function_head function_body .)
    RMB             reduce using rule 53 (function -> function_head function_body .)


state 60

    (56) function_body -> LMB . expression RMB
    (7) expression -> . variable_declaration SEMI
    (8) expression -> . variable_value_change SEMI
    (9) expression -> . if_statement
    (10) expression -> . function
    (11) expression -> . function_call SEMI
    (12) expression -> . repeat
    (13) expression -> . for
    (14) expression -> . while
    (15) expression -> . use SEMI
    (16) expression -> . error_handling
    (17) expression -> . variable_alone SEMI
    (18) expression -> . global_variable SEMI
    (19) expression -> . class_def
    (20) expression -> . debug SEMI
    (21) expression -> . function_class SEMI
    (22) expression -> . inside_root SEMI
    (23) expression -> . empty
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (33) repeat -> . repeat_head repeat_body
    (27) for -> . for_head for_body
    (30) while -> . while_head while_body
    (76) use -> . USE use_params
    (24) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (36) inside_root -> . inside
    (37) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (34) repeat_head -> . REPEAT LSB calculate RSB
    (28) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (31) while_head -> . WHILE LSB condition RSB
    (25) try -> . TRY LMB expression RMB
    (38) inside -> . DOT IDENTIFIER LSB empty RSB
    (39) inside -> . inside DOT IDENTIFIER
    (40) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (41) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (42) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (43) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (44) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (45) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (46) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (47) inside -> . IDENTIFIER DOT IDENTIFIER

    VAR             shift and go to state 22
    IDENTIFIER      shift and go to state 23
    USE             shift and go to state 29
    GLOBAL          shift and go to state 31
    CLASS           shift and go to state 32
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 35
    FUNCTION        shift and go to state 36
    REPEAT          shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39
    TRY             shift and go to state 40
    DOT             shift and go to state 34

    expression                     shift and go to state 102
    variable_declaration           shift and go to state 5
    variable_value_change          shift and go to state 6
    if_statement                   shift and go to state 7
    function                       shift and go to state 8
    function_call                  shift and go to state 9
    repeat                         shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    use                            shift and go to state 13
    error_handling                 shift and go to state 14
    variable_alone                 shift and go to state 15
    global_variable                shift and go to state 16
    class_def                      shift and go to state 17
    debug                          shift and go to state 18
    function_class                 shift and go to state 19
    inside_root                    shift and go to state 20
    empty                          shift and go to state 21
    if_statement_1                 shift and go to state 24
    function_head                  shift and go to state 25
    repeat_head                    shift and go to state 26
    for_head                       shift and go to state 27
    while_head                     shift and go to state 28
    try                            shift and go to state 30
    inside                         shift and go to state 33

state 61

    (33) repeat -> repeat_head repeat_body .

    VAR             reduce using rule 33 (repeat -> repeat_head repeat_body .)
    IDENTIFIER      reduce using rule 33 (repeat -> repeat_head repeat_body .)
    USE             reduce using rule 33 (repeat -> repeat_head repeat_body .)
    GLOBAL          reduce using rule 33 (repeat -> repeat_head repeat_body .)
    CLASS           reduce using rule 33 (repeat -> repeat_head repeat_body .)
    IF              reduce using rule 33 (repeat -> repeat_head repeat_body .)
    FUNCTION        reduce using rule 33 (repeat -> repeat_head repeat_body .)
    REPEAT          reduce using rule 33 (repeat -> repeat_head repeat_body .)
    FOR             reduce using rule 33 (repeat -> repeat_head repeat_body .)
    WHILE           reduce using rule 33 (repeat -> repeat_head repeat_body .)
    TRY             reduce using rule 33 (repeat -> repeat_head repeat_body .)
    DOT             reduce using rule 33 (repeat -> repeat_head repeat_body .)
    $end            reduce using rule 33 (repeat -> repeat_head repeat_body .)
    RMB             reduce using rule 33 (repeat -> repeat_head repeat_body .)


state 62

    (35) repeat_body -> LMB . expression RMB
    (7) expression -> . variable_declaration SEMI
    (8) expression -> . variable_value_change SEMI
    (9) expression -> . if_statement
    (10) expression -> . function
    (11) expression -> . function_call SEMI
    (12) expression -> . repeat
    (13) expression -> . for
    (14) expression -> . while
    (15) expression -> . use SEMI
    (16) expression -> . error_handling
    (17) expression -> . variable_alone SEMI
    (18) expression -> . global_variable SEMI
    (19) expression -> . class_def
    (20) expression -> . debug SEMI
    (21) expression -> . function_class SEMI
    (22) expression -> . inside_root SEMI
    (23) expression -> . empty
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (33) repeat -> . repeat_head repeat_body
    (27) for -> . for_head for_body
    (30) while -> . while_head while_body
    (76) use -> . USE use_params
    (24) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (36) inside_root -> . inside
    (37) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (34) repeat_head -> . REPEAT LSB calculate RSB
    (28) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (31) while_head -> . WHILE LSB condition RSB
    (25) try -> . TRY LMB expression RMB
    (38) inside -> . DOT IDENTIFIER LSB empty RSB
    (39) inside -> . inside DOT IDENTIFIER
    (40) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (41) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (42) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (43) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (44) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (45) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (46) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (47) inside -> . IDENTIFIER DOT IDENTIFIER

    VAR             shift and go to state 22
    IDENTIFIER      shift and go to state 23
    USE             shift and go to state 29
    GLOBAL          shift and go to state 31
    CLASS           shift and go to state 32
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 35
    FUNCTION        shift and go to state 36
    REPEAT          shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39
    TRY             shift and go to state 40
    DOT             shift and go to state 34

    expression                     shift and go to state 103
    variable_declaration           shift and go to state 5
    variable_value_change          shift and go to state 6
    if_statement                   shift and go to state 7
    function                       shift and go to state 8
    function_call                  shift and go to state 9
    repeat                         shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    use                            shift and go to state 13
    error_handling                 shift and go to state 14
    variable_alone                 shift and go to state 15
    global_variable                shift and go to state 16
    class_def                      shift and go to state 17
    debug                          shift and go to state 18
    function_class                 shift and go to state 19
    inside_root                    shift and go to state 20
    empty                          shift and go to state 21
    if_statement_1                 shift and go to state 24
    function_head                  shift and go to state 25
    repeat_head                    shift and go to state 26
    for_head                       shift and go to state 27
    while_head                     shift and go to state 28
    try                            shift and go to state 30
    inside                         shift and go to state 33

state 63

    (27) for -> for_head for_body .

    VAR             reduce using rule 27 (for -> for_head for_body .)
    IDENTIFIER      reduce using rule 27 (for -> for_head for_body .)
    USE             reduce using rule 27 (for -> for_head for_body .)
    GLOBAL          reduce using rule 27 (for -> for_head for_body .)
    CLASS           reduce using rule 27 (for -> for_head for_body .)
    IF              reduce using rule 27 (for -> for_head for_body .)
    FUNCTION        reduce using rule 27 (for -> for_head for_body .)
    REPEAT          reduce using rule 27 (for -> for_head for_body .)
    FOR             reduce using rule 27 (for -> for_head for_body .)
    WHILE           reduce using rule 27 (for -> for_head for_body .)
    TRY             reduce using rule 27 (for -> for_head for_body .)
    DOT             reduce using rule 27 (for -> for_head for_body .)
    $end            reduce using rule 27 (for -> for_head for_body .)
    RMB             reduce using rule 27 (for -> for_head for_body .)


state 64

    (29) for_body -> LMB . expression RMB
    (7) expression -> . variable_declaration SEMI
    (8) expression -> . variable_value_change SEMI
    (9) expression -> . if_statement
    (10) expression -> . function
    (11) expression -> . function_call SEMI
    (12) expression -> . repeat
    (13) expression -> . for
    (14) expression -> . while
    (15) expression -> . use SEMI
    (16) expression -> . error_handling
    (17) expression -> . variable_alone SEMI
    (18) expression -> . global_variable SEMI
    (19) expression -> . class_def
    (20) expression -> . debug SEMI
    (21) expression -> . function_class SEMI
    (22) expression -> . inside_root SEMI
    (23) expression -> . empty
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (33) repeat -> . repeat_head repeat_body
    (27) for -> . for_head for_body
    (30) while -> . while_head while_body
    (76) use -> . USE use_params
    (24) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (36) inside_root -> . inside
    (37) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (34) repeat_head -> . REPEAT LSB calculate RSB
    (28) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (31) while_head -> . WHILE LSB condition RSB
    (25) try -> . TRY LMB expression RMB
    (38) inside -> . DOT IDENTIFIER LSB empty RSB
    (39) inside -> . inside DOT IDENTIFIER
    (40) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (41) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (42) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (43) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (44) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (45) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (46) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (47) inside -> . IDENTIFIER DOT IDENTIFIER

    VAR             shift and go to state 22
    IDENTIFIER      shift and go to state 23
    USE             shift and go to state 29
    GLOBAL          shift and go to state 31
    CLASS           shift and go to state 32
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 35
    FUNCTION        shift and go to state 36
    REPEAT          shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39
    TRY             shift and go to state 40
    DOT             shift and go to state 34

    expression                     shift and go to state 104
    variable_declaration           shift and go to state 5
    variable_value_change          shift and go to state 6
    if_statement                   shift and go to state 7
    function                       shift and go to state 8
    function_call                  shift and go to state 9
    repeat                         shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    use                            shift and go to state 13
    error_handling                 shift and go to state 14
    variable_alone                 shift and go to state 15
    global_variable                shift and go to state 16
    class_def                      shift and go to state 17
    debug                          shift and go to state 18
    function_class                 shift and go to state 19
    inside_root                    shift and go to state 20
    empty                          shift and go to state 21
    if_statement_1                 shift and go to state 24
    function_head                  shift and go to state 25
    repeat_head                    shift and go to state 26
    for_head                       shift and go to state 27
    while_head                     shift and go to state 28
    try                            shift and go to state 30
    inside                         shift and go to state 33

state 65

    (30) while -> while_head while_body .

    VAR             reduce using rule 30 (while -> while_head while_body .)
    IDENTIFIER      reduce using rule 30 (while -> while_head while_body .)
    USE             reduce using rule 30 (while -> while_head while_body .)
    GLOBAL          reduce using rule 30 (while -> while_head while_body .)
    CLASS           reduce using rule 30 (while -> while_head while_body .)
    IF              reduce using rule 30 (while -> while_head while_body .)
    FUNCTION        reduce using rule 30 (while -> while_head while_body .)
    REPEAT          reduce using rule 30 (while -> while_head while_body .)
    FOR             reduce using rule 30 (while -> while_head while_body .)
    WHILE           reduce using rule 30 (while -> while_head while_body .)
    TRY             reduce using rule 30 (while -> while_head while_body .)
    DOT             reduce using rule 30 (while -> while_head while_body .)
    $end            reduce using rule 30 (while -> while_head while_body .)
    RMB             reduce using rule 30 (while -> while_head while_body .)


state 66

    (32) while_body -> LMB . expression RMB
    (7) expression -> . variable_declaration SEMI
    (8) expression -> . variable_value_change SEMI
    (9) expression -> . if_statement
    (10) expression -> . function
    (11) expression -> . function_call SEMI
    (12) expression -> . repeat
    (13) expression -> . for
    (14) expression -> . while
    (15) expression -> . use SEMI
    (16) expression -> . error_handling
    (17) expression -> . variable_alone SEMI
    (18) expression -> . global_variable SEMI
    (19) expression -> . class_def
    (20) expression -> . debug SEMI
    (21) expression -> . function_class SEMI
    (22) expression -> . inside_root SEMI
    (23) expression -> . empty
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (33) repeat -> . repeat_head repeat_body
    (27) for -> . for_head for_body
    (30) while -> . while_head while_body
    (76) use -> . USE use_params
    (24) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (36) inside_root -> . inside
    (37) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (34) repeat_head -> . REPEAT LSB calculate RSB
    (28) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (31) while_head -> . WHILE LSB condition RSB
    (25) try -> . TRY LMB expression RMB
    (38) inside -> . DOT IDENTIFIER LSB empty RSB
    (39) inside -> . inside DOT IDENTIFIER
    (40) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (41) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (42) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (43) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (44) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (45) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (46) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (47) inside -> . IDENTIFIER DOT IDENTIFIER

    VAR             shift and go to state 22
    IDENTIFIER      shift and go to state 23
    USE             shift and go to state 29
    GLOBAL          shift and go to state 31
    CLASS           shift and go to state 32
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 35
    FUNCTION        shift and go to state 36
    REPEAT          shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39
    TRY             shift and go to state 40
    DOT             shift and go to state 34

    expression                     shift and go to state 105
    variable_declaration           shift and go to state 5
    variable_value_change          shift and go to state 6
    if_statement                   shift and go to state 7
    function                       shift and go to state 8
    function_call                  shift and go to state 9
    repeat                         shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    use                            shift and go to state 13
    error_handling                 shift and go to state 14
    variable_alone                 shift and go to state 15
    global_variable                shift and go to state 16
    class_def                      shift and go to state 17
    debug                          shift and go to state 18
    function_class                 shift and go to state 19
    inside_root                    shift and go to state 20
    empty                          shift and go to state 21
    if_statement_1                 shift and go to state 24
    function_head                  shift and go to state 25
    repeat_head                    shift and go to state 26
    for_head                       shift and go to state 27
    while_head                     shift and go to state 28
    try                            shift and go to state 30
    inside                         shift and go to state 33

state 67

    (76) use -> USE use_params .

    SEMI            reduce using rule 76 (use -> USE use_params .)


state 68

    (61) debug -> USE DEBUG .

    SEMI            reduce using rule 61 (debug -> USE DEBUG .)


state 69

    (77) use_params -> IDENTIFIER .

    SEMI            reduce using rule 77 (use_params -> IDENTIFIER .)


state 70

    (24) error_handling -> try catch .

    VAR             reduce using rule 24 (error_handling -> try catch .)
    IDENTIFIER      reduce using rule 24 (error_handling -> try catch .)
    USE             reduce using rule 24 (error_handling -> try catch .)
    GLOBAL          reduce using rule 24 (error_handling -> try catch .)
    CLASS           reduce using rule 24 (error_handling -> try catch .)
    IF              reduce using rule 24 (error_handling -> try catch .)
    FUNCTION        reduce using rule 24 (error_handling -> try catch .)
    REPEAT          reduce using rule 24 (error_handling -> try catch .)
    FOR             reduce using rule 24 (error_handling -> try catch .)
    WHILE           reduce using rule 24 (error_handling -> try catch .)
    TRY             reduce using rule 24 (error_handling -> try catch .)
    DOT             reduce using rule 24 (error_handling -> try catch .)
    $end            reduce using rule 24 (error_handling -> try catch .)
    RMB             reduce using rule 24 (error_handling -> try catch .)


state 71

    (26) catch -> CATCH . LSB IDENTIFIER RSB LMB expression RMB

    LSB             shift and go to state 106


state 72

    (78) global_variable -> GLOBAL IDENTIFIER .

    SEMI            reduce using rule 78 (global_variable -> GLOBAL IDENTIFIER .)


state 73

    (52) class_def -> CLASS IDENTIFIER . LMB expression RMB

    LMB             shift and go to state 107


state 74

    (37) inside_root -> inside DOT . IDENTIFIER LSB parameter RSB
    (39) inside -> inside DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 108


state 75

    (38) inside -> DOT IDENTIFIER . LSB empty RSB

    LSB             shift and go to state 109


state 76

    (66) if_statement_1 -> IF LSB . condition RSB LMB expression RMB
    (70) condition -> . condition LB calculate
    (71) condition -> . condition RB calculate
    (72) condition -> . condition LB EQUAL calculate
    (73) condition -> . condition RB EQUAL calculate
    (74) condition -> . condition EQUAL calculate
    (75) condition -> . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    condition                      shift and go to state 110
    calculate                      shift and go to state 111

state 77

    (54) function_head -> FUNCTION IDENTIFIER . LSB parameter RSB
    (55) function_head -> FUNCTION IDENTIFIER . LSB empty RSB

    LSB             shift and go to state 112


state 78

    (34) repeat_head -> REPEAT LSB . calculate RSB
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    calculate                      shift and go to state 113

state 79

    (28) for_head -> FOR LSB . IDENTIFIER IN IDENTIFIER RSB

    IDENTIFIER      shift and go to state 114


state 80

    (31) while_head -> WHILE LSB . condition RSB
    (70) condition -> . condition LB calculate
    (71) condition -> . condition RB calculate
    (72) condition -> . condition LB EQUAL calculate
    (73) condition -> . condition RB EQUAL calculate
    (74) condition -> . condition EQUAL calculate
    (75) condition -> . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    condition                      shift and go to state 115
    calculate                      shift and go to state 111

state 81

    (25) try -> TRY LMB . expression RMB
    (7) expression -> . variable_declaration SEMI
    (8) expression -> . variable_value_change SEMI
    (9) expression -> . if_statement
    (10) expression -> . function
    (11) expression -> . function_call SEMI
    (12) expression -> . repeat
    (13) expression -> . for
    (14) expression -> . while
    (15) expression -> . use SEMI
    (16) expression -> . error_handling
    (17) expression -> . variable_alone SEMI
    (18) expression -> . global_variable SEMI
    (19) expression -> . class_def
    (20) expression -> . debug SEMI
    (21) expression -> . function_class SEMI
    (22) expression -> . inside_root SEMI
    (23) expression -> . empty
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (33) repeat -> . repeat_head repeat_body
    (27) for -> . for_head for_body
    (30) while -> . while_head while_body
    (76) use -> . USE use_params
    (24) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (36) inside_root -> . inside
    (37) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (34) repeat_head -> . REPEAT LSB calculate RSB
    (28) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (31) while_head -> . WHILE LSB condition RSB
    (25) try -> . TRY LMB expression RMB
    (38) inside -> . DOT IDENTIFIER LSB empty RSB
    (39) inside -> . inside DOT IDENTIFIER
    (40) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (41) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (42) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (43) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (44) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (45) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (46) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (47) inside -> . IDENTIFIER DOT IDENTIFIER

    VAR             shift and go to state 22
    IDENTIFIER      shift and go to state 23
    USE             shift and go to state 29
    GLOBAL          shift and go to state 31
    CLASS           shift and go to state 32
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 35
    FUNCTION        shift and go to state 36
    REPEAT          shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39
    TRY             shift and go to state 40
    DOT             shift and go to state 34

    expression                     shift and go to state 116
    variable_declaration           shift and go to state 5
    variable_value_change          shift and go to state 6
    if_statement                   shift and go to state 7
    function                       shift and go to state 8
    function_call                  shift and go to state 9
    repeat                         shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    use                            shift and go to state 13
    error_handling                 shift and go to state 14
    variable_alone                 shift and go to state 15
    global_variable                shift and go to state 16
    class_def                      shift and go to state 17
    debug                          shift and go to state 18
    function_class                 shift and go to state 19
    inside_root                    shift and go to state 20
    empty                          shift and go to state 21
    if_statement_1                 shift and go to state 24
    function_head                  shift and go to state 25
    repeat_head                    shift and go to state 26
    for_head                       shift and go to state 27
    while_head                     shift and go to state 28
    try                            shift and go to state 30
    inside                         shift and go to state 33

state 82

    (82) variable_declaration -> VAR IDENTIFIER LIST . EQUAL calculate

    EQUAL           shift and go to state 117


state 83

    (83) variable_declaration -> VAR IDENTIFIER EQUAL . calculate
    (48) function_class -> VAR IDENTIFIER EQUAL . IDENTIFIER LSB parameter RSB
    (49) function_class -> VAR IDENTIFIER EQUAL . IDENTIFIER LSB empty RSB
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    IDENTIFIER      shift and go to state 118
    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    calculate                      shift and go to state 119

state 84

    (50) function_class -> IDENTIFIER EQUAL IDENTIFIER . LSB parameter RSB
    (51) function_class -> IDENTIFIER EQUAL IDENTIFIER . LSB empty RSB
    (93) calculate -> IDENTIFIER .
    (94) calculate -> IDENTIFIER . LIST

    LSB             shift and go to state 120
    PLUS            reduce using rule 93 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 93 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 93 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 93 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 93 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 121


state 85

    (80) variable_value_change -> IDENTIFIER EQUAL LIST .
    (95) calculate -> LIST .

  ! reduce/reduce conflict for SEMI resolved using rule 80 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    SEMI            reduce using rule 80 (variable_value_change -> IDENTIFIER EQUAL LIST .)
    PLUS            reduce using rule 95 (calculate -> LIST .)
    MINUS           reduce using rule 95 (calculate -> LIST .)
    MUL             reduce using rule 95 (calculate -> LIST .)
    DIV             reduce using rule 95 (calculate -> LIST .)

  ! SEMI            [ reduce using rule 95 (calculate -> LIST .) ]


state 86

    (81) variable_value_change -> IDENTIFIER EQUAL calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 81 (variable_value_change -> IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    MUL             shift and go to state 124
    DIV             shift and go to state 125


state 87

    (96) calculate -> LSB . calculate RSB
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    calculate                      shift and go to state 126

state 88

    (87) calculate -> MINUS . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    calculate                      shift and go to state 127

state 89

    (90) calculate -> INT .

    PLUS            reduce using rule 90 (calculate -> INT .)
    MINUS           reduce using rule 90 (calculate -> INT .)
    MUL             reduce using rule 90 (calculate -> INT .)
    DIV             reduce using rule 90 (calculate -> INT .)
    SEMI            reduce using rule 90 (calculate -> INT .)
    RSB             reduce using rule 90 (calculate -> INT .)
    COMMA           reduce using rule 90 (calculate -> INT .)
    LB              reduce using rule 90 (calculate -> INT .)
    RB              reduce using rule 90 (calculate -> INT .)
    EQUAL           reduce using rule 90 (calculate -> INT .)


state 90

    (91) calculate -> FLOAT .

    PLUS            reduce using rule 91 (calculate -> FLOAT .)
    MINUS           reduce using rule 91 (calculate -> FLOAT .)
    MUL             reduce using rule 91 (calculate -> FLOAT .)
    DIV             reduce using rule 91 (calculate -> FLOAT .)
    SEMI            reduce using rule 91 (calculate -> FLOAT .)
    RSB             reduce using rule 91 (calculate -> FLOAT .)
    COMMA           reduce using rule 91 (calculate -> FLOAT .)
    LB              reduce using rule 91 (calculate -> FLOAT .)
    RB              reduce using rule 91 (calculate -> FLOAT .)
    EQUAL           reduce using rule 91 (calculate -> FLOAT .)


state 91

    (92) calculate -> STRING .

    PLUS            reduce using rule 92 (calculate -> STRING .)
    MINUS           reduce using rule 92 (calculate -> STRING .)
    MUL             reduce using rule 92 (calculate -> STRING .)
    DIV             reduce using rule 92 (calculate -> STRING .)
    SEMI            reduce using rule 92 (calculate -> STRING .)
    RSB             reduce using rule 92 (calculate -> STRING .)
    COMMA           reduce using rule 92 (calculate -> STRING .)
    LB              reduce using rule 92 (calculate -> STRING .)
    RB              reduce using rule 92 (calculate -> STRING .)
    EQUAL           reduce using rule 92 (calculate -> STRING .)


state 92

    (93) calculate -> IDENTIFIER .
    (94) calculate -> IDENTIFIER . LIST

    PLUS            reduce using rule 93 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 93 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 93 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 93 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 93 (calculate -> IDENTIFIER .)
    COMMA           reduce using rule 93 (calculate -> IDENTIFIER .)
    LB              reduce using rule 93 (calculate -> IDENTIFIER .)
    RB              reduce using rule 93 (calculate -> IDENTIFIER .)
    EQUAL           reduce using rule 93 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 93 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 121


state 93

    (57) function_call -> IDENTIFIER LSB parameter . RSB
    (40) inside -> IDENTIFIER LSB parameter . RSB DOT IDENTIFIER LSB parameter RSB
    (42) inside -> IDENTIFIER LSB parameter . RSB DOT IDENTIFIER LSB empty RSB
    (46) inside -> IDENTIFIER LSB parameter . RSB DOT IDENTIFIER
    (59) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 128
    COMMA           shift and go to state 129


state 94

    (58) function_call -> IDENTIFIER LSB empty . RSB
    (41) inside -> IDENTIFIER LSB empty . RSB DOT IDENTIFIER LSB empty RSB
    (43) inside -> IDENTIFIER LSB empty . RSB DOT IDENTIFIER LSB parameter RSB

    RSB             shift and go to state 130


state 95

    (60) parameter -> calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             reduce using rule 60 (parameter -> calculate .)
    COMMA           reduce using rule 60 (parameter -> calculate .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    MUL             shift and go to state 124
    DIV             shift and go to state 125


state 96

    (95) calculate -> LIST .

    PLUS            reduce using rule 95 (calculate -> LIST .)
    MINUS           reduce using rule 95 (calculate -> LIST .)
    MUL             reduce using rule 95 (calculate -> LIST .)
    DIV             reduce using rule 95 (calculate -> LIST .)
    RSB             reduce using rule 95 (calculate -> LIST .)
    COMMA           reduce using rule 95 (calculate -> LIST .)
    LB              reduce using rule 95 (calculate -> LIST .)
    RB              reduce using rule 95 (calculate -> LIST .)
    EQUAL           reduce using rule 95 (calculate -> LIST .)
    SEMI            reduce using rule 95 (calculate -> LIST .)


state 97

    (44) inside -> IDENTIFIER DOT IDENTIFIER . LSB parameter RSB
    (45) inside -> IDENTIFIER DOT IDENTIFIER . LSB empty RSB
    (47) inside -> IDENTIFIER DOT IDENTIFIER .

    LSB             shift and go to state 131
    DOT             reduce using rule 47 (inside -> IDENTIFIER DOT IDENTIFIER .)
    SEMI            reduce using rule 47 (inside -> IDENTIFIER DOT IDENTIFIER .)


state 98

    (62) if_statement -> if_statement_1 if_statement_2 if_statement_3 .

    VAR             reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IDENTIFIER      reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    USE             reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    GLOBAL          reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    CLASS           reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    IF              reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FUNCTION        reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    REPEAT          reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    FOR             reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    WHILE           reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    TRY             reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    DOT             reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    $end            reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)
    RMB             reduce using rule 62 (if_statement -> if_statement_1 if_statement_2 if_statement_3 .)


state 99

    (68) if_statement_2 -> if_statement_2 ELSE . IF LSB condition RSB LMB expression RMB
    (69) if_statement_3 -> ELSE . LMB expression RMB

    IF              shift and go to state 132
    LMB             shift and go to state 101


state 100

    (67) if_statement_2 -> ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 133


state 101

    (69) if_statement_3 -> ELSE LMB . expression RMB
    (7) expression -> . variable_declaration SEMI
    (8) expression -> . variable_value_change SEMI
    (9) expression -> . if_statement
    (10) expression -> . function
    (11) expression -> . function_call SEMI
    (12) expression -> . repeat
    (13) expression -> . for
    (14) expression -> . while
    (15) expression -> . use SEMI
    (16) expression -> . error_handling
    (17) expression -> . variable_alone SEMI
    (18) expression -> . global_variable SEMI
    (19) expression -> . class_def
    (20) expression -> . debug SEMI
    (21) expression -> . function_class SEMI
    (22) expression -> . inside_root SEMI
    (23) expression -> . empty
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (33) repeat -> . repeat_head repeat_body
    (27) for -> . for_head for_body
    (30) while -> . while_head while_body
    (76) use -> . USE use_params
    (24) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (36) inside_root -> . inside
    (37) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (34) repeat_head -> . REPEAT LSB calculate RSB
    (28) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (31) while_head -> . WHILE LSB condition RSB
    (25) try -> . TRY LMB expression RMB
    (38) inside -> . DOT IDENTIFIER LSB empty RSB
    (39) inside -> . inside DOT IDENTIFIER
    (40) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (41) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (42) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (43) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (44) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (45) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (46) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (47) inside -> . IDENTIFIER DOT IDENTIFIER

    VAR             shift and go to state 22
    IDENTIFIER      shift and go to state 23
    USE             shift and go to state 29
    GLOBAL          shift and go to state 31
    CLASS           shift and go to state 32
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 35
    FUNCTION        shift and go to state 36
    REPEAT          shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39
    TRY             shift and go to state 40
    DOT             shift and go to state 34

    expression                     shift and go to state 134
    variable_declaration           shift and go to state 5
    variable_value_change          shift and go to state 6
    if_statement                   shift and go to state 7
    function                       shift and go to state 8
    function_call                  shift and go to state 9
    repeat                         shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    use                            shift and go to state 13
    error_handling                 shift and go to state 14
    variable_alone                 shift and go to state 15
    global_variable                shift and go to state 16
    class_def                      shift and go to state 17
    debug                          shift and go to state 18
    function_class                 shift and go to state 19
    inside_root                    shift and go to state 20
    empty                          shift and go to state 21
    if_statement_1                 shift and go to state 24
    function_head                  shift and go to state 25
    repeat_head                    shift and go to state 26
    for_head                       shift and go to state 27
    while_head                     shift and go to state 28
    try                            shift and go to state 30
    inside                         shift and go to state 33

state 102

    (56) function_body -> LMB expression . RMB

    RMB             shift and go to state 135


state 103

    (35) repeat_body -> LMB expression . RMB

    RMB             shift and go to state 136


state 104

    (29) for_body -> LMB expression . RMB

    RMB             shift and go to state 137


state 105

    (32) while_body -> LMB expression . RMB

    RMB             shift and go to state 138


state 106

    (26) catch -> CATCH LSB . IDENTIFIER RSB LMB expression RMB

    IDENTIFIER      shift and go to state 139


state 107

    (52) class_def -> CLASS IDENTIFIER LMB . expression RMB
    (7) expression -> . variable_declaration SEMI
    (8) expression -> . variable_value_change SEMI
    (9) expression -> . if_statement
    (10) expression -> . function
    (11) expression -> . function_call SEMI
    (12) expression -> . repeat
    (13) expression -> . for
    (14) expression -> . while
    (15) expression -> . use SEMI
    (16) expression -> . error_handling
    (17) expression -> . variable_alone SEMI
    (18) expression -> . global_variable SEMI
    (19) expression -> . class_def
    (20) expression -> . debug SEMI
    (21) expression -> . function_class SEMI
    (22) expression -> . inside_root SEMI
    (23) expression -> . empty
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (33) repeat -> . repeat_head repeat_body
    (27) for -> . for_head for_body
    (30) while -> . while_head while_body
    (76) use -> . USE use_params
    (24) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (36) inside_root -> . inside
    (37) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (34) repeat_head -> . REPEAT LSB calculate RSB
    (28) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (31) while_head -> . WHILE LSB condition RSB
    (25) try -> . TRY LMB expression RMB
    (38) inside -> . DOT IDENTIFIER LSB empty RSB
    (39) inside -> . inside DOT IDENTIFIER
    (40) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (41) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (42) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (43) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (44) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (45) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (46) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (47) inside -> . IDENTIFIER DOT IDENTIFIER

    VAR             shift and go to state 22
    IDENTIFIER      shift and go to state 23
    USE             shift and go to state 29
    GLOBAL          shift and go to state 31
    CLASS           shift and go to state 32
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 35
    FUNCTION        shift and go to state 36
    REPEAT          shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39
    TRY             shift and go to state 40
    DOT             shift and go to state 34

    expression                     shift and go to state 140
    variable_declaration           shift and go to state 5
    variable_value_change          shift and go to state 6
    if_statement                   shift and go to state 7
    function                       shift and go to state 8
    function_call                  shift and go to state 9
    repeat                         shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    use                            shift and go to state 13
    error_handling                 shift and go to state 14
    variable_alone                 shift and go to state 15
    global_variable                shift and go to state 16
    class_def                      shift and go to state 17
    debug                          shift and go to state 18
    function_class                 shift and go to state 19
    inside_root                    shift and go to state 20
    empty                          shift and go to state 21
    if_statement_1                 shift and go to state 24
    function_head                  shift and go to state 25
    repeat_head                    shift and go to state 26
    for_head                       shift and go to state 27
    while_head                     shift and go to state 28
    try                            shift and go to state 30
    inside                         shift and go to state 33

state 108

    (37) inside_root -> inside DOT IDENTIFIER . LSB parameter RSB
    (39) inside -> inside DOT IDENTIFIER .

    LSB             shift and go to state 141
    DOT             reduce using rule 39 (inside -> inside DOT IDENTIFIER .)
    SEMI            reduce using rule 39 (inside -> inside DOT IDENTIFIER .)


state 109

    (38) inside -> DOT IDENTIFIER LSB . empty RSB
    (97) empty -> .

    RSB             reduce using rule 97 (empty -> .)

    empty                          shift and go to state 142

state 110

    (66) if_statement_1 -> IF LSB condition . RSB LMB expression RMB
    (70) condition -> condition . LB calculate
    (71) condition -> condition . RB calculate
    (72) condition -> condition . LB EQUAL calculate
    (73) condition -> condition . RB EQUAL calculate
    (74) condition -> condition . EQUAL calculate

    RSB             shift and go to state 143
    LB              shift and go to state 144
    RB              shift and go to state 145
    EQUAL           shift and go to state 146


state 111

    (75) condition -> calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             reduce using rule 75 (condition -> calculate .)
    LB              reduce using rule 75 (condition -> calculate .)
    RB              reduce using rule 75 (condition -> calculate .)
    EQUAL           reduce using rule 75 (condition -> calculate .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    MUL             shift and go to state 124
    DIV             shift and go to state 125


state 112

    (54) function_head -> FUNCTION IDENTIFIER LSB . parameter RSB
    (55) function_head -> FUNCTION IDENTIFIER LSB . empty RSB
    (59) parameter -> . parameter COMMA calculate
    (60) parameter -> . calculate
    (97) empty -> .
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    RSB             reduce using rule 97 (empty -> .)
    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    parameter                      shift and go to state 147
    empty                          shift and go to state 148
    calculate                      shift and go to state 95

state 113

    (34) repeat_head -> REPEAT LSB calculate . RSB
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             shift and go to state 149
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    MUL             shift and go to state 124
    DIV             shift and go to state 125


state 114

    (28) for_head -> FOR LSB IDENTIFIER . IN IDENTIFIER RSB

    IN              shift and go to state 150


state 115

    (31) while_head -> WHILE LSB condition . RSB
    (70) condition -> condition . LB calculate
    (71) condition -> condition . RB calculate
    (72) condition -> condition . LB EQUAL calculate
    (73) condition -> condition . RB EQUAL calculate
    (74) condition -> condition . EQUAL calculate

    RSB             shift and go to state 151
    LB              shift and go to state 144
    RB              shift and go to state 145
    EQUAL           shift and go to state 146


state 116

    (25) try -> TRY LMB expression . RMB

    RMB             shift and go to state 152


state 117

    (82) variable_declaration -> VAR IDENTIFIER LIST EQUAL . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    calculate                      shift and go to state 153

state 118

    (48) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER . LSB parameter RSB
    (49) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER . LSB empty RSB
    (93) calculate -> IDENTIFIER .
    (94) calculate -> IDENTIFIER . LIST

    LSB             shift and go to state 154
    PLUS            reduce using rule 93 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 93 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 93 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 93 (calculate -> IDENTIFIER .)
    SEMI            reduce using rule 93 (calculate -> IDENTIFIER .)
    LIST            shift and go to state 121


state 119

    (83) variable_declaration -> VAR IDENTIFIER EQUAL calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 83 (variable_declaration -> VAR IDENTIFIER EQUAL calculate .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    MUL             shift and go to state 124
    DIV             shift and go to state 125


state 120

    (50) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB . parameter RSB
    (51) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB . empty RSB
    (59) parameter -> . parameter COMMA calculate
    (60) parameter -> . calculate
    (97) empty -> .
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    RSB             reduce using rule 97 (empty -> .)
    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    parameter                      shift and go to state 155
    empty                          shift and go to state 156
    calculate                      shift and go to state 95

state 121

    (94) calculate -> IDENTIFIER LIST .

    PLUS            reduce using rule 94 (calculate -> IDENTIFIER LIST .)
    MINUS           reduce using rule 94 (calculate -> IDENTIFIER LIST .)
    MUL             reduce using rule 94 (calculate -> IDENTIFIER LIST .)
    DIV             reduce using rule 94 (calculate -> IDENTIFIER LIST .)
    SEMI            reduce using rule 94 (calculate -> IDENTIFIER LIST .)
    RSB             reduce using rule 94 (calculate -> IDENTIFIER LIST .)
    COMMA           reduce using rule 94 (calculate -> IDENTIFIER LIST .)
    LB              reduce using rule 94 (calculate -> IDENTIFIER LIST .)
    RB              reduce using rule 94 (calculate -> IDENTIFIER LIST .)
    EQUAL           reduce using rule 94 (calculate -> IDENTIFIER LIST .)


state 122

    (85) calculate -> calculate PLUS . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    calculate                      shift and go to state 157

state 123

    (86) calculate -> calculate MINUS . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    calculate                      shift and go to state 158

state 124

    (88) calculate -> calculate MUL . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    calculate                      shift and go to state 159

state 125

    (89) calculate -> calculate DIV . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    calculate                      shift and go to state 160

state 126

    (96) calculate -> LSB calculate . RSB
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             shift and go to state 161
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    MUL             shift and go to state 124
    DIV             shift and go to state 125


state 127

    (87) calculate -> MINUS calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 87 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 87 (calculate -> MINUS calculate .)
    MUL             reduce using rule 87 (calculate -> MINUS calculate .)
    DIV             reduce using rule 87 (calculate -> MINUS calculate .)
    SEMI            reduce using rule 87 (calculate -> MINUS calculate .)
    RSB             reduce using rule 87 (calculate -> MINUS calculate .)
    COMMA           reduce using rule 87 (calculate -> MINUS calculate .)
    LB              reduce using rule 87 (calculate -> MINUS calculate .)
    RB              reduce using rule 87 (calculate -> MINUS calculate .)
    EQUAL           reduce using rule 87 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 123 ]
  ! MUL             [ shift and go to state 124 ]
  ! DIV             [ shift and go to state 125 ]


state 128

    (57) function_call -> IDENTIFIER LSB parameter RSB .
    (40) inside -> IDENTIFIER LSB parameter RSB . DOT IDENTIFIER LSB parameter RSB
    (42) inside -> IDENTIFIER LSB parameter RSB . DOT IDENTIFIER LSB empty RSB
    (46) inside -> IDENTIFIER LSB parameter RSB . DOT IDENTIFIER

    SEMI            reduce using rule 57 (function_call -> IDENTIFIER LSB parameter RSB .)
    DOT             shift and go to state 162


state 129

    (59) parameter -> parameter COMMA . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    calculate                      shift and go to state 163

state 130

    (58) function_call -> IDENTIFIER LSB empty RSB .
    (41) inside -> IDENTIFIER LSB empty RSB . DOT IDENTIFIER LSB empty RSB
    (43) inside -> IDENTIFIER LSB empty RSB . DOT IDENTIFIER LSB parameter RSB

    SEMI            reduce using rule 58 (function_call -> IDENTIFIER LSB empty RSB .)
    DOT             shift and go to state 164


state 131

    (44) inside -> IDENTIFIER DOT IDENTIFIER LSB . parameter RSB
    (45) inside -> IDENTIFIER DOT IDENTIFIER LSB . empty RSB
    (59) parameter -> . parameter COMMA calculate
    (60) parameter -> . calculate
    (97) empty -> .
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    RSB             reduce using rule 97 (empty -> .)
    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    parameter                      shift and go to state 165
    empty                          shift and go to state 166
    calculate                      shift and go to state 95

state 132

    (68) if_statement_2 -> if_statement_2 ELSE IF . LSB condition RSB LMB expression RMB

    LSB             shift and go to state 167


state 133

    (67) if_statement_2 -> ELSE IF LSB . condition RSB LMB expression RMB
    (70) condition -> . condition LB calculate
    (71) condition -> . condition RB calculate
    (72) condition -> . condition LB EQUAL calculate
    (73) condition -> . condition RB EQUAL calculate
    (74) condition -> . condition EQUAL calculate
    (75) condition -> . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    condition                      shift and go to state 168
    calculate                      shift and go to state 111

state 134

    (69) if_statement_3 -> ELSE LMB expression . RMB

    RMB             shift and go to state 169


state 135

    (56) function_body -> LMB expression RMB .

    VAR             reduce using rule 56 (function_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 56 (function_body -> LMB expression RMB .)
    USE             reduce using rule 56 (function_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 56 (function_body -> LMB expression RMB .)
    CLASS           reduce using rule 56 (function_body -> LMB expression RMB .)
    IF              reduce using rule 56 (function_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 56 (function_body -> LMB expression RMB .)
    REPEAT          reduce using rule 56 (function_body -> LMB expression RMB .)
    FOR             reduce using rule 56 (function_body -> LMB expression RMB .)
    WHILE           reduce using rule 56 (function_body -> LMB expression RMB .)
    TRY             reduce using rule 56 (function_body -> LMB expression RMB .)
    DOT             reduce using rule 56 (function_body -> LMB expression RMB .)
    $end            reduce using rule 56 (function_body -> LMB expression RMB .)
    RMB             reduce using rule 56 (function_body -> LMB expression RMB .)


state 136

    (35) repeat_body -> LMB expression RMB .

    VAR             reduce using rule 35 (repeat_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 35 (repeat_body -> LMB expression RMB .)
    USE             reduce using rule 35 (repeat_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 35 (repeat_body -> LMB expression RMB .)
    CLASS           reduce using rule 35 (repeat_body -> LMB expression RMB .)
    IF              reduce using rule 35 (repeat_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 35 (repeat_body -> LMB expression RMB .)
    REPEAT          reduce using rule 35 (repeat_body -> LMB expression RMB .)
    FOR             reduce using rule 35 (repeat_body -> LMB expression RMB .)
    WHILE           reduce using rule 35 (repeat_body -> LMB expression RMB .)
    TRY             reduce using rule 35 (repeat_body -> LMB expression RMB .)
    DOT             reduce using rule 35 (repeat_body -> LMB expression RMB .)
    $end            reduce using rule 35 (repeat_body -> LMB expression RMB .)
    RMB             reduce using rule 35 (repeat_body -> LMB expression RMB .)


state 137

    (29) for_body -> LMB expression RMB .

    VAR             reduce using rule 29 (for_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 29 (for_body -> LMB expression RMB .)
    USE             reduce using rule 29 (for_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 29 (for_body -> LMB expression RMB .)
    CLASS           reduce using rule 29 (for_body -> LMB expression RMB .)
    IF              reduce using rule 29 (for_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 29 (for_body -> LMB expression RMB .)
    REPEAT          reduce using rule 29 (for_body -> LMB expression RMB .)
    FOR             reduce using rule 29 (for_body -> LMB expression RMB .)
    WHILE           reduce using rule 29 (for_body -> LMB expression RMB .)
    TRY             reduce using rule 29 (for_body -> LMB expression RMB .)
    DOT             reduce using rule 29 (for_body -> LMB expression RMB .)
    $end            reduce using rule 29 (for_body -> LMB expression RMB .)
    RMB             reduce using rule 29 (for_body -> LMB expression RMB .)


state 138

    (32) while_body -> LMB expression RMB .

    VAR             reduce using rule 32 (while_body -> LMB expression RMB .)
    IDENTIFIER      reduce using rule 32 (while_body -> LMB expression RMB .)
    USE             reduce using rule 32 (while_body -> LMB expression RMB .)
    GLOBAL          reduce using rule 32 (while_body -> LMB expression RMB .)
    CLASS           reduce using rule 32 (while_body -> LMB expression RMB .)
    IF              reduce using rule 32 (while_body -> LMB expression RMB .)
    FUNCTION        reduce using rule 32 (while_body -> LMB expression RMB .)
    REPEAT          reduce using rule 32 (while_body -> LMB expression RMB .)
    FOR             reduce using rule 32 (while_body -> LMB expression RMB .)
    WHILE           reduce using rule 32 (while_body -> LMB expression RMB .)
    TRY             reduce using rule 32 (while_body -> LMB expression RMB .)
    DOT             reduce using rule 32 (while_body -> LMB expression RMB .)
    $end            reduce using rule 32 (while_body -> LMB expression RMB .)
    RMB             reduce using rule 32 (while_body -> LMB expression RMB .)


state 139

    (26) catch -> CATCH LSB IDENTIFIER . RSB LMB expression RMB

    RSB             shift and go to state 170


state 140

    (52) class_def -> CLASS IDENTIFIER LMB expression . RMB

    RMB             shift and go to state 171


state 141

    (37) inside_root -> inside DOT IDENTIFIER LSB . parameter RSB
    (59) parameter -> . parameter COMMA calculate
    (60) parameter -> . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    parameter                      shift and go to state 172
    calculate                      shift and go to state 95

state 142

    (38) inside -> DOT IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 173


state 143

    (66) if_statement_1 -> IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 174


state 144

    (70) condition -> condition LB . calculate
    (72) condition -> condition LB . EQUAL calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 176
    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    calculate                      shift and go to state 175

state 145

    (71) condition -> condition RB . calculate
    (73) condition -> condition RB . EQUAL calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    EQUAL           shift and go to state 178
    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    calculate                      shift and go to state 177

state 146

    (74) condition -> condition EQUAL . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    calculate                      shift and go to state 179

state 147

    (54) function_head -> FUNCTION IDENTIFIER LSB parameter . RSB
    (59) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 180
    COMMA           shift and go to state 129


state 148

    (55) function_head -> FUNCTION IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 181


state 149

    (34) repeat_head -> REPEAT LSB calculate RSB .

    LMB             reduce using rule 34 (repeat_head -> REPEAT LSB calculate RSB .)


state 150

    (28) for_head -> FOR LSB IDENTIFIER IN . IDENTIFIER RSB

    IDENTIFIER      shift and go to state 182


state 151

    (31) while_head -> WHILE LSB condition RSB .

    LMB             reduce using rule 31 (while_head -> WHILE LSB condition RSB .)


state 152

    (25) try -> TRY LMB expression RMB .

    CATCH           reduce using rule 25 (try -> TRY LMB expression RMB .)


state 153

    (82) variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    SEMI            reduce using rule 82 (variable_declaration -> VAR IDENTIFIER LIST EQUAL calculate .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    MUL             shift and go to state 124
    DIV             shift and go to state 125


state 154

    (48) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB . parameter RSB
    (49) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB . empty RSB
    (59) parameter -> . parameter COMMA calculate
    (60) parameter -> . calculate
    (97) empty -> .
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    RSB             reduce using rule 97 (empty -> .)
    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    parameter                      shift and go to state 183
    empty                          shift and go to state 184
    calculate                      shift and go to state 95

state 155

    (50) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter . RSB
    (59) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 185
    COMMA           shift and go to state 129


state 156

    (51) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 186


state 157

    (85) calculate -> calculate PLUS calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 85 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 85 (calculate -> calculate PLUS calculate .)
    SEMI            reduce using rule 85 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 85 (calculate -> calculate PLUS calculate .)
    COMMA           reduce using rule 85 (calculate -> calculate PLUS calculate .)
    LB              reduce using rule 85 (calculate -> calculate PLUS calculate .)
    RB              reduce using rule 85 (calculate -> calculate PLUS calculate .)
    EQUAL           reduce using rule 85 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 124
    DIV             shift and go to state 125

  ! MUL             [ reduce using rule 85 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 85 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 123 ]


state 158

    (86) calculate -> calculate MINUS calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 86 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 86 (calculate -> calculate MINUS calculate .)
    SEMI            reduce using rule 86 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 86 (calculate -> calculate MINUS calculate .)
    COMMA           reduce using rule 86 (calculate -> calculate MINUS calculate .)
    LB              reduce using rule 86 (calculate -> calculate MINUS calculate .)
    RB              reduce using rule 86 (calculate -> calculate MINUS calculate .)
    EQUAL           reduce using rule 86 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 124
    DIV             shift and go to state 125

  ! MUL             [ reduce using rule 86 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 86 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 123 ]


state 159

    (88) calculate -> calculate MUL calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 88 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 88 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 88 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 88 (calculate -> calculate MUL calculate .)
    SEMI            reduce using rule 88 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 88 (calculate -> calculate MUL calculate .)
    COMMA           reduce using rule 88 (calculate -> calculate MUL calculate .)
    LB              reduce using rule 88 (calculate -> calculate MUL calculate .)
    RB              reduce using rule 88 (calculate -> calculate MUL calculate .)
    EQUAL           reduce using rule 88 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 123 ]
  ! MUL             [ shift and go to state 124 ]
  ! DIV             [ shift and go to state 125 ]


state 160

    (89) calculate -> calculate DIV calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    PLUS            reduce using rule 89 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 89 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 89 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 89 (calculate -> calculate DIV calculate .)
    SEMI            reduce using rule 89 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 89 (calculate -> calculate DIV calculate .)
    COMMA           reduce using rule 89 (calculate -> calculate DIV calculate .)
    LB              reduce using rule 89 (calculate -> calculate DIV calculate .)
    RB              reduce using rule 89 (calculate -> calculate DIV calculate .)
    EQUAL           reduce using rule 89 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 123 ]
  ! MUL             [ shift and go to state 124 ]
  ! DIV             [ shift and go to state 125 ]


state 161

    (96) calculate -> LSB calculate RSB .

    PLUS            reduce using rule 96 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 96 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 96 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 96 (calculate -> LSB calculate RSB .)
    SEMI            reduce using rule 96 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 96 (calculate -> LSB calculate RSB .)
    COMMA           reduce using rule 96 (calculate -> LSB calculate RSB .)
    LB              reduce using rule 96 (calculate -> LSB calculate RSB .)
    RB              reduce using rule 96 (calculate -> LSB calculate RSB .)
    EQUAL           reduce using rule 96 (calculate -> LSB calculate RSB .)


state 162

    (40) inside -> IDENTIFIER LSB parameter RSB DOT . IDENTIFIER LSB parameter RSB
    (42) inside -> IDENTIFIER LSB parameter RSB DOT . IDENTIFIER LSB empty RSB
    (46) inside -> IDENTIFIER LSB parameter RSB DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 187


state 163

    (59) parameter -> parameter COMMA calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             reduce using rule 59 (parameter -> parameter COMMA calculate .)
    COMMA           reduce using rule 59 (parameter -> parameter COMMA calculate .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    MUL             shift and go to state 124
    DIV             shift and go to state 125


state 164

    (41) inside -> IDENTIFIER LSB empty RSB DOT . IDENTIFIER LSB empty RSB
    (43) inside -> IDENTIFIER LSB empty RSB DOT . IDENTIFIER LSB parameter RSB

    IDENTIFIER      shift and go to state 188


state 165

    (44) inside -> IDENTIFIER DOT IDENTIFIER LSB parameter . RSB
    (59) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 189
    COMMA           shift and go to state 129


state 166

    (45) inside -> IDENTIFIER DOT IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 190


state 167

    (68) if_statement_2 -> if_statement_2 ELSE IF LSB . condition RSB LMB expression RMB
    (70) condition -> . condition LB calculate
    (71) condition -> . condition RB calculate
    (72) condition -> . condition LB EQUAL calculate
    (73) condition -> . condition RB EQUAL calculate
    (74) condition -> . condition EQUAL calculate
    (75) condition -> . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    condition                      shift and go to state 191
    calculate                      shift and go to state 111

state 168

    (67) if_statement_2 -> ELSE IF LSB condition . RSB LMB expression RMB
    (70) condition -> condition . LB calculate
    (71) condition -> condition . RB calculate
    (72) condition -> condition . LB EQUAL calculate
    (73) condition -> condition . RB EQUAL calculate
    (74) condition -> condition . EQUAL calculate

    RSB             shift and go to state 192
    LB              shift and go to state 144
    RB              shift and go to state 145
    EQUAL           shift and go to state 146


state 169

    (69) if_statement_3 -> ELSE LMB expression RMB .

    VAR             reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    IDENTIFIER      reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    USE             reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    GLOBAL          reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    CLASS           reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    IF              reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    FUNCTION        reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    REPEAT          reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    FOR             reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    WHILE           reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    TRY             reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    DOT             reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    $end            reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)
    RMB             reduce using rule 69 (if_statement_3 -> ELSE LMB expression RMB .)


state 170

    (26) catch -> CATCH LSB IDENTIFIER RSB . LMB expression RMB

    LMB             shift and go to state 193


state 171

    (52) class_def -> CLASS IDENTIFIER LMB expression RMB .

    VAR             reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    IDENTIFIER      reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    USE             reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    GLOBAL          reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    CLASS           reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    IF              reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    FUNCTION        reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    REPEAT          reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    FOR             reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    WHILE           reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    TRY             reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    DOT             reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    $end            reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)
    RMB             reduce using rule 52 (class_def -> CLASS IDENTIFIER LMB expression RMB .)


state 172

    (37) inside_root -> inside DOT IDENTIFIER LSB parameter . RSB
    (59) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 194
    COMMA           shift and go to state 129


state 173

    (38) inside -> DOT IDENTIFIER LSB empty RSB .

    DOT             reduce using rule 38 (inside -> DOT IDENTIFIER LSB empty RSB .)
    SEMI            reduce using rule 38 (inside -> DOT IDENTIFIER LSB empty RSB .)


state 174

    (66) if_statement_1 -> IF LSB condition RSB LMB . expression RMB
    (7) expression -> . variable_declaration SEMI
    (8) expression -> . variable_value_change SEMI
    (9) expression -> . if_statement
    (10) expression -> . function
    (11) expression -> . function_call SEMI
    (12) expression -> . repeat
    (13) expression -> . for
    (14) expression -> . while
    (15) expression -> . use SEMI
    (16) expression -> . error_handling
    (17) expression -> . variable_alone SEMI
    (18) expression -> . global_variable SEMI
    (19) expression -> . class_def
    (20) expression -> . debug SEMI
    (21) expression -> . function_class SEMI
    (22) expression -> . inside_root SEMI
    (23) expression -> . empty
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (33) repeat -> . repeat_head repeat_body
    (27) for -> . for_head for_body
    (30) while -> . while_head while_body
    (76) use -> . USE use_params
    (24) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (36) inside_root -> . inside
    (37) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (34) repeat_head -> . REPEAT LSB calculate RSB
    (28) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (31) while_head -> . WHILE LSB condition RSB
    (25) try -> . TRY LMB expression RMB
    (38) inside -> . DOT IDENTIFIER LSB empty RSB
    (39) inside -> . inside DOT IDENTIFIER
    (40) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (41) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (42) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (43) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (44) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (45) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (46) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (47) inside -> . IDENTIFIER DOT IDENTIFIER

    VAR             shift and go to state 22
    IDENTIFIER      shift and go to state 23
    USE             shift and go to state 29
    GLOBAL          shift and go to state 31
    CLASS           shift and go to state 32
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 35
    FUNCTION        shift and go to state 36
    REPEAT          shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39
    TRY             shift and go to state 40
    DOT             shift and go to state 34

    expression                     shift and go to state 195
    variable_declaration           shift and go to state 5
    variable_value_change          shift and go to state 6
    if_statement                   shift and go to state 7
    function                       shift and go to state 8
    function_call                  shift and go to state 9
    repeat                         shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    use                            shift and go to state 13
    error_handling                 shift and go to state 14
    variable_alone                 shift and go to state 15
    global_variable                shift and go to state 16
    class_def                      shift and go to state 17
    debug                          shift and go to state 18
    function_class                 shift and go to state 19
    inside_root                    shift and go to state 20
    empty                          shift and go to state 21
    if_statement_1                 shift and go to state 24
    function_head                  shift and go to state 25
    repeat_head                    shift and go to state 26
    for_head                       shift and go to state 27
    while_head                     shift and go to state 28
    try                            shift and go to state 30
    inside                         shift and go to state 33

state 175

    (70) condition -> condition LB calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             reduce using rule 70 (condition -> condition LB calculate .)
    LB              reduce using rule 70 (condition -> condition LB calculate .)
    RB              reduce using rule 70 (condition -> condition LB calculate .)
    EQUAL           reduce using rule 70 (condition -> condition LB calculate .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    MUL             shift and go to state 124
    DIV             shift and go to state 125


state 176

    (72) condition -> condition LB EQUAL . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    calculate                      shift and go to state 196

state 177

    (71) condition -> condition RB calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             reduce using rule 71 (condition -> condition RB calculate .)
    LB              reduce using rule 71 (condition -> condition RB calculate .)
    RB              reduce using rule 71 (condition -> condition RB calculate .)
    EQUAL           reduce using rule 71 (condition -> condition RB calculate .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    MUL             shift and go to state 124
    DIV             shift and go to state 125


state 178

    (73) condition -> condition RB EQUAL . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    calculate                      shift and go to state 197

state 179

    (74) condition -> condition EQUAL calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             reduce using rule 74 (condition -> condition EQUAL calculate .)
    LB              reduce using rule 74 (condition -> condition EQUAL calculate .)
    RB              reduce using rule 74 (condition -> condition EQUAL calculate .)
    EQUAL           reduce using rule 74 (condition -> condition EQUAL calculate .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    MUL             shift and go to state 124
    DIV             shift and go to state 125


state 180

    (54) function_head -> FUNCTION IDENTIFIER LSB parameter RSB .

    LMB             reduce using rule 54 (function_head -> FUNCTION IDENTIFIER LSB parameter RSB .)


state 181

    (55) function_head -> FUNCTION IDENTIFIER LSB empty RSB .

    LMB             reduce using rule 55 (function_head -> FUNCTION IDENTIFIER LSB empty RSB .)


state 182

    (28) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER . RSB

    RSB             shift and go to state 198


state 183

    (48) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter . RSB
    (59) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 199
    COMMA           shift and go to state 129


state 184

    (49) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 200


state 185

    (50) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .

    SEMI            reduce using rule 50 (function_class -> IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .)


state 186

    (51) function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .

    SEMI            reduce using rule 51 (function_class -> IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .)


state 187

    (40) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER . LSB parameter RSB
    (42) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER . LSB empty RSB
    (46) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER .

    LSB             shift and go to state 201
    DOT             reduce using rule 46 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER .)
    SEMI            reduce using rule 46 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER .)


state 188

    (41) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER . LSB empty RSB
    (43) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER . LSB parameter RSB

    LSB             shift and go to state 202


state 189

    (44) inside -> IDENTIFIER DOT IDENTIFIER LSB parameter RSB .

    DOT             reduce using rule 44 (inside -> IDENTIFIER DOT IDENTIFIER LSB parameter RSB .)
    SEMI            reduce using rule 44 (inside -> IDENTIFIER DOT IDENTIFIER LSB parameter RSB .)


state 190

    (45) inside -> IDENTIFIER DOT IDENTIFIER LSB empty RSB .

    DOT             reduce using rule 45 (inside -> IDENTIFIER DOT IDENTIFIER LSB empty RSB .)
    SEMI            reduce using rule 45 (inside -> IDENTIFIER DOT IDENTIFIER LSB empty RSB .)


state 191

    (68) if_statement_2 -> if_statement_2 ELSE IF LSB condition . RSB LMB expression RMB
    (70) condition -> condition . LB calculate
    (71) condition -> condition . RB calculate
    (72) condition -> condition . LB EQUAL calculate
    (73) condition -> condition . RB EQUAL calculate
    (74) condition -> condition . EQUAL calculate

    RSB             shift and go to state 203
    LB              shift and go to state 144
    RB              shift and go to state 145
    EQUAL           shift and go to state 146


state 192

    (67) if_statement_2 -> ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 204


state 193

    (26) catch -> CATCH LSB IDENTIFIER RSB LMB . expression RMB
    (7) expression -> . variable_declaration SEMI
    (8) expression -> . variable_value_change SEMI
    (9) expression -> . if_statement
    (10) expression -> . function
    (11) expression -> . function_call SEMI
    (12) expression -> . repeat
    (13) expression -> . for
    (14) expression -> . while
    (15) expression -> . use SEMI
    (16) expression -> . error_handling
    (17) expression -> . variable_alone SEMI
    (18) expression -> . global_variable SEMI
    (19) expression -> . class_def
    (20) expression -> . debug SEMI
    (21) expression -> . function_class SEMI
    (22) expression -> . inside_root SEMI
    (23) expression -> . empty
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (33) repeat -> . repeat_head repeat_body
    (27) for -> . for_head for_body
    (30) while -> . while_head while_body
    (76) use -> . USE use_params
    (24) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (36) inside_root -> . inside
    (37) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (34) repeat_head -> . REPEAT LSB calculate RSB
    (28) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (31) while_head -> . WHILE LSB condition RSB
    (25) try -> . TRY LMB expression RMB
    (38) inside -> . DOT IDENTIFIER LSB empty RSB
    (39) inside -> . inside DOT IDENTIFIER
    (40) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (41) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (42) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (43) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (44) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (45) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (46) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (47) inside -> . IDENTIFIER DOT IDENTIFIER

    VAR             shift and go to state 22
    IDENTIFIER      shift and go to state 23
    USE             shift and go to state 29
    GLOBAL          shift and go to state 31
    CLASS           shift and go to state 32
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 35
    FUNCTION        shift and go to state 36
    REPEAT          shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39
    TRY             shift and go to state 40
    DOT             shift and go to state 34

    expression                     shift and go to state 205
    variable_declaration           shift and go to state 5
    variable_value_change          shift and go to state 6
    if_statement                   shift and go to state 7
    function                       shift and go to state 8
    function_call                  shift and go to state 9
    repeat                         shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    use                            shift and go to state 13
    error_handling                 shift and go to state 14
    variable_alone                 shift and go to state 15
    global_variable                shift and go to state 16
    class_def                      shift and go to state 17
    debug                          shift and go to state 18
    function_class                 shift and go to state 19
    inside_root                    shift and go to state 20
    empty                          shift and go to state 21
    if_statement_1                 shift and go to state 24
    function_head                  shift and go to state 25
    repeat_head                    shift and go to state 26
    for_head                       shift and go to state 27
    while_head                     shift and go to state 28
    try                            shift and go to state 30
    inside                         shift and go to state 33

state 194

    (37) inside_root -> inside DOT IDENTIFIER LSB parameter RSB .

    SEMI            reduce using rule 37 (inside_root -> inside DOT IDENTIFIER LSB parameter RSB .)


state 195

    (66) if_statement_1 -> IF LSB condition RSB LMB expression . RMB

    RMB             shift and go to state 206


state 196

    (72) condition -> condition LB EQUAL calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             reduce using rule 72 (condition -> condition LB EQUAL calculate .)
    LB              reduce using rule 72 (condition -> condition LB EQUAL calculate .)
    RB              reduce using rule 72 (condition -> condition LB EQUAL calculate .)
    EQUAL           reduce using rule 72 (condition -> condition LB EQUAL calculate .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    MUL             shift and go to state 124
    DIV             shift and go to state 125


state 197

    (73) condition -> condition RB EQUAL calculate .
    (85) calculate -> calculate . PLUS calculate
    (86) calculate -> calculate . MINUS calculate
    (88) calculate -> calculate . MUL calculate
    (89) calculate -> calculate . DIV calculate

    RSB             reduce using rule 73 (condition -> condition RB EQUAL calculate .)
    LB              reduce using rule 73 (condition -> condition RB EQUAL calculate .)
    RB              reduce using rule 73 (condition -> condition RB EQUAL calculate .)
    EQUAL           reduce using rule 73 (condition -> condition RB EQUAL calculate .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    MUL             shift and go to state 124
    DIV             shift and go to state 125


state 198

    (28) for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .

    LMB             reduce using rule 28 (for_head -> FOR LSB IDENTIFIER IN IDENTIFIER RSB .)


state 199

    (48) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .

    SEMI            reduce using rule 48 (function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB .)


state 200

    (49) function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .

    SEMI            reduce using rule 49 (function_class -> VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB .)


state 201

    (40) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB . parameter RSB
    (42) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB . empty RSB
    (59) parameter -> . parameter COMMA calculate
    (60) parameter -> . calculate
    (97) empty -> .
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    RSB             reduce using rule 97 (empty -> .)
    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    parameter                      shift and go to state 207
    empty                          shift and go to state 208
    calculate                      shift and go to state 95

state 202

    (41) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB . empty RSB
    (43) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB . parameter RSB
    (97) empty -> .
    (59) parameter -> . parameter COMMA calculate
    (60) parameter -> . calculate
    (85) calculate -> . calculate PLUS calculate
    (86) calculate -> . calculate MINUS calculate
    (87) calculate -> . MINUS calculate
    (88) calculate -> . calculate MUL calculate
    (89) calculate -> . calculate DIV calculate
    (90) calculate -> . INT
    (91) calculate -> . FLOAT
    (92) calculate -> . STRING
    (93) calculate -> . IDENTIFIER
    (94) calculate -> . IDENTIFIER LIST
    (95) calculate -> . LIST
    (96) calculate -> . LSB calculate RSB

    RSB             reduce using rule 97 (empty -> .)
    MINUS           shift and go to state 88
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    STRING          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LIST            shift and go to state 96
    LSB             shift and go to state 87

    empty                          shift and go to state 209
    parameter                      shift and go to state 210
    calculate                      shift and go to state 95

state 203

    (68) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB . LMB expression RMB

    LMB             shift and go to state 211


state 204

    (67) if_statement_2 -> ELSE IF LSB condition RSB LMB . expression RMB
    (7) expression -> . variable_declaration SEMI
    (8) expression -> . variable_value_change SEMI
    (9) expression -> . if_statement
    (10) expression -> . function
    (11) expression -> . function_call SEMI
    (12) expression -> . repeat
    (13) expression -> . for
    (14) expression -> . while
    (15) expression -> . use SEMI
    (16) expression -> . error_handling
    (17) expression -> . variable_alone SEMI
    (18) expression -> . global_variable SEMI
    (19) expression -> . class_def
    (20) expression -> . debug SEMI
    (21) expression -> . function_class SEMI
    (22) expression -> . inside_root SEMI
    (23) expression -> . empty
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (33) repeat -> . repeat_head repeat_body
    (27) for -> . for_head for_body
    (30) while -> . while_head while_body
    (76) use -> . USE use_params
    (24) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (36) inside_root -> . inside
    (37) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (34) repeat_head -> . REPEAT LSB calculate RSB
    (28) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (31) while_head -> . WHILE LSB condition RSB
    (25) try -> . TRY LMB expression RMB
    (38) inside -> . DOT IDENTIFIER LSB empty RSB
    (39) inside -> . inside DOT IDENTIFIER
    (40) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (41) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (42) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (43) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (44) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (45) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (46) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (47) inside -> . IDENTIFIER DOT IDENTIFIER

    VAR             shift and go to state 22
    IDENTIFIER      shift and go to state 23
    USE             shift and go to state 29
    GLOBAL          shift and go to state 31
    CLASS           shift and go to state 32
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 35
    FUNCTION        shift and go to state 36
    REPEAT          shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39
    TRY             shift and go to state 40
    DOT             shift and go to state 34

    expression                     shift and go to state 212
    variable_declaration           shift and go to state 5
    variable_value_change          shift and go to state 6
    if_statement                   shift and go to state 7
    function                       shift and go to state 8
    function_call                  shift and go to state 9
    repeat                         shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    use                            shift and go to state 13
    error_handling                 shift and go to state 14
    variable_alone                 shift and go to state 15
    global_variable                shift and go to state 16
    class_def                      shift and go to state 17
    debug                          shift and go to state 18
    function_class                 shift and go to state 19
    inside_root                    shift and go to state 20
    empty                          shift and go to state 21
    if_statement_1                 shift and go to state 24
    function_head                  shift and go to state 25
    repeat_head                    shift and go to state 26
    for_head                       shift and go to state 27
    while_head                     shift and go to state 28
    try                            shift and go to state 30
    inside                         shift and go to state 33

state 205

    (26) catch -> CATCH LSB IDENTIFIER RSB LMB expression . RMB

    RMB             shift and go to state 213


state 206

    (66) if_statement_1 -> IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    DOT             reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 66 (if_statement_1 -> IF LSB condition RSB LMB expression RMB .)


state 207

    (40) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter . RSB
    (59) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 214
    COMMA           shift and go to state 129


state 208

    (42) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 215


state 209

    (41) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty . RSB

    RSB             shift and go to state 216


state 210

    (43) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter . RSB
    (59) parameter -> parameter . COMMA calculate

    RSB             shift and go to state 217
    COMMA           shift and go to state 129


state 211

    (68) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB . expression RMB
    (7) expression -> . variable_declaration SEMI
    (8) expression -> . variable_value_change SEMI
    (9) expression -> . if_statement
    (10) expression -> . function
    (11) expression -> . function_call SEMI
    (12) expression -> . repeat
    (13) expression -> . for
    (14) expression -> . while
    (15) expression -> . use SEMI
    (16) expression -> . error_handling
    (17) expression -> . variable_alone SEMI
    (18) expression -> . global_variable SEMI
    (19) expression -> . class_def
    (20) expression -> . debug SEMI
    (21) expression -> . function_class SEMI
    (22) expression -> . inside_root SEMI
    (23) expression -> . empty
    (82) variable_declaration -> . VAR IDENTIFIER LIST EQUAL calculate
    (83) variable_declaration -> . VAR IDENTIFIER EQUAL calculate
    (84) variable_declaration -> . VAR IDENTIFIER
    (80) variable_value_change -> . IDENTIFIER EQUAL LIST
    (81) variable_value_change -> . IDENTIFIER EQUAL calculate
    (62) if_statement -> . if_statement_1 if_statement_2 if_statement_3
    (63) if_statement -> . if_statement_1 if_statement_2
    (64) if_statement -> . if_statement_1 if_statement_3
    (65) if_statement -> . if_statement_1
    (53) function -> . function_head function_body
    (57) function_call -> . IDENTIFIER LSB parameter RSB
    (58) function_call -> . IDENTIFIER LSB empty RSB
    (33) repeat -> . repeat_head repeat_body
    (27) for -> . for_head for_body
    (30) while -> . while_head while_body
    (76) use -> . USE use_params
    (24) error_handling -> . try catch
    (79) variable_alone -> . IDENTIFIER
    (78) global_variable -> . GLOBAL IDENTIFIER
    (52) class_def -> . CLASS IDENTIFIER LMB expression RMB
    (61) debug -> . USE DEBUG
    (48) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (49) function_class -> . VAR IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (50) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB parameter RSB
    (51) function_class -> . IDENTIFIER EQUAL IDENTIFIER LSB empty RSB
    (36) inside_root -> . inside
    (37) inside_root -> . inside DOT IDENTIFIER LSB parameter RSB
    (97) empty -> .
    (66) if_statement_1 -> . IF LSB condition RSB LMB expression RMB
    (54) function_head -> . FUNCTION IDENTIFIER LSB parameter RSB
    (55) function_head -> . FUNCTION IDENTIFIER LSB empty RSB
    (34) repeat_head -> . REPEAT LSB calculate RSB
    (28) for_head -> . FOR LSB IDENTIFIER IN IDENTIFIER RSB
    (31) while_head -> . WHILE LSB condition RSB
    (25) try -> . TRY LMB expression RMB
    (38) inside -> . DOT IDENTIFIER LSB empty RSB
    (39) inside -> . inside DOT IDENTIFIER
    (40) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB
    (41) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB
    (42) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB
    (43) inside -> . IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB
    (44) inside -> . IDENTIFIER DOT IDENTIFIER LSB parameter RSB
    (45) inside -> . IDENTIFIER DOT IDENTIFIER LSB empty RSB
    (46) inside -> . IDENTIFIER LSB parameter RSB DOT IDENTIFIER
    (47) inside -> . IDENTIFIER DOT IDENTIFIER

    VAR             shift and go to state 22
    IDENTIFIER      shift and go to state 23
    USE             shift and go to state 29
    GLOBAL          shift and go to state 31
    CLASS           shift and go to state 32
    RMB             reduce using rule 97 (empty -> .)
    IF              shift and go to state 35
    FUNCTION        shift and go to state 36
    REPEAT          shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39
    TRY             shift and go to state 40
    DOT             shift and go to state 34

    expression                     shift and go to state 218
    variable_declaration           shift and go to state 5
    variable_value_change          shift and go to state 6
    if_statement                   shift and go to state 7
    function                       shift and go to state 8
    function_call                  shift and go to state 9
    repeat                         shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    use                            shift and go to state 13
    error_handling                 shift and go to state 14
    variable_alone                 shift and go to state 15
    global_variable                shift and go to state 16
    class_def                      shift and go to state 17
    debug                          shift and go to state 18
    function_class                 shift and go to state 19
    inside_root                    shift and go to state 20
    empty                          shift and go to state 21
    if_statement_1                 shift and go to state 24
    function_head                  shift and go to state 25
    repeat_head                    shift and go to state 26
    for_head                       shift and go to state 27
    while_head                     shift and go to state 28
    try                            shift and go to state 30
    inside                         shift and go to state 33

state 212

    (67) if_statement_2 -> ELSE IF LSB condition RSB LMB expression . RMB

    RMB             shift and go to state 219


state 213

    (26) catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .

    VAR             reduce using rule 26 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 26 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    USE             reduce using rule 26 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    GLOBAL          reduce using rule 26 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    CLASS           reduce using rule 26 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    IF              reduce using rule 26 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FUNCTION        reduce using rule 26 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    REPEAT          reduce using rule 26 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    FOR             reduce using rule 26 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    WHILE           reduce using rule 26 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    TRY             reduce using rule 26 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    DOT             reduce using rule 26 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    $end            reduce using rule 26 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)
    RMB             reduce using rule 26 (catch -> CATCH LSB IDENTIFIER RSB LMB expression RMB .)


state 214

    (40) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB .

    DOT             reduce using rule 40 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB .)
    SEMI            reduce using rule 40 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB parameter RSB .)


state 215

    (42) inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB .

    DOT             reduce using rule 42 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB .)
    SEMI            reduce using rule 42 (inside -> IDENTIFIER LSB parameter RSB DOT IDENTIFIER LSB empty RSB .)


state 216

    (41) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB .

    DOT             reduce using rule 41 (inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB .)
    SEMI            reduce using rule 41 (inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB empty RSB .)


state 217

    (43) inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB .

    DOT             reduce using rule 43 (inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB .)
    SEMI            reduce using rule 43 (inside -> IDENTIFIER LSB empty RSB DOT IDENTIFIER LSB parameter RSB .)


state 218

    (68) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression . RMB

    RMB             shift and go to state 220


state 219

    (67) if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    DOT             reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 67 (if_statement_2 -> ELSE IF LSB condition RSB LMB expression RMB .)


state 220

    (68) if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .

    ELSE            reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    VAR             reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IDENTIFIER      reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    USE             reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    GLOBAL          reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    CLASS           reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    IF              reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FUNCTION        reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    REPEAT          reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    FOR             reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    WHILE           reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    TRY             reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    DOT             reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    $end            reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)
    RMB             reduce using rule 68 (if_statement_2 -> if_statement_2 ELSE IF LSB condition RSB LMB expression RMB .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for USE in state 0 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for USE in state 0 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for DOT in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 2 resolved as shift
WARNING: shift/reduce conflict for USE in state 2 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 2 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 2 resolved as shift
WARNING: shift/reduce conflict for USE in state 2 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 2 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for TRY in state 2 resolved as shift
WARNING: shift/reduce conflict for DOT in state 2 resolved as shift
WARNING: reduce/reduce conflict in state 0 resolved using rule (exp -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 0
WARNING: reduce/reduce conflict in state 2 resolved using rule (root -> exex)
WARNING: rejected rule (exp -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 2 resolved using rule (exp -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 2 resolved using rule (root -> exex)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 85 resolved using rule (variable_value_change -> IDENTIFIER EQUAL LIST)
WARNING: rejected rule (calculate -> LIST) in state 85
