Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELSE
    IF
    LMB
    RMB
    TAB

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression variable_declaration
Rule 2     expression -> variable_declaration
Rule 3     expression -> NEWLINE
Rule 4     if_head -> <empty>
Rule 5     variable_declaration -> VAR IDENTIFIER EQUAL calculate NEWLINE
Rule 6     variable_declaration -> VAR IDENTIFIER NEWLINE
Rule 7     calculate -> calculate PLUS calculate
Rule 8     calculate -> calculate MINUS calculate
Rule 9     calculate -> MINUS calculate
Rule 10    calculate -> calculate MUL calculate
Rule 11    calculate -> calculate DIV calculate
Rule 12    calculate -> INT
Rule 13    calculate -> IDENTIFIER
Rule 14    calculate -> LSB calculate RSB

Terminals, with rules where they appear

DIV                  : 11
ELSE                 : 
EQUAL                : 5
IDENTIFIER           : 5 6 13
IF                   : 
INT                  : 12
LMB                  : 
LSB                  : 14
MINUS                : 8 9
MUL                  : 10
NEWLINE              : 3 5 6
PLUS                 : 7
RMB                  : 
RSB                  : 14
TAB                  : 
VAR                  : 5 6
error                : 

Nonterminals, with rules where they appear

calculate            : 5 7 7 8 8 9 10 10 11 11 14
expression           : 1 0
if_head              : 
variable_declaration : 1 2

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression variable_declaration
    (2) expression -> . variable_declaration
    (3) expression -> . NEWLINE
    (5) variable_declaration -> . VAR IDENTIFIER EQUAL calculate NEWLINE
    (6) variable_declaration -> . VAR IDENTIFIER NEWLINE

    NEWLINE         shift and go to state 3
    VAR             shift and go to state 4

    expression                     shift and go to state 1
    variable_declaration           shift and go to state 2

state 1

    (0) S' -> expression .
    (1) expression -> expression . variable_declaration
    (5) variable_declaration -> . VAR IDENTIFIER EQUAL calculate NEWLINE
    (6) variable_declaration -> . VAR IDENTIFIER NEWLINE

    VAR             shift and go to state 4

    variable_declaration           shift and go to state 5

state 2

    (2) expression -> variable_declaration .

    VAR             reduce using rule 2 (expression -> variable_declaration .)
    $end            reduce using rule 2 (expression -> variable_declaration .)


state 3

    (3) expression -> NEWLINE .

    VAR             reduce using rule 3 (expression -> NEWLINE .)
    $end            reduce using rule 3 (expression -> NEWLINE .)


state 4

    (5) variable_declaration -> VAR . IDENTIFIER EQUAL calculate NEWLINE
    (6) variable_declaration -> VAR . IDENTIFIER NEWLINE

    IDENTIFIER      shift and go to state 6


state 5

    (1) expression -> expression variable_declaration .

    VAR             reduce using rule 1 (expression -> expression variable_declaration .)
    $end            reduce using rule 1 (expression -> expression variable_declaration .)


state 6

    (5) variable_declaration -> VAR IDENTIFIER . EQUAL calculate NEWLINE
    (6) variable_declaration -> VAR IDENTIFIER . NEWLINE

    EQUAL           shift and go to state 7
    NEWLINE         shift and go to state 8


state 7

    (5) variable_declaration -> VAR IDENTIFIER EQUAL . calculate NEWLINE
    (7) calculate -> . calculate PLUS calculate
    (8) calculate -> . calculate MINUS calculate
    (9) calculate -> . MINUS calculate
    (10) calculate -> . calculate MUL calculate
    (11) calculate -> . calculate DIV calculate
    (12) calculate -> . INT
    (13) calculate -> . IDENTIFIER
    (14) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 11
    INT             shift and go to state 12
    IDENTIFIER      shift and go to state 9
    LSB             shift and go to state 13

    calculate                      shift and go to state 10

state 8

    (6) variable_declaration -> VAR IDENTIFIER NEWLINE .

    VAR             reduce using rule 6 (variable_declaration -> VAR IDENTIFIER NEWLINE .)
    $end            reduce using rule 6 (variable_declaration -> VAR IDENTIFIER NEWLINE .)


state 9

    (13) calculate -> IDENTIFIER .

    NEWLINE         reduce using rule 13 (calculate -> IDENTIFIER .)
    PLUS            reduce using rule 13 (calculate -> IDENTIFIER .)
    MINUS           reduce using rule 13 (calculate -> IDENTIFIER .)
    MUL             reduce using rule 13 (calculate -> IDENTIFIER .)
    DIV             reduce using rule 13 (calculate -> IDENTIFIER .)
    RSB             reduce using rule 13 (calculate -> IDENTIFIER .)


state 10

    (5) variable_declaration -> VAR IDENTIFIER EQUAL calculate . NEWLINE
    (7) calculate -> calculate . PLUS calculate
    (8) calculate -> calculate . MINUS calculate
    (10) calculate -> calculate . MUL calculate
    (11) calculate -> calculate . DIV calculate

    NEWLINE         shift and go to state 14
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    MUL             shift and go to state 17
    DIV             shift and go to state 18


state 11

    (9) calculate -> MINUS . calculate
    (7) calculate -> . calculate PLUS calculate
    (8) calculate -> . calculate MINUS calculate
    (9) calculate -> . MINUS calculate
    (10) calculate -> . calculate MUL calculate
    (11) calculate -> . calculate DIV calculate
    (12) calculate -> . INT
    (13) calculate -> . IDENTIFIER
    (14) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 11
    INT             shift and go to state 12
    IDENTIFIER      shift and go to state 9
    LSB             shift and go to state 13

    calculate                      shift and go to state 19

state 12

    (12) calculate -> INT .

    NEWLINE         reduce using rule 12 (calculate -> INT .)
    PLUS            reduce using rule 12 (calculate -> INT .)
    MINUS           reduce using rule 12 (calculate -> INT .)
    MUL             reduce using rule 12 (calculate -> INT .)
    DIV             reduce using rule 12 (calculate -> INT .)
    RSB             reduce using rule 12 (calculate -> INT .)


state 13

    (14) calculate -> LSB . calculate RSB
    (7) calculate -> . calculate PLUS calculate
    (8) calculate -> . calculate MINUS calculate
    (9) calculate -> . MINUS calculate
    (10) calculate -> . calculate MUL calculate
    (11) calculate -> . calculate DIV calculate
    (12) calculate -> . INT
    (13) calculate -> . IDENTIFIER
    (14) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 11
    INT             shift and go to state 12
    IDENTIFIER      shift and go to state 9
    LSB             shift and go to state 13

    calculate                      shift and go to state 20

state 14

    (5) variable_declaration -> VAR IDENTIFIER EQUAL calculate NEWLINE .

    VAR             reduce using rule 5 (variable_declaration -> VAR IDENTIFIER EQUAL calculate NEWLINE .)
    $end            reduce using rule 5 (variable_declaration -> VAR IDENTIFIER EQUAL calculate NEWLINE .)


state 15

    (7) calculate -> calculate PLUS . calculate
    (7) calculate -> . calculate PLUS calculate
    (8) calculate -> . calculate MINUS calculate
    (9) calculate -> . MINUS calculate
    (10) calculate -> . calculate MUL calculate
    (11) calculate -> . calculate DIV calculate
    (12) calculate -> . INT
    (13) calculate -> . IDENTIFIER
    (14) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 11
    INT             shift and go to state 12
    IDENTIFIER      shift and go to state 9
    LSB             shift and go to state 13

    calculate                      shift and go to state 21

state 16

    (8) calculate -> calculate MINUS . calculate
    (7) calculate -> . calculate PLUS calculate
    (8) calculate -> . calculate MINUS calculate
    (9) calculate -> . MINUS calculate
    (10) calculate -> . calculate MUL calculate
    (11) calculate -> . calculate DIV calculate
    (12) calculate -> . INT
    (13) calculate -> . IDENTIFIER
    (14) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 11
    INT             shift and go to state 12
    IDENTIFIER      shift and go to state 9
    LSB             shift and go to state 13

    calculate                      shift and go to state 22

state 17

    (10) calculate -> calculate MUL . calculate
    (7) calculate -> . calculate PLUS calculate
    (8) calculate -> . calculate MINUS calculate
    (9) calculate -> . MINUS calculate
    (10) calculate -> . calculate MUL calculate
    (11) calculate -> . calculate DIV calculate
    (12) calculate -> . INT
    (13) calculate -> . IDENTIFIER
    (14) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 11
    INT             shift and go to state 12
    IDENTIFIER      shift and go to state 9
    LSB             shift and go to state 13

    calculate                      shift and go to state 23

state 18

    (11) calculate -> calculate DIV . calculate
    (7) calculate -> . calculate PLUS calculate
    (8) calculate -> . calculate MINUS calculate
    (9) calculate -> . MINUS calculate
    (10) calculate -> . calculate MUL calculate
    (11) calculate -> . calculate DIV calculate
    (12) calculate -> . INT
    (13) calculate -> . IDENTIFIER
    (14) calculate -> . LSB calculate RSB

    MINUS           shift and go to state 11
    INT             shift and go to state 12
    IDENTIFIER      shift and go to state 9
    LSB             shift and go to state 13

    calculate                      shift and go to state 24

state 19

    (9) calculate -> MINUS calculate .
    (7) calculate -> calculate . PLUS calculate
    (8) calculate -> calculate . MINUS calculate
    (10) calculate -> calculate . MUL calculate
    (11) calculate -> calculate . DIV calculate

    NEWLINE         reduce using rule 9 (calculate -> MINUS calculate .)
    PLUS            reduce using rule 9 (calculate -> MINUS calculate .)
    MINUS           reduce using rule 9 (calculate -> MINUS calculate .)
    MUL             reduce using rule 9 (calculate -> MINUS calculate .)
    DIV             reduce using rule 9 (calculate -> MINUS calculate .)
    RSB             reduce using rule 9 (calculate -> MINUS calculate .)

  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]
  ! MUL             [ shift and go to state 17 ]
  ! DIV             [ shift and go to state 18 ]


state 20

    (14) calculate -> LSB calculate . RSB
    (7) calculate -> calculate . PLUS calculate
    (8) calculate -> calculate . MINUS calculate
    (10) calculate -> calculate . MUL calculate
    (11) calculate -> calculate . DIV calculate

    RSB             shift and go to state 25
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    MUL             shift and go to state 17
    DIV             shift and go to state 18


state 21

    (7) calculate -> calculate PLUS calculate .
    (7) calculate -> calculate . PLUS calculate
    (8) calculate -> calculate . MINUS calculate
    (10) calculate -> calculate . MUL calculate
    (11) calculate -> calculate . DIV calculate

    NEWLINE         reduce using rule 7 (calculate -> calculate PLUS calculate .)
    PLUS            reduce using rule 7 (calculate -> calculate PLUS calculate .)
    MINUS           reduce using rule 7 (calculate -> calculate PLUS calculate .)
    RSB             reduce using rule 7 (calculate -> calculate PLUS calculate .)
    MUL             shift and go to state 17
    DIV             shift and go to state 18

  ! MUL             [ reduce using rule 7 (calculate -> calculate PLUS calculate .) ]
  ! DIV             [ reduce using rule 7 (calculate -> calculate PLUS calculate .) ]
  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]


state 22

    (8) calculate -> calculate MINUS calculate .
    (7) calculate -> calculate . PLUS calculate
    (8) calculate -> calculate . MINUS calculate
    (10) calculate -> calculate . MUL calculate
    (11) calculate -> calculate . DIV calculate

    NEWLINE         reduce using rule 8 (calculate -> calculate MINUS calculate .)
    PLUS            reduce using rule 8 (calculate -> calculate MINUS calculate .)
    MINUS           reduce using rule 8 (calculate -> calculate MINUS calculate .)
    RSB             reduce using rule 8 (calculate -> calculate MINUS calculate .)
    MUL             shift and go to state 17
    DIV             shift and go to state 18

  ! MUL             [ reduce using rule 8 (calculate -> calculate MINUS calculate .) ]
  ! DIV             [ reduce using rule 8 (calculate -> calculate MINUS calculate .) ]
  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]


state 23

    (10) calculate -> calculate MUL calculate .
    (7) calculate -> calculate . PLUS calculate
    (8) calculate -> calculate . MINUS calculate
    (10) calculate -> calculate . MUL calculate
    (11) calculate -> calculate . DIV calculate

    NEWLINE         reduce using rule 10 (calculate -> calculate MUL calculate .)
    PLUS            reduce using rule 10 (calculate -> calculate MUL calculate .)
    MINUS           reduce using rule 10 (calculate -> calculate MUL calculate .)
    MUL             reduce using rule 10 (calculate -> calculate MUL calculate .)
    DIV             reduce using rule 10 (calculate -> calculate MUL calculate .)
    RSB             reduce using rule 10 (calculate -> calculate MUL calculate .)

  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]
  ! MUL             [ shift and go to state 17 ]
  ! DIV             [ shift and go to state 18 ]


state 24

    (11) calculate -> calculate DIV calculate .
    (7) calculate -> calculate . PLUS calculate
    (8) calculate -> calculate . MINUS calculate
    (10) calculate -> calculate . MUL calculate
    (11) calculate -> calculate . DIV calculate

    NEWLINE         reduce using rule 11 (calculate -> calculate DIV calculate .)
    PLUS            reduce using rule 11 (calculate -> calculate DIV calculate .)
    MINUS           reduce using rule 11 (calculate -> calculate DIV calculate .)
    MUL             reduce using rule 11 (calculate -> calculate DIV calculate .)
    DIV             reduce using rule 11 (calculate -> calculate DIV calculate .)
    RSB             reduce using rule 11 (calculate -> calculate DIV calculate .)

  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]
  ! MUL             [ shift and go to state 17 ]
  ! DIV             [ shift and go to state 18 ]


state 25

    (14) calculate -> LSB calculate RSB .

    NEWLINE         reduce using rule 14 (calculate -> LSB calculate RSB .)
    PLUS            reduce using rule 14 (calculate -> LSB calculate RSB .)
    MINUS           reduce using rule 14 (calculate -> LSB calculate RSB .)
    MUL             reduce using rule 14 (calculate -> LSB calculate RSB .)
    DIV             reduce using rule 14 (calculate -> LSB calculate RSB .)
    RSB             reduce using rule 14 (calculate -> LSB calculate RSB .)

